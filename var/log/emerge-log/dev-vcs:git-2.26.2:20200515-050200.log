[32;01m * [39;49;00mPackage:    dev-vcs/git-2.26.2
[32;01m * [39;49;00mRepository: gentoo
[32;01m * [39;49;00mMaintainer: robbat2@gentoo.org polynomial-c@gentoo.org
[32;01m * [39;49;00mUSE:        abi_x86_64 amd64 blksha1 curl elibc_glibc gpg iconv kernel_linux test threads userland_GNU webdav
[32;01m * [39;49;00mFEATURES:   network-sandbox preserve-libs sandbox splitdebug test userpriv usersandbox
>>> Unpacking source...
>>> Unpacking git-2.26.2.tar.xz to /tmp/portage/dev-vcs/git-2.26.2/work
>>> Unpacking git-manpages-2.26.2.tar.xz to /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2
>>> Source unpacked in /tmp/portage/dev-vcs/git-2.26.2/work
>>> Preparing source in /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2 ...
 [32;01m*[0m Applying git-2.22.0_rc0-optional-cvs.patch ...
[A[263C [34;01m[ [32;01mok[34;01m ][0m
 [32;01m*[0m Applying git-2.2.0-svn-fe-linking.patch ...
[A[263C [34;01m[ [32;01mok[34;01m ][0m
 [32;01m*[0m Applying git-2.21.0-quiet-submodules-testcase.patch ...
patching file t/t7407-submodule-foreach.sh
Hunk #1 succeeded at 428 with fuzz 1 (offset 17 lines).
[A[263C [34;01m[ [32;01mok[34;01m ][0m
>>> Source prepared.
>>> Configuring source in /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2 ...
>>> Source configured.
>>> Compiling source in /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2 ...
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 
GIT_VERSION = 2.26.2
    * new build flags
x86_64-pc-linux-gnu-gcc -o fuzz-commit-graph.o -c -MF ./.depend/fuzz-commit-graph.o.d -MQ fuzz-commit-graph.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fuzz-commit-graph.c
x86_64-pc-linux-gnu-gcc -o fuzz-pack-headers.o -c -MF ./.depend/fuzz-pack-headers.o.d -MQ fuzz-pack-headers.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fuzz-pack-headers.c
x86_64-pc-linux-gnu-gcc -o fuzz-pack-idx.o -c -MF ./.depend/fuzz-pack-idx.o.d -MQ fuzz-pack-idx.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fuzz-pack-idx.c
x86_64-pc-linux-gnu-gcc -o credential-store.o -c -MF ./.depend/credential-store.o.d -MQ credential-store.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  credential-store.c
x86_64-pc-linux-gnu-gcc -o common-main.o -c -MF ./.depend/common-main.o.d -MQ common-main.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  common-main.c
x86_64-pc-linux-gnu-gcc -o abspath.o -c -MF ./.depend/abspath.o.d -MQ abspath.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  abspath.c
x86_64-pc-linux-gnu-gcc -o add-interactive.o -c -MF ./.depend/add-interactive.o.d -MQ add-interactive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  add-interactive.c
x86_64-pc-linux-gnu-gcc -o add-patch.o -c -MF ./.depend/add-patch.o.d -MQ add-patch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  add-patch.c
x86_64-pc-linux-gnu-gcc -o advice.o -c -MF ./.depend/advice.o.d -MQ advice.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  advice.c
x86_64-pc-linux-gnu-gcc -o alias.o -c -MF ./.depend/alias.o.d -MQ alias.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  alias.c
x86_64-pc-linux-gnu-gcc -o alloc.o -c -MF ./.depend/alloc.o.d -MQ alloc.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  alloc.c
x86_64-pc-linux-gnu-gcc -o apply.o -c -MF ./.depend/apply.o.d -MQ apply.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  apply.c
x86_64-pc-linux-gnu-gcc -o archive.o -c -MF ./.depend/archive.o.d -MQ archive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  archive.c
x86_64-pc-linux-gnu-gcc -o archive-tar.o -c -MF ./.depend/archive-tar.o.d -MQ archive-tar.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  archive-tar.c
    * new link flags
x86_64-pc-linux-gnu-gcc -o archive-zip.o -c -MF ./.depend/archive-zip.o.d -MQ archive-zip.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  archive-zip.c
x86_64-pc-linux-gnu-gcc -o argv-array.o -c -MF ./.depend/argv-array.o.d -MQ argv-array.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  argv-array.c
    * new prefix flags
x86_64-pc-linux-gnu-gcc -o base85.o -c -MF ./.depend/base85.o.d -MQ base85.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  base85.c
x86_64-pc-linux-gnu-gcc -o bisect.o -c -MF ./.depend/bisect.o.d -MQ bisect.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  bisect.c
x86_64-pc-linux-gnu-gcc -o blame.o -c -MF ./.depend/blame.o.d -MQ blame.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  blame.c
x86_64-pc-linux-gnu-gcc -o blob.o -c -MF ./.depend/blob.o.d -MQ blob.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  blob.c
x86_64-pc-linux-gnu-gcc -o branch.o -c -MF ./.depend/branch.o.d -MQ branch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  branch.c
x86_64-pc-linux-gnu-gcc -o bulk-checkin.o -c -MF ./.depend/bulk-checkin.o.d -MQ bulk-checkin.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  bulk-checkin.c
x86_64-pc-linux-gnu-gcc -o bundle.o -c -MF ./.depend/bundle.o.d -MQ bundle.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  bundle.c
x86_64-pc-linux-gnu-gcc -o cache-tree.o -c -MF ./.depend/cache-tree.o.d -MQ cache-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  cache-tree.c
x86_64-pc-linux-gnu-gcc -o chdir-notify.o -c -MF ./.depend/chdir-notify.o.d -MQ chdir-notify.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  chdir-notify.c
x86_64-pc-linux-gnu-gcc -o checkout.o -c -MF ./.depend/checkout.o.d -MQ checkout.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  checkout.c
x86_64-pc-linux-gnu-gcc -o color.o -c -MF ./.depend/color.o.d -MQ color.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  color.c
x86_64-pc-linux-gnu-gcc -o column.o -c -MF ./.depend/column.o.d -MQ column.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  column.c
x86_64-pc-linux-gnu-gcc -o combine-diff.o -c -MF ./.depend/combine-diff.o.d -MQ combine-diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  combine-diff.c
x86_64-pc-linux-gnu-gcc -o commit.o -c -MF ./.depend/commit.o.d -MQ commit.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  commit.c
x86_64-pc-linux-gnu-gcc -o commit-graph.o -c -MF ./.depend/commit-graph.o.d -MQ commit-graph.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  commit-graph.c
x86_64-pc-linux-gnu-gcc -o commit-reach.o -c -MF ./.depend/commit-reach.o.d -MQ commit-reach.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  commit-reach.c
x86_64-pc-linux-gnu-gcc -o compat/obstack.o -c -MF compat/.depend/obstack.o.d -MQ compat/obstack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  compat/obstack.c
x86_64-pc-linux-gnu-gcc -o compat/terminal.o -c -MF compat/.depend/terminal.o.d -MQ compat/terminal.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  compat/terminal.c
x86_64-pc-linux-gnu-gcc -o config.o -c -MF ./.depend/config.o.d -MQ config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -DETC_GITCONFIG='"/etc/gitconfig"' config.c
x86_64-pc-linux-gnu-gcc -o connect.o -c -MF ./.depend/connect.o.d -MQ connect.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  connect.c
x86_64-pc-linux-gnu-gcc -o connected.o -c -MF ./.depend/connected.o.d -MQ connected.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  connected.c
x86_64-pc-linux-gnu-gcc -o convert.o -c -MF ./.depend/convert.o.d -MQ convert.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  convert.c
x86_64-pc-linux-gnu-gcc -o copy.o -c -MF ./.depend/copy.o.d -MQ copy.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  copy.c
x86_64-pc-linux-gnu-gcc -o credential.o -c -MF ./.depend/credential.o.d -MQ credential.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  credential.c
x86_64-pc-linux-gnu-gcc -o csum-file.o -c -MF ./.depend/csum-file.o.d -MQ csum-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  csum-file.c
x86_64-pc-linux-gnu-gcc -o ctype.o -c -MF ./.depend/ctype.o.d -MQ ctype.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ctype.c
x86_64-pc-linux-gnu-gcc -o date.o -c -MF ./.depend/date.o.d -MQ date.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  date.c
x86_64-pc-linux-gnu-gcc -o decorate.o -c -MF ./.depend/decorate.o.d -MQ decorate.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  decorate.c
x86_64-pc-linux-gnu-gcc -o delta-islands.o -c -MF ./.depend/delta-islands.o.d -MQ delta-islands.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  delta-islands.c
x86_64-pc-linux-gnu-gcc -o diffcore-break.o -c -MF ./.depend/diffcore-break.o.d -MQ diffcore-break.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diffcore-break.c
x86_64-pc-linux-gnu-gcc -o diffcore-delta.o -c -MF ./.depend/diffcore-delta.o.d -MQ diffcore-delta.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diffcore-delta.c
x86_64-pc-linux-gnu-gcc -o diffcore-order.o -c -MF ./.depend/diffcore-order.o.d -MQ diffcore-order.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diffcore-order.c
x86_64-pc-linux-gnu-gcc -o diffcore-pickaxe.o -c -MF ./.depend/diffcore-pickaxe.o.d -MQ diffcore-pickaxe.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diffcore-pickaxe.c
x86_64-pc-linux-gnu-gcc -o diffcore-rename.o -c -MF ./.depend/diffcore-rename.o.d -MQ diffcore-rename.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diffcore-rename.c
x86_64-pc-linux-gnu-gcc -o diff-delta.o -c -MF ./.depend/diff-delta.o.d -MQ diff-delta.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diff-delta.c
x86_64-pc-linux-gnu-gcc -o diff-lib.o -c -MF ./.depend/diff-lib.o.d -MQ diff-lib.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diff-lib.c
x86_64-pc-linux-gnu-gcc -o diff-no-index.o -c -MF ./.depend/diff-no-index.o.d -MQ diff-no-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diff-no-index.c
x86_64-pc-linux-gnu-gcc -o diff.o -c -MF ./.depend/diff.o.d -MQ diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  diff.c
x86_64-pc-linux-gnu-gcc -o dir.o -c -MF ./.depend/dir.o.d -MQ dir.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  dir.c
x86_64-pc-linux-gnu-gcc -o dir-iterator.o -c -MF ./.depend/dir-iterator.o.d -MQ dir-iterator.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  dir-iterator.c
x86_64-pc-linux-gnu-gcc -o editor.o -c -MF ./.depend/editor.o.d -MQ editor.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  editor.c
x86_64-pc-linux-gnu-gcc -o entry.o -c -MF ./.depend/entry.o.d -MQ entry.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  entry.c
x86_64-pc-linux-gnu-gcc -o environment.o -c -MF ./.depend/environment.o.d -MQ environment.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  environment.c
x86_64-pc-linux-gnu-gcc -o ewah/bitmap.o -c -MF ewah/.depend/bitmap.o.d -MQ ewah/bitmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ewah/bitmap.c
x86_64-pc-linux-gnu-gcc -o ewah/ewah_bitmap.o -c -MF ewah/.depend/ewah_bitmap.o.d -MQ ewah/ewah_bitmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ewah/ewah_bitmap.c
x86_64-pc-linux-gnu-gcc -o ewah/ewah_io.o -c -MF ewah/.depend/ewah_io.o.d -MQ ewah/ewah_io.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ewah/ewah_io.c
x86_64-pc-linux-gnu-gcc -o ewah/ewah_rlw.o -c -MF ewah/.depend/ewah_rlw.o.d -MQ ewah/ewah_rlw.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ewah/ewah_rlw.c
x86_64-pc-linux-gnu-gcc -o exec-cmd.o -c -MF ./.depend/exec-cmd.o.d -MQ exec-cmd.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' '-DGIT_EXEC_PATH="libexec/git-core"' '-DGIT_LOCALE_PATH="share/locale"' '-DBINDIR="bin"' '-DFALLBACK_RUNTIME_PREFIX="/usr"' exec-cmd.c
x86_64-pc-linux-gnu-gcc -o fetch-negotiator.o -c -MF ./.depend/fetch-negotiator.o.d -MQ fetch-negotiator.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fetch-negotiator.c
x86_64-pc-linux-gnu-gcc -o fetch-pack.o -c -MF ./.depend/fetch-pack.o.d -MQ fetch-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fetch-pack.c
x86_64-pc-linux-gnu-gcc -o fsck.o -c -MF ./.depend/fsck.o.d -MQ fsck.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fsck.c
x86_64-pc-linux-gnu-gcc -o fsmonitor.o -c -MF ./.depend/fsmonitor.o.d -MQ fsmonitor.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fsmonitor.c
x86_64-pc-linux-gnu-gcc -o gettext.o -c -MF ./.depend/gettext.o.d -MQ gettext.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -DGIT_LOCALE_PATH='"share/locale"' gettext.c
x86_64-pc-linux-gnu-gcc -o gpg-interface.o -c -MF ./.depend/gpg-interface.o.d -MQ gpg-interface.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  gpg-interface.c
x86_64-pc-linux-gnu-gcc -o graph.o -c -MF ./.depend/graph.o.d -MQ graph.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  graph.c
x86_64-pc-linux-gnu-gcc -o grep.o -c -MF ./.depend/grep.o.d -MQ grep.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  grep.c
x86_64-pc-linux-gnu-gcc -o hashmap.o -c -MF ./.depend/hashmap.o.d -MQ hashmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  hashmap.c
x86_64-pc-linux-gnu-gcc -o linear-assignment.o -c -MF ./.depend/linear-assignment.o.d -MQ linear-assignment.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  linear-assignment.c
/bin/sh ./generate-cmdlist.sh \
	 \
	command-list.txt >command-list.h+ && mv command-list.h+ command-list.h
x86_64-pc-linux-gnu-gcc -o hex.o -c -MF ./.depend/hex.o.d -MQ hex.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  hex.c
x86_64-pc-linux-gnu-gcc -o ident.o -c -MF ./.depend/ident.o.d -MQ ident.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ident.c
x86_64-pc-linux-gnu-gcc -o interdiff.o -c -MF ./.depend/interdiff.o.d -MQ interdiff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  interdiff.c
x86_64-pc-linux-gnu-gcc -o json-writer.o -c -MF ./.depend/json-writer.o.d -MQ json-writer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  json-writer.c
x86_64-pc-linux-gnu-gcc -o kwset.o -c -MF ./.depend/kwset.o.d -MQ kwset.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  kwset.c
x86_64-pc-linux-gnu-gcc -o levenshtein.o -c -MF ./.depend/levenshtein.o.d -MQ levenshtein.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  levenshtein.c
x86_64-pc-linux-gnu-gcc -o line-log.o -c -MF ./.depend/line-log.o.d -MQ line-log.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  line-log.c
x86_64-pc-linux-gnu-gcc -o line-range.o -c -MF ./.depend/line-range.o.d -MQ line-range.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  line-range.c
x86_64-pc-linux-gnu-gcc -o list-objects.o -c -MF ./.depend/list-objects.o.d -MQ list-objects.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  list-objects.c
x86_64-pc-linux-gnu-gcc -o list-objects-filter.o -c -MF ./.depend/list-objects-filter.o.d -MQ list-objects-filter.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  list-objects-filter.c
x86_64-pc-linux-gnu-gcc -o list-objects-filter-options.o -c -MF ./.depend/list-objects-filter-options.o.d -MQ list-objects-filter-options.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  list-objects-filter-options.c
x86_64-pc-linux-gnu-gcc -o ll-merge.o -c -MF ./.depend/ll-merge.o.d -MQ ll-merge.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ll-merge.c
x86_64-pc-linux-gnu-gcc -o lockfile.o -c -MF ./.depend/lockfile.o.d -MQ lockfile.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  lockfile.c
x86_64-pc-linux-gnu-gcc -o log-tree.o -c -MF ./.depend/log-tree.o.d -MQ log-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  log-tree.c
x86_64-pc-linux-gnu-gcc -o ls-refs.o -c -MF ./.depend/ls-refs.o.d -MQ ls-refs.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ls-refs.c
x86_64-pc-linux-gnu-gcc -o mailinfo.o -c -MF ./.depend/mailinfo.o.d -MQ mailinfo.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  mailinfo.c
x86_64-pc-linux-gnu-gcc -o mailmap.o -c -MF ./.depend/mailmap.o.d -MQ mailmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  mailmap.c
In function '[01m[Kll_binary_merge[m[K',
    inlined from '[01m[Kll_xdl_merge[m[K' at [01m[Kll-merge.c:115:10[m[K,
    inlined from '[01m[Kll_union_merge[m[K' at [01m[Kll-merge.c:151:9[m[K:
[01m[Kll-merge.c:74:4:[m[K [01;35m[Kwarning: [m[K'[01m[K%s[m[K' directive argument is null [[01;35m[K-Wformat-overflow=[m[K]
   74 |    [01;35m[Kwarning("Cannot merge binary files: %s (%s vs. %s)",[m[K
      |    [01;35m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
   75 | [01;35m[K    path, name1, name2)[m[K;
      |     [01;35m[K~~~~~~~~~~~~~~~~~~~[m[K
x86_64-pc-linux-gnu-gcc -o match-trees.o -c -MF ./.depend/match-trees.o.d -MQ match-trees.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  match-trees.c
x86_64-pc-linux-gnu-gcc -o mem-pool.o -c -MF ./.depend/mem-pool.o.d -MQ mem-pool.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  mem-pool.c
x86_64-pc-linux-gnu-gcc -o merge.o -c -MF ./.depend/merge.o.d -MQ merge.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  merge.c
x86_64-pc-linux-gnu-gcc -o merge-blobs.o -c -MF ./.depend/merge-blobs.o.d -MQ merge-blobs.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  merge-blobs.c
x86_64-pc-linux-gnu-gcc -o merge-recursive.o -c -MF ./.depend/merge-recursive.o.d -MQ merge-recursive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  merge-recursive.c
x86_64-pc-linux-gnu-gcc -o mergesort.o -c -MF ./.depend/mergesort.o.d -MQ mergesort.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  mergesort.c
x86_64-pc-linux-gnu-gcc -o midx.o -c -MF ./.depend/midx.o.d -MQ midx.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  midx.c
x86_64-pc-linux-gnu-gcc -o name-hash.o -c -MF ./.depend/name-hash.o.d -MQ name-hash.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  name-hash.c
x86_64-pc-linux-gnu-gcc -o negotiator/default.o -c -MF negotiator/.depend/default.o.d -MQ negotiator/default.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  negotiator/default.c
x86_64-pc-linux-gnu-gcc -o negotiator/skipping.o -c -MF negotiator/.depend/skipping.o.d -MQ negotiator/skipping.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  negotiator/skipping.c
x86_64-pc-linux-gnu-gcc -o notes.o -c -MF ./.depend/notes.o.d -MQ notes.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  notes.c
x86_64-pc-linux-gnu-gcc -o notes-cache.o -c -MF ./.depend/notes-cache.o.d -MQ notes-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  notes-cache.c
x86_64-pc-linux-gnu-gcc -o notes-merge.o -c -MF ./.depend/notes-merge.o.d -MQ notes-merge.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  notes-merge.c
x86_64-pc-linux-gnu-gcc -o notes-utils.o -c -MF ./.depend/notes-utils.o.d -MQ notes-utils.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  notes-utils.c
x86_64-pc-linux-gnu-gcc -o object.o -c -MF ./.depend/object.o.d -MQ object.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  object.c
x86_64-pc-linux-gnu-gcc -o oidmap.o -c -MF ./.depend/oidmap.o.d -MQ oidmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  oidmap.c
x86_64-pc-linux-gnu-gcc -o oidset.o -c -MF ./.depend/oidset.o.d -MQ oidset.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  oidset.c
x86_64-pc-linux-gnu-gcc -o packfile.o -c -MF ./.depend/packfile.o.d -MQ packfile.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  packfile.c
x86_64-pc-linux-gnu-gcc -o pack-bitmap.o -c -MF ./.depend/pack-bitmap.o.d -MQ pack-bitmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-bitmap.c
x86_64-pc-linux-gnu-gcc -o pack-bitmap-write.o -c -MF ./.depend/pack-bitmap-write.o.d -MQ pack-bitmap-write.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-bitmap-write.c
x86_64-pc-linux-gnu-gcc -o pack-check.o -c -MF ./.depend/pack-check.o.d -MQ pack-check.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-check.c
x86_64-pc-linux-gnu-gcc -o pack-objects.o -c -MF ./.depend/pack-objects.o.d -MQ pack-objects.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-objects.c
x86_64-pc-linux-gnu-gcc -o pack-revindex.o -c -MF ./.depend/pack-revindex.o.d -MQ pack-revindex.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-revindex.c
x86_64-pc-linux-gnu-gcc -o pack-write.o -c -MF ./.depend/pack-write.o.d -MQ pack-write.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pack-write.c
x86_64-pc-linux-gnu-gcc -o pager.o -c -MF ./.depend/pager.o.d -MQ pager.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pager.c
x86_64-pc-linux-gnu-gcc -o parse-options.o -c -MF ./.depend/parse-options.o.d -MQ parse-options.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  parse-options.c
x86_64-pc-linux-gnu-gcc -o parse-options-cb.o -c -MF ./.depend/parse-options-cb.o.d -MQ parse-options-cb.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  parse-options-cb.c
x86_64-pc-linux-gnu-gcc -o patch-delta.o -c -MF ./.depend/patch-delta.o.d -MQ patch-delta.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  patch-delta.c
x86_64-pc-linux-gnu-gcc -o patch-ids.o -c -MF ./.depend/patch-ids.o.d -MQ patch-ids.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  patch-ids.c
x86_64-pc-linux-gnu-gcc -o path.o -c -MF ./.depend/path.o.d -MQ path.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  path.c
x86_64-pc-linux-gnu-gcc -o pathspec.o -c -MF ./.depend/pathspec.o.d -MQ pathspec.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pathspec.c
x86_64-pc-linux-gnu-gcc -o pkt-line.o -c -MF ./.depend/pkt-line.o.d -MQ pkt-line.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pkt-line.c
x86_64-pc-linux-gnu-gcc -o preload-index.o -c -MF ./.depend/preload-index.o.d -MQ preload-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  preload-index.c
x86_64-pc-linux-gnu-gcc -o pretty.o -c -MF ./.depend/pretty.o.d -MQ pretty.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  pretty.c
x86_64-pc-linux-gnu-gcc -o prio-queue.o -c -MF ./.depend/prio-queue.o.d -MQ prio-queue.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  prio-queue.c
x86_64-pc-linux-gnu-gcc -o progress.o -c -MF ./.depend/progress.o.d -MQ progress.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  progress.c
x86_64-pc-linux-gnu-gcc -o promisor-remote.o -c -MF ./.depend/promisor-remote.o.d -MQ promisor-remote.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  promisor-remote.c
x86_64-pc-linux-gnu-gcc -o prompt.o -c -MF ./.depend/prompt.o.d -MQ prompt.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  prompt.c
x86_64-pc-linux-gnu-gcc -o protocol.o -c -MF ./.depend/protocol.o.d -MQ protocol.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  protocol.c
x86_64-pc-linux-gnu-gcc -o quote.o -c -MF ./.depend/quote.o.d -MQ quote.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  quote.c
x86_64-pc-linux-gnu-gcc -o range-diff.o -c -MF ./.depend/range-diff.o.d -MQ range-diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  range-diff.c
x86_64-pc-linux-gnu-gcc -o reachable.o -c -MF ./.depend/reachable.o.d -MQ reachable.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  reachable.c
x86_64-pc-linux-gnu-gcc -o read-cache.o -c -MF ./.depend/read-cache.o.d -MQ read-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  read-cache.c
x86_64-pc-linux-gnu-gcc -o rebase.o -c -MF ./.depend/rebase.o.d -MQ rebase.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  rebase.c
x86_64-pc-linux-gnu-gcc -o rebase-interactive.o -c -MF ./.depend/rebase-interactive.o.d -MQ rebase-interactive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  rebase-interactive.c
x86_64-pc-linux-gnu-gcc -o reflog-walk.o -c -MF ./.depend/reflog-walk.o.d -MQ reflog-walk.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  reflog-walk.c
x86_64-pc-linux-gnu-gcc -o refs.o -c -MF ./.depend/refs.o.d -MQ refs.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refs.c
x86_64-pc-linux-gnu-gcc -o refs/files-backend.o -c -MF refs/.depend/files-backend.o.d -MQ refs/files-backend.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refs/files-backend.c
x86_64-pc-linux-gnu-gcc -o refs/iterator.o -c -MF refs/.depend/iterator.o.d -MQ refs/iterator.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refs/iterator.c
x86_64-pc-linux-gnu-gcc -o refs/packed-backend.o -c -MF refs/.depend/packed-backend.o.d -MQ refs/packed-backend.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refs/packed-backend.c
x86_64-pc-linux-gnu-gcc -o refs/ref-cache.o -c -MF refs/.depend/ref-cache.o.d -MQ refs/ref-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refs/ref-cache.c
x86_64-pc-linux-gnu-gcc -o refspec.o -c -MF ./.depend/refspec.o.d -MQ refspec.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  refspec.c
x86_64-pc-linux-gnu-gcc -o ref-filter.o -c -MF ./.depend/ref-filter.o.d -MQ ref-filter.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ref-filter.c
x86_64-pc-linux-gnu-gcc -o remote.o -c -MF ./.depend/remote.o.d -MQ remote.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  remote.c
x86_64-pc-linux-gnu-gcc -o replace-object.o -c -MF ./.depend/replace-object.o.d -MQ replace-object.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  replace-object.c
x86_64-pc-linux-gnu-gcc -o repo-settings.o -c -MF ./.depend/repo-settings.o.d -MQ repo-settings.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  repo-settings.c
x86_64-pc-linux-gnu-gcc -o repository.o -c -MF ./.depend/repository.o.d -MQ repository.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  repository.c
x86_64-pc-linux-gnu-gcc -o rerere.o -c -MF ./.depend/rerere.o.d -MQ rerere.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  rerere.c
x86_64-pc-linux-gnu-gcc -o resolve-undo.o -c -MF ./.depend/resolve-undo.o.d -MQ resolve-undo.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  resolve-undo.c
x86_64-pc-linux-gnu-gcc -o revision.o -c -MF ./.depend/revision.o.d -MQ revision.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  revision.c
x86_64-pc-linux-gnu-gcc -o run-command.o -c -MF ./.depend/run-command.o.d -MQ run-command.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  run-command.c
x86_64-pc-linux-gnu-gcc -o send-pack.o -c -MF ./.depend/send-pack.o.d -MQ send-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  send-pack.c
x86_64-pc-linux-gnu-gcc -o sequencer.o -c -MF ./.depend/sequencer.o.d -MQ sequencer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sequencer.c
x86_64-pc-linux-gnu-gcc -o serve.o -c -MF ./.depend/serve.o.d -MQ serve.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  serve.c
x86_64-pc-linux-gnu-gcc -o server-info.o -c -MF ./.depend/server-info.o.d -MQ server-info.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  server-info.c
x86_64-pc-linux-gnu-gcc -o setup.o -c -MF ./.depend/setup.o.d -MQ setup.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  setup.c
x86_64-pc-linux-gnu-gcc -o sha1-array.o -c -MF ./.depend/sha1-array.o.d -MQ sha1-array.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sha1-array.c
x86_64-pc-linux-gnu-gcc -o sha1-lookup.o -c -MF ./.depend/sha1-lookup.o.d -MQ sha1-lookup.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sha1-lookup.c
x86_64-pc-linux-gnu-gcc -o sha1-file.o -c -MF ./.depend/sha1-file.o.d -MQ sha1-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sha1-file.c
x86_64-pc-linux-gnu-gcc -o sha1-name.o -c -MF ./.depend/sha1-name.o.d -MQ sha1-name.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sha1-name.c
x86_64-pc-linux-gnu-gcc -o shallow.o -c -MF ./.depend/shallow.o.d -MQ shallow.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  shallow.c
[01m[Krevision.c:[m[K In function '[01m[Kdo_add_index_objects_to_pending[m[K':
[01m[Krevision.c:322:22:[m[K [01;35m[Kwarning: [m[Karray subscript [1, 2147483647] is outside array bounds of '[01m[Kchar[1][m[K' [[01;35m[K-Warray-bounds[m[K]
  322 |   if (0 < len && [01;35m[Kname[len][m[K && buf.len)
      |                  [01;35m[K~~~~^~~~~[m[K
x86_64-pc-linux-gnu-gcc -o sideband.o -c -MF ./.depend/sideband.o.d -MQ sideband.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sideband.c
x86_64-pc-linux-gnu-gcc -o sigchain.o -c -MF ./.depend/sigchain.o.d -MQ sigchain.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sigchain.c
x86_64-pc-linux-gnu-gcc -o split-index.o -c -MF ./.depend/split-index.o.d -MQ split-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  split-index.c
x86_64-pc-linux-gnu-gcc -o stable-qsort.o -c -MF ./.depend/stable-qsort.o.d -MQ stable-qsort.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  stable-qsort.c
x86_64-pc-linux-gnu-gcc -o strbuf.o -c -MF ./.depend/strbuf.o.d -MQ strbuf.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  strbuf.c
x86_64-pc-linux-gnu-gcc -o streaming.o -c -MF ./.depend/streaming.o.d -MQ streaming.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  streaming.c
x86_64-pc-linux-gnu-gcc -o string-list.o -c -MF ./.depend/string-list.o.d -MQ string-list.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  string-list.c
x86_64-pc-linux-gnu-gcc -o submodule.o -c -MF ./.depend/submodule.o.d -MQ submodule.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  submodule.c
x86_64-pc-linux-gnu-gcc -o submodule-config.o -c -MF ./.depend/submodule-config.o.d -MQ submodule-config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  submodule-config.c
x86_64-pc-linux-gnu-gcc -o sub-process.o -c -MF ./.depend/sub-process.o.d -MQ sub-process.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sub-process.c
x86_64-pc-linux-gnu-gcc -o symlinks.o -c -MF ./.depend/symlinks.o.d -MQ symlinks.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  symlinks.c
x86_64-pc-linux-gnu-gcc -o tag.o -c -MF ./.depend/tag.o.d -MQ tag.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tag.c
x86_64-pc-linux-gnu-gcc -o tempfile.o -c -MF ./.depend/tempfile.o.d -MQ tempfile.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tempfile.c
x86_64-pc-linux-gnu-gcc -o thread-utils.o -c -MF ./.depend/thread-utils.o.d -MQ thread-utils.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  thread-utils.c
x86_64-pc-linux-gnu-gcc -o tmp-objdir.o -c -MF ./.depend/tmp-objdir.o.d -MQ tmp-objdir.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tmp-objdir.c
x86_64-pc-linux-gnu-gcc -o trace.o -c -MF ./.depend/trace.o.d -MQ trace.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace.c
x86_64-pc-linux-gnu-gcc -o trace2.o -c -MF ./.depend/trace2.o.d -MQ trace2.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_cfg.o -c -MF trace2/.depend/tr2_cfg.o.d -MQ trace2/tr2_cfg.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_cfg.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_cmd_name.o -c -MF trace2/.depend/tr2_cmd_name.o.d -MQ trace2/tr2_cmd_name.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_cmd_name.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_dst.o -c -MF trace2/.depend/tr2_dst.o.d -MQ trace2/tr2_dst.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_dst.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_sid.o -c -MF trace2/.depend/tr2_sid.o.d -MQ trace2/tr2_sid.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_sid.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_sysenv.o -c -MF trace2/.depend/tr2_sysenv.o.d -MQ trace2/tr2_sysenv.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_sysenv.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_tbuf.o -c -MF trace2/.depend/tr2_tbuf.o.d -MQ trace2/tr2_tbuf.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_tbuf.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_tgt_event.o -c -MF trace2/.depend/tr2_tgt_event.o.d -MQ trace2/tr2_tgt_event.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_tgt_event.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_tgt_normal.o -c -MF trace2/.depend/tr2_tgt_normal.o.d -MQ trace2/tr2_tgt_normal.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_tgt_normal.c
x86_64-pc-linux-gnu-gcc -o trace2/tr2_tgt_perf.o -c -MF trace2/.depend/tr2_tgt_perf.o.d -MQ trace2/tr2_tgt_perf.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_tgt_perf.c
[01m[Ktrace2/tr2_dst.c:[m[K In function '[01m[Ktr2_dst_get_trace_fd.part.0[m[K':
[01m[Ktrace2/tr2_dst.c:296:10:[m[K [01;35m[Kwarning: [m[K'[01m[Kfd[m[K' may be used uninitialized in this function [[01;35m[K-Wmaybe-uninitialized[m[K]
  296 |  [01;35m[Kdst->fd = fd[m[K;
      |  [01;35m[K~~~~~~~~^~~~[m[K
[01m[Ktrace2/tr2_dst.c:229:6:[m[K [01;36m[Knote: [m[K'[01m[Kfd[m[K' was declared here
  229 |  int [01;36m[Kfd[m[K;
      |      [01;36m[K^~[m[K
x86_64-pc-linux-gnu-gcc -o trace2/tr2_tls.o -c -MF trace2/.depend/tr2_tls.o.d -MQ trace2/tr2_tls.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trace2/tr2_tls.c
x86_64-pc-linux-gnu-gcc -o trailer.o -c -MF ./.depend/trailer.o.d -MQ trailer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  trailer.c
x86_64-pc-linux-gnu-gcc -o transport.o -c -MF ./.depend/transport.o.d -MQ transport.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  transport.c
x86_64-pc-linux-gnu-gcc -o transport-helper.o -c -MF ./.depend/transport-helper.o.d -MQ transport-helper.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  transport-helper.c
x86_64-pc-linux-gnu-gcc -o tree-diff.o -c -MF ./.depend/tree-diff.o.d -MQ tree-diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tree-diff.c
x86_64-pc-linux-gnu-gcc -o tree.o -c -MF ./.depend/tree.o.d -MQ tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tree.c
x86_64-pc-linux-gnu-gcc -o tree-walk.o -c -MF ./.depend/tree-walk.o.d -MQ tree-walk.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  tree-walk.c
x86_64-pc-linux-gnu-gcc -o unpack-trees.o -c -MF ./.depend/unpack-trees.o.d -MQ unpack-trees.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  unpack-trees.c
x86_64-pc-linux-gnu-gcc -o upload-pack.o -c -MF ./.depend/upload-pack.o.d -MQ upload-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  upload-pack.c
x86_64-pc-linux-gnu-gcc -o url.o -c -MF ./.depend/url.o.d -MQ url.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  url.c
x86_64-pc-linux-gnu-gcc -o urlmatch.o -c -MF ./.depend/urlmatch.o.d -MQ urlmatch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  urlmatch.c
x86_64-pc-linux-gnu-gcc -o usage.o -c -MF ./.depend/usage.o.d -MQ usage.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  usage.c
x86_64-pc-linux-gnu-gcc -o userdiff.o -c -MF ./.depend/userdiff.o.d -MQ userdiff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  userdiff.c
x86_64-pc-linux-gnu-gcc -o utf8.o -c -MF ./.depend/utf8.o.d -MQ utf8.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  utf8.c
x86_64-pc-linux-gnu-gcc -o varint.o -c -MF ./.depend/varint.o.d -MQ varint.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  varint.c
x86_64-pc-linux-gnu-gcc -o versioncmp.o -c -MF ./.depend/versioncmp.o.d -MQ versioncmp.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  versioncmp.c
x86_64-pc-linux-gnu-gcc -o walker.o -c -MF ./.depend/walker.o.d -MQ walker.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  walker.c
x86_64-pc-linux-gnu-gcc -o wildmatch.o -c -MF ./.depend/wildmatch.o.d -MQ wildmatch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  wildmatch.c
x86_64-pc-linux-gnu-gcc -o worktree.o -c -MF ./.depend/worktree.o.d -MQ worktree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  worktree.c
x86_64-pc-linux-gnu-gcc -o wrapper.o -c -MF ./.depend/wrapper.o.d -MQ wrapper.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  wrapper.c
x86_64-pc-linux-gnu-gcc -o write-or-die.o -c -MF ./.depend/write-or-die.o.d -MQ write-or-die.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  write-or-die.c
x86_64-pc-linux-gnu-gcc -o ws.o -c -MF ./.depend/ws.o.d -MQ ws.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  ws.c
x86_64-pc-linux-gnu-gcc -o wt-status.o -c -MF ./.depend/wt-status.o.d -MQ wt-status.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  wt-status.c
x86_64-pc-linux-gnu-gcc -o xdiff-interface.o -c -MF ./.depend/xdiff-interface.o.d -MQ xdiff-interface.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff-interface.c
x86_64-pc-linux-gnu-gcc -o zlib.o -c -MF ./.depend/zlib.o.d -MQ zlib.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  zlib.c
x86_64-pc-linux-gnu-gcc -o unix-socket.o -c -MF ./.depend/unix-socket.o.d -MQ unix-socket.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  unix-socket.c
x86_64-pc-linux-gnu-gcc -o block-sha1/sha1.o -c -MF block-sha1/.depend/sha1.o.d -MQ block-sha1/sha1.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  block-sha1/sha1.c
x86_64-pc-linux-gnu-gcc -o sha256/block/sha256.o -c -MF sha256/block/.depend/sha256.o.d -MQ sha256/block/sha256.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sha256/block/sha256.c
x86_64-pc-linux-gnu-gcc -o compat/fopen.o -c -MF compat/.depend/fopen.o.d -MQ compat/fopen.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  compat/fopen.c
x86_64-pc-linux-gnu-gcc -o compat/strlcpy.o -c -MF compat/.depend/strlcpy.o.d -MQ compat/strlcpy.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  compat/strlcpy.c
x86_64-pc-linux-gnu-gcc -o compat/qsort_s.o -c -MF compat/.depend/qsort_s.o.d -MQ compat/qsort_s.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  compat/qsort_s.c
x86_64-pc-linux-gnu-gcc -o xdiff/xdiffi.o -c -MF xdiff/.depend/xdiffi.o.d -MQ xdiff/xdiffi.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xdiffi.c
x86_64-pc-linux-gnu-gcc -o xdiff/xprepare.o -c -MF xdiff/.depend/xprepare.o.d -MQ xdiff/xprepare.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xprepare.c
x86_64-pc-linux-gnu-gcc -o xdiff/xutils.o -c -MF xdiff/.depend/xutils.o.d -MQ xdiff/xutils.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xutils.c
x86_64-pc-linux-gnu-gcc -o xdiff/xemit.o -c -MF xdiff/.depend/xemit.o.d -MQ xdiff/xemit.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xemit.c
x86_64-pc-linux-gnu-gcc -o xdiff/xmerge.o -c -MF xdiff/.depend/xmerge.o.d -MQ xdiff/xmerge.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xmerge.c
x86_64-pc-linux-gnu-gcc -o xdiff/xpatience.o -c -MF xdiff/.depend/xpatience.o.d -MQ xdiff/xpatience.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xpatience.c
x86_64-pc-linux-gnu-gcc -o xdiff/xhistogram.o -c -MF xdiff/.depend/xhistogram.o.d -MQ xdiff/xhistogram.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  xdiff/xhistogram.c
x86_64-pc-linux-gnu-gcc -o daemon.o -c -MF ./.depend/daemon.o.d -MQ daemon.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  daemon.c
x86_64-pc-linux-gnu-gcc -o fast-import.o -c -MF ./.depend/fast-import.o.d -MQ fast-import.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  fast-import.c
x86_64-pc-linux-gnu-gcc -o http-backend.o -c -MF ./.depend/http-backend.o.d -MQ http-backend.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  http-backend.c
x86_64-pc-linux-gnu-gcc -o imap-send.o -c -MF ./.depend/imap-send.o.d -MQ imap-send.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  imap-send.c
x86_64-pc-linux-gnu-gcc -o http.o -c -MF ./.depend/http.o.d -MQ http.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  http.c
x86_64-pc-linux-gnu-gcc -o sh-i18n--envsubst.o -c -MF ./.depend/sh-i18n--envsubst.o.d -MQ sh-i18n--envsubst.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  sh-i18n--envsubst.c
x86_64-pc-linux-gnu-gcc -o shell.o -c -MF ./.depend/shell.o.d -MQ shell.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  shell.c
x86_64-pc-linux-gnu-gcc -o remote-testsvn.o -c -MF ./.depend/remote-testsvn.o.d -MQ remote-testsvn.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  remote-testsvn.c
x86_64-pc-linux-gnu-gcc -o vcs-svn/line_buffer.o -c -MF vcs-svn/.depend/line_buffer.o.d -MQ vcs-svn/line_buffer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  vcs-svn/line_buffer.c
x86_64-pc-linux-gnu-gcc -o vcs-svn/sliding_window.o -c -MF vcs-svn/.depend/sliding_window.o.d -MQ vcs-svn/sliding_window.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  vcs-svn/sliding_window.c
x86_64-pc-linux-gnu-gcc -o vcs-svn/fast_export.o -c -MF vcs-svn/.depend/fast_export.o.d -MQ vcs-svn/fast_export.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  vcs-svn/fast_export.c
x86_64-pc-linux-gnu-gcc -o vcs-svn/svndiff.o -c -MF vcs-svn/.depend/svndiff.o.d -MQ vcs-svn/svndiff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  vcs-svn/svndiff.c
x86_64-pc-linux-gnu-gcc -o vcs-svn/svndump.o -c -MF vcs-svn/.depend/svndump.o.d -MQ vcs-svn/svndump.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  vcs-svn/svndump.c
x86_64-pc-linux-gnu-gcc -o http-walker.o -c -MF ./.depend/http-walker.o.d -MQ http-walker.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  http-walker.c
x86_64-pc-linux-gnu-gcc -o http-fetch.o -c -MF ./.depend/http-fetch.o.d -MQ http-fetch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  http-fetch.c
x86_64-pc-linux-gnu-gcc -o http-push.o -c -MF ./.depend/http-push.o.d -MQ http-push.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  http-push.c
x86_64-pc-linux-gnu-gcc -o credential-cache.o -c -MF ./.depend/credential-cache.o.d -MQ credential-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  credential-cache.c
x86_64-pc-linux-gnu-gcc -o credential-cache--daemon.o -c -MF ./.depend/credential-cache--daemon.o.d -MQ credential-cache--daemon.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  credential-cache--daemon.c
x86_64-pc-linux-gnu-gcc -o remote-curl.o -c -MF ./.depend/remote-curl.o.d -MQ remote-curl.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  remote-curl.c
    * new script parameters
rm -f git-instaweb git-instaweb+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-instaweb+ && \
chmod +x git-instaweb+ && \
mv git-instaweb+ git-instaweb
rm -f git-mergetool--lib git-mergetool--lib+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-mergetool--lib.sh >git-mergetool--lib+ && \
mv git-mergetool--lib+ git-mergetool--lib
rm -f git-parse-remote git-parse-remote+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-parse-remote.sh >git-parse-remote+ && \
mv git-parse-remote+ git-parse-remote
rm -f git-rebase--preserve-merges git-rebase--preserve-merges+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-rebase--preserve-merges.sh >git-rebase--preserve-merges+ && \
mv git-rebase--preserve-merges+ git-rebase--preserve-merges
rm -f git-sh-setup git-sh-setup+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-sh-setup.sh >git-sh-setup+ && \
mv git-sh-setup+ git-sh-setup
rm -f git-sh-i18n git-sh-i18n+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-sh-i18n.sh >git-sh-i18n+ && \
mv git-sh-i18n+ git-sh-i18n
x86_64-pc-linux-gnu-gcc -o git.o -c -MF ./.depend/git.o.d -MQ git.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' '-DGIT_HTML_PATH="share/doc/git-2.26.2/html"' '-DGIT_MAN_PATH="share/man"' '-DGIT_INFO_PATH="share/info"' git.c
x86_64-pc-linux-gnu-gcc -o builtin/add.o -c -MF builtin/.depend/add.o.d -MQ builtin/add.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/add.c
x86_64-pc-linux-gnu-gcc -o builtin/am.o -c -MF builtin/.depend/am.o.d -MQ builtin/am.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/am.c
x86_64-pc-linux-gnu-gcc -o builtin/annotate.o -c -MF builtin/.depend/annotate.o.d -MQ builtin/annotate.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/annotate.c
x86_64-pc-linux-gnu-gcc -o builtin/apply.o -c -MF builtin/.depend/apply.o.d -MQ builtin/apply.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/apply.c
x86_64-pc-linux-gnu-gcc -o builtin/archive.o -c -MF builtin/.depend/archive.o.d -MQ builtin/archive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/archive.c
x86_64-pc-linux-gnu-gcc -o builtin/bisect--helper.o -c -MF builtin/.depend/bisect--helper.o.d -MQ builtin/bisect--helper.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/bisect--helper.c
x86_64-pc-linux-gnu-gcc -o builtin/blame.o -c -MF builtin/.depend/blame.o.d -MQ builtin/blame.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/blame.c
x86_64-pc-linux-gnu-gcc -o builtin/branch.o -c -MF builtin/.depend/branch.o.d -MQ builtin/branch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/branch.c
x86_64-pc-linux-gnu-gcc -o builtin/bundle.o -c -MF builtin/.depend/bundle.o.d -MQ builtin/bundle.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/bundle.c
x86_64-pc-linux-gnu-gcc -o builtin/cat-file.o -c -MF builtin/.depend/cat-file.o.d -MQ builtin/cat-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/cat-file.c
x86_64-pc-linux-gnu-gcc -o builtin/check-attr.o -c -MF builtin/.depend/check-attr.o.d -MQ builtin/check-attr.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/check-attr.c
x86_64-pc-linux-gnu-gcc -o builtin/check-ignore.o -c -MF builtin/.depend/check-ignore.o.d -MQ builtin/check-ignore.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/check-ignore.c
x86_64-pc-linux-gnu-gcc -o builtin/check-mailmap.o -c -MF builtin/.depend/check-mailmap.o.d -MQ builtin/check-mailmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/check-mailmap.c
x86_64-pc-linux-gnu-gcc -o builtin/check-ref-format.o -c -MF builtin/.depend/check-ref-format.o.d -MQ builtin/check-ref-format.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/check-ref-format.c
x86_64-pc-linux-gnu-gcc -o builtin/checkout-index.o -c -MF builtin/.depend/checkout-index.o.d -MQ builtin/checkout-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/checkout-index.c
x86_64-pc-linux-gnu-gcc -o builtin/checkout.o -c -MF builtin/.depend/checkout.o.d -MQ builtin/checkout.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/checkout.c
x86_64-pc-linux-gnu-gcc -o builtin/clean.o -c -MF builtin/.depend/clean.o.d -MQ builtin/clean.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/clean.c
x86_64-pc-linux-gnu-gcc -o builtin/clone.o -c -MF builtin/.depend/clone.o.d -MQ builtin/clone.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/clone.c
x86_64-pc-linux-gnu-gcc -o builtin/column.o -c -MF builtin/.depend/column.o.d -MQ builtin/column.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/column.c
x86_64-pc-linux-gnu-gcc -o builtin/commit-tree.o -c -MF builtin/.depend/commit-tree.o.d -MQ builtin/commit-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/commit-tree.c
x86_64-pc-linux-gnu-gcc -o builtin/commit.o -c -MF builtin/.depend/commit.o.d -MQ builtin/commit.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/commit.c
x86_64-pc-linux-gnu-gcc -o builtin/commit-graph.o -c -MF builtin/.depend/commit-graph.o.d -MQ builtin/commit-graph.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/commit-graph.c
x86_64-pc-linux-gnu-gcc -o builtin/config.o -c -MF builtin/.depend/config.o.d -MQ builtin/config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/config.c
x86_64-pc-linux-gnu-gcc -o builtin/count-objects.o -c -MF builtin/.depend/count-objects.o.d -MQ builtin/count-objects.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/count-objects.c
x86_64-pc-linux-gnu-gcc -o builtin/credential.o -c -MF builtin/.depend/credential.o.d -MQ builtin/credential.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/credential.c
x86_64-pc-linux-gnu-gcc -o builtin/describe.o -c -MF builtin/.depend/describe.o.d -MQ builtin/describe.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/describe.c
x86_64-pc-linux-gnu-gcc -o builtin/diff-files.o -c -MF builtin/.depend/diff-files.o.d -MQ builtin/diff-files.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/diff-files.c
x86_64-pc-linux-gnu-gcc -o builtin/diff-index.o -c -MF builtin/.depend/diff-index.o.d -MQ builtin/diff-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/diff-index.c
x86_64-pc-linux-gnu-gcc -o builtin/diff-tree.o -c -MF builtin/.depend/diff-tree.o.d -MQ builtin/diff-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/diff-tree.c
x86_64-pc-linux-gnu-gcc -o builtin/diff.o -c -MF builtin/.depend/diff.o.d -MQ builtin/diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/diff.c
x86_64-pc-linux-gnu-gcc -o builtin/difftool.o -c -MF builtin/.depend/difftool.o.d -MQ builtin/difftool.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/difftool.c
x86_64-pc-linux-gnu-gcc -o builtin/env--helper.o -c -MF builtin/.depend/env--helper.o.d -MQ builtin/env--helper.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/env--helper.c
x86_64-pc-linux-gnu-gcc -o builtin/fast-export.o -c -MF builtin/.depend/fast-export.o.d -MQ builtin/fast-export.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/fast-export.c
x86_64-pc-linux-gnu-gcc -o builtin/fetch-pack.o -c -MF builtin/.depend/fetch-pack.o.d -MQ builtin/fetch-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/fetch-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/fetch.o -c -MF builtin/.depend/fetch.o.d -MQ builtin/fetch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/fetch.c
x86_64-pc-linux-gnu-gcc -o builtin/fmt-merge-msg.o -c -MF builtin/.depend/fmt-merge-msg.o.d -MQ builtin/fmt-merge-msg.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/fmt-merge-msg.c
x86_64-pc-linux-gnu-gcc -o builtin/for-each-ref.o -c -MF builtin/.depend/for-each-ref.o.d -MQ builtin/for-each-ref.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/for-each-ref.c
x86_64-pc-linux-gnu-gcc -o builtin/fsck.o -c -MF builtin/.depend/fsck.o.d -MQ builtin/fsck.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/fsck.c
x86_64-pc-linux-gnu-gcc -o builtin/gc.o -c -MF builtin/.depend/gc.o.d -MQ builtin/gc.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/gc.c
x86_64-pc-linux-gnu-gcc -o builtin/get-tar-commit-id.o -c -MF builtin/.depend/get-tar-commit-id.o.d -MQ builtin/get-tar-commit-id.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/get-tar-commit-id.c
x86_64-pc-linux-gnu-gcc -o builtin/grep.o -c -MF builtin/.depend/grep.o.d -MQ builtin/grep.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/grep.c
x86_64-pc-linux-gnu-gcc -o builtin/hash-object.o -c -MF builtin/.depend/hash-object.o.d -MQ builtin/hash-object.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/hash-object.c
x86_64-pc-linux-gnu-gcc -o builtin/help.o -c -MF builtin/.depend/help.o.d -MQ builtin/help.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' '-DGIT_HTML_PATH="share/doc/git-2.26.2/html"' '-DGIT_MAN_PATH="share/man"' '-DGIT_INFO_PATH="share/info"' builtin/help.c
x86_64-pc-linux-gnu-gcc -o builtin/index-pack.o -c -MF builtin/.depend/index-pack.o.d -MQ builtin/index-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/index-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/init-db.o -c -MF builtin/.depend/init-db.o.d -MQ builtin/init-db.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -DDEFAULT_GIT_TEMPLATE_DIR='"share/git-core/templates"' builtin/init-db.c
x86_64-pc-linux-gnu-gcc -o builtin/interpret-trailers.o -c -MF builtin/.depend/interpret-trailers.o.d -MQ builtin/interpret-trailers.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/interpret-trailers.c
x86_64-pc-linux-gnu-gcc -o builtin/log.o -c -MF builtin/.depend/log.o.d -MQ builtin/log.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/log.c
x86_64-pc-linux-gnu-gcc -o builtin/ls-files.o -c -MF builtin/.depend/ls-files.o.d -MQ builtin/ls-files.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/ls-files.c
x86_64-pc-linux-gnu-gcc -o builtin/ls-remote.o -c -MF builtin/.depend/ls-remote.o.d -MQ builtin/ls-remote.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/ls-remote.c
x86_64-pc-linux-gnu-gcc -o builtin/ls-tree.o -c -MF builtin/.depend/ls-tree.o.d -MQ builtin/ls-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/ls-tree.c
x86_64-pc-linux-gnu-gcc -o builtin/mailinfo.o -c -MF builtin/.depend/mailinfo.o.d -MQ builtin/mailinfo.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/mailinfo.c
x86_64-pc-linux-gnu-gcc -o builtin/mailsplit.o -c -MF builtin/.depend/mailsplit.o.d -MQ builtin/mailsplit.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/mailsplit.c
x86_64-pc-linux-gnu-gcc -o builtin/merge.o -c -MF builtin/.depend/merge.o.d -MQ builtin/merge.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-base.o -c -MF builtin/.depend/merge-base.o.d -MQ builtin/merge-base.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-base.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-file.o -c -MF builtin/.depend/merge-file.o.d -MQ builtin/merge-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-file.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-index.o -c -MF builtin/.depend/merge-index.o.d -MQ builtin/merge-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-index.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-ours.o -c -MF builtin/.depend/merge-ours.o.d -MQ builtin/merge-ours.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-ours.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-recursive.o -c -MF builtin/.depend/merge-recursive.o.d -MQ builtin/merge-recursive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-recursive.c
x86_64-pc-linux-gnu-gcc -o builtin/merge-tree.o -c -MF builtin/.depend/merge-tree.o.d -MQ builtin/merge-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/merge-tree.c
x86_64-pc-linux-gnu-gcc -o builtin/mktag.o -c -MF builtin/.depend/mktag.o.d -MQ builtin/mktag.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/mktag.c
x86_64-pc-linux-gnu-gcc -o builtin/mktree.o -c -MF builtin/.depend/mktree.o.d -MQ builtin/mktree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/mktree.c
x86_64-pc-linux-gnu-gcc -o builtin/multi-pack-index.o -c -MF builtin/.depend/multi-pack-index.o.d -MQ builtin/multi-pack-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/multi-pack-index.c
x86_64-pc-linux-gnu-gcc -o builtin/mv.o -c -MF builtin/.depend/mv.o.d -MQ builtin/mv.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/mv.c
x86_64-pc-linux-gnu-gcc -o builtin/name-rev.o -c -MF builtin/.depend/name-rev.o.d -MQ builtin/name-rev.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/name-rev.c
x86_64-pc-linux-gnu-gcc -o builtin/notes.o -c -MF builtin/.depend/notes.o.d -MQ builtin/notes.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/notes.c
x86_64-pc-linux-gnu-gcc -o builtin/pack-objects.o -c -MF builtin/.depend/pack-objects.o.d -MQ builtin/pack-objects.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/pack-objects.c
x86_64-pc-linux-gnu-gcc -o builtin/pack-redundant.o -c -MF builtin/.depend/pack-redundant.o.d -MQ builtin/pack-redundant.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/pack-redundant.c
x86_64-pc-linux-gnu-gcc -o builtin/pack-refs.o -c -MF builtin/.depend/pack-refs.o.d -MQ builtin/pack-refs.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/pack-refs.c
x86_64-pc-linux-gnu-gcc -o builtin/patch-id.o -c -MF builtin/.depend/patch-id.o.d -MQ builtin/patch-id.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/patch-id.c
x86_64-pc-linux-gnu-gcc -o builtin/prune-packed.o -c -MF builtin/.depend/prune-packed.o.d -MQ builtin/prune-packed.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/prune-packed.c
x86_64-pc-linux-gnu-gcc -o builtin/prune.o -c -MF builtin/.depend/prune.o.d -MQ builtin/prune.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/prune.c
x86_64-pc-linux-gnu-gcc -o builtin/pull.o -c -MF builtin/.depend/pull.o.d -MQ builtin/pull.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/pull.c
x86_64-pc-linux-gnu-gcc -o builtin/push.o -c -MF builtin/.depend/push.o.d -MQ builtin/push.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/push.c
x86_64-pc-linux-gnu-gcc -o builtin/range-diff.o -c -MF builtin/.depend/range-diff.o.d -MQ builtin/range-diff.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/range-diff.c
x86_64-pc-linux-gnu-gcc -o builtin/read-tree.o -c -MF builtin/.depend/read-tree.o.d -MQ builtin/read-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/read-tree.c
x86_64-pc-linux-gnu-gcc -o builtin/rebase.o -c -MF builtin/.depend/rebase.o.d -MQ builtin/rebase.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/rebase.c
x86_64-pc-linux-gnu-gcc -o builtin/receive-pack.o -c -MF builtin/.depend/receive-pack.o.d -MQ builtin/receive-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/receive-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/reflog.o -c -MF builtin/.depend/reflog.o.d -MQ builtin/reflog.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/reflog.c
x86_64-pc-linux-gnu-gcc -o builtin/remote.o -c -MF builtin/.depend/remote.o.d -MQ builtin/remote.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/remote.c
x86_64-pc-linux-gnu-gcc -o builtin/remote-ext.o -c -MF builtin/.depend/remote-ext.o.d -MQ builtin/remote-ext.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/remote-ext.c
x86_64-pc-linux-gnu-gcc -o builtin/remote-fd.o -c -MF builtin/.depend/remote-fd.o.d -MQ builtin/remote-fd.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/remote-fd.c
x86_64-pc-linux-gnu-gcc -o builtin/repack.o -c -MF builtin/.depend/repack.o.d -MQ builtin/repack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/repack.c
x86_64-pc-linux-gnu-gcc -o builtin/replace.o -c -MF builtin/.depend/replace.o.d -MQ builtin/replace.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/replace.c
x86_64-pc-linux-gnu-gcc -o builtin/rerere.o -c -MF builtin/.depend/rerere.o.d -MQ builtin/rerere.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/rerere.c
x86_64-pc-linux-gnu-gcc -o builtin/reset.o -c -MF builtin/.depend/reset.o.d -MQ builtin/reset.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/reset.c
x86_64-pc-linux-gnu-gcc -o builtin/rev-list.o -c -MF builtin/.depend/rev-list.o.d -MQ builtin/rev-list.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/rev-list.c
x86_64-pc-linux-gnu-gcc -o builtin/rev-parse.o -c -MF builtin/.depend/rev-parse.o.d -MQ builtin/rev-parse.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/rev-parse.c
x86_64-pc-linux-gnu-gcc -o builtin/revert.o -c -MF builtin/.depend/revert.o.d -MQ builtin/revert.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/revert.c
x86_64-pc-linux-gnu-gcc -o builtin/rm.o -c -MF builtin/.depend/rm.o.d -MQ builtin/rm.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/rm.c
x86_64-pc-linux-gnu-gcc -o builtin/send-pack.o -c -MF builtin/.depend/send-pack.o.d -MQ builtin/send-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/send-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/shortlog.o -c -MF builtin/.depend/shortlog.o.d -MQ builtin/shortlog.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/shortlog.c
x86_64-pc-linux-gnu-gcc -o builtin/show-branch.o -c -MF builtin/.depend/show-branch.o.d -MQ builtin/show-branch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/show-branch.c
x86_64-pc-linux-gnu-gcc -o builtin/show-index.o -c -MF builtin/.depend/show-index.o.d -MQ builtin/show-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/show-index.c
x86_64-pc-linux-gnu-gcc -o builtin/show-ref.o -c -MF builtin/.depend/show-ref.o.d -MQ builtin/show-ref.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/show-ref.c
x86_64-pc-linux-gnu-gcc -o builtin/sparse-checkout.o -c -MF builtin/.depend/sparse-checkout.o.d -MQ builtin/sparse-checkout.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/sparse-checkout.c
x86_64-pc-linux-gnu-gcc -o builtin/stash.o -c -MF builtin/.depend/stash.o.d -MQ builtin/stash.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/stash.c
x86_64-pc-linux-gnu-gcc -o builtin/stripspace.o -c -MF builtin/.depend/stripspace.o.d -MQ builtin/stripspace.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/stripspace.c
x86_64-pc-linux-gnu-gcc -o builtin/submodule--helper.o -c -MF builtin/.depend/submodule--helper.o.d -MQ builtin/submodule--helper.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/submodule--helper.c
x86_64-pc-linux-gnu-gcc -o builtin/symbolic-ref.o -c -MF builtin/.depend/symbolic-ref.o.d -MQ builtin/symbolic-ref.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/symbolic-ref.c
x86_64-pc-linux-gnu-gcc -o builtin/tag.o -c -MF builtin/.depend/tag.o.d -MQ builtin/tag.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/tag.c
x86_64-pc-linux-gnu-gcc -o builtin/unpack-file.o -c -MF builtin/.depend/unpack-file.o.d -MQ builtin/unpack-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/unpack-file.c
x86_64-pc-linux-gnu-gcc -o builtin/unpack-objects.o -c -MF builtin/.depend/unpack-objects.o.d -MQ builtin/unpack-objects.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/unpack-objects.c
x86_64-pc-linux-gnu-gcc -o builtin/update-index.o -c -MF builtin/.depend/update-index.o.d -MQ builtin/update-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/update-index.c
x86_64-pc-linux-gnu-gcc -o builtin/update-ref.o -c -MF builtin/.depend/update-ref.o.d -MQ builtin/update-ref.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/update-ref.c
x86_64-pc-linux-gnu-gcc -o builtin/update-server-info.o -c -MF builtin/.depend/update-server-info.o.d -MQ builtin/update-server-info.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/update-server-info.c
x86_64-pc-linux-gnu-gcc -o builtin/upload-archive.o -c -MF builtin/.depend/upload-archive.o.d -MQ builtin/upload-archive.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/upload-archive.c
x86_64-pc-linux-gnu-gcc -o builtin/upload-pack.o -c -MF builtin/.depend/upload-pack.o.d -MQ builtin/upload-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/upload-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/var.o -c -MF builtin/.depend/var.o.d -MQ builtin/var.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/var.c
x86_64-pc-linux-gnu-gcc -o builtin/verify-commit.o -c -MF builtin/.depend/verify-commit.o.d -MQ builtin/verify-commit.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/verify-commit.c
x86_64-pc-linux-gnu-gcc -o builtin/verify-pack.o -c -MF builtin/.depend/verify-pack.o.d -MQ builtin/verify-pack.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/verify-pack.c
x86_64-pc-linux-gnu-gcc -o builtin/verify-tag.o -c -MF builtin/.depend/verify-tag.o.d -MQ builtin/verify-tag.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/verify-tag.c
x86_64-pc-linux-gnu-gcc -o builtin/worktree.o -c -MF builtin/.depend/worktree.o.d -MQ builtin/worktree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/worktree.c
x86_64-pc-linux-gnu-gcc -o builtin/write-tree.o -c -MF builtin/.depend/write-tree.o.d -MQ builtin/write-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  builtin/write-tree.c
x86_64-pc-linux-gnu-gcc -o attr.o -c -MF ./.depend/attr.o.d -MQ attr.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -DETC_GITATTRIBUTES='"/etc/gitattributes"' attr.c
x86_64-pc-linux-gnu-gcc -o help.o -c -MF ./.depend/help.o.d -MQ help.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  help.c
x86_64-pc-linux-gnu-gcc -o version.o -c -MF ./.depend/version.o.d -MQ version.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' '-DGIT_VERSION="2.26.2"' '-DGIT_USER_AGENT="git/2.26.2"' '-DGIT_BUILT_FROM_COMMIT=""' version.c
rm -f xdiff/lib.a && x86_64-pc-linux-gnu-ar rcs xdiff/lib.a xdiff/xdiffi.o xdiff/xprepare.o xdiff/xutils.o xdiff/xemit.o xdiff/xmerge.o xdiff/xpatience.o xdiff/xhistogram.o
rm -f vcs-svn/lib.a && x86_64-pc-linux-gnu-ar rcs vcs-svn/lib.a vcs-svn/line_buffer.o vcs-svn/sliding_window.o vcs-svn/fast_export.o vcs-svn/svndiff.o vcs-svn/svndump.o
rm -f git-bisect git-bisect+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-bisect.sh >git-bisect+ && \
chmod +x git-bisect+ && \
mv git-bisect+ git-bisect
rm -f git-difftool--helper git-difftool--helper+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-difftool--helper.sh >git-difftool--helper+ && \
chmod +x git-difftool--helper+ && \
mv git-difftool--helper+ git-difftool--helper
rm -f git-filter-branch git-filter-branch+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-filter-branch.sh >git-filter-branch+ && \
chmod +x git-filter-branch+ && \
mv git-filter-branch+ git-filter-branch
rm -f git-merge-octopus git-merge-octopus+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-merge-octopus.sh >git-merge-octopus+ && \
chmod +x git-merge-octopus+ && \
mv git-merge-octopus+ git-merge-octopus
rm -f git-merge-one-file git-merge-one-file+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-merge-one-file.sh >git-merge-one-file+ && \
chmod +x git-merge-one-file+ && \
mv git-merge-one-file+ git-merge-one-file
rm -f git-merge-resolve git-merge-resolve+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-merge-resolve.sh >git-merge-resolve+ && \
chmod +x git-merge-resolve+ && \
mv git-merge-resolve+ git-merge-resolve
rm -f git-mergetool git-mergetool+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-mergetool.sh >git-mergetool+ && \
chmod +x git-mergetool+ && \
mv git-mergetool+ git-mergetool
rm -f git-quiltimport git-quiltimport+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-quiltimport.sh >git-quiltimport+ && \
chmod +x git-quiltimport+ && \
mv git-quiltimport+ git-quiltimport
rm -f git-legacy-stash git-legacy-stash+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-legacy-stash.sh >git-legacy-stash+ && \
chmod +x git-legacy-stash+ && \
mv git-legacy-stash+ git-legacy-stash
rm -f git-request-pull git-request-pull+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-request-pull.sh >git-request-pull+ && \
chmod +x git-request-pull+ && \
mv git-request-pull+ git-request-pull
rm -f git-submodule git-submodule+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-submodule.sh >git-submodule+ && \
chmod +x git-submodule+ && \
mv git-submodule+ git-submodule
rm -f git-web--browse git-web--browse+ && sed -e '1s|#!.*/sh|#!/bin/sh|' -e 's|@SHELL_PATH@|/bin/sh|' -e 's|@@DIFF@@|diff|' -e 's|@@LOCALEDIR@@|/usr/share/locale|g' -e 's/@@NO_CURL@@//g' -e 's/@@USE_GETTEXT_SCHEME@@/fallthrough/g' -e '/^# @@BROKEN_PATH_FIX@@$/d' -e 's|@@GITWEBDIR@@|/usr/share/gitweb|g' -e 's|@@PERL@@|/usr/bin/perl|g' -e 's|@@SANE_TEXT_GREP@@|-a|g' -e 's|@@PAGER_ENV@@|LESS=FRX LV=-c|g' git-web--browse.sh >git-web--browse+ && \
chmod +x git-web--browse+ && \
mv git-web--browse+ git-web--browse
rm -f git-add--interactive git-add--interactive+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-add--interactive+ && \
chmod +x git-add--interactive+ && \
mv git-add--interactive+ git-add--interactive
rm -f git-archimport git-archimport+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-archimport+ && \
chmod +x git-archimport+ && \
mv git-archimport+ git-archimport
rm -f git-send-email git-send-email+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-send-email+ && \
chmod +x git-send-email+ && \
mv git-send-email+ git-send-email
rm -f git-svn git-svn+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-svn+ && \
chmod +x git-svn+ && \
mv git-svn+ git-svn
rm -f git-cvsexportcommit git-cvsexportcommit+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-cvsexportcommit+ && \
chmod +x git-cvsexportcommit+ && \
mv git-cvsexportcommit+ git-cvsexportcommit
rm -f git-cvsimport git-cvsimport+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-cvsimport+ && \
chmod +x git-cvsimport+ && \
mv git-cvsimport+ git-cvsimport
rm -f git-cvsserver git-cvsserver+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PERL=YesPlease|g' \
    unimplemented.sh >git-cvsserver+ && \
chmod +x git-cvsserver+ && \
mv git-cvsserver+ git-cvsserver
rm -f git-p4 git-p4+ && \
sed -e '1s|#!.*/sh|#!/bin/sh|' \
    -e 's|@@REASON@@|NO_PYTHON=YesPlease|g' \
    unimplemented.sh >git-p4+ && \
chmod +x git-p4+ && \
mv git-p4+ git-p4
rm -f libgit.a && x86_64-pc-linux-gnu-ar rcs libgit.a abspath.o add-interactive.o add-patch.o advice.o alias.o alloc.o apply.o archive.o archive-tar.o archive-zip.o argv-array.o attr.o base85.o bisect.o blame.o blob.o branch.o bulk-checkin.o bundle.o cache-tree.o chdir-notify.o checkout.o color.o column.o combine-diff.o commit.o commit-graph.o commit-reach.o compat/obstack.o compat/terminal.o config.o connect.o connected.o convert.o copy.o credential.o csum-file.o ctype.o date.o decorate.o delta-islands.o diffcore-break.o diffcore-delta.o diffcore-order.o diffcore-pickaxe.o diffcore-rename.o diff-delta.o diff-lib.o diff-no-index.o diff.o dir.o dir-iterator.o editor.o entry.o environment.o ewah/bitmap.o ewah/ewah_bitmap.o ewah/ewah_io.o ewah/ewah_rlw.o exec-cmd.o fetch-negotiator.o fetch-pack.o fsck.o fsmonitor.o gettext.o gpg-interface.o graph.o grep.o hashmap.o linear-assignment.o help.o hex.o ident.o interdiff.o json-writer.o kwset.o levenshtein.o line-log.o line-range.o list-objects.o list-objects-filter.o list-objects-filter-options.o ll-merge.o lockfile.o log-tree.o ls-refs.o mailinfo.o mailmap.o match-trees.o mem-pool.o merge.o merge-blobs.o merge-recursive.o mergesort.o midx.o name-hash.o negotiator/default.o negotiator/skipping.o notes.o notes-cache.o notes-merge.o notes-utils.o object.o oidmap.o oidset.o packfile.o pack-bitmap.o pack-bitmap-write.o pack-check.o pack-objects.o pack-revindex.o pack-write.o pager.o parse-options.o parse-options-cb.o patch-delta.o patch-ids.o path.o pathspec.o pkt-line.o preload-index.o pretty.o prio-queue.o progress.o promisor-remote.o prompt.o protocol.o quote.o range-diff.o reachable.o read-cache.o rebase.o rebase-interactive.o reflog-walk.o refs.o refs/files-backend.o refs/iterator.o refs/packed-backend.o refs/ref-cache.o refspec.o ref-filter.o remote.o replace-object.o repo-settings.o repository.o rerere.o resolve-undo.o revision.o run-command.o send-pack.o sequencer.o serve.o server-info.o setup.o sha1-array.o sha1-lookup.o sha1-file.o sha1-name.o shallow.o sideband.o sigchain.o split-index.o stable-qsort.o strbuf.o streaming.o string-list.o submodule.o submodule-config.o sub-process.o symlinks.o tag.o tempfile.o thread-utils.o tmp-objdir.o trace.o trace2.o trace2/tr2_cfg.o trace2/tr2_cmd_name.o trace2/tr2_dst.o trace2/tr2_sid.o trace2/tr2_sysenv.o trace2/tr2_tbuf.o trace2/tr2_tgt_event.o trace2/tr2_tgt_normal.o trace2/tr2_tgt_perf.o trace2/tr2_tls.o trailer.o transport.o transport-helper.o tree-diff.o tree.o tree-walk.o unpack-trees.o upload-pack.o url.o urlmatch.o usage.o userdiff.o utf8.o varint.o version.o versioncmp.o walker.o wildmatch.o worktree.o wrapper.o write-or-die.o ws.o wt-status.o xdiff-interface.o zlib.o unix-socket.o block-sha1/sha1.o sha256/block/sha256.o compat/fopen.o compat/strlcpy.o compat/qsort_s.o
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-credential-store -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  credential-store.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-daemon -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  daemon.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-fast-import -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  fast-import.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-http-backend -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  http-backend.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-imap-send -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  imap-send.o http.o common-main.o \
	  -lcurl -lssl -lcrypto -lssl -lcrypto -lz  -lssl  -lcrypto libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-sh-i18n--envsubst -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  sh-i18n--envsubst.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-shell -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  shell.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-remote-testsvn -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  remote-testsvn.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt \
vcs-svn/lib.a
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-http-fetch -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  http.o http-walker.o http-fetch.o common-main.o \
	 -lcurl -lssl -lcrypto -lssl -lcrypto -lz libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-http-push -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  http.o http-push.o common-main.o \
	 -lcurl -lssl -lcrypto -lssl -lcrypto -lz -lexpat libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-credential-cache -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  credential-cache.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-credential-cache--daemon -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  credential-cache--daemon.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git-remote-http -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  remote-curl.o http.o http-walker.o common-main.o \
	 -lcurl -lssl -lcrypto -lssl -lcrypto -lz -lexpat libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o git -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  \
	git.o builtin/add.o builtin/am.o builtin/annotate.o builtin/apply.o builtin/archive.o builtin/bisect--helper.o builtin/blame.o builtin/branch.o builtin/bundle.o builtin/cat-file.o builtin/check-attr.o builtin/check-ignore.o builtin/check-mailmap.o builtin/check-ref-format.o builtin/checkout-index.o builtin/checkout.o builtin/clean.o builtin/clone.o builtin/column.o builtin/commit-tree.o builtin/commit.o builtin/commit-graph.o builtin/config.o builtin/count-objects.o builtin/credential.o builtin/describe.o builtin/diff-files.o builtin/diff-index.o builtin/diff-tree.o builtin/diff.o builtin/difftool.o builtin/env--helper.o builtin/fast-export.o builtin/fetch-pack.o builtin/fetch.o builtin/fmt-merge-msg.o builtin/for-each-ref.o builtin/fsck.o builtin/gc.o builtin/get-tar-commit-id.o builtin/grep.o builtin/hash-object.o builtin/help.o builtin/index-pack.o builtin/init-db.o builtin/interpret-trailers.o builtin/log.o builtin/ls-files.o builtin/ls-remote.o builtin/ls-tree.o builtin/mailinfo.o builtin/mailsplit.o builtin/merge.o builtin/merge-base.o builtin/merge-file.o builtin/merge-index.o builtin/merge-ours.o builtin/merge-recursive.o builtin/merge-tree.o builtin/mktag.o builtin/mktree.o builtin/multi-pack-index.o builtin/mv.o builtin/name-rev.o builtin/notes.o builtin/pack-objects.o builtin/pack-redundant.o builtin/pack-refs.o builtin/patch-id.o builtin/prune-packed.o builtin/prune.o builtin/pull.o builtin/push.o builtin/range-diff.o builtin/read-tree.o builtin/rebase.o builtin/receive-pack.o builtin/reflog.o builtin/remote.o builtin/remote-ext.o builtin/remote-fd.o builtin/repack.o builtin/replace.o builtin/rerere.o builtin/reset.o builtin/rev-list.o builtin/rev-parse.o builtin/revert.o builtin/rm.o builtin/send-pack.o builtin/shortlog.o builtin/show-branch.o builtin/show-index.o builtin/show-ref.o builtin/sparse-checkout.o builtin/stash.o builtin/stripspace.o builtin/submodule--helper.o builtin/symbolic-ref.o builtin/tag.o builtin/unpack-file.o builtin/unpack-objects.o builtin/update-index.o builtin/update-ref.o builtin/update-server-info.o builtin/upload-archive.o builtin/upload-pack.o builtin/var.o builtin/verify-commit.o builtin/verify-pack.o builtin/verify-tag.o builtin/worktree.o builtin/write-tree.o common-main.o libgit.a xdiff/lib.a  -lz -lpthread -lrt
rm -f git-remote-https && \
ln git-remote-http git-remote-https 2>/dev/null || \
ln -s git-remote-http git-remote-https 2>/dev/null || \
cp git-remote-http git-remote-https
rm -f git-remote-ftp && \
ln git-remote-http git-remote-ftp 2>/dev/null || \
ln -s git-remote-http git-remote-ftp 2>/dev/null || \
cp git-remote-http git-remote-ftp
rm -f git-remote-ftps && \
ln git-remote-http git-remote-ftps 2>/dev/null || \
ln -s git-remote-http git-remote-ftps 2>/dev/null || \
cp git-remote-http git-remote-ftps
rm -f git-add && \
ln git git-add 2>/dev/null || \
ln -s git git-add 2>/dev/null || \
cp git git-add
rm -f git-am && \
ln git git-am 2>/dev/null || \
ln -s git git-am 2>/dev/null || \
cp git git-am
rm -f git-annotate && \
ln git git-annotate 2>/dev/null || \
ln -s git git-annotate 2>/dev/null || \
cp git git-annotate
rm -f git-apply && \
ln git git-apply 2>/dev/null || \
ln -s git git-apply 2>/dev/null || \
cp git git-apply
rm -f git-archive && \
ln git git-archive 2>/dev/null || \
ln -s git git-archive 2>/dev/null || \
cp git git-archive
rm -f git-bisect--helper && \
ln git git-bisect--helper 2>/dev/null || \
ln -s git git-bisect--helper 2>/dev/null || \
cp git git-bisect--helper
rm -f git-blame && \
ln git git-blame 2>/dev/null || \
ln -s git git-blame 2>/dev/null || \
cp git git-blame
rm -f git-branch && \
ln git git-branch 2>/dev/null || \
ln -s git git-branch 2>/dev/null || \
cp git git-branch
rm -f git-bundle && \
ln git git-bundle 2>/dev/null || \
ln -s git git-bundle 2>/dev/null || \
cp git git-bundle
rm -f git-cat-file && \
ln git git-cat-file 2>/dev/null || \
ln -s git git-cat-file 2>/dev/null || \
cp git git-cat-file
rm -f git-check-attr && \
ln git git-check-attr 2>/dev/null || \
ln -s git git-check-attr 2>/dev/null || \
cp git git-check-attr
rm -f git-check-ignore && \
ln git git-check-ignore 2>/dev/null || \
ln -s git git-check-ignore 2>/dev/null || \
cp git git-check-ignore
rm -f git-check-mailmap && \
ln git git-check-mailmap 2>/dev/null || \
ln -s git git-check-mailmap 2>/dev/null || \
cp git git-check-mailmap
rm -f git-check-ref-format && \
ln git git-check-ref-format 2>/dev/null || \
ln -s git git-check-ref-format 2>/dev/null || \
cp git git-check-ref-format
rm -f git-checkout-index && \
ln git git-checkout-index 2>/dev/null || \
ln -s git git-checkout-index 2>/dev/null || \
cp git git-checkout-index
rm -f git-checkout && \
ln git git-checkout 2>/dev/null || \
ln -s git git-checkout 2>/dev/null || \
cp git git-checkout
rm -f git-clean && \
ln git git-clean 2>/dev/null || \
ln -s git git-clean 2>/dev/null || \
cp git git-clean
rm -f git-clone && \
ln git git-clone 2>/dev/null || \
ln -s git git-clone 2>/dev/null || \
cp git git-clone
rm -f git-column && \
ln git git-column 2>/dev/null || \
ln -s git git-column 2>/dev/null || \
cp git git-column
rm -f git-commit-tree && \
ln git git-commit-tree 2>/dev/null || \
ln -s git git-commit-tree 2>/dev/null || \
cp git git-commit-tree
rm -f git-commit && \
ln git git-commit 2>/dev/null || \
ln -s git git-commit 2>/dev/null || \
cp git git-commit
rm -f git-commit-graph && \
ln git git-commit-graph 2>/dev/null || \
ln -s git git-commit-graph 2>/dev/null || \
cp git git-commit-graph
rm -f git-config && \
ln git git-config 2>/dev/null || \
ln -s git git-config 2>/dev/null || \
cp git git-config
rm -f git-count-objects && \
ln git git-count-objects 2>/dev/null || \
ln -s git git-count-objects 2>/dev/null || \
cp git git-count-objects
rm -f git-credential && \
ln git git-credential 2>/dev/null || \
ln -s git git-credential 2>/dev/null || \
cp git git-credential
rm -f git-describe && \
ln git git-describe 2>/dev/null || \
ln -s git git-describe 2>/dev/null || \
cp git git-describe
rm -f git-diff-files && \
ln git git-diff-files 2>/dev/null || \
ln -s git git-diff-files 2>/dev/null || \
cp git git-diff-files
rm -f git-diff-index && \
ln git git-diff-index 2>/dev/null || \
ln -s git git-diff-index 2>/dev/null || \
cp git git-diff-index
rm -f git-diff-tree && \
ln git git-diff-tree 2>/dev/null || \
ln -s git git-diff-tree 2>/dev/null || \
cp git git-diff-tree
rm -f git-diff && \
ln git git-diff 2>/dev/null || \
ln -s git git-diff 2>/dev/null || \
cp git git-diff
rm -f git-difftool && \
ln git git-difftool 2>/dev/null || \
ln -s git git-difftool 2>/dev/null || \
cp git git-difftool
rm -f git-env--helper && \
ln git git-env--helper 2>/dev/null || \
ln -s git git-env--helper 2>/dev/null || \
cp git git-env--helper
rm -f git-fast-export && \
ln git git-fast-export 2>/dev/null || \
ln -s git git-fast-export 2>/dev/null || \
cp git git-fast-export
rm -f git-fetch-pack && \
ln git git-fetch-pack 2>/dev/null || \
ln -s git git-fetch-pack 2>/dev/null || \
cp git git-fetch-pack
rm -f git-fetch && \
ln git git-fetch 2>/dev/null || \
ln -s git git-fetch 2>/dev/null || \
cp git git-fetch
rm -f git-fmt-merge-msg && \
ln git git-fmt-merge-msg 2>/dev/null || \
ln -s git git-fmt-merge-msg 2>/dev/null || \
cp git git-fmt-merge-msg
rm -f git-for-each-ref && \
ln git git-for-each-ref 2>/dev/null || \
ln -s git git-for-each-ref 2>/dev/null || \
cp git git-for-each-ref
rm -f git-fsck && \
ln git git-fsck 2>/dev/null || \
ln -s git git-fsck 2>/dev/null || \
cp git git-fsck
rm -f git-gc && \
ln git git-gc 2>/dev/null || \
ln -s git git-gc 2>/dev/null || \
cp git git-gc
rm -f git-get-tar-commit-id && \
ln git git-get-tar-commit-id 2>/dev/null || \
ln -s git git-get-tar-commit-id 2>/dev/null || \
cp git git-get-tar-commit-id
rm -f git-grep && \
ln git git-grep 2>/dev/null || \
ln -s git git-grep 2>/dev/null || \
cp git git-grep
rm -f git-hash-object && \
ln git git-hash-object 2>/dev/null || \
ln -s git git-hash-object 2>/dev/null || \
cp git git-hash-object
rm -f git-help && \
ln git git-help 2>/dev/null || \
ln -s git git-help 2>/dev/null || \
cp git git-help
rm -f git-index-pack && \
ln git git-index-pack 2>/dev/null || \
ln -s git git-index-pack 2>/dev/null || \
cp git git-index-pack
rm -f git-init-db && \
ln git git-init-db 2>/dev/null || \
ln -s git git-init-db 2>/dev/null || \
cp git git-init-db
rm -f git-interpret-trailers && \
ln git git-interpret-trailers 2>/dev/null || \
ln -s git git-interpret-trailers 2>/dev/null || \
cp git git-interpret-trailers
rm -f git-log && \
ln git git-log 2>/dev/null || \
ln -s git git-log 2>/dev/null || \
cp git git-log
rm -f git-ls-files && \
ln git git-ls-files 2>/dev/null || \
ln -s git git-ls-files 2>/dev/null || \
cp git git-ls-files
rm -f git-ls-remote && \
ln git git-ls-remote 2>/dev/null || \
ln -s git git-ls-remote 2>/dev/null || \
cp git git-ls-remote
rm -f git-ls-tree && \
ln git git-ls-tree 2>/dev/null || \
ln -s git git-ls-tree 2>/dev/null || \
cp git git-ls-tree
rm -f git-mailinfo && \
ln git git-mailinfo 2>/dev/null || \
ln -s git git-mailinfo 2>/dev/null || \
cp git git-mailinfo
rm -f git-mailsplit && \
ln git git-mailsplit 2>/dev/null || \
ln -s git git-mailsplit 2>/dev/null || \
cp git git-mailsplit
rm -f git-merge && \
ln git git-merge 2>/dev/null || \
ln -s git git-merge 2>/dev/null || \
cp git git-merge
rm -f git-merge-base && \
ln git git-merge-base 2>/dev/null || \
ln -s git git-merge-base 2>/dev/null || \
cp git git-merge-base
rm -f git-merge-file && \
ln git git-merge-file 2>/dev/null || \
ln -s git git-merge-file 2>/dev/null || \
cp git git-merge-file
rm -f git-merge-index && \
ln git git-merge-index 2>/dev/null || \
ln -s git git-merge-index 2>/dev/null || \
cp git git-merge-index
rm -f git-merge-ours && \
ln git git-merge-ours 2>/dev/null || \
ln -s git git-merge-ours 2>/dev/null || \
cp git git-merge-ours
rm -f git-merge-recursive && \
ln git git-merge-recursive 2>/dev/null || \
ln -s git git-merge-recursive 2>/dev/null || \
cp git git-merge-recursive
rm -f git-merge-tree && \
ln git git-merge-tree 2>/dev/null || \
ln -s git git-merge-tree 2>/dev/null || \
cp git git-merge-tree
rm -f git-mktag && \
ln git git-mktag 2>/dev/null || \
ln -s git git-mktag 2>/dev/null || \
cp git git-mktag
rm -f git-mktree && \
ln git git-mktree 2>/dev/null || \
ln -s git git-mktree 2>/dev/null || \
cp git git-mktree
rm -f git-multi-pack-index && \
ln git git-multi-pack-index 2>/dev/null || \
ln -s git git-multi-pack-index 2>/dev/null || \
cp git git-multi-pack-index
rm -f git-mv && \
ln git git-mv 2>/dev/null || \
ln -s git git-mv 2>/dev/null || \
cp git git-mv
rm -f git-name-rev && \
ln git git-name-rev 2>/dev/null || \
ln -s git git-name-rev 2>/dev/null || \
cp git git-name-rev
rm -f git-notes && \
ln git git-notes 2>/dev/null || \
ln -s git git-notes 2>/dev/null || \
cp git git-notes
rm -f git-pack-objects && \
ln git git-pack-objects 2>/dev/null || \
ln -s git git-pack-objects 2>/dev/null || \
cp git git-pack-objects
rm -f git-pack-redundant && \
ln git git-pack-redundant 2>/dev/null || \
ln -s git git-pack-redundant 2>/dev/null || \
cp git git-pack-redundant
rm -f git-pack-refs && \
ln git git-pack-refs 2>/dev/null || \
ln -s git git-pack-refs 2>/dev/null || \
cp git git-pack-refs
rm -f git-patch-id && \
ln git git-patch-id 2>/dev/null || \
ln -s git git-patch-id 2>/dev/null || \
cp git git-patch-id
rm -f git-prune-packed && \
ln git git-prune-packed 2>/dev/null || \
ln -s git git-prune-packed 2>/dev/null || \
cp git git-prune-packed
rm -f git-prune && \
ln git git-prune 2>/dev/null || \
ln -s git git-prune 2>/dev/null || \
cp git git-prune
rm -f git-pull && \
ln git git-pull 2>/dev/null || \
ln -s git git-pull 2>/dev/null || \
cp git git-pull
rm -f git-push && \
ln git git-push 2>/dev/null || \
ln -s git git-push 2>/dev/null || \
cp git git-push
rm -f git-range-diff && \
ln git git-range-diff 2>/dev/null || \
ln -s git git-range-diff 2>/dev/null || \
cp git git-range-diff
rm -f git-read-tree && \
ln git git-read-tree 2>/dev/null || \
ln -s git git-read-tree 2>/dev/null || \
cp git git-read-tree
rm -f git-rebase && \
ln git git-rebase 2>/dev/null || \
ln -s git git-rebase 2>/dev/null || \
cp git git-rebase
rm -f git-receive-pack && \
ln git git-receive-pack 2>/dev/null || \
ln -s git git-receive-pack 2>/dev/null || \
cp git git-receive-pack
rm -f git-reflog && \
ln git git-reflog 2>/dev/null || \
ln -s git git-reflog 2>/dev/null || \
cp git git-reflog
rm -f git-remote && \
ln git git-remote 2>/dev/null || \
ln -s git git-remote 2>/dev/null || \
cp git git-remote
rm -f git-remote-ext && \
ln git git-remote-ext 2>/dev/null || \
ln -s git git-remote-ext 2>/dev/null || \
cp git git-remote-ext
rm -f git-remote-fd && \
ln git git-remote-fd 2>/dev/null || \
ln -s git git-remote-fd 2>/dev/null || \
cp git git-remote-fd
rm -f git-repack && \
ln git git-repack 2>/dev/null || \
ln -s git git-repack 2>/dev/null || \
cp git git-repack
rm -f git-replace && \
ln git git-replace 2>/dev/null || \
ln -s git git-replace 2>/dev/null || \
cp git git-replace
rm -f git-rerere && \
ln git git-rerere 2>/dev/null || \
ln -s git git-rerere 2>/dev/null || \
cp git git-rerere
rm -f git-reset && \
ln git git-reset 2>/dev/null || \
ln -s git git-reset 2>/dev/null || \
cp git git-reset
rm -f git-rev-list && \
ln git git-rev-list 2>/dev/null || \
ln -s git git-rev-list 2>/dev/null || \
cp git git-rev-list
rm -f git-rev-parse && \
ln git git-rev-parse 2>/dev/null || \
ln -s git git-rev-parse 2>/dev/null || \
cp git git-rev-parse
rm -f git-revert && \
ln git git-revert 2>/dev/null || \
ln -s git git-revert 2>/dev/null || \
cp git git-revert
rm -f git-rm && \
ln git git-rm 2>/dev/null || \
ln -s git git-rm 2>/dev/null || \
cp git git-rm
rm -f git-send-pack && \
ln git git-send-pack 2>/dev/null || \
ln -s git git-send-pack 2>/dev/null || \
cp git git-send-pack
rm -f git-shortlog && \
ln git git-shortlog 2>/dev/null || \
ln -s git git-shortlog 2>/dev/null || \
cp git git-shortlog
rm -f git-show-branch && \
ln git git-show-branch 2>/dev/null || \
ln -s git git-show-branch 2>/dev/null || \
cp git git-show-branch
rm -f git-show-index && \
ln git git-show-index 2>/dev/null || \
ln -s git git-show-index 2>/dev/null || \
cp git git-show-index
rm -f git-show-ref && \
ln git git-show-ref 2>/dev/null || \
ln -s git git-show-ref 2>/dev/null || \
cp git git-show-ref
rm -f git-sparse-checkout && \
ln git git-sparse-checkout 2>/dev/null || \
ln -s git git-sparse-checkout 2>/dev/null || \
cp git git-sparse-checkout
rm -f git-stash && \
ln git git-stash 2>/dev/null || \
ln -s git git-stash 2>/dev/null || \
cp git git-stash
rm -f git-stripspace && \
ln git git-stripspace 2>/dev/null || \
ln -s git git-stripspace 2>/dev/null || \
cp git git-stripspace
rm -f git-submodule--helper && \
ln git git-submodule--helper 2>/dev/null || \
ln -s git git-submodule--helper 2>/dev/null || \
cp git git-submodule--helper
rm -f git-symbolic-ref && \
ln git git-symbolic-ref 2>/dev/null || \
ln -s git git-symbolic-ref 2>/dev/null || \
cp git git-symbolic-ref
rm -f git-tag && \
ln git git-tag 2>/dev/null || \
ln -s git git-tag 2>/dev/null || \
cp git git-tag
rm -f git-unpack-file && \
ln git git-unpack-file 2>/dev/null || \
ln -s git git-unpack-file 2>/dev/null || \
cp git git-unpack-file
rm -f git-unpack-objects && \
ln git git-unpack-objects 2>/dev/null || \
ln -s git git-unpack-objects 2>/dev/null || \
cp git git-unpack-objects
rm -f git-update-index && \
ln git git-update-index 2>/dev/null || \
ln -s git git-update-index 2>/dev/null || \
cp git git-update-index
rm -f git-update-ref && \
ln git git-update-ref 2>/dev/null || \
ln -s git git-update-ref 2>/dev/null || \
cp git git-update-ref
rm -f git-update-server-info && \
ln git git-update-server-info 2>/dev/null || \
ln -s git git-update-server-info 2>/dev/null || \
cp git git-update-server-info
rm -f git-upload-archive && \
ln git git-upload-archive 2>/dev/null || \
ln -s git git-upload-archive 2>/dev/null || \
cp git git-upload-archive
rm -f git-upload-pack && \
ln git git-upload-pack 2>/dev/null || \
ln -s git git-upload-pack 2>/dev/null || \
cp git git-upload-pack
rm -f git-var && \
ln git git-var 2>/dev/null || \
ln -s git git-var 2>/dev/null || \
cp git git-var
rm -f git-verify-commit && \
ln git git-verify-commit 2>/dev/null || \
ln -s git git-verify-commit 2>/dev/null || \
cp git git-verify-commit
rm -f git-verify-pack && \
ln git git-verify-pack 2>/dev/null || \
ln -s git git-verify-pack 2>/dev/null || \
cp git git-verify-pack
rm -f git-verify-tag && \
ln git git-verify-tag 2>/dev/null || \
ln -s git git-verify-tag 2>/dev/null || \
cp git git-verify-tag
rm -f git-worktree && \
ln git git-worktree 2>/dev/null || \
ln -s git git-worktree 2>/dev/null || \
cp git git-worktree
rm -f git-write-tree && \
ln git git-write-tree 2>/dev/null || \
ln -s git git-write-tree 2>/dev/null || \
cp git git-write-tree
rm -f git-cherry && \
ln git git-cherry 2>/dev/null || \
ln -s git git-cherry 2>/dev/null || \
cp git git-cherry
rm -f git-cherry-pick && \
ln git git-cherry-pick 2>/dev/null || \
ln -s git git-cherry-pick 2>/dev/null || \
cp git git-cherry-pick
rm -f git-format-patch && \
ln git git-format-patch 2>/dev/null || \
ln -s git git-format-patch 2>/dev/null || \
cp git git-format-patch
rm -f git-fsck-objects && \
ln git git-fsck-objects 2>/dev/null || \
ln -s git git-fsck-objects 2>/dev/null || \
cp git git-fsck-objects
rm -f git-init && \
ln git git-init 2>/dev/null || \
ln -s git git-init 2>/dev/null || \
cp git git-init
rm -f git-merge-subtree && \
ln git git-merge-subtree 2>/dev/null || \
ln -s git git-merge-subtree 2>/dev/null || \
cp git git-merge-subtree
rm -f git-restore && \
ln git git-restore 2>/dev/null || \
ln -s git git-restore 2>/dev/null || \
cp git git-restore
rm -f git-show && \
ln git git-show 2>/dev/null || \
ln -s git git-show 2>/dev/null || \
cp git git-show
rm -f git-stage && \
ln git git-stage 2>/dev/null || \
ln -s git git-stage 2>/dev/null || \
cp git git-stage
rm -f git-status && \
ln git git-status 2>/dev/null || \
ln -s git git-status 2>/dev/null || \
cp git git-status
rm -f git-switch && \
ln git git-switch 2>/dev/null || \
ln -s git git-switch 2>/dev/null || \
cp git git-switch
rm -f git-whatchanged && \
ln git git-whatchanged 2>/dev/null || \
ln -s git git-whatchanged 2>/dev/null || \
cp git git-whatchanged
make -C templates  SHELL_PATH='/bin/sh' PERL_PATH='/usr/bin/perl'
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
umask 022 && ls *--* 2>/dev/null | \
while read boilerplate; \
do \
	case "$boilerplate" in *~) continue ;; esac && \
	dst=`echo "$boilerplate" | sed -e 's|^this|.|;s|--|/|g'` && \
	dir=`expr "$dst" : '\(.*\)/'` && \
	mkdir -p blt/$dir && \
	case "$boilerplate" in \
	*--) continue;; \
	esac && \
	sed -e '1s|#!.*/sh|#!/bin/sh|' \
	    -e 's|@SHELL_PATH@|/bin/sh|' \
	    -e 's|@PERL_PATH@|/usr/bin/perl|g' $boilerplate > \
		blt/$dst && \
	if test -x "$boilerplate"; then rx=rx; else rx=r; fi && \
	chmod a+$rx "blt/$dst" || exit; \
done && \
date >boilerplates.made
: no custom templates yet
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
x86_64-pc-linux-gnu-gcc -o t/helper/test-fake-ssh.o -c -MF t/helper/.depend/test-fake-ssh.o.d -MQ t/helper/test-fake-ssh.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-fake-ssh.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-line-buffer.o -c -MF t/helper/.depend/test-line-buffer.o.d -MQ t/helper/test-line-buffer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-line-buffer.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-svn-fe.o -c -MF t/helper/.depend/test-svn-fe.o.d -MQ t/helper/test-svn-fe.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-svn-fe.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-tool.o -c -MF t/helper/.depend/test-tool.o.d -MQ t/helper/test-tool.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-tool.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-chmtime.o -c -MF t/helper/.depend/test-chmtime.o.d -MQ t/helper/test-chmtime.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-chmtime.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-config.o -c -MF t/helper/.depend/test-config.o.d -MQ t/helper/test-config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-config.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-ctype.o -c -MF t/helper/.depend/test-ctype.o.d -MQ t/helper/test-ctype.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-ctype.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-date.o -c -MF t/helper/.depend/test-date.o.d -MQ t/helper/test-date.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-date.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-delta.o -c -MF t/helper/.depend/test-delta.o.d -MQ t/helper/test-delta.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-delta.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-dir-iterator.o -c -MF t/helper/.depend/test-dir-iterator.o.d -MQ t/helper/test-dir-iterator.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-dir-iterator.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-drop-caches.o -c -MF t/helper/.depend/test-drop-caches.o.d -MQ t/helper/test-drop-caches.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-drop-caches.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-dump-cache-tree.o -c -MF t/helper/.depend/test-dump-cache-tree.o.d -MQ t/helper/test-dump-cache-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-dump-cache-tree.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-dump-fsmonitor.o -c -MF t/helper/.depend/test-dump-fsmonitor.o.d -MQ t/helper/test-dump-fsmonitor.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-dump-fsmonitor.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-dump-split-index.o -c -MF t/helper/.depend/test-dump-split-index.o.d -MQ t/helper/test-dump-split-index.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-dump-split-index.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-dump-untracked-cache.o -c -MF t/helper/.depend/test-dump-untracked-cache.o.d -MQ t/helper/test-dump-untracked-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-dump-untracked-cache.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-example-decorate.o -c -MF t/helper/.depend/test-example-decorate.o.d -MQ t/helper/test-example-decorate.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-example-decorate.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-genrandom.o -c -MF t/helper/.depend/test-genrandom.o.d -MQ t/helper/test-genrandom.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-genrandom.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-genzeros.o -c -MF t/helper/.depend/test-genzeros.o.d -MQ t/helper/test-genzeros.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-genzeros.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-hash.o -c -MF t/helper/.depend/test-hash.o.d -MQ t/helper/test-hash.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-hash.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-hashmap.o -c -MF t/helper/.depend/test-hashmap.o.d -MQ t/helper/test-hashmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-hashmap.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-hash-speed.o -c -MF t/helper/.depend/test-hash-speed.o.d -MQ t/helper/test-hash-speed.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-hash-speed.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-index-version.o -c -MF t/helper/.depend/test-index-version.o.d -MQ t/helper/test-index-version.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-index-version.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-json-writer.o -c -MF t/helper/.depend/test-json-writer.o.d -MQ t/helper/test-json-writer.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-json-writer.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-lazy-init-name-hash.o -c -MF t/helper/.depend/test-lazy-init-name-hash.o.d -MQ t/helper/test-lazy-init-name-hash.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-lazy-init-name-hash.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-match-trees.o -c -MF t/helper/.depend/test-match-trees.o.d -MQ t/helper/test-match-trees.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-match-trees.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-mergesort.o -c -MF t/helper/.depend/test-mergesort.o.d -MQ t/helper/test-mergesort.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-mergesort.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-mktemp.o -c -MF t/helper/.depend/test-mktemp.o.d -MQ t/helper/test-mktemp.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-mktemp.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-oidmap.o -c -MF t/helper/.depend/test-oidmap.o.d -MQ t/helper/test-oidmap.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-oidmap.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-online-cpus.o -c -MF t/helper/.depend/test-online-cpus.o.d -MQ t/helper/test-online-cpus.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-online-cpus.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-parse-options.o -c -MF t/helper/.depend/test-parse-options.o.d -MQ t/helper/test-parse-options.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-parse-options.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-parse-pathspec-file.o -c -MF t/helper/.depend/test-parse-pathspec-file.o.d -MQ t/helper/test-parse-pathspec-file.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-parse-pathspec-file.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-path-utils.o -c -MF t/helper/.depend/test-path-utils.o.d -MQ t/helper/test-path-utils.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-path-utils.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-pkt-line.o -c -MF t/helper/.depend/test-pkt-line.o.d -MQ t/helper/test-pkt-line.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-pkt-line.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-prio-queue.o -c -MF t/helper/.depend/test-prio-queue.o.d -MQ t/helper/test-prio-queue.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-prio-queue.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-progress.o -c -MF t/helper/.depend/test-progress.o.d -MQ t/helper/test-progress.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-progress.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-reach.o -c -MF t/helper/.depend/test-reach.o.d -MQ t/helper/test-reach.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-reach.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-read-cache.o -c -MF t/helper/.depend/test-read-cache.o.d -MQ t/helper/test-read-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-read-cache.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-read-graph.o -c -MF t/helper/.depend/test-read-graph.o.d -MQ t/helper/test-read-graph.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-read-graph.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-read-midx.o -c -MF t/helper/.depend/test-read-midx.o.d -MQ t/helper/test-read-midx.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-read-midx.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-ref-store.o -c -MF t/helper/.depend/test-ref-store.o.d -MQ t/helper/test-ref-store.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-ref-store.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-regex.o -c -MF t/helper/.depend/test-regex.o.d -MQ t/helper/test-regex.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-regex.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-repository.o -c -MF t/helper/.depend/test-repository.o.d -MQ t/helper/test-repository.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-repository.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-revision-walking.o -c -MF t/helper/.depend/test-revision-walking.o.d -MQ t/helper/test-revision-walking.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-revision-walking.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-run-command.o -c -MF t/helper/.depend/test-run-command.o.d -MQ t/helper/test-run-command.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-run-command.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-scrap-cache-tree.o -c -MF t/helper/.depend/test-scrap-cache-tree.o.d -MQ t/helper/test-scrap-cache-tree.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-scrap-cache-tree.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-serve-v2.o -c -MF t/helper/.depend/test-serve-v2.o.d -MQ t/helper/test-serve-v2.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-serve-v2.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-sha1.o -c -MF t/helper/.depend/test-sha1.o.d -MQ t/helper/test-sha1.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-sha1.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-sha1-array.o -c -MF t/helper/.depend/test-sha1-array.o.d -MQ t/helper/test-sha1-array.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-sha1-array.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-sha256.o -c -MF t/helper/.depend/test-sha256.o.d -MQ t/helper/test-sha256.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-sha256.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-sigchain.o -c -MF t/helper/.depend/test-sigchain.o.d -MQ t/helper/test-sigchain.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-sigchain.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-strcmp-offset.o -c -MF t/helper/.depend/test-strcmp-offset.o.d -MQ t/helper/test-strcmp-offset.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-strcmp-offset.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-string-list.o -c -MF t/helper/.depend/test-string-list.o.d -MQ t/helper/test-string-list.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-string-list.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-submodule-config.o -c -MF t/helper/.depend/test-submodule-config.o.d -MQ t/helper/test-submodule-config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-submodule-config.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-submodule-nested-repo-config.o -c -MF t/helper/.depend/test-submodule-nested-repo-config.o.d -MQ t/helper/test-submodule-nested-repo-config.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-submodule-nested-repo-config.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-subprocess.o -c -MF t/helper/.depend/test-subprocess.o.d -MQ t/helper/test-subprocess.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-subprocess.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-trace2.o -c -MF t/helper/.depend/test-trace2.o.d -MQ t/helper/test-trace2.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-trace2.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-urlmatch-normalization.o -c -MF t/helper/.depend/test-urlmatch-normalization.o.d -MQ t/helper/test-urlmatch-normalization.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-urlmatch-normalization.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-xml-encode.o -c -MF t/helper/.depend/test-xml-encode.o.d -MQ t/helper/test-xml-encode.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-xml-encode.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-wildmatch.o -c -MF t/helper/.depend/test-wildmatch.o.d -MQ t/helper/test-wildmatch.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-wildmatch.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-windows-named-pipe.o -c -MF t/helper/.depend/test-windows-named-pipe.o.d -MQ t/helper/test-windows-named-pipe.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-windows-named-pipe.c
x86_64-pc-linux-gnu-gcc -o t/helper/test-write-cache.o -c -MF t/helper/.depend/test-write-cache.o.d -MQ t/helper/test-write-cache.o -MMD -MP   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"'  t/helper/test-write-cache.c
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git|' < wrap-for-bin.sh > bin-wrappers/git && \
chmod +x bin-wrappers/git
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git-upload-pack|' < wrap-for-bin.sh > bin-wrappers/git-upload-pack && \
chmod +x bin-wrappers/git-upload-pack
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git-receive-pack|' < wrap-for-bin.sh > bin-wrappers/git-receive-pack && \
chmod +x bin-wrappers/git-receive-pack
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git-upload-archive|' < wrap-for-bin.sh > bin-wrappers/git-upload-archive && \
chmod +x bin-wrappers/git-upload-archive
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git-shell|' < wrap-for-bin.sh > bin-wrappers/git-shell && \
chmod +x bin-wrappers/git-shell
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|git-cvsserver|' < wrap-for-bin.sh > bin-wrappers/git-cvsserver && \
chmod +x bin-wrappers/git-cvsserver
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|t/helper/test-fake-ssh|' < wrap-for-bin.sh > bin-wrappers/test-fake-ssh && \
chmod +x bin-wrappers/test-fake-ssh
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|t/helper/test-line-buffer|' < wrap-for-bin.sh > bin-wrappers/test-line-buffer && \
chmod +x bin-wrappers/test-line-buffer
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|t/helper/test-svn-fe|' < wrap-for-bin.sh > bin-wrappers/test-svn-fe && \
chmod +x bin-wrappers/test-svn-fe
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o t/helper/test-fake-ssh -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  t/helper/test-fake-ssh.o common-main.o libgit.a xdiff/lib.a libgit.a xdiff/lib.a  -lz -lpthread -lrt
sed -e '1s|#!.*/sh|#!/bin/sh|' \
     -e 's|@@BUILD_DIR@@|/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2|' \
     -e 's|@@PROG@@|t/helper/test-tool|' < wrap-for-bin.sh > bin-wrappers/test-tool && \
chmod +x bin-wrappers/test-tool
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o t/helper/test-line-buffer -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  t/helper/test-line-buffer.o common-main.o libgit.a xdiff/lib.a vcs-svn/lib.a libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o t/helper/test-svn-fe -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  t/helper/test-svn-fe.o common-main.o libgit.a xdiff/lib.a vcs-svn/lib.a libgit.a xdiff/lib.a  -lz -lpthread -lrt
x86_64-pc-linux-gnu-gcc   -O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check -Wall -I. -DHAVE_SYSINFO -DGIT_HOST_CPU="\"x86_64\"" -DHAVE_ALLOCA_H -DUSE_CURL_FOR_IMAP_SEND -DNO_GETTEXT -DSHA1_BLK -DSHA256_BLK  -DHAVE_PATHS_H -DHAVE_DEV_TTY -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_GETDELIM '-DPROCFS_EXECUTABLE_PATH="/proc/self/exe"'  -DFREAD_READS_DIRECTORIES -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"' -DPAGER_ENV='"LESS=FRX LV=-c"' -o t/helper/test-tool -Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro  t/helper/test-tool.o common-main.o t/helper/test-chmtime.o t/helper/test-config.o t/helper/test-ctype.o t/helper/test-date.o t/helper/test-delta.o t/helper/test-dir-iterator.o t/helper/test-drop-caches.o t/helper/test-dump-cache-tree.o t/helper/test-dump-fsmonitor.o t/helper/test-dump-split-index.o t/helper/test-dump-untracked-cache.o t/helper/test-example-decorate.o t/helper/test-genrandom.o t/helper/test-genzeros.o t/helper/test-hash.o t/helper/test-hashmap.o t/helper/test-hash-speed.o t/helper/test-index-version.o t/helper/test-json-writer.o t/helper/test-lazy-init-name-hash.o t/helper/test-match-trees.o t/helper/test-mergesort.o t/helper/test-mktemp.o t/helper/test-oidmap.o t/helper/test-online-cpus.o t/helper/test-parse-options.o t/helper/test-parse-pathspec-file.o t/helper/test-path-utils.o t/helper/test-pkt-line.o t/helper/test-prio-queue.o t/helper/test-progress.o t/helper/test-reach.o t/helper/test-read-cache.o t/helper/test-read-graph.o t/helper/test-read-midx.o t/helper/test-ref-store.o t/helper/test-regex.o t/helper/test-repository.o t/helper/test-revision-walking.o t/helper/test-run-command.o t/helper/test-scrap-cache-tree.o t/helper/test-serve-v2.o t/helper/test-sha1.o t/helper/test-sha1-array.o t/helper/test-sha256.o t/helper/test-sigchain.o t/helper/test-strcmp-offset.o t/helper/test-string-list.o t/helper/test-submodule-config.o t/helper/test-submodule-nested-repo-config.o t/helper/test-subprocess.o t/helper/test-trace2.o t/helper/test-urlmatch-normalization.o t/helper/test-xml-encode.o t/helper/test-wildmatch.o t/helper/test-windows-named-pipe.o t/helper/test-write-cache.o libgit.a xdiff/lib.a libgit.a xdiff/lib.a  -lz -lpthread -lrt
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 git-subtree 
make -C ../../ GIT-VERSION-FILE
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2'
make[1]: 'GIT-VERSION-FILE' is up to date.
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2'
sed -e '1s|#!.*/sh|#!/bin/sh|' git-subtree.sh >git-subtree
chmod +x git-subtree
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 
cat shebang.perl DiffHighlight.pm diff-highlight.perl >diff-highlight+
chmod +x diff-highlight+
mv diff-highlight+ diff-highlight
>>> Source compiled.
>>> Test phase: dev-vcs/git-2.26.2
 [32;01m*[0m Disabling CVS tests (needs dev-vcs/cvs[USE=server])
 [32;01m*[0m Disabling tests that need Perl
 [32;01m*[0m Disabling tests that fail with SVN 1.7
 [32;01m*[0m Disabled tests:
 [32;01m*[0m Disabled t9200-git-cvsexportcommit.sh
 [32;01m*[0m Disabled t9400-git-cvsserver-server.sh
 [32;01m*[0m Disabled t9401-git-cvsserver-crlf.sh
 [32;01m*[0m Disabled t9402-git-cvsserver-refs.sh
 [32;01m*[0m Disabled t9600-cvsimport.sh
 [32;01m*[0m Disabled t9601-cvsimport-vendor-branch.sh
 [32;01m*[0m Disabled t9602-cvsimport-branches-tags.sh
 [32;01m*[0m Disabled t9603-cvsimport-patchsets.sh
 [32;01m*[0m Disabled t9604-cvsimport-timestamps.sh
 [32;01m*[0m Disabled t3701-add-interactive.sh
 [32;01m*[0m Disabled t5502-quickfetch.sh
 [32;01m*[0m Disabled t5512-ls-remote.sh
 [32;01m*[0m Disabled t5520-pull.sh
 [32;01m*[0m Disabled t7106-reset-unborn-branch.sh
 [32;01m*[0m Disabled t9100-git-svn-basic.sh
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 clean 
rm -f -r 'chainlinttmp'
rm -f -r 'trash directory'.* 'test-results'
rm -f -r valgrind/bin
rm -f .prove
 [32;01m*[0m Start test run
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 --keep-going test 
make -C templates  SHELL_PATH='/bin/sh' PERL_PATH='/usr/bin/perl'
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
: no custom templates yet
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
make -C t/ all
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t'
rm -f -r 'test-results'
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LC_COLLATE = "C",
	LC_MESSAGES = "C",
	LANG = "it_IT.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
make aggregate-results-and-cleanup
make[2]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t'
*** t0000-basic.sh ***
*** t0001-init.sh ***
*** t0002-gitfile.sh ***
*** t0003-attributes.sh ***
*** t0004-unwritable.sh ***
*** t0005-signals.sh ***
*** t0006-date.sh ***
*** t0007-git-var.sh ***
*** t0008-ignores.sh ***
*** t0009-prio-queue.sh ***
*** t0010-racy-git.sh ***
*** t0011-hashmap.sh ***
ok 1 - initial setup(B[m
ok 1 - verify that the running shell supports "local"(B[m
ok 1 - put(B[m
ok 1 - get GIT_AUTHOR_IDENT(B[m
ok 1 - open-quoted pathname(B[m
ok 1 - basic ordering(B[m
ok 1 - sigchain works(B[m
ok 1 - Racy GIT trial #0 part A(B[m
ok 2 - .git/objects should be empty after git init in an empty repo(B[m
ok 1 - relative date (5 seconds ago)(B[m
ok 1 - plain(B[m
ok 1 - setup(B[m
ok 2 - put (case insensitive)(B[m
ok 2 - get GIT_COMMITTER_IDENT(B[m
ok 2 - setup(B[m
ok 2 - mixed put and get(B[m
ok 3 - .git/objects should have 3 subdirectories(B[m
ok 2 - bad setup: invalid .git file format(B[m
ok 2 - relative date (5 minutes ago)(B[m
ok 4 - success is reported like this(B[m
ok 3 - replace(B[m
ok 2 - signals are propagated using shell convention(B[m
ok 3 - notice empty queue(B[m
ok 3 - relative date (5 hours ago)(B[m
ok 3 - bad setup: invalid .git file path(B[m
ok 4 - replace (case insensitive)(B[m
ok 4 - stack order(B[m
ok 4 - final setup + check rev-parse --git-dir(B[m
ok 3 - requested identites are strict(B[m
ok 4 - relative date (5 days ago)(B[m
ok 3 - create blob(B[m
ok 2 - plain nested in bare(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 5 - get(B[m
ok 1 - setup(B[m
ok 2 - write-tree should notice unwritable repository(B[m
*** t0012-help.sh ***
ok 5 - relative date (3 weeks ago)(B[m
ok 5 - check hash-object(B[m
ok 4 - git var -l lists variables(B[m
ok 6 - get (case insensitive)(B[m
ok 4 - a constipated git dies with SIGPIPE(B[m
ok 3 - command line checks(B[m
ok 3 - commit should notice unwritable repository(B[m
ok 6 - relative date (5 months ago)(B[m
ok 6 - check cat-file(B[m
ok 2 - . corner-case(B[m
ok 7 - add(B[m
ok 5 - git var -l lists config(B[m
ok 5 - a constipated git dies with SIGPIPE even if parent ignores it(B[m
ok 3 - plain through aliased command, outside any git repo(B[m
ok 7 - relative date (1 year, 2 months ago)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 6 - listing and asking for variables are exclusive(B[m
ok 8 - add (case insensitive)(B[m
ok 4 - update-index should notice unwritable repository(B[m
*** t0013-sha1dc.sh ***
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 3 - . corner-case with -q(B[m
ok 7 - check update-index(B[m
*** t0014-alias.sh ***
ok 8 - relative date (1 year, 9 months ago)(B[m
ok 9 - remove(B[m
ok 5 - pretend we have a fully passing test suite(B[m
ok 4 - . corner-case with --quiet(B[m
ok 8 - check write-tree(B[m
ok 5 - add should notice unwritable repository(B[m
ok 9 - relative date (20 years ago)(B[m
ok 10 - remove (case insensitive)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 4 - plain nested through aliased command(B[m
*** t0015-hash.sh ***
ok 9 - check commit-tree(B[m
ok 5 - . corner-case with -v(B[m
ok 10 - relative date (12 months ago)(B[m
ok 1 - setup(B[m
ok 11 - iterate(B[m
ok 10 - check rev-list(B[m
ok 6 - . corner-case with -v -n(B[m
ok 11 - relative date (2 years ago)(B[m
ok 12 - iterate (case insensitive)(B[m
ok 12 - show date (iso8601:1466000000 +0200)(B[m
ok 7 - . corner-case with -v --non-matching(B[m
ok 5 - plain nested in bare through aliased command(B[m
[36m1..0 # SKIP skipping sha1 collision tests, DC_SHA1 not set(B[m
ok 2 - basic help commands(B[m
*** t0016-oidmap.sh ***
ok 13 - show date (iso8601-strict:1466000000 +0200)(B[m
ok 8 - . corner-case with --verbose(B[m
ok 13 - grow / shrink(B[m
ok 11 - setup_git_dir twice in subdir(B[m
ok 14 - show date (rfc2822:1466000000 +0200)(B[m
ok 9 - . corner-case with --verbose -n(B[m
ok 14 - string interning(B[m
ok 15 - show date (short:1466000000 +0200)(B[m
ok 6 - pretend we have a partially passing test suite(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 1 - nested aliases - internal execution(B[m
*** t0017-env-helper.sh ***
ok 10 - . corner-case with --verbose --non-matching(B[m
ok 4 - attribute test(B[m
ok 16 - show date (default:1466000000 +0200)(B[m
ok 6 - No extra GIT_* on alias scripts(B[m
ok 17 - show date (raw:1466000000 +0200)(B[m
ok 7 - plain with GIT_WORK_TREE(B[m
ok 18 - show date (unix:1466000000 +0200)(B[m
ok 2 - nested aliases - mixed execution(B[m
ok 11 - empty command line(B[m
ok 12 - enter_repo non-strict mode(B[m
ok 8 - plain bare(B[m
ok 19 - show date (iso-local:1466000000 +0200)(B[m
ok 20 - show date (raw-local:1466000000 +0200)(B[m
ok 12 - empty command line with -q(B[m
ok 9 - plain bare with GIT_WORK_TREE(B[m
ok 3 - looping aliases - internal execution(B[m
ok 21 - show date (unix-local:1466000000 +0200)(B[m
ok 13 - empty command line with --quiet(B[m
ok 7 - pretend we have a known breakage(B[m
ok 22 - show date (format:%z:1466000000 +0200)(B[m
ok 4 - run-command formats empty args properly(B[m
ok 13 - enter_repo linked checkout(B[m
ok 10 - GIT_DIR bare(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 14 - empty command line with -v(B[m
*** t0019-json-writer.sh ***
ok 23 - show date (format-local:%z:1466000000 +0200)(B[m
ok 1 - env--helper usage(B[m
ok 3 - works for commands and guides by default(B[m
ok 1 - test basic SHA-1 hash values(B[m
ok 15 - empty command line with -v -n(B[m
ok 24 - show date (format:%Z:1466000000 +0200)(B[m
ok 11 - init --bare(B[m
ok 14 - enter_repo strict mode(B[m
ok 2 - env--helper bad default values(B[m
ok 5 - attribute matching is case sensitive when core.ignorecase=0(B[m
ok 4 - --exclude-guides does not work for guides(B[m
ok 1 - setup(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 25 - show date (format-local:%Z:1466000000 +0200)(B[m
ok 16 - empty command line with -v --non-matching(B[m
*** t0020-crlf.sh ***
ok 2 - put(B[m
ok 26 - show date (format:%%z:1466000000 +0200)(B[m
ok 12 - GIT_DIR non-bare(B[m
ok 3 - replace(B[m
ok 5 - --help does not work for guides(B[m
ok 17 - empty command line with --verbose(B[m
ok 8 - pretend we have fixed a known breakage(B[m
ok 27 - show date (format-local:%%z:1466000000 +0200)(B[m
ok 4 - get(B[m
ok 28 - show date (format:%Y-%m-%d %H:%M:%S:1466000000 +0200)(B[m
ok 18 - empty command line with --verbose -n(B[m
ok 13 - GIT_DIR & GIT_WORK_TREE (1)(B[m
ok 1 - unit test of json-writer routines(B[m
ok 5 - remove(B[m
ok 6 - git help(B[m
ok 29 - show date (format-local:%Y-%m-%d %H:%M:%S:1466000000 +0200)(B[m
ok 14 - GIT_DIR & GIT_WORK_TREE (2)(B[m
ok 19 - empty command line with --verbose --non-matching(B[m
ok 2 - trivial object(B[m
ok 3 - env--helper --type=bool(B[m
ok 7 - git help -g(B[m
ok 3 - trivial array(B[m
ok 8 - generate builtin list(B[m
ok 6 - iterate(B[m
ok 20 - --stdin with empty STDIN(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 30 - show date (iso:5758122296 -0400)(B[m
ok 9 - add can handle -h(B[m
*** t0021-conversion.sh ***
ok 15 - reinit(B[m
ok 4 - simple object(B[m
ok 31 - show date (iso-local:5758122296 -0400)(B[m
ok 6 - attribute matching is case insensitive when core.ignorecase=1(B[m
ok 4 - env--helper --type=ulong(B[m
ok 10 - am can handle -h(B[m
ok 21 - --stdin with empty STDIN with -q(B[m
ok 16 - init with --template(B[m
ok 9 - pretend we have fixed one of two known breakages (run in sub test-lib)(B[m
[34mok 7 # skip additional case insensitivity tests (missing CASE_INSENSITIVE_FS)(B[m
ok 5 - simple array(B[m
ok 32 - parse date (2008)(B[m
ok 11 - annotate can handle -h(B[m
ok 22 - --stdin with empty STDIN with --quiet(B[m
ok 33 - parse date (2008-02)(B[m
ok 17 - init with --template (blank)(B[m
ok 12 - apply can handle -h(B[m
ok 6 - escape quoting string(B[m
ok 23 - --stdin with empty STDIN with -v(B[m
ok 5 - env--helper reads config thanks to trace2(B[m
ok 1 - setup(B[m
ok 34 - parse date (2008-02-14)(B[m
ok 13 - archive can handle -h(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 8 - unnormalized paths(B[m
ok 7 - escape quoting string 2(B[m
*** t0022-crlf-rename.sh ***
ok 35 - parse date (2008-02-14 20:30:45)(B[m
ok 14 - bisect--helper can handle -h(B[m
ok 24 - --stdin with empty STDIN with -v -n(B[m
ok 2 - test basic SHA-256 hash values(B[m
ok 18 - init with init.templatedir set(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 2 - safecrlf: autocrlf=input, all CRLF(B[m
ok 36 - parse date (2008-02-14 20:30:45 -0500)(B[m
ok 8 - nested inline object(B[m
ok 15 - blame can handle -h(B[m
*** t0023-crlf-am.sh ***
ok 25 - --stdin with empty STDIN with -v --non-matching(B[m
ok 37 - parse date (2008-02-14 20:30:45 -0015)(B[m
ok 16 - branch can handle -h(B[m
ok 9 - nested inline array(B[m
ok 3 - safecrlf: autocrlf=input, mixed LF/CRLF(B[m
ok 10 - pretend we have a pass, fail, and known breakage(B[m
ok 17 - bundle can handle -h(B[m
ok 38 - parse date (2008-02-14 20:30:45 -5)(B[m
ok 26 - --stdin with empty STDIN with --verbose(B[m
ok 10 - nested inline object and array(B[m
ok 39 - parse date (2008-02-14 20:30:45 -5:)(B[m
ok 18 - cat-file can handle -h(B[m
ok 1 - setup(B[m
ok 19 - init --bare/--shared overrides system/global config(B[m
ok 4 - safecrlf: autocrlf=true, all LF(B[m
ok 27 - --stdin with empty STDIN with --verbose -n(B[m
ok 40 - parse date (2008-02-14 20:30:45 -05)(B[m
ok 19 - check-attr can handle -h(B[m
ok 11 - nested inline object and array 2(B[m
ok 9 - relative paths(B[m
ok 28 - --stdin with empty STDIN with --verbose --non-matching(B[m
ok 41 - parse date (2008-02-14 20:30:45 -:30)(B[m
ok 20 - check-ignore can handle -h(B[m
ok 5 - safecrlf: autocrlf=true mixed LF/CRLF(B[m
ok 12 - pretty nested inline object and array 2(B[m
ok 20 - init honors global core.sharedRepository(B[m
ok 42 - parse date (2008-02-14 20:30:45 -05:00)(B[m
ok 10 - prefixes are not confused with leading directories(B[m
ok 21 - check-mailmap can handle -h(B[m
ok 2 - check(B[m
ok 29 - -q with multiple args(B[m
ok 21 - init allows insanely long --template(B[m
ok 43 - parse date (2008-02-14 20:30:45 TZ=EST5)(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 13 - inline object with no members(B[m
ok 22 - check-ref-format can handle -h(B[m
ok 30 - --quiet with multiple args(B[m
ok 44 - parse approxidate (now)(B[m
ok 22 - init creates a new directory(B[m
ok 2 - diff -M(B[m
ok 23 - checkout can handle -h(B[m
ok 14 - inline array with no members(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 2 - am(B[m
ok 31 - -q -v(B[m
*** t0024-crlf-archive.sh ***
ok 45 - parse approxidate (5 seconds ago)(B[m
ok 24 - checkout-index can handle -h(B[m
ok 23 - init creates a new bare directory(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 6 - safecrlf: print warning only once(B[m
ok 15 - larger empty example(B[m
ok 11 - core.attributesfile(B[m
*** t0025-crlf-renormalize.sh ***
ok 46 - parse approxidate (5.seconds.ago)(B[m
ok 25 - cherry can handle -h(B[m
ok 32 - --quiet -v(B[m
[34mok 16 # skip parse JSON using Perl (missing PERLJSON)(B[m
ok 24 - init recreates a directory(B[m
ok 12 - attribute test: read paths from stdin(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 47 - parse approxidate (10.minutes.ago)(B[m
ok 26 - cherry-pick can handle -h(B[m
ok 3 - expanded_in_repo(B[m
ok 7 - safecrlf: git diff demotes safecrlf=true to warn(B[m
*** t0026-eol-config.sh ***
ok 11 - pretend we have a mix of all possible results(B[m
ok 33 - -q --verbose(B[m
ok 48 - parse approxidate (yesterday)(B[m
ok 25 - init recreates a new bare directory(B[m
ok 27 - clean can handle -h(B[m
ok 2 - Racy GIT trial #0 part B(B[m
ok 13 - attribute test: --all option(B[m
ok 8 - safecrlf: no warning with safecrlf=false(B[m
ok 49 - parse approxidate (3.days.ago)(B[m
ok 28 - clone can handle -h(B[m
ok 26 - init creates a new deep directory(B[m
ok 34 - --quiet --verbose(B[m
ok 50 - parse approxidate (3.weeks.ago)(B[m
ok 3 - Racy GIT trial #1 part A(B[m
ok 29 - column can handle -h(B[m
ok 9 - switch off autocrlf, safecrlf, reset HEAD(B[m
ok 35 - --quiet with multiple args(B[m
ok 51 - parse approxidate (3.months.ago)(B[m
ok 14 - attribute test: --cached option(B[m
ok 30 - commit can handle -h(B[m
ok 1 - setup(B[m
ok 52 - parse approxidate (2.years.3.months.ago)(B[m
ok 27 - init creates a new deep directory (umask vs. shared)(B[m
ok 31 - commit-graph can handle -h(B[m
ok 15 - root subdir attribute test(B[m
ok 36 - erroneous use of --(B[m
ok 1 - setup(B[m
ok 2 - tar archive(B[m
ok 53 - parse approxidate (6am yesterday)(B[m
ok 28 - init notices EEXIST (1)(B[m
ok 32 - commit-tree can handle -h(B[m
ok 54 - parse approxidate (6pm yesterday)(B[m
ok 10 - update with autocrlf=input(B[m
ok 37 - erroneous use of -- with -q(B[m
ok 33 - config can handle -h(B[m
ok 16 - negative patterns(B[m
ok 29 - init notices EEXIST (2)(B[m
ok 2 - renormalize CRLF in repo(B[m
ok 3 - zip archive(B[m
ok 55 - parse approxidate (3:00)(B[m
ok 4 - filter shell-escaped filenames(B[m
ok 12 - test --verbose(B[m
ok 34 - count-objects can handle -h(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 17 - patterns starting with exclamation(B[m
ok 1 - setup(B[m
ok 38 - erroneous use of -- with --quiet(B[m
*** t0027-auto-crlf.sh ***
ok 56 - parse approxidate (15:00)(B[m
ok 35 - credential can handle -h(B[m
ok 57 - parse approxidate (noon today)(B[m
ok 3 - ignore-errors not mistaken for renormalize(B[m
ok 39 - erroneous use of -- with -v(B[m
ok 11 - update with autocrlf=true(B[m
ok 36 - describe can handle -h(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 58 - parse approxidate (noon yesterday)(B[m
*** t0028-working-tree-encoding.sh ***
ok 18 - "**" test(B[m
ok 30 - init notices EPERM(B[m
ok 37 - diff can handle -h(B[m
ok 2 - eol=lf puts LFs in normalized file(B[m
ok 40 - erroneous use of -- with -v -n(B[m
ok 59 - parse approxidate (January 5th noon pm)(B[m
ok 31 - init creates a new bare directory with global --bare(B[m
ok 38 - diff-files can handle -h(B[m
ok 60 - parse approxidate (10am noon)(B[m
ok 41 - erroneous use of -- with -v --non-matching(B[m
ok 39 - diff-index can handle -h(B[m
ok 32 - init prefers command line to GIT_DIR(B[m
ok 61 - parse approxidate (last tuesday)(B[m
ok 40 - diff-tree can handle -h(B[m
ok 3 - eol=crlf puts CRLFs in normalized file(B[m
ok 42 - erroneous use of -- with --verbose(B[m
ok 5 - required filter should filter data(B[m
ok 12 - checkout with autocrlf=true(B[m
ok 62 - parse approxidate (July 5th)(B[m
ok 19 - "**" with no slashes test(B[m
ok 13 - test --verbose-only(B[m
ok 33 - init with separate gitdir(B[m
ok 41 - difftool can handle -h(B[m
ok 1 - ls-files --eol -o Text/Binary(B[m
ok 63 - parse approxidate (06/05/2009)(B[m
ok 43 - erroneous use of -- with --verbose -n(B[m
ok 42 - env--helper can handle -h(B[m
ok 20 - using --git-dir and --work-tree(B[m
ok 64 - parse approxidate (06.05.2009)(B[m
ok 34 - init in long base path(B[m
ok 43 - fast-export can handle -h(B[m
ok 44 - erroneous use of -- with --verbose --non-matching(B[m
ok 4 - autocrlf=true overrides eol=lf(B[m
ok 65 - parse approxidate (Jun 6, 5AM)(B[m
ok 21 - setup bare(B[m
ok 44 - fetch can handle -h(B[m
ok 13 - checkout with autocrlf=input(B[m
ok 66 - parse approxidate (5AM Jun 6)(B[m
ok 6 - required filter smudge failure(B[m
ok 45 - fetch-pack can handle -h(B[m
ok 45 - --stdin with superfluous arg(B[m
ok 67 - parse approxidate (6AM, June 7, 2009)(B[m
ok 1 - setup test files(B[m
ok 46 - fmt-merge-msg can handle -h(B[m
ok 35 - init in long restricted base path(B[m
ok 68 - parse approxidate (2008-12-01)(B[m
ok 14 - apply patch (autocrlf=input)(B[m
ok 46 - --stdin with superfluous arg with -q(B[m
ok 5 - autocrlf=true overrides unset eol(B[m
[34mok 6 # skip eol native is crlf (missing NATIVE_CRLF)(B[m
ok 47 - for-each-ref can handle -h(B[m
ok 36 - re-init on .git file(B[m
ok 14 - GIT_SKIP_TESTS(B[m
ok 2 - ensure UTF-8 is stored in Git(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 22 - bare repository: check that .gitattribute is ignored(B[m
ok 69 - parse approxidate (2009-12-01)(B[m
*** t0029-core-unsetenvvars.sh ***
ok 47 - --stdin with superfluous arg with --quiet(B[m
ok 48 - format-patch can handle -h(B[m
ok 37 - re-init to update git link(B[m
ok 70 - human date 1251642000(B[m
ok 7 - required filter clean failure(B[m
ok 23 - bare repository: check that --cached honors index(B[m
ok 3 - re-encode to UTF-16 on checkout(B[m
ok 15 - apply patch --cached (autocrlf=input)(B[m
ok 49 - fsck can handle -h(B[m
ok 48 - --stdin with superfluous arg with -v(B[m
ok 71 - human date 1251228000(B[m
ok 4 - re-encode to UTF-16-LE-BOM on checkout(B[m
ok 50 - fsck-objects can handle -h(B[m
ok 38 - re-init to move gitdir(B[m
ok 72 - human date 1249932000(B[m
ok 49 - --stdin with superfluous arg with -v -n(B[m
ok 51 - gc can handle -h(B[m
ok 73 - human date 1238660000(B[m
ok 16 - apply patch --index (autocrlf=input)(B[m
ok 24 - bare repository: test info/attributes(B[m
ok 52 - get-tar-commit-id can handle -h(B[m
ok 5 - check $GIT_DIR/info/attributes support(B[m
ok 50 - --stdin with superfluous arg with -v --non-matching(B[m
ok 74 - human date 1220210400(B[m
[36m1..0 # SKIP skipping Windows-specific tests(B[m
ok 53 - grep can handle -h(B[m
ok 25 - binary macro expanded by -a(B[m
*** t0030-stripspace.sh ***
ok 39 - re-init to move gitdir symlink(B[m
ok 75 - human date 1214160000(B[m
[34mok 40 # skip .git hidden (missing MINGW)(B[m
ok 51 - --stdin with superfluous arg with --verbose(B[m
[34mok 41 # skip bare git dir not hidden (missing MINGW)(B[m
ok 54 - hash-object can handle -h(B[m
ok 26 - query binary macro directly(B[m
ok 15 - GIT_SKIP_TESTS several tests(B[m
ok 17 - apply patch (autocrlf=true)(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
ok 76 - human date 1196472000(B[m
ok 55 - help can handle -h(B[m
ok 52 - --stdin with superfluous arg with --verbose -n(B[m
ok 8 - filtering large input to small output should use little memory(B[m
*** t0040-parse-options.sh ***
ok 77 - human date 621660000(B[m
ok 56 - index-pack can handle -h(B[m
[32m# passed all 77 test(s)(B[m
[36m1..77(B[m
ok 42 - remote init from does not use config from cwd(B[m
*** t0041-usage.sh ***
ok 53 - --stdin with superfluous arg with --verbose --non-matching(B[m
ok 18 - apply patch --cached (autocrlf=true)(B[m
ok 57 - init can handle -h(B[m
ok 58 - init-db can handle -h(B[m
ok 6 - check prohibited UTF-16 BOM(B[m
ok 54 - --stdin -z with superfluous arg(B[m
ok 59 - interpret-trailers can handle -h(B[m
ok 19 - apply patch --index (autocrlf=true)(B[m
ok 60 - log can handle -h(B[m
ok 55 - --stdin -z with superfluous arg with -q(B[m
ok 16 - GIT_SKIP_TESTS sh pattern(B[m
ok 61 - ls-files can handle -h(B[m
ok 1 - long lines without spaces should be unchanged(B[m
ok 7 - check required UTF-16 BOM(B[m
ok 56 - --stdin -z with superfluous arg with --quiet(B[m
ok 9 - filter that does not read is fine(B[m
ok 20 - .gitattributes says two is binary(B[m
ok 1 - test help(B[m
ok 62 - ls-remote can handle -h(B[m
[34mok 10 # skip filter large file (missing EXPENSIVE)(B[m
ok 57 - --stdin -z with superfluous arg with -v(B[m
ok 2 - OPT_BOOL() #1(B[m
ok 21 - .gitattributes says two is input(B[m
ok 63 - ls-tree can handle -h(B[m
ok 2 - lines with spaces at the beginning should be unchanged(B[m
ok 43 - re-init from a linked worktree(B[m
ok 1 - setup (B[m
[34mok 44 # skip core.hidedotfiles = false (missing MINGW)(B[m
ok 3 - OPT_BOOL() #2(B[m
[34mok 45 # skip redirect std handles (missing MINGW)(B[m
ok 64 - mailinfo can handle -h(B[m
ok 58 - --stdin -z with superfluous arg with -v -n(B[m
[32m# passed all 45 test(s)(B[m
[36m1..45(B[m
ok 22 - .gitattributes says two and three are text(B[m
ok 4 - OPT_BOOL() #3(B[m
ok 2 - tag --contains <existent_tag>(B[m
ok 3 - lines with intermediate spaces should be unchanged(B[m
ok 65 - mailsplit can handle -h(B[m
ok 5 - OPT_BOOL() #4(B[m
ok 17 - GIT_SKIP_TESTS entire suite(B[m
ok 59 - --stdin -z with superfluous arg with -v --non-matching(B[m
ok 11 - filter: clean empty file(B[m
ok 66 - merge can handle -h(B[m
ok 6 - OPT_BOOL() #5(B[m
*** t0050-filesystem.sh ***
ok 3 - tag --contains <inexistent_tag>(B[m
ok 7 - OPT_BOOL() is idempotent #1(B[m
ok 67 - merge-base can handle -h(B[m
ok 60 - --stdin -z with superfluous arg with --verbose(B[m
ok 23 - in-tree .gitattributes (1)(B[m
ok 8 - OPT_BOOL() is idempotent #2(B[m
ok 68 - merge-file can handle -h(B[m
ok 4 - tag --no-contains <existent_tag>(B[m
ok 9 - OPT_BOOL() negation #1(B[m
ok 61 - --stdin -z with superfluous arg with --verbose -n(B[m
ok 8 - eol conversion for UTF-16 encoded files on checkout(B[m
ok 69 - merge-index can handle -h(B[m
ok 24 - in-tree .gitattributes (2)(B[m
ok 10 - OPT_BOOL() negation #2(B[m
ok 5 - tag --no-contains <inexistent_tag>(B[m
ok 70 - merge-ours can handle -h(B[m
ok 12 - filter: smudge empty file(B[m
ok 62 - --stdin -z with superfluous arg with --verbose --non-matching(B[m
ok 11 - OPT_BOOL() no negation #1(B[m
ok 6 - tag usage error(B[m
ok 71 - merge-recursive can handle -h(B[m
ok 25 - in-tree .gitattributes (3)(B[m
ok 63 - -z without --stdin(B[m
ok 12 - OPT_BOOL() no negation #2(B[m
ok 72 - merge-recursive-ours can handle -h(B[m
ok 18 - GIT_SKIP_TESTS does not skip unmatched suite(B[m
ok 7 - branch --contains <existent_commit>(B[m
ok 4 - consecutive blank lines should be unified(B[m
ok 13 - OPT_BOOL() positivation(B[m
ok 73 - merge-recursive-theirs can handle -h(B[m
ok 64 - -z without --stdin with -q(B[m
ok 14 - OPT_INT() negative(B[m
ok 8 - branch --contains <inexistent_commit>(B[m
ok 74 - merge-subtree can handle -h(B[m
ok 9 - check prohibited UTF-32 BOM(B[m
ok 1 - detection of case insensitive filesystem during repo init(B[m
ok 26 - in-tree .gitattributes (4)(B[m
ok 15 - OPT_MAGNITUDE() simple(B[m
ok 65 - -z without --stdin with --quiet(B[m
ok 2 - detection of filesystem w/o symlink support during repo init(B[m
ok 75 - merge-tree can handle -h(B[m
ok 16 - OPT_MAGNITUDE() kilo(B[m
ok 13 - disable filter with empty override(B[m
ok 9 - branch --no-contains <existent_commit>(B[m
ok 17 - OPT_MAGNITUDE() mega(B[m
ok 76 - mktag can handle -h(B[m
ok 5 - only consecutive blank lines should be completely removed(B[m
ok 66 - -z without --stdin with -v(B[m
ok 18 - OPT_MAGNITUDE() giga(B[m
ok 10 - branch --no-contains <inexistent_commit>(B[m
ok 77 - mktree can handle -h(B[m
ok 10 - check required UTF-32 BOM(B[m
ok 19 - OPT_MAGNITUDE() 3giga(B[m
ok 67 - -z without --stdin with -v -n(B[m
ok 11 - branch usage error(B[m
ok 78 - multi-pack-index can handle -h(B[m
ok 20 - short options(B[m
ok 68 - -z without --stdin with -v --non-matching(B[m
ok 4 - Racy GIT trial #1 part B(B[m
ok 79 - mv can handle -h(B[m
ok 12 - for-each-ref --contains <existent_object>(B[m
ok 27 - checkout with existing .gitattributes(B[m
ok 21 - long options(B[m
ok 3 - setup case tests(B[m
ok 5 - Racy GIT trial #2 part A(B[m
ok 69 - -z without --stdin with --verbose(B[m
ok 13 - for-each-ref --contains <inexistent_object>(B[m
ok 80 - name-rev can handle -h(B[m
ok 22 - missing required value(B[m
ok 81 - notes can handle -h(B[m
ok 4 - rename (case change)(B[m
ok 70 - -z without --stdin with --verbose -n(B[m
ok 19 - --run basic(B[m
ok 14 - for-each-ref --no-contains <existent_object>(B[m
ok 23 - intermingled arguments(B[m
ok 6 - consecutive blank lines at the beginning should be removed(B[m
ok 82 - pack-objects can handle -h(B[m
ok 71 - -z without --stdin with --verbose --non-matching(B[m
ok 15 - for-each-ref --no-contains <inexistent_object>(B[m
ok 28 - checkout when deleting .gitattributes(B[m
ok 83 - pack-redundant can handle -h(B[m
ok 5 - merge (case change)(B[m
ok 24 - unambiguously abbreviated option(B[m
[34mok 6 # skip add directory (with different case) (missing CASE_INSENSITIVE_FS)(B[m
[34mok 7 # skip add (with different case) (missing CASE_INSENSITIVE_FS)(B[m
ok 29 - invalid .gitattributes (must not crash)(B[m
ok 16 - for-each-ref usage error(B[m
ok 11 - eol conversion for UTF-32 encoded files on checkout(B[m
ok 84 - pack-refs can handle -h(B[m
ok 25 - unambiguously abbreviated option with "="(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 72 - -z without --stdin and superfluous arg(B[m
*** t0051-windows-named-pipe.sh ***
ok 85 - patch-id can handle -h(B[m
ok 26 - ambiguously abbreviated option(B[m
ok 27 - non ambiguous option (after two options it abbreviates)(B[m
ok 86 - pickaxe can handle -h(B[m
ok 73 - -z without --stdin and superfluous arg with -q(B[m
ok 87 - prune can handle -h(B[m
ok 30 - setting up for new autocrlf tests(B[m
ok 12 - check unsupported encodings(B[m
ok 74 - -z without --stdin and superfluous arg with --quiet(B[m
ok 14 - diff does not reuse worktree files that need cleaning(B[m
[34mok 15 # skip required process filter should filter data (missing PERL)(B[m
ok 88 - prune-packed can handle -h(B[m
[34mok 16 # skip required process filter takes precedence (missing PERL)(B[m
[34mok 17 # skip required process filter should be used only for "clean" operation only (missing PERL)(B[m
ok 28 - Alias options do not contribute to abbreviation(B[m
ok 7 - consecutive blank lines at the end should be removed(B[m
[34mok 18 # skip required process filter should process multiple packets (missing PERL)(B[m
ok 31 - report no change after setting autocrlf(B[m
[34mok 19 # skip required process filter with clean error should fail (missing PERL)(B[m
ok 89 - pull can handle -h(B[m
[34mok 20 # skip process filter should restart after unexpected write failure (missing PERL)(B[m
ok 75 - -z without --stdin and superfluous arg with -v(B[m
[34mok 21 # skip process filter should not be restarted if it signals an error (missing PERL)(B[m
[34mok 22 # skip process filter abort stops processing of all further files (missing PERL)(B[m
[34mok 1 # skip o_append write to named pipe (missing MINGW)(B[m
ok 8 - setup unicode normalization tests(B[m
ok 29 - detect possible typos(B[m
[34mok 23 # skip invalid process filter must fail (and not hang!) (missing PERL)(B[m
ok 20 - --run with a range(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
[34mok 24 # skip delayed checkout in process filter (missing PERL)(B[m
ok 90 - push can handle -h(B[m
[34mok 25 # skip missing file in delayed checkout (missing PERL)(B[m
ok 32 - files are clean after checkout(B[m
*** t0055-beyond-symlinks.sh ***
[34mok 26 # skip invalid file in delayed checkout (missing PERL)(B[m
ok 76 - -z without --stdin and superfluous arg with -v -n(B[m
ok 8 - text without newline at end should end with newline(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
ok 33 - LF only file gets CRLF with autocrlf(B[m
ok 30 - detect possible typos(B[m
ok 91 - range-diff can handle -h(B[m
ok 9 - rename (silent unicode normalization)(B[m
ok 34 - Mixed file is still mixed with autocrlf(B[m
*** t0056-git-C.sh ***
ok 31 - keep some options as arguments(B[m
ok 77 - -z without --stdin and superfluous arg with -v --non-matching(B[m
ok 35 - CRLF only file has CRLF with autocrlf(B[m
ok 92 - read-tree can handle -h(B[m
ok 13 - error if encoding round trip is not the same during refresh(B[m
ok 10 - merge (silent unicode normalization)(B[m
ok 32 - OPT_CALLBACK() and OPT_BIT() work(B[m
ok 93 - rebase can handle -h(B[m
[34mok 11 # skip checkout with no pathspec and a case insensitive fs (missing CASE_INSENSITIVE_FS)(B[m
ok 78 - -z without --stdin and superfluous arg with --verbose(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 9 - text plus spaces without newline at end should end with newline(B[m
ok 33 - OPT_CALLBACK() and callback errors work(B[m
ok 94 - rebase--interactive can handle -h(B[m
*** t0060-path-utils.sh ***
ok 79 - -z without --stdin and superfluous arg with --verbose -n(B[m
ok 34 - OPT_BIT() and OPT_SET_INT() work(B[m
ok 95 - receive-pack can handle -h(B[m
ok 36 - New CRLF file gets LF in repo(B[m
[32m# passed all 36 test(s)(B[m
[36m1..36(B[m
ok 35 - OPT_NEGBIT() and OPT_SET_INT() work(B[m
ok 96 - reflog can handle -h(B[m
*** t0061-run-command.sh ***
ok 80 - -z without --stdin and superfluous arg with --verbose --non-matching(B[m
ok 1 - setup(B[m
ok 36 - OPT_BIT() works(B[m
ok 10 - text plus spaces without newline at end should not show spaces(B[m
ok 14 - error if encoding garbage is already in Git(B[m
ok 97 - remote can handle -h(B[m
ok 37 - OPT_NEGBIT() works(B[m
ok 2 - update-index --add beyond symlinks(B[m
ok 98 - remote-ext can handle -h(B[m
ok 81 - needs work tree(B[m
ok 38 - OPT_CMDMODE() works(B[m
ok 99 - remote-fd can handle -h(B[m
ok 1 - "git -C <path>" runs git from the directory <path>(B[m
ok 39 - OPT_CMDMODE() detects incompatibility(B[m
ok 3 - add beyond symlinks(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 82 - needs work tree with -q(B[m
ok 100 - repack can handle -h(B[m
ok 1 - basename(B[m
*** t0062-revision-walking.sh ***
ok 40 - OPT_CMDMODE() detects incompatibility with something else(B[m
ok 11 - text plus spaces without newline should show the correct lines(B[m
ok 2 - "git -C <path>" with an empty <path> is a no-op(B[m
ok 21 - --run with two ranges(B[m
ok 2 - dirname(B[m
ok 41 - OPT_COUNTUP() with PARSE_OPT_NODASH works(B[m
ok 101 - replace can handle -h(B[m
[34mok 1 # skip subprocess inherits only std handles (missing MINGW)(B[m
ok 83 - needs work tree with --quiet(B[m
ok 42 - OPT_NUMBER_CALLBACK() works(B[m
ok 102 - rerere can handle -h(B[m
ok 3 - normalize path:  => (B[m
ok 84 - needs work tree with -v(B[m
ok 2 - start_command reports ENOENT (slash)(B[m
ok 103 - reset can handle -h(B[m
ok 43 - negation of OPT_NONEG flags is not ambiguous(B[m
ok 3 - Multiple -C options: "-C dir1 -C dir2" is equivalent to "-C dir1/dir2"(B[m
ok 4 - normalize path: . => (B[m
ok 12 - text plus spaces at end should not show spaces(B[m
ok 104 - restore can handle -h(B[m
ok 3 - start_command reports ENOENT (no slash)(B[m
ok 85 - needs work tree with -v -n(B[m
ok 44 - --list keeps list of strings(B[m
ok 5 - normalize path: ./ => (B[m
ok 15 - check roundtrip encoding(B[m
ok 105 - rev-list can handle -h(B[m
ok 45 - --no-list resets list(B[m
ok 6 - normalize path: ./. => (B[m
ok 86 - needs work tree with -v --non-matching(B[m
ok 4 - run_command can run a command(B[m
ok 106 - rev-parse can handle -h(B[m
ok 46 - multiple quiet levels(B[m
ok 7 - normalize path: ./.. => ++failed++(B[m
ok 4 - Effect on --git-dir option: "-C c --git-dir=a.git" is equivalent to "--git-dir c/a.git"(B[m
ok 47 - multiple verbose levels(B[m
ok 107 - revert can handle -h(B[m
ok 87 - needs work tree with --verbose(B[m
ok 13 - text plus spaces at end should be cleaned and newline must remain(B[m
ok 48 - --no-quiet sets --quiet to 0(B[m
ok 16 - Commit UTF-8, checkout UTF-8(B[m
ok 1 - setup(B[m
ok 8 - normalize path: ../. => ++failed++(B[m
ok 108 - rm can handle -h(B[m
ok 5 - run_command is restricted to PATH(B[m
ok 5 - Order should not matter: "--git-dir=a.git -C c" is equivalent to "-C c --git-dir=a.git"(B[m
ok 49 - --no-quiet resets multiple -q to 0(B[m
ok 88 - needs work tree with --verbose -n(B[m
ok 2 - revision walking can be done twice(B[m
ok 109 - send-pack can handle -h(B[m
ok 9 - normalize path: ./../.// => ++failed++(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 50 - --no-verbose sets verbose to 0(B[m
ok 22 - --run with a left open range(B[m
ok 14 - spaces with newline at end should be replaced with empty string(B[m
*** t0063-string-list.sh ***
ok 2 - setup master(B[m
ok 110 - shortlog can handle -h(B[m
ok 51 - --no-verbose resets multiple verbose to 0(B[m
ok 6 - run_command can run a script without a #! line(B[m
ok 89 - needs work tree with --verbose --non-matching(B[m
ok 6 - Effect on --work-tree option: "-C c/a.git --work-tree=../a"  is equivalent to "--work-tree=c/a --git-dir=c/a.git"(B[m
ok 10 - normalize path: dir/.. => (B[m
ok 17 - Commit UTF-8, checkout UTF-16LE(B[m
ok 111 - show can handle -h(B[m
ok 52 - GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS works(B[m
ok 11 - normalize path: dir/sub/../.. => (B[m
ok 7 - Order should not matter: "--work-tree=../a -C c/a.git" is equivalent to "-C c/a.git --work-tree=../a"(B[m
ok 90 - non-existent file at top-level not ignored(B[m
ok 112 - show-branch can handle -h(B[m
ok 15 - spaces without newline at end should not show spaces(B[m
ok 7 - run_command does not try to execute a directory(B[m
ok 53 - --end-of-options treats remainder as args(B[m
[32m# passed all 53 test(s)(B[m
[36m1..53(B[m
ok 12 - normalize path: dir/sub/../../.. => ++failed++(B[m
ok 113 - show-index can handle -h(B[m
*** t0064-sha1-array.sh ***
ok 8 - Effect on --git-dir and --work-tree options - "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=c/a.git --work-tree=c/a"(B[m
ok 91 - non-existent file at top-level not ignored with -q(B[m
ok 18 - Commit UTF-8, checkout UTF-16BE(B[m
ok 13 - normalize path: dir => dir(B[m
ok 114 - show-ref can handle -h(B[m
ok 16 - spaces without newline at end should be replaced with empty string(B[m
ok 92 - non-existent file at top-level not ignored with --quiet(B[m
ok 9 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git -C c --work-tree=a"(B[m
ok 115 - sparse-checkout can handle -h(B[m
ok 14 - normalize path: dir// => dir/(B[m
ok 8 - run_command passes over non-executable file(B[m
ok 93 - non-existent file at top-level not ignored with -v(B[m
ok 116 - stage can handle -h(B[m
ok 1 - split foo:bar:baz at :, max -1(B[m
ok 10 - Order should not matter: "-C c --git-dir=a.git --work-tree=a" is equivalent to "--git-dir=a.git --work-tree=a -C c"(B[m
ok 15 - normalize path: ./dir => dir(B[m
ok 19 - Commit UTF-8, checkout UTF-16LE-BOM(B[m
ok 9 - run_command reports EACCES(B[m
ok 94 - non-existent file at top-level not ignored with -v -n(B[m
ok 11 - Relative followed by fullpath: "-C ./here -C /there" is equivalent to "-C /there"(B[m
ok 117 - stash can handle -h(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 16 - normalize path: dir/. => dir/(B[m
ok 2 - split foo:bar:baz at :, max 0(B[m
ok 23 - --run with a right open range(B[m
ok 17 - consecutive text lines should be unchanged(B[m
ok 95 - non-existent file at top-level not ignored with -v --non-matching(B[m
ok 118 - status can handle -h(B[m
*** t0065-strcmp-offset.sh ***
ok 17 - normalize path: dir///./ => dir/(B[m
ok 119 - stripspace can handle -h(B[m
ok 96 - non-existent file at top-level not ignored with --verbose(B[m
ok 18 - strip comments, too(B[m
ok 3 - split foo:bar:baz at :, max 1(B[m
ok 20 - Commit UTF-8, checkout UTF-16BE-BOM(B[m
ok 18 - normalize path: dir//sub/.. => dir/(B[m
ok 1 - ordered enumeration(B[m
ok 120 - submodule--helper can handle -h(B[m
ok 97 - non-existent file at top-level not ignored with --verbose -n(B[m
ok 19 - strip comments with changed comment char(B[m
ok 19 - normalize path: dir/sub/../ => dir/(B[m
ok 121 - switch can handle -h(B[m
ok 4 - split foo:bar:baz at :, max 2(B[m
ok 10 - unreadable directory in PATH(B[m
ok 20 - -c with single line(B[m
ok 98 - non-existent file at top-level not ignored with --verbose --non-matching(B[m
ok 20 - normalize path: dir/sub/../. => dir/(B[m
ok 122 - symbolic-ref can handle -h(B[m
ok 21 - -c with single line followed by empty line(B[m
ok 2 - ordered enumeration with duplicate suppression(B[m
ok 5 - split foo:bar: at :, max -1(B[m
ok 21 - Commit UTF-8, checkout UTF-32LE(B[m
ok 99 - non-existent file at top-level not ignored with --no-index(B[m
ok 11 - run_command runs in parallel with more jobs available than tasks(B[m
ok 123 - tag can handle -h(B[m
ok 21 - normalize path: dir/s1/../s2/ => dir/s2/(B[m
ok 22 - -c with newline only(B[m
ok 124 - unpack-file can handle -h(B[m
ok 1 - strcmp_offset(abc, abc)(B[m
ok 3 - lookup(B[m
ok 6 - split  at :, max -1(B[m
ok 22 - normalize path: d1/s1///s2/..//../s3/ => d1/s3/(B[m
ok 100 - non-existent file at top-level not ignored with --no-index -q(B[m
ok 23 - --comment-lines with single line(B[m
ok 12 - run_command runs in parallel with as many jobs as tasks(B[m
ok 2 - strcmp_offset(abc, def)(B[m
ok 125 - unpack-objects can handle -h(B[m
ok 101 - non-existent file at top-level not ignored with --no-index --quiet(B[m
ok 23 - normalize path: d1/s1//../s2/../../d2 => d2(B[m
ok 24 - -c with changed comment char(B[m
ok 4 - lookup non-existing entry(B[m
ok 3 - strcmp_offset(abc, abz)(B[m
ok 126 - update-index can handle -h(B[m
ok 22 - Commit UTF-8, checkout UTF-32BE(B[m
ok 7 - split : at :, max -1(B[m
ok 24 - --run with basic negation(B[m
ok 13 - run_command runs in parallel with more tasks than jobs available(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 24 - normalize path: d1/.../d2 => d1/.../d2(B[m
ok 102 - non-existent file at top-level not ignored with --no-index -v(B[m
ok 4 - strcmp_offset(abc, abcdef)(B[m
ok 127 - update-ref can handle -h(B[m
*** t0066-dir-iterator.sh ***
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t0067-parse_pathspec_file.sh ***
ok 14 - run_command is asked to abort gracefully(B[m
ok 25 - -c with comment char defined in .git/config(B[m
ok 103 - non-existent file at top-level not ignored with --no-index -v -n(B[m
ok 128 - update-server-info can handle -h(B[m
ok 25 - normalize path: d1/..././../d2 => d1/d2(B[m
ok 5 - lookup with duplicates(B[m
ok 6 - Racy GIT trial #2 part B(B[m
ok 129 - upload-archive can handle -h(B[m
ok 15 - run_command outputs (B[m
ok 104 - non-existent file at top-level not ignored with --no-index -v --non-matching(B[m
ok 26 - -c outside git repository(B[m
ok 26 - normalize path: / => /(B[m
ok 8 - test filter_string_list(B[m
ok 7 - Racy GIT trial #3 part A(B[m
ok 130 - upload-archive--writer can handle -h(B[m
ok 27 - avoid SP-HT sequence in commented line(B[m
ok 105 - non-existent file at top-level not ignored with --no-index --verbose(B[m
ok 6 - lookup non-existing entry with duplicates(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 27 - normalize path: // => /(B[m
*** t0070-fundamental.sh ***
ok 131 - upload-pack can handle -h(B[m
ok 106 - non-existent file at top-level not ignored with --no-index --verbose -n(B[m
ok 7 - lookup with almost duplicate values(B[m
ok 132 - var can handle -h(B[m
ok 28 - normalize path: /// => /(B[m
ok 1 - setup(B[m
ok 107 - non-existent file at top-level not ignored with --no-index --verbose --non-matching(B[m
ok 133 - verify-commit can handle -h(B[m
ok 8 - lookup with single duplicate value(B[m
ok 1 - one item from stdin(B[m
ok 29 - normalize path: /. => /(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 134 - verify-pack can handle -h(B[m
*** t0081-line-buffer.sh ***
ok 2 - dir-iterator should iterate through all files(B[m
ok 2 - one item from file(B[m
ok 3 - commit files empty attr(B[m
ok 108 - non-existent file at top-level ignored(B[m
ok 30 - normalize path: /./ => /(B[m
ok 135 - verify-tag can handle -h(B[m
ok 3 - dir-iterator should list files in the correct order(B[m
ok 25 - --run with two negations(B[m
ok 9 - test remove_duplicates(B[m
ok 3 - NUL delimiters(B[m
ok 136 - version can handle -h(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 31 - normalize path: /./.. => ++failed++(B[m
ok 4 - begin should fail upon inexistent paths(B[m
ok 109 - non-existent file at top-level ignored with -q(B[m
*** t0090-cache-tree.sh ***
ok 1 - character classes (isspace, isalpha etc.)(B[m
ok 4 - LF delimiters(B[m
ok 137 - whatchanged can handle -h(B[m
ok 16 - GIT_TRACE with environment variables(B[m
ok 5 - begin should fail upon non directory paths(B[m
ok 32 - normalize path: /../. => ++failed++(B[m
[34mok 17 # skip verify curlies are quoted properly (missing MINGW)(B[m
ok 110 - non-existent file at top-level ignored with --quiet(B[m
[34mok 18 # skip can spawn .bat with argv[0] containing spaces (missing MINGW)(B[m
ok 2 - mktemp to nonexistent directory prints filename(B[m
ok 5 - no trailing delimiter(B[m
ok 138 - worktree can handle -h(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
*** t0100-previous.sh ***
ok 33 - normalize path: /./../.// => ++failed++(B[m
ok 139 - write-tree can handle -h(B[m
ok 111 - non-existent file at top-level ignored with -v(B[m
ok 6 - CRLF delimiters(B[m
[32m# passed all 139 test(s)(B[m
[36m1..139(B[m
ok 1 - hello world(B[m
*** t0101-at-syntax.sh ***
ok 34 - normalize path: /dir/.. => /(B[m
ok 112 - non-existent file at top-level ignored with -v -n(B[m
ok 7 - quotes(B[m
ok 2 - 0-length read, send along greeting(B[m
ok 6 - advance should not fail on errors by default(B[m
ok 3 - mktemp to unwritable directory prints filename(B[m
ok 35 - normalize path: /dir/sub/../.. => /(B[m
ok 113 - non-existent file at top-level ignored with -v --non-matching(B[m
ok 8 - --pathspec-file-nul takes quotes literally(B[m
ok 3 - read from file descriptor(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 4 - git_mkstemps_mode does not fail if fd 0 is not open(B[m
*** t0110-urlmatch-normalization.sh ***
ok 36 - normalize path: /dir/sub/../../.. => ++failed++(B[m
ok 114 - non-existent file at top-level ignored with --verbose(B[m
ok 4 - skip, copy null byte(B[m
ok 5 - check for a bug in the regex routines(B[m
ok 7 - advance should fail on errors, w/ pedantic flag(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 37 - normalize path: /dir => /dir(B[m
*** t0200-gettext-basic.sh ***
ok 5 - read null byte(B[m
ok 115 - non-existent file at top-level ignored with --verbose -n(B[m
ok 26 - --run a range and negation(B[m
ok 1 - initial commit has cache-tree(B[m
ok 38 - normalize path: /dir// => /dir/(B[m
ok 6 - long reads are truncated(B[m
ok 116 - non-existent file at top-level ignored with --verbose --non-matching(B[m
ok 8 - setup dirs with symlinks(B[m
ok 39 - normalize path: /./dir => /dir(B[m
ok 7 - long copies are truncated(B[m
ok 8 - long binary reads are truncated(B[m
ok 40 - normalize path: /dir/. => /dir/(B[m
ok 9 - dir-iterator should not follow symlinks by default(B[m
ok 117 - non-existent file at top-level ignored with --no-index(B[m
ok 1 - branch -d @{-1}(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 2 - read-tree HEAD establishes cache-tree(B[m
*** t0201-gettext-fallbacks.sh ***
ok 1 - setup(B[m
ok 41 - normalize path: /dir///./ => /dir/(B[m
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)(B[m
ok 10 - dir-iterator should follow symlinks w/ follow flag(B[m
ok 118 - non-existent file at top-level ignored with --no-index -q(B[m
ok 2 - sanity: $TEXTDOMAIN is git(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 2 - @{0} shows current(B[m
ok 3 - xgettext sanity: Perl _() strings are not extracted(B[m
ok 42 - normalize path: /dir//sub/.. => /dir/(B[m
ok 3 - git-add invalidates cache-tree(B[m
*** t0202-gettext-perl.sh ***
ok 3 - @{1} shows old(B[m
ok 119 - non-existent file at top-level ignored with --no-index --quiet(B[m
ok 2 - branch -d @{-12} when there is not enough switches yet(B[m
ok 4 - xgettext sanity: Comment extraction with --add-comments(B[m
ok 43 - normalize path: /dir/sub/../ => /dir/(B[m
ok 4 - @{now} shows current(B[m
ok 5 - xgettext sanity: Comment extraction with --add-comments stops at statements(B[m
[34mok 6 # skip sanity: $TEXTDOMAINDIR exists without NO_GETTEXT=YesPlease (missing GETTEXT)(B[m
ok 120 - non-existent file at top-level ignored with --no-index -v(B[m
[34mok 7 # skip sanity: Icelandic locale was compiled (missing GETTEXT)(B[m
[34mok 8 # skip sanity: gettext("") metadata is OK (missing GETTEXT_LOCALE)(B[m
ok 5 - @{2001-09-17} (before the first commit) shows old(B[m
[34mok 9 # skip sanity: gettext(unknown) is passed through (missing GETTEXT_LOCALE)(B[m
ok 4 - git-add in subdir invalidates cache-tree(B[m
ok 44 - normalize path: //dir/sub/../. => /dir/(B[m
[34mok 10 # skip xgettext: C extraction of _() and N_() strings (missing GETTEXT_LOCALE)(B[m
[34mok 11 # skip xgettext: C extraction with %s (missing GETTEXT_LOCALE)(B[m
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME is set (to fallthrough)(B[m
[34mok 12 # skip xgettext: Shell extraction (missing GETTEXT_LOCALE)(B[m
[34mok 13 # skip xgettext: Shell extraction with $variable (missing GETTEXT_LOCALE)(B[m
ok 27 - --run range negation(B[m
ok 121 - non-existent file at top-level ignored with --no-index -v -n(B[m
ok 6 - silly approxidates work(B[m
[34mok 14 # skip xgettext: Perl extraction (missing GETTEXT_LOCALE)(B[m
ok 2 - sanity: $GIT_INTERNAL_GETTEXT_TEST_FALLBACKS is set(B[m
[34mok 15 # skip xgettext: Perl extraction with %s (missing GETTEXT_LOCALE)(B[m
[34mok 16 # skip sanity: Some gettext("") data for real locale (missing GETTEXT_LOCALE)(B[m
ok 45 - normalize path: /dir/s1/../s2/ => /dir/s2/(B[m
ok 7 - notice misspelled upstream(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 1 - url scheme(B[m
*** t0203-gettext-setlocale-sanity.sh ***
ok 122 - non-existent file at top-level ignored with --no-index -v --non-matching(B[m
ok 3 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is fallthrough(B[m
ok 8 - complain about total nonsense(B[m
[36m1..0 # SKIP skipping perl interface tests, perl not available(B[m
ok 46 - normalize path: /d1/s1///s2/..//../s3/ => /d1/s3/(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
*** t0204-gettext-reencode-sanity.sh ***
ok 4 - gettext: our gettext() fallback has pass-through semantics(B[m
ok 123 - non-existent file at top-level ignored with --no-index --verbose(B[m
*** t0205-gettext-poison.sh ***
ok 47 - normalize path: /d1/s1//../s2/../../d2 => /d2(B[m
ok 4 - commit files attr=auto(B[m
ok 124 - non-existent file at top-level ignored with --no-index --verbose -n(B[m
ok 48 - normalize path: /d1/.../d2 => /d1/.../d2(B[m
ok 125 - non-existent file at top-level ignored with --no-index --verbose --non-matching(B[m
ok 49 - normalize path: /d1/..././../d2 => /d1/d2(B[m
ok 5 - eval_gettext: our eval_gettext() fallback has pass-through semantics(B[m
ok 50 - longest ancestor: / / => -1(B[m
ok 3 - merge @{-1}(B[m
ok 126 - existing untracked file at top-level not ignored(B[m
[34mok 1 # skip gettext: Emitting UTF-8 from our UTF-8 *.mo files / Icelandic (missing GETTEXT_LOCALE)(B[m
ok 5 - git-add in subdir does not invalidate sibling cache-tree(B[m
ok 51 - longest ancestor: /foo / => 0(B[m
[34mok 2 # skip gettext: Emitting UTF-8 from our UTF-8 *.mo files / Runes (missing GETTEXT_LOCALE)(B[m
[34mok 3 # skip gettext: Emitting ISO-8859-1 from our UTF-8 *.mo files / Icelandic (missing GETTEXT_ISO_LOCALE)(B[m
ok 6 - eval_gettext: our eval_gettext() fallback can interpolate variables(B[m
[34mok 4 # skip gettext: impossible ISO-8859-1 output (missing GETTEXT_ISO_LOCALE)(B[m
ok 1 - sanity: $GIT_INTERNAL_GETTEXT_SH_SCHEME" is poison(B[m
[34mok 5 # skip gettext: Fetching a UTF-8 msgid -> UTF-8 (missing GETTEXT_LOCALE)(B[m
ok 52 - longest ancestor: /foo /fo => -1(B[m
[34mok 6 # skip gettext: Fetching a UTF-8 msgid -> ISO-8859-1 (missing GETTEXT_ISO_LOCALE)(B[m
ok 127 - existing untracked file at top-level not ignored with -q(B[m
[34mok 7 # skip gettext.c: git init UTF-8 -> UTF-8 (missing GETTEXT_LOCALE)(B[m
ok 2 - gettext: our gettext() fallback has poison semantics(B[m
[34mok 8 # skip gettext.c: git init UTF-8 -> ISO-8859-1 (missing GETTEXT_ISO_LOCALE)(B[m
ok 1 - git show a ISO-8859-1 commit under C locale(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 53 - longest ancestor: /foo /foo => -1(B[m
[34mok 2 # skip git show a ISO-8859-1 commit under a UTF-8 locale (missing GETTEXT_LOCALE)(B[m
ok 3 - eval_gettext: our eval_gettext() fallback has poison semantics(B[m
*** t0210-trace2-normal.sh ***
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 128 - existing untracked file at top-level not ignored with --quiet(B[m
ok 7 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces(B[m
ok 6 - update-index invalidates cache-tree(B[m
ok 54 - longest ancestor: /foo /bar => -1(B[m
*** t0211-trace2-perf.sh ***
ok 4 - gettext: invalid GIT_TEST_GETTEXT_POISON value doesn't infinitely loop(B[m
ok 55 - longest ancestor: /foo /foo/bar => -1(B[m
ok 4 - merge @{-1}~1(B[m
ok 129 - existing untracked file at top-level not ignored with -v(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t0212-trace2-event.sh ***
ok 56 - longest ancestor: /foo /foo:/bar => -1(B[m
ok 8 - eval_gettext: our eval_gettext() fallback can interpolate variables with spaces and quotes(B[m
ok 28 - --run include, exclude and include(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 130 - existing untracked file at top-level not ignored with -v -n(B[m
*** t0300-credentials.sh ***
ok 57 - longest ancestor: /foo /:/foo:/bar => 0(B[m
ok 7 - write-tree establishes cache-tree(B[m
ok 58 - longest ancestor: /foo /foo:/:/bar => 0(B[m
ok 131 - existing untracked file at top-level not ignored with -v --non-matching(B[m
ok 2 - url authority(B[m
ok 59 - longest ancestor: /foo /:/bar:/foo => 0(B[m
ok 132 - existing untracked file at top-level not ignored with --verbose(B[m
ok 5 - merge @{-100} before checking out that many branches yet(B[m
ok 60 - longest ancestor: /foo/bar / => 0(B[m
ok 8 - test-tool scrap-cache-tree works(B[m
ok 133 - existing untracked file at top-level not ignored with --verbose -n(B[m
ok 61 - longest ancestor: /foo/bar /fo => -1(B[m
ok 1 - normal stream, return code 0(B[m
ok 62 - longest ancestor: /foo/bar /foo => 4(B[m
ok 1 - perf stream, return code 0(B[m
ok 6 - log -g @{-1}(B[m
ok 134 - existing untracked file at top-level not ignored with --verbose --non-matching(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 63 - longest ancestor: /foo/bar /foo/ba => -1(B[m
*** t0301-credential-cache.sh ***
ok 2 - normal stream, return code 1(B[m
ok 64 - longest ancestor: /foo/bar /:/fo => 0(B[m
ok 2 - perf stream, return code 1(B[m
ok 135 - existing untracked file at top-level not ignored with --no-index(B[m
ok 1 - setup helper scripts(B[m
ok 65 - longest ancestor: /foo/bar /foo:/foo/ba => 4(B[m
ok 9 - second commit has cache-tree(B[m
[34mok 10 # skip commit --interactive gives cache-tree on partial commit (missing PERL)(B[m
[34mok 11 # skip commit -p with shrinking cache-tree (missing PERL)(B[m
ok 66 - longest ancestor: /foo/bar /bar => -1(B[m
ok 3 - perf stream, error event(B[m
ok 136 - existing untracked file at top-level not ignored with --no-index -q(B[m
ok 3 - automatic filename(B[m
ok 67 - longest ancestor: /foo/bar /fo => -1(B[m
ok 1 - event stream, error event(B[m
ok 137 - existing untracked file at top-level not ignored with --no-index --quiet(B[m
ok 68 - longest ancestor: /foo/bar /foo:/bar => 4(B[m
ok 2 - credential_fill invokes helper(B[m
ok 4 - normal stream, exit code 0(B[m
ok 69 - longest ancestor: /foo/bar /:/foo:/bar => 4(B[m
ok 4 - perf stream, child processes(B[m
ok 138 - existing untracked file at top-level not ignored with --no-index -v(B[m
ok 70 - longest ancestor: /foo/bar /foo:/:/bar => 4(B[m
ok 3 - url port checks(B[m
ok 5 - normal stream, exit code 1(B[m
ok 139 - existing untracked file at top-level not ignored with --no-index -v -n(B[m
ok 71 - longest ancestor: /foo/bar /:/bar:/fo => 0(B[m
ok 29 - --run include, exclude and include, comma separated(B[m
ok 2 - event stream, return code 0(B[m
ok 12 - commit in child dir has cache-tree(B[m
ok 3 - credential_fill invokes multiple helpers(B[m
ok 72 - longest ancestor: /foo/bar /:/bar => 0(B[m
ok 140 - existing untracked file at top-level not ignored with --no-index -v --non-matching(B[m
ok 6 - normal stream, error event(B[m
ok 5 - commit files attr=text(B[m
ok 5 - using global config, perf stream, return code 0(B[m
ok 73 - longest ancestor: /foo/bar /foo => 4(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 8 - Racy GIT trial #3 part B(B[m
*** t0302-credential-store.sh ***
ok 141 - existing untracked file at top-level not ignored with --no-index --verbose(B[m
ok 74 - longest ancestor: /foo/bar /foo:/bar => 4(B[m
ok 1 - helper (cache) has no existing data(B[m
ok 4 - credential_fill stops when we get a full response(B[m
ok 75 - longest ancestor: /foo/bar /bar => -1(B[m
ok 9 - Racy GIT trial #4 part A(B[m
ok 142 - existing untracked file at top-level not ignored with --no-index --verbose -n(B[m
ok 4 - url port normalization(B[m
ok 76 - strip_path_suffix(B[m
ok 3 - event stream, list config(B[m
ok 7 - using global config, normal stream, return code 0(B[m
ok 2 - helper (cache) stores password(B[m
ok 143 - existing untracked file at top-level not ignored with --no-index --verbose --non-matching(B[m
ok 13 - reset --hard gives cache-tree(B[m
ok 77 - absolute path rejects the empty string(B[m
[34mok 78 # skip <drive-letter>:\\abc is an absolute path (missing MINGW)(B[m
ok 5 - credential_fill continues through partial response(B[m
ok 79 - real path rejects the empty string(B[m
ok 3 - helper (cache) can retrieve password(B[m
ok 144 - existing tracked file at top-level not ignored(B[m
ok 5 - url general escapes(B[m
ok 4 - basic trace2_data(B[m
ok 6 - credential_fill passes along metadata(B[m
ok 145 - existing tracked file at top-level not ignored with -q(B[m
ok 80 - real path works on absolute paths 1(B[m
ok 146 - existing tracked file at top-level not ignored with --quiet(B[m
ok 8 - using global config with include(B[m
ok 4 - helper (cache) requires matching protocol(B[m
ok 81 - real path works on absolute paths 2(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 14 - reset --hard without index gives cache-tree(B[m
ok 30 - --run exclude and include(B[m
*** t0303-credential-external.sh ***
ok 147 - existing tracked file at top-level not ignored with -v(B[m
ok 7 - credential_approve calls all helpers(B[m
ok 1 - helper (store) has no existing data(B[m
ok 148 - existing tracked file at top-level not ignored with -v -n(B[m
ok 5 - using global config, event stream, error event(B[m
ok 5 - helper (cache) requires matching host(B[m
ok 8 - do not bother storing password-less credential(B[m
ok 82 - real path removes extra leading slashes(B[m
ok 149 - existing tracked file at top-level not ignored with -v --non-matching(B[m
ok 2 - helper (store) stores password(B[m
ok 15 - checkout gives cache-tree(B[m
ok 83 - real path removes other extra slashes(B[m
ok 150 - existing tracked file at top-level not ignored with --verbose(B[m
ok 6 - url high-bit escapes(B[m
ok 6 - discard traces when there are too many files(B[m
ok 6 - helper (cache) requires matching username(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 3 - helper (store) can retrieve password(B[m
*** t0410-partial-clone.sh ***
ok 151 - existing tracked file at top-level not ignored with --verbose -n(B[m
ok 9 - credential_reject calls all helpers(B[m
ok 7 - url utf-8 escapes(B[m
[36m1..0 # SKIP used to test external credential helpers(B[m
*** t0500-progress-display.sh ***
ok 8 - url username/password escapes(B[m
ok 152 - existing tracked file at top-level not ignored with --verbose --non-matching(B[m
ok 16 - checkout -b gives cache-tree(B[m
ok 10 - usernames can be preserved(B[m
ok 4 - helper (store) requires matching protocol(B[m
ok 9 - url normalized lengths(B[m
ok 84 - real path works on symlinks(B[m
ok 153 - existing tracked file at top-level shown as ignored with --no-index(B[m
ok 85 - prefix_path works with absolute paths to work tree symlinks(B[m
ok 7 - helper (cache) requires matching path(B[m
ok 11 - usernames can be overridden(B[m
ok 31 - --run empty selectors(B[m
ok 154 - existing tracked file at top-level shown as ignored with --no-index -q(B[m
ok 86 - prefix_path works with only absolute path to work tree(B[m
ok 17 - checkout -B gives cache-tree(B[m
ok 12 - do not bother completing already-full credential(B[m
ok 5 - helper (store) requires matching host(B[m
ok 87 - prefix_path rejects absolute path to dir with same beginning as work tree(B[m
ok 155 - existing tracked file at top-level shown as ignored with --no-index --quiet(B[m
ok 13 - empty helper list falls back to internal getpass(B[m
ok 88 - prefix_path works with absolute path to a symlink to work tree having  same beginning as work tree(B[m
ok 156 - existing tracked file at top-level shown as ignored with --no-index -v(B[m
ok 6 - helper (store) requires matching username(B[m
ok 1 - simple progress display(B[m
ok 1 - extensions.partialclone without filter(B[m
ok 6 - commit files attr=-text(B[m
ok 8 - helper (cache) can forget host(B[m
ok 89 - relative path: /foo/a/b/c/ /foo/a/b/ => c/(B[m
ok 157 - existing tracked file at top-level shown as ignored with --no-index -v -n(B[m
ok 14 - internal getpass does not ask for known username(B[m
ok 2 - progress display with total(B[m
ok 90 - relative path: /foo/a/b/c/ /foo/a/b => c/(B[m
ok 32 - --run invalid range start(B[m
ok 10 - url . and .. segments(B[m
ok 158 - existing tracked file at top-level shown as ignored with --no-index -v --non-matching(B[m
ok 3 - progress display breaks long lines #1(B[m
ok 91 - relative path: /foo/a//b//c/ ///foo/a/b// => c/(B[m
ok 15 - respect configured credentials(B[m
ok 159 - existing tracked file at top-level shown as ignored with --no-index --verbose(B[m
ok 92 - relative path: /foo/a/b /foo/a/b => ./(B[m
ok 7 - helper (store) requires matching path(B[m
ok 4 - progress display breaks long lines #2(B[m
ok 11 - url equivalents(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 160 - existing tracked file at top-level shown as ignored with --no-index --verbose -n(B[m
*** t1000-read-tree-m-3way.sh ***
ok 93 - relative path: /foo/a/b/ /foo/a/b => ./(B[m
ok 9 - helper (cache) can store multiple users(B[m
ok 16 - match configured credential(B[m
ok 5 - progress display breaks long lines #3 - even the first is too long(B[m
ok 161 - existing tracked file at top-level shown as ignored with --no-index --verbose --non-matching(B[m
ok 94 - relative path: /foo/a /foo/a/b => ../(B[m
ok 33 - --run invalid range end(B[m
ok 6 - progress display breaks long lines #4 - title line matches terminal width(B[m
ok 95 - relative path: / /foo/a/b/ => ../../../(B[m
ok 162 - existing untracked file at top-level ignored(B[m
ok 8 - helper (store) can forget host(B[m
ok 2 - missing reflog object, but promised by a commit, passes fsck(B[m
ok 17 - do not match configured credential(B[m
ok 96 - relative path: /foo/a/c /foo/a/b/ => ../c(B[m
ok 7 - progress shortens - crazy caller(B[m
ok 10 - helper (cache) can forget user(B[m
ok 163 - existing untracked file at top-level ignored with -q(B[m
ok 97 - relative path: /foo/a/c /foo/a/b => ../c(B[m
ok 8 - progress display with throughput(B[m
ok 11 - helper (cache) remembers other user(B[m
ok 164 - existing untracked file at top-level ignored with --quiet(B[m
ok 1 - adding test file NN and Z/NN(B[m
ok 98 - relative path: /foo/x/y /foo/a/b/ => ../../x/y(B[m
ok 18 - merge --ff-only maintains cache-tree(B[m
ok 34 - --run invalid selector(B[m
ok 9 - progress display with throughput and total(B[m
ok 35 - test runs if prerequisite is satisfied(B[m
ok 165 - existing untracked file at top-level ignored with -v(B[m
ok 2 - adding test file ND and Z/ND(B[m
[34mok 36 # skip unmet prerequisite causes test to be skipped (missing DONTHAVEIT)(B[m
ok 99 - relative path: /foo/a/b <empty> => /foo/a/b(B[m
ok 18 - match multiple configured helpers(B[m
ok 37 - test runs if prerequisites are satisfied(B[m
[34mok 38 # skip unmet prerequisites causes test to be skipped (missing DONTHAVEIT of HAVEIT,DONTHAVEIT)(B[m
ok 10 - cover up after throughput shortens(B[m
[34mok 39 # skip unmet prerequisites causes test to be skipped (missing DONTHAVEIT of DONTHAVEIT,HAVEIT)(B[m
ok 166 - existing untracked file at top-level ignored with -v -n(B[m
ok 3 - adding test file NM and Z/NM(B[m
ok 9 - helper (store) can store multiple users(B[m
ok 100 - relative path: /foo/a/b <null> => /foo/a/b(B[m
ok 12 - helper (cache) can store empty username(B[m
ok 40 - test runs if lazy prereq is satisfied(B[m
[34mok 41 # skip missing lazy prereqs skip tests (missing !LAZY_TRUE)(B[m
ok 11 - cover up after throughput shortens a lot(B[m
ok 101 - relative path: foo/a/b/c/ foo/a/b/ => c/(B[m
ok 13 - socket defaults to ~/.cache/git/credential/socket(B[m
ok 4 - adding test file DN and Z/DN(B[m
ok 167 - existing untracked file at top-level ignored with -v --non-matching(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 42 - negative lazy prereqs checked(B[m
*** t1001-read-tree-m-2way.sh ***
[34mok 43 # skip missing negative lazy prereqs will skip (missing LAZY_FALSE)(B[m
ok 102 - relative path: foo/a/b/c/ foo/a/b => c/(B[m
ok 44 - tests clean up after themselves(B[m
ok 5 - adding test file DD and Z/DD(B[m
ok 168 - existing untracked file at top-level ignored with --verbose(B[m
ok 19 - match multiple configured helpers with URLs(B[m
ok 3 - missing reflog object, but promised by a tag, passes fsck(B[m
ok 10 - helper (store) can forget user(B[m
ok 103 - relative path: foo/a/b//c foo/a//b => c(B[m
ok 14 - helper (cache) has no existing data(B[m
ok 6 - adding test file DM and Z/DM(B[m
ok 169 - existing untracked file at top-level ignored with --verbose -n(B[m
ok 104 - relative path: foo/a/b/ foo/a/b/ => ./(B[m
ok 7 - adding test file MN and Z/MN(B[m
ok 11 - helper (store) remembers other user(B[m
ok 20 - match percent-encoded values(B[m
ok 170 - existing untracked file at top-level ignored with --verbose --non-matching(B[m
ok 15 - helper (cache) stores password(B[m
ok 105 - relative path: foo/a/b/ foo/a/b => ./(B[m
ok 8 - adding test file MD and Z/MD(B[m
ok 7 - commit files attr=lf(B[m
ok 106 - relative path: foo/a foo/a/b => ../(B[m
ok 171 - existing untracked file at top-level ignored with --no-index(B[m
ok 16 - helper (cache) can retrieve password(B[m
ok 9 - adding test file MM and Z/MM(B[m
ok 21 - pull username from config(B[m
ok 12 - helper (store) can store empty username(B[m
ok 107 - relative path: foo/x/y foo/a/b => ../../x/y(B[m
ok 10 - adding test file SS(B[m
ok 13 - when xdg file does not exist, xdg file not created(B[m
ok 172 - existing untracked file at top-level ignored with --no-index -q(B[m
ok 45 - tests clean up even on failures(B[m
ok 14 - setup xdg file(B[m
ok 108 - relative path: foo/a/c foo/a/b => ../c(B[m
ok 11 - adding test file TT(B[m
ok 17 - helper (cache) requires matching protocol(B[m
ok 173 - existing untracked file at top-level ignored with --no-index --quiet(B[m
ok 4 - missing reflog object alone fails fsck, even with extension set(B[m
ok 12 - prepare initial tree(B[m
ok 109 - relative path: foo/a/b /foo/x/y => foo/a/b(B[m
ok 1 - setup(B[m
ok 22 - honors username from URL over helper (URL)(B[m
ok 174 - existing untracked file at top-level ignored with --no-index -v(B[m
ok 13 - change in branch A (removal)(B[m
ok 15 - helper (store) has no existing data(B[m
ok 110 - relative path: /foo/a/b foo/x/y => /foo/a/b(B[m
ok 14 - change in branch A (modification)(B[m
[34mok 111 # skip relative path: d:/a/b D:/a/c => ../b (missing MINGW)(B[m
ok 175 - existing untracked file at top-level ignored with --no-index -v -n(B[m
ok 19 - merge maintains cache-tree(B[m
ok 18 - helper (cache) requires matching host(B[m
[34mok 112 # skip relative path: C:/a/b D:/a/c => C:/a/b (missing MINGW)(B[m
ok 15 - change in branch A (modification)(B[m
ok 16 - helper (store) stores password(B[m
ok 2 - 1, 2, 3 - no carry forward(B[m
ok 46 - test_atexit is run(B[m
ok 176 - existing untracked file at top-level ignored with --no-index -v --non-matching(B[m
ok 16 - change in branch A (modification)(B[m
ok 113 - relative path: foo/a/b <empty> => foo/a/b(B[m
ok 10 - Racy GIT trial #4 part B(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 23 - honors username from URL over helper (components)(B[m
ok 19 - helper (cache) requires matching username(B[m
ok 17 - change in branch A (modification)(B[m
*** t1002-read-tree-m-u-2way.sh ***
ok 17 - helper (store) can retrieve password(B[m
ok 177 - existing untracked file at top-level ignored with --no-index --verbose(B[m
ok 114 - relative path: foo/a/b <null> => foo/a/b(B[m
ok 18 - change in branch A (modification)(B[m
ok 19 - change in branch A (modification)(B[m
ok 115 - relative path: <empty> /foo/a/b => ./(B[m
ok 178 - existing untracked file at top-level ignored with --no-index --verbose -n(B[m
ok 20 - change in branch A (addition)(B[m
ok 116 - relative path: <empty> <empty> => ./(B[m
ok 18 - helper (store) requires matching protocol(B[m
ok 179 - existing untracked file at top-level ignored with --no-index --verbose --non-matching(B[m
ok 21 - change in branch A (addition)(B[m
ok 5 - missing ref object, but promised, passes fsck(B[m
ok 22 - change in branch A (addition)(B[m
ok 117 - relative path: <empty> <null> => ./(B[m
ok 24 - last matching username wins(B[m
ok 3 - 4 - carry forward local addition.(B[m
ok 20 - helper (cache) requires matching path(B[m
ok 180 - mix of file types at top-level(B[m
ok 23 - change in branch A (addition)(B[m
ok 20 - partial commit gives cache-tree(B[m
ok 118 - relative path: <null> <empty> => ./(B[m
ok 19 - helper (store) requires matching host(B[m
ok 47 - test_oid setup(B[m
ok 24 - change in branch A (addition)(B[m
ok 48 - test_oid provides sane info by default(B[m
ok 181 - mix of file types at top-level with -v(B[m
ok 119 - relative path: <null> <null> => ./(B[m
ok 21 - no phantom error when switching trees(B[m
ok 49 - test_oid can look up data for SHA-1(B[m
ok 25 - change in branch A (edit)(B[m
ok 20 - helper (store) requires matching username(B[m
ok 120 - relative path: <null> /foo/a/b => ./(B[m
ok 182 - mix of file types at top-level with -v -n(B[m
ok 50 - test_oid can look up data for SHA-256(B[m
ok 26 - change in branch A (change file to directory)(B[m
ok 21 - helper (cache) can forget host(B[m
ok 25 - http paths can be part of context(B[m
ok 121 - git-path A=B info/grafts => .git/info/grafts(B[m
ok 1 - setup(B[m
ok 183 - mix of file types at top-level with -v --non-matching(B[m
ok 27 - recording branch A tree(B[m
ok 122 - git-path GIT_GRAFT_FILE=foo info/grafts => foo(B[m
ok 4 - 5 - carry forward local addition.(B[m
ok 22 - switching trees does not invalidate shared index(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 123 - git-path GIT_GRAFT_FILE=foo info/////grafts => foo(B[m
ok 184 - mix of file types at top-level with --verbose(B[m
ok 28 - reading original tree and checking out(B[m
*** t1003-read-tree-prefix.sh ***
ok 26 - context uses urlmatch(B[m
ok 124 - git-path GIT_INDEX_FILE=foo index => foo(B[m
ok 185 - mix of file types at top-level with --verbose -n(B[m
ok 29 - change in branch B (removal)(B[m
ok 8 - commit files attr=crlf(B[m
ok 125 - git-path GIT_INDEX_FILE=foo index/foo => .git/index/foo(B[m
ok 21 - helper (store) requires matching path(B[m
ok 51 - test_bool_env(B[m
ok 30 - change in branch B (modification)(B[m
ok 186 - mix of file types at top-level with --verbose --non-matching(B[m
ok 27 - helpers can abort the process(B[m
ok 126 - git-path GIT_INDEX_FILE=foo index2 => .git/index2(B[m
ok 31 - change in branch B (modification)(B[m
ok 127 - setup fake objects directory foo(B[m
ok 22 - helper (cache) can store multiple users(B[m
ok 5 - 6 - local addition already has the same.(B[m
ok 32 - change in branch B (modification)(B[m
ok 128 - git-path GIT_OBJECT_DIRECTORY=foo objects => foo(B[m
ok 187 - mix of file types at top-level with --no-index(B[m
ok 33 - change in branch B (modification)(B[m
ok 129 - git-path GIT_OBJECT_DIRECTORY=foo objects/foo => foo/foo(B[m
ok 9 - commit file with mixed EOL onto LF crlf=false attr=(B[m
ok 34 - change in branch B (modification)(B[m
ok 1 - setup(B[m
ok 28 - empty helper spec resets helper list(B[m
ok 22 - helper (store) can forget host(B[m
ok 188 - mix of file types at top-level with --no-index -v(B[m
ok 130 - git-path GIT_OBJECT_DIRECTORY=foo objects2 => .git/objects2(B[m
ok 2 - 1, 2, 3 - no carry forward(B[m
ok 10 - commit file with mixed EOL onto CLRF attr= aeol= crlf=false(B[m
ok 35 - change in branch B (modification)(B[m
ok 131 - setup common repository(B[m
ok 11 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=false(B[m
ok 2 - read-tree --prefix(B[m
ok 23 - helper (cache) can forget user(B[m
ok 29 - url parser rejects embedded newlines(B[m
ok 189 - mix of file types at top-level with --no-index -v -n(B[m
ok 36 - change in branch B (addition)(B[m
ok 52 - git update-index without --add should fail adding(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 132 - git-path GIT_COMMON_DIR=bar index => .git/index(B[m
ok 12 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=false (B[m
*** t1004-read-tree-m-u-wf.sh ***
ok 53 - git update-index with --add should succeed(B[m
ok 37 - change in branch B (addition)(B[m
ok 6 - 7 - local addition already has the same.(B[m
ok 190 - mix of file types at top-level with --no-index -v --non-matching(B[m
ok 133 - git-path GIT_COMMON_DIR=bar index.lock => .git/index.lock(B[m
ok 13 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=false(B[m
ok 24 - helper (cache) remembers other user(B[m
ok 54 - writing tree out with git write-tree(B[m
ok 38 - change in branch B (addition)(B[m
ok 30 - host-less URLs are parsed as empty host(B[m
ok 55 - validate object ID of a known tree(B[m
ok 134 - git-path GIT_COMMON_DIR=bar HEAD => .git/HEAD(B[m
ok 39 - change in branch B (addition)(B[m
ok 191 - mix of file types at top-level with --no-index --verbose(B[m
ok 31 - credential system refuses to work with missing host(B[m
ok 56 - git update-index without --remove should fail removing(B[m
ok 135 - git-path GIT_COMMON_DIR=bar logs/HEAD => .git/logs/HEAD(B[m
ok 40 - change in branch B (addition and modification)(B[m
ok 57 - git update-index with --remove should be able to remove(B[m
ok 192 - mix of file types at top-level with --no-index --verbose -n(B[m
ok 136 - git-path GIT_COMMON_DIR=bar logs/HEAD.lock => .git/logs/HEAD.lock(B[m
ok 32 - credential system refuses to work with missing protocol(B[m
ok 23 - helper (store) can store multiple users(B[m
[32m# passed all 32 test(s)(B[m
[36m1..32(B[m
ok 25 - helper (cache) can store empty username(B[m
ok 7 - 8 - conflicting addition.(B[m
ok 58 - git write-tree should be able to write an empty tree(B[m
*** t1005-read-tree-reset.sh ***
ok 137 - git-path GIT_COMMON_DIR=bar logs/refs/bisect/foo => .git/logs/refs/bisect/foo(B[m
ok 59 - validate object ID of a known tree(B[m
ok 41 - change in branch B (modification)(B[m
ok 14 - commit file with mixed EOL onto LF crlf=true attr=(B[m
ok 193 - mix of file types at top-level with --no-index --verbose --non-matching(B[m
ok 6 - missing object, but promised, passes fsck(B[m
ok 26 - use custom XDG_CACHE_HOME if set and default sockets are not created(B[m
ok 42 - change in branch B (addition of a file to conflict with directory)(B[m
ok 15 - commit file with mixed EOL onto CLRF attr= aeol= crlf=true(B[m
ok 138 - git-path GIT_COMMON_DIR=bar logs/refs => bar/logs/refs(B[m
ok 43 - recording branch B tree(B[m
ok 16 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=true(B[m
ok 194 - non-existent file in subdir a/ not ignored(B[m
ok 139 - git-path GIT_COMMON_DIR=bar logs/refs/ => bar/logs/refs/(B[m
ok 24 - helper (store) can forget user(B[m
ok 17 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=true (B[m
ok 3 - 4 - carry forward local addition.(B[m
ok 8 - 9 - conflicting addition.(B[m
ok 140 - git-path GIT_COMMON_DIR=bar logs/refs/bisec/foo => bar/logs/refs/bisec/foo(B[m
ok 27 - credential-cache --socket option overrides default location(B[m
ok 195 - non-existent file in subdir a/ not ignored with -q(B[m
ok 18 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=true(B[m
ok 60 - adding various types of objects with git update-index --add(B[m
ok 141 - git-path GIT_COMMON_DIR=bar logs/refs/bisec => bar/logs/refs/bisec(B[m
ok 25 - helper (store) remembers other user(B[m
ok 1 - two-way setup(B[m
ok 196 - non-existent file in subdir a/ not ignored with --quiet(B[m
ok 142 - git-path GIT_COMMON_DIR=bar logs/refs/bisectfoo => bar/logs/refs/bisectfoo(B[m
ok 61 - showing stage with git ls-files --stage(B[m
ok 197 - non-existent file in subdir a/ not ignored with -v(B[m
ok 44 - keep contents of 3 trees for easy access(B[m
ok 2 - two-way not clobbering(B[m
ok 143 - git-path GIT_COMMON_DIR=bar objects => bar/objects(B[m
ok 62 - validate git ls-files output for a known tree(B[m
ok 198 - non-existent file in subdir a/ not ignored with -v -n(B[m
ok 144 - git-path GIT_COMMON_DIR=bar objects/bar => bar/objects/bar(B[m
ok 26 - helper (store) can store empty username(B[m
ok 63 - writing tree out with git write-tree(B[m
ok 28 - use custom XDG_CACHE_HOME even if xdg socket exists(B[m
ok 27 - when xdg file exists, home file not created(B[m
ok 9 - 10 - path removed.(B[m
ok 3 - two-way with incorrect --exclude-per-directory (1)(B[m
ok 19 - commit file with mixed EOL onto LF crlf=input attr=(B[m
ok 64 - validate object ID for a known tree(B[m
ok 199 - non-existent file in subdir a/ not ignored with -v --non-matching(B[m
ok 145 - git-path GIT_COMMON_DIR=bar info/exclude => bar/info/exclude(B[m
ok 7 - missing CLI object, but promised, passes fsck(B[m
ok 28 - setup custom xdg file(B[m
ok 20 - commit file with mixed EOL onto CLRF attr= aeol= crlf=input(B[m
ok 65 - showing tree with git ls-tree(B[m
ok 1 - setup(B[m
ok 146 - git-path GIT_COMMON_DIR=bar info/grafts => bar/info/grafts(B[m
ok 45 - 3-way merge with git read-tree -m, empty cache(B[m
ok 200 - non-existent file in subdir a/ not ignored with --verbose(B[m
ok 4 - two-way with incorrect --exclude-per-directory (2)(B[m
ok 21 - commit file with mixed EOL onto CRLF_mix_LF attr= aeol= crlf=input(B[m
ok 66 - git ls-tree output for a known tree(B[m
ok 147 - git-path GIT_COMMON_DIR=bar info/sparse-checkout => .git/info/sparse-checkout(B[m
ok 201 - non-existent file in subdir a/ not ignored with --verbose -n(B[m
ok 29 - use user socket if user directory exists(B[m
ok 22 - commit file with mixed EOL onto LF_mix_cr attr= aeol= crlf=input (B[m
ok 67 - showing tree with git ls-tree -r(B[m
ok 148 - git-path GIT_COMMON_DIR=bar info//sparse-checkout => .git/info//sparse-checkout(B[m
ok 29 - helper (store) has no existing data(B[m
ok 10 - 11 - dirty path removed.(B[m
ok 23 - commit file with mixed EOL onto CRLF_nul attr= aeol= crlf=input(B[m
ok 202 - non-existent file in subdir a/ not ignored with --verbose --non-matching(B[m
ok 68 - git ls-tree -r output for a known tree(B[m
ok 149 - git-path GIT_COMMON_DIR=bar remotes/bar => bar/remotes/bar(B[m
ok 5 - two-way clobbering a ignored file(B[m
ok 2 - reset should work(B[m
ok 69 - showing tree with git ls-tree -r -t(B[m
ok 30 - helper (store) stores password(B[m
ok 150 - git-path GIT_COMMON_DIR=bar branches/bar => bar/branches/bar(B[m
ok 203 - non-existent file in subdir a/ not ignored with --no-index(B[m
ok 70 - git ls-tree -r output for a known tree(B[m
ok 151 - git-path GIT_COMMON_DIR=bar logs/refs/heads/master => bar/logs/refs/heads/master(B[m
ok 4 - 5 - carry forward local addition.(B[m
ok 204 - non-existent file in subdir a/ not ignored with --no-index -q(B[m
ok 30 - use user socket if user directory is a symlink to a directory(B[m
ok 31 - helper (store) can retrieve password(B[m
ok 46 - 3-way merge with git read-tree -m, match H(B[m
ok 71 - writing partial tree out with git write-tree --prefix(B[m
ok 11 - 12 - unmatching local changes being removed.(B[m
ok 72 - validate object ID for a known tree(B[m
ok 152 - git-path GIT_COMMON_DIR=bar refs/heads/master => bar/refs/heads/master(B[m
ok 205 - non-existent file in subdir a/ not ignored with --no-index --quiet(B[m
ok 24 - commit file with mixed EOL onto LF crlf=false attr=auto(B[m
ok 73 - writing partial tree out with git write-tree --prefix(B[m
ok 153 - git-path GIT_COMMON_DIR=bar refs/bisect/foo => .git/refs/bisect/foo(B[m
ok 74 - validate object ID for a known tree(B[m
ok 206 - non-existent file in subdir a/ not ignored with --no-index -v(B[m
ok 25 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=false(B[m
ok 32 - helper (store) requires matching protocol(B[m
ok 154 - git-path GIT_COMMON_DIR=bar hooks/me => bar/hooks/me(B[m
ok 47 - 1 - must not have an entry not in A.(B[m
ok 26 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=false(B[m
ok 207 - non-existent file in subdir a/ not ignored with --no-index -v -n(B[m
ok 6 - three-way not complaining on an untracked path in both(B[m
ok 75 - put invalid objects into the index(B[m
ok 155 - git-path GIT_COMMON_DIR=bar config => bar/config(B[m
ok 27 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=false (B[m
ok 12 - 13 - unmatching local changes being removed.(B[m
ok 76 - writing this tree without --missing-ok(B[m
ok 208 - non-existent file in subdir a/ not ignored with --no-index -v --non-matching(B[m
ok 156 - git-path GIT_COMMON_DIR=bar packed-refs => bar/packed-refs(B[m
ok 8 - fetching of missing objects(B[m
ok 28 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=false(B[m
ok 33 - helper (store) requires matching host(B[m
ok 77 - writing this tree with --missing-ok(B[m
ok 209 - non-existent file in subdir a/ not ignored with --no-index --verbose(B[m
ok 157 - git-path GIT_COMMON_DIR=bar shallow => bar/shallow(B[m
ok 3 - reset should remove remnants from a failed merge(B[m
ok 48 - 2 - must match B in !O && !A && B case.(B[m
ok 7 - three-way not clobbering a working tree file(B[m
ok 78 - git read-tree followed by write-tree should be idempotent(B[m
ok 158 - git-path GIT_COMMON_DIR=bar common => bar/common(B[m
ok 210 - non-existent file in subdir a/ not ignored with --no-index --verbose -n(B[m
ok 34 - helper (store) requires matching username(B[m
ok 159 - git-path GIT_COMMON_DIR=bar common/file => bar/common/file(B[m
ok 5 - 6 - local addition already has the same.(B[m
ok 211 - non-existent file in subdir a/ not ignored with --no-index --verbose --non-matching(B[m
ok 79 - validate git diff-files output for a know cache/work tree state(B[m
ok 9 - fetching of missing objects works with ref-in-want enabled(B[m
ok 160 - test_submodule_relative_url: ../ ../foo ../submodule => ../../submodule(B[m
ok 29 - commit file with mixed EOL onto LF crlf=true attr=auto(B[m
ok 80 - git update-index --refresh should succeed(B[m
ok 49 - 2 - matching B alone is OK in !O && !A && B case.(B[m
ok 161 - test_submodule_relative_url: ../ ../foo/bar ../submodule => ../../foo/submodule(B[m
ok 13 - 14 - unchanged in two heads.(B[m
ok 212 - non-existent file in subdir a/ ignored(B[m
ok 81 - no diff after checkout and git update-index --refresh(B[m
ok 30 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=true(B[m
ok 162 - test_submodule_relative_url: ../ ../foo/submodule ../submodule => ../../foo/submodule(B[m
ok 31 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=true(B[m
ok 8 - three-way not complaining on an untracked file(B[m
ok 163 - test_submodule_relative_url: ../ ./foo ../submodule => ../submodule(B[m
ok 82 - git commit-tree records the correct tree in a commit(B[m
ok 213 - non-existent file in subdir a/ ignored with -q(B[m
ok 32 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=true (B[m
ok 164 - test_submodule_relative_url: ../ ./foo/bar ../submodule => ../foo/submodule(B[m
ok 35 - helper (store) requires matching path(B[m
ok 33 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=true(B[m
ok 214 - non-existent file in subdir a/ ignored with --quiet(B[m
ok 83 - git commit-tree records the correct parent in a commit(B[m
ok 50 - 3 - must match A in !O && A && !B case.(B[m
ok 165 - test_submodule_relative_url: ../../../ ../foo/bar ../sub/a/b/c => ../../../../foo/sub/a/b/c(B[m
ok 166 - test_submodule_relative_url: ../ /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/addtest ../repo => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/repo(B[m
ok 215 - non-existent file in subdir a/ ignored with -v(B[m
ok 4 - two-way reset should remove remnants too(B[m
ok 167 - test_submodule_relative_url: ../ foo/bar ../submodule => ../foo/submodule(B[m
ok 84 - git commit-tree omits duplicated parent in a commit(B[m
ok 9 - 3-way not overwriting local changes (setup)(B[m
ok 14 - 15 - unchanged in two heads.(B[m
ok 168 - test_submodule_relative_url: ../ foo ../submodule => ../submodule(B[m
ok 216 - non-existent file in subdir a/ ignored with -v -n(B[m
ok 51 - 3 - matching A alone is OK in !O && A && !B case.(B[m
ok 6 - 7 - local addition already has the same.(B[m
ok 36 - helper (store) can forget host(B[m
ok 169 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c => ../foo/sub/a/b/c(B[m
ok 34 - commit file with mixed EOL onto LF crlf=input attr=auto(B[m
ok 85 - update-index D/F conflict(B[m
ok 217 - non-existent file in subdir a/ ignored with -v --non-matching(B[m
ok 170 - test_submodule_relative_url: (null) ../foo/bar ../sub/a/b/c/ => ../foo/sub/a/b/c(B[m
ok 35 - commit file with mixed EOL onto CLRF attr=auto aeol= crlf=input(B[m
ok 171 - test_submodule_relative_url: (null) ../foo/bar/ ../sub/a/b/c => ../foo/sub/a/b/c(B[m
ok 36 - commit file with mixed EOL onto CRLF_mix_LF attr=auto aeol= crlf=input(B[m
ok 218 - non-existent file in subdir a/ ignored with --verbose(B[m
ok 86 - very long name in the index handled sanely(B[m
ok 172 - test_submodule_relative_url: (null) ../foo/bar ../submodule => ../foo/submodule(B[m
ok 52 - 3 (fail) - must match A in !O && A && !B case.(B[m
[32m# passed all 86 test(s)(B[m
[36m1..86(B[m
ok 37 - commit file with mixed EOL onto LF_mix_cr attr=auto aeol= crlf=input (B[m
ok 15 - 16 - conflicting local change.(B[m
ok 10 - 3-way not overwriting local changes (our side)(B[m
ok 219 - non-existent file in subdir a/ ignored with --verbose -n(B[m
ok 5 - Porcelain reset should remove remnants too(B[m
ok 173 - test_submodule_relative_url: (null) ../foo/submodule ../submodule => ../foo/submodule(B[m
ok 38 - commit file with mixed EOL onto CRLF_nul attr=auto aeol= crlf=input(B[m
ok 174 - test_submodule_relative_url: (null) ../foo ../submodule => ../submodule(B[m
ok 220 - non-existent file in subdir a/ ignored with --verbose --non-matching(B[m
ok 7 - 8 - conflicting addition.(B[m
*** t1006-cat-file.sh ***
ok 175 - test_submodule_relative_url: (null) ./foo/bar ../submodule => foo/submodule(B[m
ok 37 - helper (store) can store multiple users(B[m
ok 10 - fetching of missing objects from another promisor remote(B[m
ok 53 - 4 - must match and be up-to-date in !O && A && B && A!=B case.(B[m
ok 176 - test_submodule_relative_url: (null) ./foo ../submodule => submodule(B[m
ok 221 - non-existent file in subdir a/ ignored with --no-index(B[m
ok 16 - 17 - conflicting local change.(B[m
ok 177 - test_submodule_relative_url: (null) //somewhere else/repo ../subrepo => //somewhere else/subrepo(B[m
ok 11 - 3-way not overwriting local changes (their side)(B[m
ok 39 - commit NNO files crlf=false attr= LF(B[m
ok 178 - test_submodule_relative_url: (null) //somewhere else/repo ../../subrepo => //subrepo(B[m
ok 222 - non-existent file in subdir a/ ignored with --no-index -q(B[m
ok 40 - commit NNO files attr= aeol= crlf=false CRLF(B[m
ok 179 - test_submodule_relative_url: (null) //somewhere else/repo ../../../subrepo => /subrepo(B[m
ok 6 - Porcelain checkout -f should remove remnants too(B[m
ok 54 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.(B[m
ok 38 - helper (store) can forget user(B[m
ok 41 - commit NNO files attr= aeol= crlf=false CRLF_mix_LF(B[m
ok 223 - non-existent file in subdir a/ ignored with --no-index --quiet(B[m
ok 180 - test_submodule_relative_url: (null) //somewhere else/repo ../../../../subrepo => subrepo(B[m
ok 8 - 9 - conflicting addition.(B[m
ok 42 - commit NNO files attr= aeol= crlf=false LF_mix_cr(B[m
ok 181 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/subsuper_update_r ../subsubsuper_update_r => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/subsubsuper_update_r(B[m
ok 224 - non-existent file in subdir a/ ignored with --no-index -v(B[m
ok 43 - commit NNO files attr= aeol= crlf=false CRLF_nul(B[m
ok 39 - helper (store) remembers other user(B[m
ok 1 - setup(B[m
ok 182 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/super_update_r2 ../subsuper_update_r => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/subsuper_update_r(B[m
ok 2 - blob exists(B[m
ok 55 - 4 (fail) - must match and be up-to-date in !O && A && B && A!=B case.(B[m
ok 17 - 18 - local change already having a good result.(B[m
ok 225 - non-existent file in subdir a/ ignored with --no-index -v -n(B[m
ok 183 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/. ../. => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/.(B[m
ok 3 - Type of blob is correct(B[m
ok 226 - non-existent file in subdir a/ ignored with --no-index -v --non-matching(B[m
ok 184 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils ./. => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/.(B[m
ok 4 - Size of blob is correct(B[m
ok 40 - helper (store) can store empty username(B[m
ok 185 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/addtest ../repo => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/repo(B[m
ok 41 - if custom xdg file exists, home and xdg files not created(B[m
ok 7 - Porcelain checkout -f HEAD should remove remnants too(B[m
ok 227 - non-existent file in subdir a/ ignored with --no-index --verbose(B[m
ok 5 - Type of blob is correct using --allow-unknown-type(B[m
ok 44 - commit NNO files crlf=true attr= LF(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 186 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils ./å äö => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/å äö(B[m
ok 12 - funny symlink in work tree(B[m
*** t1007-hash-object.sh ***
ok 56 - 5 - must match in !O && A && B && A==B case.(B[m
ok 45 - commit NNO files attr= aeol= crlf=true CRLF(B[m
ok 6 - Size of blob is correct using --allow-unknown-type(B[m
ok 228 - non-existent file in subdir a/ ignored with --no-index --verbose -n(B[m
ok 187 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/. ../submodule => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/submodule(B[m
ok 42 - get: use home file if both home and xdg files have matches(B[m
ok 46 - commit NNO files attr= aeol= crlf=true CRLF_mix_LF(B[m
ok 7 - Content of blob is correct(B[m
ok 11 - fetching of missing objects configures a promisor remote(B[m
ok 188 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/submodule ../submodule => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/submodule(B[m
ok 47 - commit NNO files attr= aeol= crlf=true LF_mix_cr(B[m
ok 18 - 19 - local change already having a good result, further modified.(B[m
ok 229 - non-existent file in subdir a/ ignored with --no-index --verbose --non-matching(B[m
ok 9 - 10 - path removed.(B[m
ok 8 - Pretty content of blob is correct(B[m
ok 189 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/home2/../remote ../bundle1 => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/home2/../bundle1(B[m
ok 48 - commit NNO files attr= aeol= crlf=true CRLF_nul(B[m
ok 43 - get: use xdg file if home file has no matches(B[m
ok 9 - --batch output of blob is correct(B[m
ok 190 - test_submodule_relative_url: (null) /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/submodule_update_repo ./. => /tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t/trash directory.t0060-path-utils/submodule_update_repo/.(B[m
ok 230 - existing untracked file in subdir a/ not ignored(B[m
ok 57 - 5 - must match in !O && A && B && A==B case.(B[m
ok 191 - test_submodule_relative_url: (null) file:///tmp/repo ../subrepo => file:///tmp/subrepo(B[m
ok 10 - --batch-check output of blob is correct(B[m
ok 13 - funny symlink in work tree, un-unlink-able(B[m
ok 231 - existing untracked file in subdir a/ not ignored with -q(B[m
ok 192 - test_submodule_relative_url: (null) foo/bar ../submodule => foo/submodule(B[m
ok 11 - custom --batch-check format(B[m
ok 1 - setup(B[m
ok 193 - test_submodule_relative_url: (null) foo ../submodule => submodule(B[m
ok 232 - existing untracked file in subdir a/ not ignored with --quiet(B[m
ok 2 - multiple '--stdin's are rejected(B[m
ok 12 - --batch-check with %(rest)(B[m
ok 58 - 5 (fail) - must match A in !O && A && B && A==B case.(B[m
ok 194 - test_submodule_relative_url: (null) helper:://hostname/repo ../subrepo => helper:://hostname/subrepo(B[m
ok 44 - get: use xdg file if home file is unreadable(B[m
ok 49 - commit NNO files crlf=input attr= LF(B[m
ok 10 - 11 - dirty path removed.(B[m
ok 19 - 20 - no local change, use new tree.(B[m
ok 233 - existing untracked file in subdir a/ not ignored with -v(B[m
ok 195 - test_submodule_relative_url: (null) helper:://hostname/repo ../../subrepo => helper:://subrepo(B[m
ok 50 - commit NNO files attr= aeol= crlf=input CRLF(B[m
ok 13 - --batch without type (blob)(B[m
ok 3 - Can't use --stdin and --stdin-paths together(B[m
ok 14 - D/F setup(B[m
ok 196 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../subrepo => helper::/subrepo(B[m
ok 51 - commit NNO files attr= aeol= crlf=input CRLF_mix_LF(B[m
ok 234 - existing untracked file in subdir a/ not ignored with -v -n(B[m
ok 4 - Can't pass filenames as arguments with --stdin-paths(B[m
ok 45 - store: if both xdg and home files exist, only store in home file(B[m
ok 14 - --batch without size (blob)(B[m
ok 197 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../subrepo => helper::subrepo(B[m
ok 52 - commit NNO files attr= aeol= crlf=input LF_mix_cr(B[m
ok 59 - 6 - must not exist in O && !A && !B case(B[m
ok 5 - Can't use --path with --stdin-paths(B[m
ok 235 - existing untracked file in subdir a/ not ignored with -v --non-matching(B[m
ok 198 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../subrepo => helper:subrepo(B[m
ok 53 - commit NNO files attr= aeol= crlf=input CRLF_nul(B[m
ok 6 - Can't use --path with --no-filters(B[m
ok 46 - erase: erase matching credentials from both xdg and home files(B[m
ok 199 - test_submodule_relative_url: (null) helper:://hostname/repo ../../../../../../subrepo => .:subrepo(B[m
ok 15 - --batch-check without %(rest) considers whole line(B[m
ok 20 - 21 - no local change, dirty cache.(B[m
ok 236 - existing untracked file in subdir a/ not ignored with --verbose(B[m
[32m# passed all 46 test(s)(B[m
[36m1..46(B[m
*** t1008-read-tree-overlay.sh ***
ok 200 - test_submodule_relative_url: (null) ssh://hostname/repo ../subrepo => ssh://hostname/subrepo(B[m
ok 7 - hash a file(B[m
ok 11 - 12 - unmatching local changes being removed.(B[m
ok 237 - existing untracked file in subdir a/ not ignored with --verbose -n(B[m
ok 60 - 7 - must not exist in O && !A && B && O!=B case(B[m
ok 201 - test_submodule_relative_url: (null) ssh://hostname/repo ../../subrepo => ssh://subrepo(B[m
ok 8 - blob does not exist in database(B[m
ok 15 - D/F(B[m
ok 12 - fetching of missing blobs works(B[m
ok 202 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../subrepo => ssh:/subrepo(B[m
ok 238 - existing untracked file in subdir a/ not ignored with --verbose --non-matching(B[m
ok 9 - hash from stdin(B[m
ok 203 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../subrepo => ssh:subrepo(B[m
ok 54 - commit NNO files crlf=false attr=auto LF(B[m
ok 21 - 22 - local change cache updated.(B[m
ok 10 - blob does not exist in database(B[m
ok 204 - test_submodule_relative_url: (null) ssh://hostname/repo ../../../../../subrepo => .:subrepo(B[m
ok 239 - existing untracked file in subdir a/ not ignored with --no-index(B[m
ok 55 - commit NNO files attr=auto aeol= crlf=false CRLF(B[m
ok 61 - 8 - must not exist in O && !A && B && O==B case(B[m
ok 11 - hash a file and write to database(B[m
ok 205 - test_submodule_relative_url: (null) ssh://hostname:22/repo ../subrepo => ssh://hostname:22/subrepo(B[m
ok 56 - commit NNO files attr=auto aeol= crlf=false CRLF_mix_LF(B[m
ok 240 - existing untracked file in subdir a/ not ignored with --no-index -q(B[m
ok 12 - blob exists in database(B[m
ok 206 - test_submodule_relative_url: (null) user@host:path/to/repo ../subrepo => user@host:path/to/subrepo(B[m
ok 12 - 13 - unmatching local changes being removed.(B[m
ok 57 - commit NNO files attr=auto aeol= crlf=false LF_mix_cr(B[m
ok 241 - existing untracked file in subdir a/ not ignored with --no-index --quiet(B[m
ok 207 - test_submodule_relative_url: (null) user@host:repo ../subrepo => user@host:subrepo(B[m
ok 58 - commit NNO files attr=auto aeol= crlf=false CRLF_nul(B[m
ok 208 - test_submodule_relative_url: (null) user@host:repo ../../subrepo => .:subrepo(B[m
ok 16 - tree exists(B[m
ok 242 - existing untracked file in subdir a/ not ignored with --no-index -v(B[m
ok 22 - DF vs DF/DF case setup.(B[m
ok 13 - git hash-object --stdin file1 <file0 first operates on file0, then file1(B[m
ok 209 - match .gitmodules(B[m
ok 16 - D/F resolve(B[m
[34mok 210 # skip is_valid_path() on Windows (missing MINGW)(B[m
ok 62 - 9 - must match and be up-to-date in O && A && !B && O!=A case(B[m
ok 17 - Type of tree is correct(B[m
[32m# passed all 210 test(s)(B[m
[36m1..210(B[m
ok 243 - existing untracked file in subdir a/ not ignored with --no-index -v -n(B[m
*** t1009-read-tree-new-index.sh ***
ok 18 - Size of tree is correct(B[m
ok 14 - set up crlf tests(B[m
ok 244 - existing untracked file in subdir a/ not ignored with --no-index -v --non-matching(B[m
ok 1 - setup(B[m
ok 17 - D/F recursive(B[m
ok 19 - Type of tree is correct using --allow-unknown-type(B[m
ok 23 - DF vs DF/DF case test.(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 245 - existing untracked file in subdir a/ not ignored with --no-index --verbose(B[m
ok 59 - commit NNO files crlf=true attr=auto LF(B[m
ok 63 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case(B[m
*** t1010-mktree.sh ***
ok 20 - Size of tree is correct using --allow-unknown-type(B[m
ok 15 - check that appropriate filter is invoke when --path is used(B[m
ok 60 - commit NNO files attr=auto aeol= crlf=true CRLF(B[m
ok 246 - existing untracked file in subdir a/ not ignored with --no-index --verbose -n(B[m
ok 21 - Pretty content of tree is correct(B[m
ok 61 - commit NNO files attr=auto aeol= crlf=true CRLF_mix_LF(B[m
ok 2 - multi-read(B[m
ok 16 - gitattributes also work in a subdirectory(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 22 - --batch-check output of tree is correct(B[m
ok 247 - existing untracked file in subdir a/ not ignored with --no-index --verbose --non-matching(B[m
ok 62 - commit NNO files attr=auto aeol= crlf=true LF_mix_cr(B[m
*** t1011-read-tree-sparse-checkout.sh ***
ok 64 - 9 (fail) - must match and be up-to-date in O && A && !B && O!=A case(B[m
ok 63 - commit NNO files attr=auto aeol= crlf=true CRLF_nul(B[m
ok 24 - a/b (untracked) vs a case setup.(B[m
ok 23 - custom --batch-check format(B[m
ok 17 - --path works in a subdirectory(B[m
ok 13 - 14 - unchanged in two heads.(B[m
ok 13 - fetching of missing trees does not fetch blobs(B[m
ok 248 - existing tracked file in subdir a/ not ignored(B[m
ok 1 - setup(B[m
ok 24 - --batch-check with %(rest)(B[m
ok 18 - check that --no-filters option works(B[m
ok 249 - existing tracked file in subdir a/ not ignored with -q(B[m
ok 2 - non-existent index file(B[m
ok 19 - check that --no-filters option works with --stdin-paths(B[m
ok 25 - commit exists(B[m
ok 3 - empty index file(B[m
ok 250 - existing tracked file in subdir a/ not ignored with --quiet(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 65 - 10 - must match and be up-to-date in O && A && !B && O==A case(B[m
ok 26 - Type of commit is correct(B[m
ok 25 - a/b (untracked) vs a, plus c/d case test.(B[m
*** t1012-read-tree-df.sh ***
ok 64 - commit NNO files crlf=input attr=auto LF(B[m
ok 20 - hash from stdin and write to database (-w --stdin)(B[m
ok 251 - existing tracked file in subdir a/ not ignored with -v(B[m
ok 27 - Size of commit is correct(B[m
ok 26 - read-tree supports the super-prefix(B[m
ok 65 - commit NNO files attr=auto aeol= crlf=input CRLF(B[m
ok 21 - blob exists in database(B[m
ok 28 - Type of commit is correct using --allow-unknown-type(B[m
ok 252 - existing tracked file in subdir a/ not ignored with -v -n(B[m
ok 66 - commit NNO files attr=auto aeol= crlf=input CRLF_mix_LF(B[m
ok 66 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case(B[m
ok 29 - Size of commit is correct using --allow-unknown-type(B[m
ok 67 - commit NNO files attr=auto aeol= crlf=input LF_mix_cr(B[m
ok 253 - existing tracked file in subdir a/ not ignored with -v --non-matching(B[m
ok 22 - hash from stdin and write to database (--stdin -w)(B[m
ok 68 - commit NNO files attr=auto aeol= crlf=input CRLF_nul(B[m
ok 23 - blob exists in database(B[m
ok 30 - Content of commit is correct(B[m
ok 254 - existing tracked file in subdir a/ not ignored with --verbose(B[m
ok 27 - a/b vs a, plus c/d case setup.(B[m
ok 24 - hash two files with names on stdin(B[m
ok 255 - existing tracked file in subdir a/ not ignored with --verbose -n(B[m
ok 67 - 10 (fail) - must match and be up-to-date in O && A && !B && O==A case(B[m
ok 31 - Pretty content of commit is correct(B[m
ok 14 - 15 - unchanged in two heads.(B[m
ok 14 - rev-list stops traversal at missing and promised commit(B[m
ok 256 - existing tracked file in subdir a/ not ignored with --verbose --non-matching(B[m
ok 25 - hash two files with names on stdin and write to database (-w --stdin-paths)(B[m
ok 32 - --batch output of commit is correct(B[m
ok 69 - commit NNO files crlf=true attr=-text LF(B[m
ok 1 - setup(B[m
ok 26 - blob exists in database(B[m
ok 1 - setup(B[m
ok 33 - --batch-check output of commit is correct(B[m
ok 257 - existing tracked file in subdir a/ shown as ignored with --no-index(B[m
ok 70 - commit NNO files attr=-text aeol= crlf=true CRLF(B[m
ok 27 - blob exists in database(B[m
ok 2 - ls-tree piped to mktree (1)(B[m
ok 28 - a/b vs a, plus c/d case test.(B[m
ok 34 - custom --batch-check format(B[m
ok 71 - commit NNO files attr=-text aeol= crlf=true CRLF_mix_LF(B[m
ok 68 - 11 - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case(B[m
ok 3 - ls-tree piped to mktree (2)(B[m
ok 258 - existing tracked file in subdir a/ shown as ignored with --no-index -q(B[m
ok 35 - --batch-check with %(rest)(B[m
ok 72 - commit NNO files attr=-text aeol= crlf=true LF_mix_cr(B[m
ok 28 - hash two files with names on stdin and write to database (--stdin-paths -w)(B[m
ok 15 - 16 - conflicting local change.(B[m
ok 4 - ls-tree output in wrong order given to mktree (1)(B[m
ok 73 - commit NNO files attr=-text aeol= crlf=true CRLF_nul(B[m
ok 259 - existing tracked file in subdir a/ shown as ignored with --no-index --quiet(B[m
ok 29 - blob exists in database(B[m
ok 36 - --batch without type (commit)(B[m
ok 5 - ls-tree output in wrong order given to mktree (2)(B[m
ok 30 - blob exists in database(B[m
ok 69 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case(B[m
ok 2 - read-tree without .git/info/sparse-checkout(B[m
ok 6 - allow missing object with --missing(B[m
ok 260 - existing tracked file in subdir a/ shown as ignored with --no-index -v(B[m
ok 37 - --batch without size (commit)(B[m
ok 7 - mktree refuses to read ls-tree -r output (1)(B[m
ok 261 - existing tracked file in subdir a/ shown as ignored with --no-index -v -n(B[m
ok 31 - too-short tree(B[m
ok 8 - mktree refuses to read ls-tree -r output (2)(B[m
ok 38 - tag exists(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 74 - commit NNO files crlf=true attr=-text LF(B[m
*** t1013-read-tree-submodule.sh ***
ok 70 - 11 (fail) - must match and be up-to-date in O && A && B && O!=A && O!=B && A!=B case(B[m
ok 16 - 17 - conflicting local change.(B[m
ok 262 - existing tracked file in subdir a/ shown as ignored with --no-index -v --non-matching(B[m
ok 39 - Type of tag is correct(B[m
ok 75 - commit NNO files attr=-text aeol=lf crlf=true CRLF(B[m
ok 32 - malformed mode in tree(B[m
ok 29 - -m references the correct modified tree(B[m
ok 3 - read-tree with .git/info/sparse-checkout but disabled(B[m
[32m# passed all 29 test(s)(B[m
[36m1..29(B[m
ok 76 - commit NNO files attr=-text aeol=lf crlf=true CRLF_mix_LF(B[m
ok 40 - Size of tag is correct(B[m
ok 263 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose(B[m
*** t1014-read-tree-confusing.sh ***
ok 77 - commit NNO files attr=-text aeol=lf crlf=true LF_mix_cr(B[m
ok 41 - Type of tag is correct using --allow-unknown-type(B[m
ok 33 - empty filename in tree(B[m
ok 264 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose -n(B[m
ok 78 - commit NNO files attr=-text aeol=lf crlf=true CRLF_nul(B[m
ok 34 - corrupt commit(B[m
ok 42 - Size of tag is correct using --allow-unknown-type(B[m
ok 71 - 12 - must match A in O && A && B && O!=A && A==B case(B[m
ok 35 - corrupt tag(B[m
ok 265 - existing tracked file in subdir a/ shown as ignored with --no-index --verbose --non-matching(B[m
ok 36 - hash-object complains about bogus type name(B[m
ok 43 - Content of tag is correct(B[m
ok 4 - read-tree --no-sparse-checkout with empty .git/info/sparse-checkout and enabled(B[m
ok 37 - hash-object complains about truncated type name(B[m
ok 266 - existing untracked file in subdir a/ ignored(B[m
ok 44 - Pretty content of tag is correct(B[m
ok 38 - --literally(B[m
ok 39 - --literally with extra-long type(B[m
ok 79 - commit NNO files crlf=true attr=-text LF(B[m
[32m# passed all 39 test(s)(B[m
[36m1..39(B[m
ok 72 - 12 - must match A in O && A && B && O!=A && A==B case(B[m
ok 267 - existing untracked file in subdir a/ ignored with -q(B[m
ok 45 - --batch output of tag is correct(B[m
*** t1015-read-index-unmerged.sh ***
ok 80 - commit NNO files attr=-text aeol=crlf crlf=true CRLF(B[m
ok 17 - 18 - local change already having a good result.(B[m
ok 15 - missing tree objects with --missing=allow-promisor and --exclude-promisor-objects(B[m
ok 1 - create base tree(B[m
ok 81 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_mix_LF(B[m
ok 46 - --batch-check output of tag is correct(B[m
ok 268 - existing untracked file in subdir a/ ignored with --quiet(B[m
ok 2 - enable core.protectHFS for rejection tests(B[m
ok 82 - commit NNO files attr=-text aeol=crlf crlf=true LF_mix_cr(B[m
ok 5 - read-tree with empty .git/info/sparse-checkout(B[m
ok 47 - custom --batch-check format(B[m
ok 3 - enable core.protectNTFS for rejection tests(B[m
ok 83 - commit NNO files attr=-text aeol=crlf crlf=true CRLF_nul(B[m
ok 73 - 12 (fail) - must match A in O && A && B && O!=A && A==B case(B[m
ok 269 - existing untracked file in subdir a/ ignored with -v(B[m
ok 48 - --batch-check with %(rest)(B[m
ok 4 - reject . at end of path(B[m
ok 270 - existing untracked file in subdir a/ ignored with -v -n(B[m
ok 49 - --batch without type (tag)(B[m
ok 5 - reject . as subtree(B[m
ok 271 - existing untracked file in subdir a/ ignored with -v --non-matching(B[m
ok 6 - match directories with trailing slash(B[m
ok 74 - 13 - must match A in O && A && B && O!=A && O==B case(B[m
ok 6 - reject .. at end of path(B[m
ok 50 - --batch without size (tag)(B[m
ok 84 - commit NNO files crlf=true attr= LF(B[m
ok 272 - existing untracked file in subdir a/ ignored with --verbose(B[m
ok 51 - Reach a blob from a tag pointing to it(B[m
ok 85 - commit NNO files attr= aeol=lf crlf=true CRLF(B[m
ok 7 - reject .. as subtree(B[m
ok 52 - Passing -t with --batch fails(B[m
ok 16 - missing non-root tree object and rev-list(B[m
ok 273 - existing untracked file in subdir a/ ignored with --verbose -n(B[m
ok 86 - commit NNO files attr= aeol=lf crlf=true CRLF_mix_LF(B[m
ok 18 - 19 - local change already having a good result, further modified.(B[m
ok 53 - Passing --batch with -t fails(B[m
ok 8 - reject .git at end of path(B[m
ok 87 - commit NNO files attr= aeol=lf crlf=true LF_mix_cr(B[m
ok 274 - existing untracked file in subdir a/ ignored with --verbose --non-matching(B[m
ok 54 - Passing -s with --batch fails(B[m
ok 75 - 13 - must match A in O && A && B && O!=A && O==B case(B[m
ok 88 - commit NNO files attr= aeol=lf crlf=true CRLF_nul(B[m
ok 7 - match directories without trailing slash(B[m
ok 9 - reject .git as subtree(B[m
ok 55 - Passing --batch with -s fails(B[m
ok 1 - setup modify/delete + directory/file conflict(B[m
ok 275 - existing untracked file in subdir a/ ignored with --no-index(B[m
ok 56 - Passing -e with --batch fails(B[m
ok 10 - reject .GIT at end of path(B[m
ok 8 - match directories with negated patterns(B[m
ok 57 - Passing --batch with -e fails(B[m
ok 276 - existing untracked file in subdir a/ ignored with --no-index -q(B[m
ok 58 - Passing -p with --batch fails(B[m
ok 11 - reject .GIT as subtree(B[m
ok 31 - helper (cache --timeout=1) times out(B[m
ok 76 - 14 - must match and be up-to-date in O && A && B && O==A && O!=B case(B[m
ok 9 - match directories with negated patterns (2)(B[m
ok 59 - Passing --batch with -p fails(B[m
ok 89 - commit NNO files crlf=true attr= LF(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
ok 12 - reject {u200c}.Git at end of path(B[m
ok 277 - existing untracked file in subdir a/ ignored with --no-index --quiet(B[m
ok 2 - read-tree --reset cleans unmerged entries(B[m
ok 60 - Passing <type> with --batch fails(B[m
*** t1020-subdirectory.sh ***
ok 90 - commit NNO files attr= aeol=crlf crlf=true CRLF(B[m
ok 61 - Passing --batch with <type> fails(B[m
ok 13 - reject {u200c}.Git as subtree(B[m
ok 91 - commit NNO files attr= aeol=crlf crlf=true CRLF_mix_LF(B[m
ok 278 - existing untracked file in subdir a/ ignored with --no-index -v(B[m
ok 62 - Passing sha1 with --batch fails(B[m
ok 19 - 20 - no local change, use new tree.(B[m
ok 92 - commit NNO files attr= aeol=crlf crlf=true LF_mix_cr(B[m
ok 63 - Passing -t with --batch-check fails(B[m
ok 14 - reject .gI{u200c}T at end of path(B[m
ok 77 - 14 - may match B in O && A && B && O==A && O!=B case(B[m
ok 279 - existing untracked file in subdir a/ ignored with --no-index -v -n(B[m
ok 93 - commit NNO files attr= aeol=crlf crlf=true CRLF_nul(B[m
ok 10 - match directory pattern(B[m
ok 64 - Passing --batch-check with -t fails(B[m
ok 3 - One reset --hard cleans unmerged entries(B[m
ok 15 - reject .gI{u200c}T as subtree(B[m
ok 65 - Passing -s with --batch-check fails(B[m
ok 280 - existing untracked file in subdir a/ ignored with --no-index -v --non-matching(B[m
ok 66 - Passing --batch-check with -s fails(B[m
ok 16 - reject .GiT{u200c} at end of path(B[m
ok 1 - setup(B[m
ok 281 - existing untracked file in subdir a/ ignored with --no-index --verbose(B[m
ok 78 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case(B[m
ok 67 - Passing -e with --batch-check fails(B[m
ok 17 - reject .GiT{u200c} as subtree(B[m
ok 68 - Passing --batch-check with -e fails(B[m
ok 20 - 21 - no local change, dirty cache.(B[m
ok 94 - commit NNO files crlf=true attr=auto LF(B[m
ok 282 - existing untracked file in subdir a/ ignored with --no-index --verbose -n(B[m
ok 17 - rev-list stops traversal at missing and promised tree(B[m
ok 11 - checkout area changes(B[m
ok 1 - setup(B[m
ok 69 - Passing -p with --batch-check fails(B[m
ok 18 - reject git~1 at end of path(B[m
ok 95 - commit NNO files attr=auto aeol=lf crlf=true CRLF(B[m
ok 2 - update-index and ls-files(B[m
ok 283 - existing untracked file in subdir a/ ignored with --no-index --verbose --non-matching(B[m
ok 70 - Passing --batch-check with -p fails(B[m
ok 79 - 14 (fail) - must match and be up-to-date in O && A && B && O==A && O!=B case(B[m
ok 96 - commit NNO files attr=auto aeol=lf crlf=true CRLF_mix_LF(B[m
ok 19 - reject git~1 as subtree(B[m
ok 71 - Passing <type> with --batch-check fails(B[m
ok 97 - commit NNO files attr=auto aeol=lf crlf=true LF_mix_cr(B[m
ok 72 - Passing --batch-check with <type> fails(B[m
ok 3 - cat-file(B[m
ok 4 - setup directory/file conflict + simple edit/edit(B[m
ok 20 - reject .git.{space} at end of path(B[m
ok 98 - commit NNO files attr=auto aeol=lf crlf=true CRLF_nul(B[m
ok 284 - mix of file types in subdir a/(B[m
ok 73 - Passing sha1 with --batch-check fails(B[m
ok 12 - read-tree updates worktree, absent case(B[m
ok 21 - DF vs DF/DF case setup.(B[m
ok 21 - reject .git.{space} as subtree(B[m
ok 74 - Passing -t with --follow-symlinks fails(B[m
ok 285 - mix of file types in subdir a/ with -v(B[m
ok 4 - diff-files(B[m
ok 80 - 15 - must match A in O && A && B && O==A && O==B case(B[m
ok 75 - Passing -s with --follow-symlinks fails(B[m
ok 22 - reject backslashes at end of path(B[m
ok 2 - 3-way (1)(B[m
ok 286 - mix of file types in subdir a/ with -v -n(B[m
ok 76 - Passing -e with --follow-symlinks fails(B[m
ok 5 - git merge --abort succeeds despite D/F conflict(B[m
ok 5 - write-tree(B[m
ok 23 - reject backslashes as subtree(B[m
ok 77 - Passing -p with --follow-symlinks fails(B[m
ok 99 - commit NNO files crlf=true attr=auto LF(B[m
ok 287 - mix of file types in subdir a/ with -v --non-matching(B[m
ok 13 - read-tree updates worktree, dirty case(B[m
ok 6 - checkout-index(B[m
ok 78 - --batch-check for a non-existent named object(B[m
ok 18 - rev-list stops traversal at missing and promised blob(B[m
ok 100 - commit NNO files attr=auto aeol=crlf crlf=true CRLF(B[m
ok 24 - reject backslashes2 at end of path(B[m
ok 81 - 15 - must match A in O && A && B && O==A && O==B case(B[m
ok 79 - --batch-check for a non-existent hash(B[m
ok 288 - mix of file types in subdir a/ with --verbose(B[m
ok 22 - DF vs DF/DF case test.(B[m
ok 101 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_mix_LF(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 80 - --batch for an existent and a non-existent hash(B[m
ok 102 - commit NNO files attr=auto aeol=crlf crlf=true LF_mix_cr(B[m
ok 25 - reject backslashes2 as subtree(B[m
*** t1021-rerere-in-workdir.sh ***
ok 289 - mix of file types in subdir a/ with --verbose -n(B[m
ok 81 - --batch-check for an empty line(B[m
ok 103 - commit NNO files attr=auto aeol=crlf crlf=true CRLF_nul(B[m
ok 26 - reject .git...:alternate-stream at end of path(B[m
ok 6 - git am --skip succeeds despite D/F conflict(B[m
ok 290 - mix of file types in subdir a/ with --verbose --non-matching(B[m
ok 82 - empty --batch-check notices missing object(B[m
ok 14 - read-tree removes worktree, dirty case(B[m
ok 82 - 15 (fail) - must match A in O && A && B && O==A && O==B case(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 3 - 3-way (2)(B[m
ok 27 - reject .git...:alternate-stream as subtree(B[m
*** t1050-large.sh ***
ok 83 - --batch with multiple sha1s gives correct format(B[m
ok 291 - mix of file types in subdir a/ with --no-index(B[m
ok 84 - --batch-check with multiple sha1s gives correct format(B[m
ok 104 - commit NNO files crlf=true attr=text LF(B[m
ok 292 - mix of file types in subdir a/ with --no-index -v(B[m
ok 28 - utf-8 paths allowed with core.protectHFS off(B[m
[32m# passed all 28 test(s)(B[m
[36m1..28(B[m
ok 7 - read-tree(B[m
ok 105 - commit NNO files attr=text aeol=lf crlf=true CRLF(B[m
ok 15 - read-tree adds to worktree, absent case(B[m
*** t1051-large-conversion.sh ***
ok 293 - mix of file types in subdir a/ with --no-index -v -n(B[m
ok 106 - commit NNO files attr=text aeol=lf crlf=true CRLF_mix_LF(B[m
ok 85 - setup blobs which are likely to delta(B[m
ok 83 - 16 - A matches in one and B matches in another.(B[m
[32m# passed all 83 test(s)(B[m
[36m1..83(B[m
ok 107 - commit NNO files attr=text aeol=lf crlf=true LF_mix_cr(B[m
ok 8 - alias expansion(B[m
ok 294 - mix of file types in subdir a/ with --no-index -v --non-matching(B[m
ok 86 - confirm that neither loose blob is a delta(B[m
*** t1060-object-corruption.sh ***
ok 108 - commit NNO files attr=text aeol=lf crlf=true CRLF_nul(B[m
ok 4 - 3-way (3)(B[m
ok 19 - rev-list stops traversal at promisor commit, tree, and blob(B[m
ok 1 - setup(B[m
ok 295 - mix of file types in subdir a/ with --no-index --verbose(B[m
ok 9 - !alias expansion(B[m
ok 16 - read-tree adds to worktree, dirty case(B[m
ok 1 - setup(B[m
ok 296 - mix of file types in subdir a/ with --no-index --verbose -n(B[m
ok 10 - GIT_PREFIX for !alias(B[m
ok 2 - add with -c core.compression=0(B[m
ok 87 - %(deltabase) reports packed delta bases(B[m
ok 297 - mix of file types in subdir a/ with --no-index --verbose --non-matching(B[m
ok 17 - index removal and worktree narrowing at the same time(B[m
ok 109 - commit NNO files crlf=true attr=text LF(B[m
ok 1 - setup input tests(B[m
ok 298 - sub-directory local ignore(B[m
ok 110 - commit NNO files attr=text aeol=crlf crlf=true CRLF(B[m
ok 88 - Type of broken object is correct(B[m
ok 11 - GIT_PREFIX for built-ins(B[m
ok 18 - read-tree --reset removes outside worktree(B[m
ok 3 - add with -c core.compression=9(B[m
ok 111 - commit NNO files attr=text aeol=crlf crlf=true CRLF_mix_LF(B[m
ok 5 - 2-way (1)(B[m
ok 89 - Size of broken object is correct(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 299 - sub-directory local ignore with --verbose(B[m
ok 112 - commit NNO files attr=text aeol=crlf crlf=true LF_mix_cr(B[m
ok 12 - no file/rev ambiguity check inside .git(B[m
*** t1090-sparse-checkout-scope.sh ***
ok 113 - commit NNO files attr=text aeol=crlf crlf=true CRLF_nul(B[m
ok 2 - autocrlf=true converts on input(B[m
ok 2 - rerere in workdir(B[m
ok 300 - local ignore inside a sub-directory(B[m
ok 90 - Type of broken object is correct when type is large(B[m
ok 4 - add with -c core.compression=0 -c pack.compression=0(B[m
ok 19 - print errors when failed to update worktree(B[m
ok 91 - Size of large broken object is correct when type is large(B[m
ok 301 - local ignore inside a sub-directory with --verbose(B[m
ok 13 - no file/rev ambiguity check inside a bare repo (explicit GIT_DIR)(B[m
ok 3 - eol=crlf converts on input(B[m
ok 302 - nested include of negated pattern(B[m
ok 1 - setup corrupt repo(B[m
ok 5 - add with -c core.compression=9 -c pack.compression=0(B[m
ok 20 - checkout without --ignore-skip-worktree-bits(B[m
ok 14 - no file/rev ambiguity check inside a bare repo(B[m
ok 303 - nested include of negated pattern with -q(B[m
ok 114 - commit NNO files crlf=false attr=-text LF(B[m
ok 115 - commit NNO files attr=-text aeol= crlf=false CRLF(B[m
ok 4 - ident converts on input(B[m
ok 304 - nested include of negated pattern with -v(B[m
ok 21 - checkout with --ignore-skip-worktree-bits(B[m
ok 6 - add with -c core.compression=0 -c pack.compression=9(B[m
ok 116 - commit NNO files attr=-text aeol= crlf=false CRLF_mix_LF(B[m
ok 1 - setup(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
[33mnot ok 3 - rerere in workdir (relative) # TODO known breakage(B[m
*** t1091-sparse-checkout-builtin.sh ***
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 2 test(s)(B[m
[36m1..3(B[m
ok 117 - commit NNO files attr=-text aeol= crlf=false LF_mix_cr(B[m
ok 2 - setup repo with missing object(B[m
ok 305 - nested include of negated pattern with -v -n(B[m
ok 15 - detection should not be fooled by a symlink(B[m
*** t1100-commit-tree-options.sh ***
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 118 - commit NNO files attr=-text aeol= crlf=false CRLF_nul(B[m
ok 2 - create feature branch(B[m
*** t1300-config.sh ***
ok 7 - add with -c core.compression=9 -c pack.compression=9(B[m
ok 5 - user-defined filters convert on input(B[m
ok 306 - ignored sub-directory(B[m
ok 3 - perform sparse checkout of master(B[m
ok 307 - ignored sub-directory with -q(B[m
ok 6 - setup output tests(B[m
ok 8 - add with -c pack.compression=0(B[m
ok 4 - merge feature branch into sparse checkout of master(B[m
ok 119 - commit NNO files crlf=false attr=-text LF(B[m
ok 308 - ignored sub-directory with --quiet(B[m
ok 3 - setup repo with misnamed object(B[m
ok 120 - commit NNO files attr=-text aeol=lf crlf=false CRLF(B[m
ok 7 - autocrlf=true converts on output(B[m
ok 5 - return to full checkout of master(B[m
ok 309 - ignored sub-directory with -v(B[m
ok 1 - test preparation: write empty tree(B[m
ok 9 - add with -c pack.compression=9(B[m
ok 4 - streaming a corrupt blob fails(B[m
ok 121 - commit NNO files attr=-text aeol=lf crlf=false CRLF_mix_LF(B[m
ok 1 - clear default config(B[m
ok 5 - getting type of a corrupt blob fails(B[m
ok 122 - commit NNO files attr=-text aeol=lf crlf=false LF_mix_cr(B[m
ok 2 - construct commit(B[m
ok 8 - eol=crlf converts on output(B[m
ok 310 - ignored sub-directory with -v -n(B[m
ok 2 - initial(B[m
ok 20 - rev-list dies for missing objects on cmd line(B[m
ok 123 - commit NNO files attr=-text aeol=lf crlf=false CRLF_nul(B[m
ok 1 - setup(B[m
ok 6 - read-tree -u detects bit-errors in blobs(B[m
ok 3 - read commit(B[m
ok 4 - compare commit(B[m
ok 3 - mixed case(B[m
ok 311 - ignored sub-directory with -v --non-matching(B[m
ok 7 - read-tree -u detects missing objects(B[m
ok 9 - user-defined filters convert on output(B[m
ok 2 - git sparse-checkout list (empty)(B[m
ok 4 - similar section(B[m
ok 312 - ignored sub-directory with --verbose(B[m
ok 8 - clone --no-local --bare detects corruption(B[m
ok 5 - uppercase section(B[m
ok 10 - ident converts on output(B[m
ok 3 - git sparse-checkout list (populated)(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 313 - ignored sub-directory with --verbose -n(B[m
ok 124 - commit NNO files crlf=false attr=-text LF(B[m
ok 6 - replace with non-match(B[m
ok 10 - add a large file or two(B[m
*** t1301-shared-repo.sh ***
ok 21 - single promisor remote can be re-initialized gracefully(B[m
ok 125 - commit NNO files attr=-text aeol=crlf crlf=false CRLF(B[m
ok 9 - clone --no-local --bare detects missing object(B[m
ok 7 - replace with non-match (actually matching)(B[m
ok 5 - flags and then non flags(B[m
ok 314 - ignored sub-directory with --verbose --non-matching(B[m
ok 126 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_mix_LF(B[m
ok 8 - non-match result(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 4 - git sparse-checkout init(B[m
*** t1302-repo-version.sh ***
ok 92 - prep for symlink tests(B[m
ok 127 - commit NNO files attr=-text aeol=crlf crlf=false LF_mix_cr(B[m
ok 9 - find mixed-case key by canonical name(B[m
ok 10 - clone --no-local --bare detects misnamed object(B[m
ok 5 - git sparse-checkout list after init(B[m
ok 315 - multiple files inside ignored sub-directory(B[m
ok 11 - checkout a large file(B[m
ok 128 - commit NNO files attr=-text aeol=crlf crlf=false CRLF_nul(B[m
ok 10 - find mixed-case key by non-canonical name(B[m
ok 93 - git cat-file --batch-check --follow-symlinks works for non-links(B[m
ok 6 - init with existing sparse-checkout(B[m
ok 316 - multiple files inside ignored sub-directory with -v(B[m
ok 11 - clone --local detects corruption(B[m
ok 94 - git cat-file --batch-check --follow-symlinks works for in-repo, same-dir links(B[m
ok 12 - error detected during checkout leaves repo intact(B[m
ok 11 - subsections are not canonicalized by git-config(B[m
ok 95 - git cat-file --batch-check --follow-symlinks works for in-repo, links to dirs(B[m
ok 1 - shared = 0400 (faulty permission u-w)(B[m
ok 317 - cd to ignored sub-directory(B[m
ok 6 - in partial clone, sparse checkout only fetches needed blobs(B[m
ok 12 - unset with cont. lines(B[m
ok 13 - clone --local detects missing objects(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 96 - git cat-file --batch-check --follow-symlinks works for broken in-repo, same-dir links(B[m
ok 13 - unset with cont. lines is correct(B[m
ok 129 - commit NNO files crlf=false attr= LF(B[m
ok 318 - cd to ignored sub-directory with -v(B[m
*** t1303-wacky-config.sh ***
ok 7 - clone --sparse(B[m
ok 97 - git cat-file --batch-check --follow-symlinks works for same-dir links-to-links(B[m
ok 2 - shared=1 does not clear bits preset by umask 002(B[m
[33mnot ok 14 - clone --local detects misnamed objects # TODO known breakage(B[m
ok 130 - commit NNO files attr= aeol=lf crlf=false CRLF(B[m
ok 14 - multiple unset(B[m
ok 131 - commit NNO files attr= aeol=lf crlf=false CRLF_mix_LF(B[m
ok 15 - multiple unset is correct(B[m
ok 1 - setup(B[m
ok 319 - symlink(B[m
ok 98 - git cat-file --batch-check --follow-symlinks works for parent-dir links(B[m
ok 132 - commit NNO files attr= aeol=lf crlf=false LF_mix_cr(B[m
ok 16 - --replace-all missing value(B[m
ok 3 - shared=1 does not clear bits preset by umask 022(B[m
ok 12 - packsize limit(B[m
ok 133 - commit NNO files attr= aeol=lf crlf=false CRLF_nul(B[m
ok 2 - gitdir selection on normal repos(B[m
ok 320 - symlink with -q(B[m
ok 17 - --replace-all(B[m
ok 15 - fetch into corrupted repo with index-pack(B[m
ok 3 - gitdir selection on unsupported repo(B[m
ok 99 - git cat-file --batch-check --follow-symlinks works for .. links(B[m
ok 18 - all replaced(B[m
ok 8 - set enables config(B[m
ok 4 - shared=all(B[m
ok 321 - symlink with --quiet(B[m
ok 4 - gitdir not required mode(B[m
ok 19 - really mean test(B[m
ok 1 - modify same key(B[m
ok 16 - internal tree objects are not "missing"(B[m
ok 322 - symlink with -v(B[m
ok 100 - git cat-file --batch-check --follow-symlinks works for ../.. links(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 15 test(s)(B[m
[36m1..16(B[m
ok 20 - really really mean test(B[m
ok 9 - set sparse-checkout using builtin(B[m
ok 5 - gitdir required mode(B[m
ok 134 - commit NNO files crlf=false attr= LF(B[m
ok 5 - update-server-info honors core.sharedRepository(B[m
ok 21 - get value(B[m
ok 323 - symlink with -v -n(B[m
ok 101 - git cat-file --batch-check --follow-symlinks works for dir/ links(B[m
ok 2 - add key in same section(B[m
ok 135 - commit NNO files attr= aeol=crlf crlf=false CRLF(B[m
ok 6 - allow version=0 (B[m
*** t1304-default-acl.sh ***
ok 10 - set sparse-checkout using --stdin(B[m
ok 324 - symlink with -v --non-matching(B[m
ok 22 - unset(B[m
ok 136 - commit NNO files attr= aeol=crlf crlf=false CRLF_mix_LF(B[m
ok 7 - allow version=1 (B[m
ok 102 - git cat-file --batch-check --follow-symlinks works for dir/subdir links(B[m
ok 3 - add key in different section(B[m
ok 13 - diff --raw(B[m
ok 6 - shared = 0660 (r--r-----) ro(B[m
ok 137 - commit NNO files attr= aeol=crlf crlf=false LF_mix_cr(B[m
ok 8 - allow version=1 noop(B[m
ok 325 - symlink with --verbose(B[m
ok 23 - multivar(B[m
ok 138 - commit NNO files attr= aeol=crlf crlf=false CRLF_nul(B[m
ok 14 - diff --stat(B[m
ok 24 - non-match(B[m
ok 9 - abort version=1 no-such-extension(B[m
ok 4 - make sure git config escapes section names properly(B[m
ok 11 - add to sparse-checkout(B[m
ok 7 - shared = 0660 (rw-rw----) rw(B[m
ok 22 - gc repacks promisor objects separately from non-promisor objects(B[m
ok 326 - symlink with --verbose -n(B[m
ok 103 - git cat-file --batch-check --follow-symlinks works for dir ->subdir links(B[m
ok 15 - diff(B[m
ok 25 - non-match value(B[m
ok 10 - allow version=0 no-such-extension(B[m
ok 5 - do not crash on special long config line(B[m
ok 16 - diff --cached(B[m
ok 26 - multi-valued get returns final one(B[m
ok 327 - symlink with --verbose --non-matching(B[m
ok 11 - precious-objects allowed(B[m
ok 104 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks(B[m
ok 12 - cone mode: match patterns(B[m
ok 8 - shared = 0640 (r--r-----) ro(B[m
ok 12 - precious-objects blocks destructive repack(B[m
ok 1 - checking for a working acl setup(B[m
ok 17 - hash-object(B[m
ok 27 - multi-valued get-all returns all(B[m
ok 105 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in dirs(B[m
ok 6 - get many entries(B[m
ok 139 - commit NNO files crlf=false attr=auto LF(B[m
ok 328 - beyond a symlink(B[m
ok 13 - cone mode: warn on bad pattern(B[m
ok 18 - cat-file a large file(B[m
ok 9 - shared = 0640 (rw-r-----) rw(B[m
ok 28 - multivar replace(B[m
ok 140 - commit NNO files attr=auto aeol=lf crlf=false CRLF(B[m
ok 29 - ambiguous unset(B[m
ok 141 - commit NNO files attr=auto aeol=lf crlf=false CRLF_mix_LF(B[m
ok 19 - cat-file a large file from a tag(B[m
ok 329 - beyond a symlink with -q(B[m
ok 2 - Setup test repo(B[m
ok 13 - other repacks are OK(B[m
ok 7 - get many entries by regex(B[m
ok 106 - git cat-file --batch-check --follow-symlinks works for out-of-repo symlinks in subdirs(B[m
ok 14 - sparse-checkout disable(B[m
ok 142 - commit NNO files attr=auto aeol=lf crlf=false LF_mix_cr(B[m
ok 30 - invalid unset(B[m
ok 10 - shared = 0600 (r--------) ro(B[m
ok 14 - precious-objects blocks prune(B[m
ok 20 - git-show a large file(B[m
ok 143 - commit NNO files attr=auto aeol=lf crlf=false CRLF_nul(B[m
ok 330 - beyond a symlink with --quiet(B[m
ok 31 - multivar unset(B[m
ok 3 - Objects creation does not break ACLs with restrictive umask(B[m
ok 11 - shared = 0600 (rw-------) rw(B[m
ok 32 - invalid key(B[m
ok 23 - gc does not repack promisor objects if there are none(B[m
ok 331 - beyond a symlink with -v(B[m
ok 33 - correct key(B[m
ok 15 - gc runs without complaint(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 107 - git cat-file --batch-check --follow-symlinks works for symlinks with internal ..(B[m
ok 8 - add and replace one of many entries(B[m
ok 34 - hierarchical section(B[m
*** t1305-config-include.sh ***
ok 332 - beyond a symlink with -v -n(B[m
ok 15 - cone mode: init and set(B[m
ok 35 - hierarchical section value(B[m
ok 12 - shared = 0666 (r--r--r--) ro(B[m
ok 108 - git cat-file --batch-check --follow-symlink breaks loops(B[m
ok 144 - commit NNO files crlf=false attr=auto LF(B[m
ok 36 - working --list(B[m
ok 333 - beyond a symlink with -v --non-matching(B[m
ok 13 - shared = 0666 (rw-rw-rw-) rw(B[m
ok 109 - git cat-file --batch --follow-symlink returns correct sha and mode(B[m
ok 16 - cone mode: list(B[m
ok 9 - replace many entries(B[m
ok 145 - commit NNO files attr=auto aeol=crlf crlf=false CRLF(B[m
ok 37 - --list without repo produces empty output(B[m
ok 146 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_mix_LF(B[m
ok 4 - git gc does not break ACLs with restrictive umask(B[m
ok 334 - beyond a symlink with --verbose(B[m
ok 17 - cone mode: set with nested folders(B[m
ok 38 - --name-only --list(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 147 - commit NNO files attr=auto aeol=crlf crlf=false LF_mix_cr(B[m
*** t1306-xdg-files.sh ***
ok 10 - unset many entries(B[m
ok 14 - shared = 0664 (r--r--r--) ro(B[m
ok 21 - index-pack(B[m
ok 39 - --get-regexp(B[m
ok 148 - commit NNO files attr=auto aeol=crlf crlf=false CRLF_nul(B[m
ok 335 - beyond a symlink with --verbose -n(B[m
ok 18 - cone mode: add independent path(B[m
ok 1 - include file by absolute path(B[m
ok 15 - shared = 0664 (rw-rw-r--) rw(B[m
ok 40 - --name-only --get-regexp(B[m
ok 11 - --add appends new value after existing empty value(B[m
ok 336 - beyond a symlink with --verbose --non-matching(B[m
ok 2 - include file by relative path(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t1307-config-blob.sh ***
ok 22 - repack(B[m
ok 41 - --add(B[m
ok 19 - cone mode: add sibling path(B[m
ok 16 - info/refs respects umask in unshared repo(B[m
ok 3 - chained relative paths(B[m
ok 42 - get variable with no value(B[m
ok 337 - beyond a symlink from subdirectory(B[m
ok 4 - include paths get tilde-expansion(B[m
ok 149 - commit NNO files crlf=false attr=text LF(B[m
ok 43 - get variable with empty value(B[m
ok 20 - cone mode: add parent path(B[m
ok 17 - git reflog expire honors core.sharedRepository(B[m
ok 5 - include options can still be examined(B[m
ok 150 - commit NNO files attr=text aeol=lf crlf=false CRLF(B[m
ok 1 - read config: xdg file exists and ~/.gitconfig doesn't(B[m
ok 44 - get-regexp variable with no value(B[m
ok 338 - beyond a symlink from subdirectory with -q(B[m
ok 110 - cat-file --batch-all-objects shows all objects(B[m
ok 151 - commit NNO files attr=text aeol=lf crlf=false CRLF_mix_LF(B[m
ok 45 - get-regexp --bool variable with no value(B[m
ok 2 - read config: xdg file exists and ~/.gitconfig exists(B[m
ok 6 - listing includes option and expansion(B[m
ok 152 - commit NNO files attr=text aeol=lf crlf=false LF_mix_cr(B[m
ok 339 - beyond a symlink from subdirectory with --quiet(B[m
ok 21 - revert to old sparse-checkout on bad update(B[m
ok 46 - get-regexp variable with empty value(B[m
ok 3 - read with --get: xdg file exists and ~/.gitconfig doesn't(B[m
ok 111 - cat-file --unordered works(B[m
ok 153 - commit NNO files attr=text aeol=lf crlf=false CRLF_nul(B[m
ok 47 - get bool variable with no value(B[m
[32m# passed all 111 test(s)(B[m
[36m1..111(B[m
ok 7 - single file lookup does not expand includes by default(B[m
ok 1 - create config blob(B[m
ok 4 - "$XDG_CONFIG_HOME overrides $HOME/.config/git(B[m
ok 340 - beyond a symlink from subdirectory with -v(B[m
ok 48 - get bool variable with empty value(B[m
ok 8 - single file list does not expand includes by default(B[m
*** t1308-config-set.sh ***
ok 2 - list config blob contents(B[m
ok 5 - read with --get: xdg file exists and ~/.gitconfig exists(B[m
ok 23 - pack-objects with large loose object(B[m
ok 18 - forced modes(B[m
ok 1 - git read-tree -u -m --recurse-submodules: added submodule is checked out(B[m
ok 341 - beyond a symlink from subdirectory with -v -n(B[m
ok 3 - fetch value from blob(B[m
ok 49 - no arguments, but no crash(B[m
ok 6 - read with --list: xdg file exists and ~/.gitconfig doesn't(B[m
ok 22 - revert to old sparse-checkout on empty update(B[m
ok 9 - writing config file does not expand includes(B[m
ok 4 - reading non-existing value from blob is an error(B[m
ok 19 - remote init does not use config from cwd(B[m
ok 24 - tar archiving(B[m
ok 7 - read with --list: xdg file exists and ~/.gitconfig exists(B[m
ok 154 - commit NNO files crlf=false attr=text LF(B[m
ok 5 - reading from blob and file is an error(B[m
ok 50 - new section is partial match of another(B[m
ok 342 - beyond a symlink from subdirectory with -v --non-matching(B[m
ok 23 - fail when lock is taken(B[m
ok 8 - Setup(B[m
ok 155 - commit NNO files attr=text aeol=crlf crlf=false CRLF(B[m
ok 6 - reading from missing ref is an error(B[m
ok 10 - config modification does not affect includes(B[m
ok 51 - new variable inserts into proper section(B[m
ok 20 - re-init respects core.sharedrepository (local)(B[m
ok 156 - commit NNO files attr=text aeol=crlf crlf=false CRLF_mix_LF(B[m
ok 343 - beyond a symlink from subdirectory with --verbose(B[m
ok 9 - Exclusion of a file in the XDG ignore file(B[m
ok 24 - .gitignore should not warn about cone mode(B[m
ok 7 - reading from non-blob is an error(B[m
ok 25 - zip archiving, store only(B[m
ok 11 - missing include files are ignored(B[m
ok 52 - alternative --file (non-existing file should fail)(B[m
ok 1 - setup default config(B[m
ok 157 - commit NNO files attr=text aeol=crlf crlf=false LF_mix_cr(B[m
ok 8 - setting a value in a blob is an error(B[m
ok 24 - repack -d does not irreversibly delete promisor objects(B[m
ok 344 - beyond a symlink from subdirectory with --verbose -n(B[m
ok 12 - absolute includes from command line work(B[m
ok 2 - get value for a simple key(B[m
ok 158 - commit NNO files attr=text aeol=crlf crlf=false CRLF_nul(B[m
ok 9 - deleting a value in a blob is an error(B[m
ok 10 - $XDG_CONFIG_HOME overrides $HOME/.config/git/ignore(B[m
ok 53 - alternative GIT_CONFIG(B[m
ok 21 - re-init respects core.sharedrepository (remote)(B[m
ok 13 - relative includes from command line fail(B[m
ok 10 - editing a blob is an error(B[m
ok 11 - Exclusion in both XDG and local ignore files(B[m
ok 3 - get value for a key with value as an empty string(B[m
ok 54 - alternative GIT_CONFIG (--file)(B[m
ok 345 - beyond a symlink from subdirectory with --verbose --non-matching(B[m
ok 4 - get value for a key with value as NULL(B[m
ok 14 - absolute includes from blobs work(B[m
ok 55 - alternative GIT_CONFIG (--file=-)(B[m
ok 26 - zip archiving, deflate(B[m
ok 12 - Exclusion in a non-XDG global ignore file(B[m
ok 22 - template can set core.sharedrepository(B[m
ok 56 - setting a value in stdin is an error(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 346 - submodule(B[m
ok 5 - upper case key(B[m
ok 15 - relative includes from blobs fail(B[m
ok 13 - Checking XDG ignore file when HOME is unset(B[m
ok 25 - sparse-checkout (init|set|disable) fails with dirty status(B[m
ok 57 - editing stdin is an error(B[m
*** t1309-early-config.sh ***
ok 159 - commit NNO files crlf=input attr=-text LF(B[m
ok 11 - parse errors in blobs are properly attributed(B[m
ok 16 - absolute includes from stdin work(B[m
ok 27 - fsck large blobs(B[m
ok 347 - submodule with -q(B[m
ok 160 - commit NNO files attr=-text aeol= crlf=input CRLF(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 58 - refer config from subdirectory(B[m
ok 14 - Checking attributes in the XDG attributes file(B[m
ok 17 - relative includes from stdin line fail(B[m
ok 6 - mixed case key(B[m
ok 161 - commit NNO files attr=-text aeol= crlf=input CRLF_mix_LF(B[m
ok 26 - cone mode: set with core.ignoreCase=true(B[m
ok 59 - refer config from subdirectory via --file(B[m
*** t1310-config-default.sh ***
ok 348 - submodule with --quiet(B[m
ok 15 - Checking XDG attributes when HOME is unset(B[m
ok 12 - can parse blob ending with CR(B[m
ok 162 - commit NNO files attr=-text aeol= crlf=input LF_mix_cr(B[m
ok 7 - key and value with mixed case(B[m
ok 18 - conditional include, both unanchored(B[m
ok 60 - --set in alternative file(B[m
ok 16 - $XDG_CONFIG_HOME overrides $HOME/.config/git/attributes(B[m
ok 163 - commit NNO files attr=-text aeol= crlf=input CRLF_nul(B[m
ok 13 - config --blob outside of a repository is an error(B[m
ok 349 - submodule with -v(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 61 - rename section(B[m
ok 19 - conditional include, $HOME expansion(B[m
ok 17 - Checking attributes in both XDG and local attributes files(B[m
*** t1350-config-hooks-path.sh ***
ok 8 - key with case sensitive subsection(B[m
ok 350 - submodule with -v -n(B[m
ok 62 - rename succeeded(B[m
ok 20 - conditional include, full pattern(B[m
ok 63 - rename non-existing section(B[m
ok 18 - Checking attributes in a non-XDG global attributes file(B[m
ok 21 - conditional include, relative path(B[m
ok 64 - rename succeeded(B[m
ok 1 - read early config(B[m
ok 351 - submodule with -v --non-matching(B[m
ok 19 - write: xdg file exists and ~/.gitconfig doesn't(B[m
ok 65 - rename another section(B[m
ok 22 - conditional include, both unanchored, icase(B[m
ok 9 - key with case insensitive section header(B[m
ok 164 - commit NNO files crlf=input attr=-text LF(B[m
ok 1 - uses --default when entry missing(B[m
ok 352 - submodule with --verbose(B[m
ok 66 - rename succeeded(B[m
ok 20 - write: xdg file exists and ~/.gitconfig exists(B[m
ok 165 - commit NNO files attr=-text aeol=lf crlf=input CRLF(B[m
ok 2 - in a sub-directory(B[m
ok 23 - conditional include, early config reading(B[m
ok 2 - does not use --default when entry present(B[m
ok 67 - rename a section with a var on the same line(B[m
ok 166 - commit NNO files attr=-text aeol=lf crlf=input CRLF_mix_LF(B[m
ok 353 - submodule with --verbose -n(B[m
ok 21 - write: ~/.config/git/ exists and config file doesn't(B[m
ok 25 - gc stops traversal when a missing but promised object is reached(B[m
ok 3 - canonicalizes --default with appropriate type(B[m
ok 68 - rename succeeded(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 10 - key with case insensitive section header & variable(B[m
ok 167 - commit NNO files attr=-text aeol=lf crlf=input LF_mix_cr(B[m
ok 1 - set up a pre-commit hook in core.hooksPath(B[m
ok 3 - ceiling(B[m
ok 24 - conditional include with /**/(B[m
*** t1400-update-ref.sh ***
ok 69 - renaming empty section name is rejected(B[m
ok 354 - submodule with --verbose --non-matching(B[m
ok 168 - commit NNO files attr=-text aeol=lf crlf=input CRLF_nul(B[m
ok 11 - find value with misspelled key(B[m
ok 2 - git read-tree -u -m --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 4 - dies when --default cannot be parsed(B[m
ok 70 - renaming to bogus section is rejected(B[m
ok 12 - find value with the highest priority(B[m
ok 5 - does not allow --default without --get(B[m
ok 71 - remove section(B[m
ok 25 - conditional include, set up symlinked $HOME(B[m
ok 355 - submodule from subdirectory(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 4 - ceiling #2(B[m
ok 13 - find integer value for a key(B[m
*** t1401-symbolic-ref.sh ***
ok 72 - section was removed properly(B[m
ok 26 - conditional include, $HOME expansion with symlinks(B[m
ok 356 - submodule from subdirectory with -q(B[m
ok 14 - find string value for a key(B[m
ok 5 - read config file in right order(B[m
ok 27 - conditional include, relative path with symlinks(B[m
ok 169 - commit NNO files crlf=input attr=-text LF(B[m
ok 73 - section ending(B[m
ok 357 - submodule from subdirectory with --quiet(B[m
ok 170 - commit NNO files attr=-text aeol=crlf crlf=input CRLF(B[m
ok 27 - interaction with submodules(B[m
ok 15 - check line error when NULL string is queried(B[m
ok 28 - conditional include, gitdir matching symlink(B[m
ok 171 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_mix_LF(B[m
ok 358 - submodule from subdirectory with -v(B[m
ok 6 - ignore .git/ with incompatible repository version(B[m
ok 74 - numbers(B[m
ok 16 - find integer if value is non parse-able(B[m
ok 172 - commit NNO files attr=-text aeol=crlf crlf=input LF_mix_cr(B[m
ok 26 - do not fetch when checking existence of tree we construct ourselves(B[m
ok 29 - conditional include, gitdir matching symlink, icase(B[m
ok 173 - commit NNO files attr=-text aeol=crlf crlf=input CRLF_nul(B[m
ok 359 - submodule from subdirectory with -v -n(B[m
ok 1 - symbolic-ref writes HEAD(B[m
ok 75 - --int is at least 64 bits(B[m
[33mnot ok 7 - ignore .git/ with invalid repository version # TODO known breakage(B[m
[32m# passed all 26 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..26(B[m
ok 2 - symbolic-ref reads HEAD(B[m
ok 30 - conditional include, onbranch(B[m
ok 360 - submodule from subdirectory with -v --non-matching(B[m
ok 28 - different sparse-checkouts with worktrees(B[m
[33mnot ok 8 - ignore .git/ with invalid config # TODO known breakage(B[m
ok 3 - symbolic-ref refuses non-ref for HEAD(B[m
ok 76 - invalid unit(B[m
ok 17 - find bool value for the entered key(B[m
*** t1402-check-ref-format.sh ***
ok 361 - submodule from subdirectory with --verbose(B[m
ok 77 - line number is reported correctly(B[m
ok 29 - set using filename keeps file on-disk(B[m
ok 18 - find multiple values(B[m
ok 2 - Check that various forms of specifying core.hooksPath work(B[m
ok 9 - early config and onbranch(B[m
ok 78 - invalid stdin config(B[m
ok 174 - commit NNO files crlf=input attr= LF(B[m
ok 362 - submodule from subdirectory with --verbose -n(B[m
ok 19 - find value from a configset(B[m
ok 4 - symbolic-ref refuses bare sha1(B[m
ok 31 - conditional include, onbranch, wildcard(B[m
ok 3 - git rev-parse --git-path hooks(B[m
ok 175 - commit NNO files attr= aeol=lf crlf=input CRLF(B[m
ok 20 - find value with highest priority from a configset(B[m
ok 30 - pattern-checks: /A/**(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 5 - HEAD cannot be removed(B[m
ok 363 - submodule from subdirectory with --verbose --non-matching(B[m
ok 10 - onbranch config outside of git repo(B[m
*** t1403-show-ref.sh ***
ok 176 - commit NNO files attr= aeol=lf crlf=input CRLF_mix_LF(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 8 test(s)(B[m
[36m1..10(B[m
ok 21 - find value_list for a key from a configset(B[m
ok 6 - symbolic-ref can be deleted(B[m
*** t1404-update-ref-errors.sh ***
ok 177 - commit NNO files attr= aeol=lf crlf=input LF_mix_cr(B[m
ok 32 - conditional include, onbranch, implicit /** for /(B[m
ok 364 - global ignore not yet enabled(B[m
ok 22 - proper error on non-existent files(B[m
ok 1 - ref name '' is invalid(B[m
ok 178 - commit NNO files attr= aeol=lf crlf=input CRLF_nul(B[m
ok 7 - symbolic-ref can delete dangling symref(B[m
ok 31 - pattern-checks: /A/**/B/(B[m
ok 2 - ref name '/' is invalid(B[m
ok 8 - symbolic-ref fails to delete missing FOO(B[m
ok 1 - setup(B[m
ok 365 - global ignore(B[m
ok 33 - include cycles are detected(B[m
ok 23 - proper error on directory "files"(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 3 - ref name '/' is invalid with options --allow-onelevel(B[m
ok 32 - pattern-checks: too short(B[m
ok 2 - create refs/heads/master(B[m
ok 9 - symbolic-ref fails to delete real ref(B[m
*** t1405-main-ref-store.sh ***
ok 4 - ref name '/' is invalid with options --normalize(B[m
ok 366 - global ignore with -v(B[m
ok 79 - bool(B[m
ok 3 - create refs/heads/master with oldvalue verification(B[m
ok 33 - pattern-checks: not too short(B[m
ok 179 - commit NNO files crlf=input attr= LF(B[m
ok 5 - ref name '/' is invalid with options --allow-onelevel --normalize(B[m
ok 10 - create large ref name(B[m
ok 4 - fail to delete refs/heads/master with stale ref(B[m
ok 80 - invalid bool (--get)(B[m
ok 180 - commit NNO files attr= aeol=crlf crlf=input CRLF(B[m
ok 6 - ref name 'foo/bar/baz' is valid(B[m
ok 24 - proper error on non-accessible files(B[m
ok 81 - invalid bool (set)(B[m
ok 5 - delete refs/heads/master(B[m
ok 181 - commit NNO files attr= aeol=crlf crlf=input CRLF_mix_LF(B[m
ok 7 - ref name 'foo/bar/baz' is valid with options --normalize(B[m
ok 34 - pattern-checks: trailing "*"(B[m
ok 11 - symbolic-ref can point to large ref name(B[m
ok 367 - --stdin(B[m
ok 25 - proper error on error in default config files(B[m
ok 8 - ref name 'refs///heads/foo' is invalid(B[m
ok 182 - commit NNO files attr= aeol=crlf crlf=input LF_mix_cr(B[m
ok 12 - we can parse long symbolic ref(B[m
ok 9 - ref name 'refs///heads/foo' is valid with options --normalize(B[m
ok 6 - delete refs/heads/master without oldvalue verification(B[m
ok 183 - commit NNO files attr= aeol=crlf crlf=input CRLF_nul(B[m
ok 26 - proper error on error in custom config files(B[m
ok 1 - setup(B[m
ok 368 - --stdin -q(B[m
ok 10 - ref name 'heads/foo/' is invalid(B[m
ok 35 - pattern-checks: starting "*"(B[m
ok 7 - fail to create refs/heads/gu/fixes(B[m
ok 11 - ref name '/heads/foo' is invalid(B[m
ok 369 - --stdin -v(B[m
ok 27 - check line errors for malformed values(B[m
ok 8 - create refs/heads/master (by HEAD)(B[m
ok 82 - set --bool(B[m
ok 12 - ref name '/heads/foo' is valid with options --normalize(B[m
ok 1 - pack_refs(PACK_REFS_ALL | PACK_REFS_PRUNE)(B[m
ok 1 - setup(B[m
ok 9 - create refs/heads/master (by HEAD) with oldvalue verification(B[m
ok 28 - error on modifying repo config without repo(B[m
ok 370 - --stdin -z(B[m
ok 13 - ref name '///heads/foo' is invalid(B[m
ok 2 - existing loose ref is a simple prefix of new(B[m
ok 184 - commit NNO files crlf=input attr=auto LF(B[m
ok 14 - ref name '///heads/foo' is valid with options --normalize(B[m
ok 10 - fail to delete refs/heads/master (by HEAD) with stale ref(B[m
ok 83 - set --int(B[m
ok 29 - iteration shows correct origins(B[m
ok 2 - peel_ref(new-tag)(B[m
ok 371 - --stdin -z -q(B[m
ok 185 - commit NNO files attr=auto aeol=lf crlf=input CRLF(B[m
[32m# passed all 29 test(s)(B[m
[36m1..29(B[m
ok 15 - ref name './foo' is invalid(B[m
*** t1406-submodule-ref-store.sh ***
ok 11 - delete refs/heads/master (by HEAD)(B[m
ok 186 - commit NNO files attr=auto aeol=lf crlf=input CRLF_mix_LF(B[m
ok 2 - show-ref(B[m
ok 16 - ref name './foo/bar' is invalid(B[m
ok 3 - create_symref(FOO, refs/heads/master)(B[m
ok 372 - --stdin -z -v(B[m
ok 3 - existing packed ref is a simple prefix of new(B[m
ok 187 - commit NNO files attr=auto aeol=lf crlf=input LF_mix_cr(B[m
ok 17 - ref name 'foo/./bar' is invalid(B[m
ok 188 - commit NNO files attr=auto aeol=lf crlf=input CRLF_nul(B[m
ok 13 - symbolic-ref reports failure in exit code(B[m
ok 18 - ref name 'foo/bar/.' is invalid(B[m
ok 84 - get --bool-or-int(B[m
ok 3 - show-ref -q(B[m
ok 12 - deleting current branch adds message to HEAD's log(B[m
ok 373 - -z --stdin(B[m
ok 36 - pattern-checks: contained glob characters(B[m
ok 19 - ref name '.refs/foo' is invalid(B[m
ok 4 - delete_refs(FOO, refs/tags/new-tag)(B[m
ok 4 - existing loose ref is a deeper prefix of new(B[m
ok 20 - ref name 'refs/heads/foo.' is invalid(B[m
ok 374 - -z --stdin -q(B[m
ok 13 - deleting by HEAD adds message to HEAD's log(B[m
ok 21 - ref name 'heads/foo..bar' is invalid(B[m
ok 4 - show-ref --verify(B[m
ok 22 - ref name 'heads/foo?bar' is invalid(B[m
ok 375 - -z --stdin -v(B[m
ok 85 - set --bool-or-int(B[m
ok 189 - commit NNO files crlf=input attr=auto LF(B[m
ok 23 - ref name 'foo./bar' is valid(B[m
ok 5 - rename_refs(master, new-master)(B[m
ok 5 - existing packed ref is a deeper prefix of new(B[m
ok 5 - show-ref --verify -q(B[m
ok 190 - commit NNO files attr=auto aeol=crlf crlf=input CRLF(B[m
ok 24 - ref name 'heads/foo.lock' is invalid(B[m
ok 14 - update-ref does not create reflogs by default(B[m
ok 1 - setup(B[m
ok 6 - for_each_ref(refs/heads/)(B[m
ok 191 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_mix_LF(B[m
ok 25 - ref name 'heads///foo.lock' is invalid(B[m
ok 2 - pack_refs() not allowed(B[m
ok 86 - set --path(B[m
ok 3 - git read-tree -u -m --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 192 - commit NNO files attr=auto aeol=crlf crlf=input LF_mix_cr(B[m
ok 14 - symbolic-ref writes reflog entry(B[m
ok 26 - ref name 'foo.lock/bar' is invalid(B[m
ok 376 - --stdin from subdirectory(B[m
ok 7 - for_each_ref() is sorted(B[m
ok 6 - new ref is a simple prefix of existing loose(B[m
ok 193 - commit NNO files attr=auto aeol=crlf crlf=input CRLF_nul(B[m
ok 27 - ref name 'foo.lock///bar' is invalid(B[m
ok 15 - update-ref creates reflogs with --create-reflog(B[m
ok 3 - peel_ref(new-tag)(B[m
ok 8 - resolve_ref(new-master)(B[m
ok 28 - ref name 'heads/foo@bar' is valid(B[m
ok 87 - get --path(B[m
ok 377 - --stdin from subdirectory with -v(B[m
ok 4 - create_symref() not allowed(B[m
ok 29 - ref name 'heads/v@{ation' is invalid(B[m
ok 9 - verify_ref(new-master)(B[m
ok 5 - delete_refs() not allowed(B[m
ok 30 - ref name 'heads/foo\bar' is invalid(B[m
ok 378 - --stdin from subdirectory with -v -n(B[m
ok 7 - new ref is a simple prefix of existing packed(B[m
ok 16 - creates no reflog in bare repository(B[m
ok 10 - for_each_reflog()(B[m
ok 6 - rename_refs() not allowed(B[m
ok 15 - symbolic-ref does not create ref d/f conflicts(B[m
ok 37 - pattern-checks: escaped characters(B[m
ok 88 - get --path copes with unset $HOME(B[m
ok 31 - ref name 'heads/foo	' is invalid(B[m
[34mok 38 # skip cone mode replaces backslashes with slashes (missing MINGW)(B[m
ok 194 - commit NNO files crlf=input attr=text LF(B[m
[32m# passed all 38 test(s)(B[m
[36m1..38(B[m
ok 89 - get --path barfs on boolean variable(B[m
ok 11 - for_each_reflog_ent()(B[m
ok 7 - for_each_ref(refs/heads/)(B[m
ok 32 - ref name 'heads/foo' is invalid(B[m
ok 379 - --stdin -z from subdirectory(B[m
ok 195 - commit NNO files attr=text aeol=lf crlf=input CRLF(B[m
ok 8 - new ref is a deeper prefix of existing loose(B[m
ok 33 - ref name 'heads/fuß' is valid(B[m
ok 6 - show-ref -d(B[m
ok 8 - for_each_ref() is sorted(B[m
ok 12 - for_each_reflog_ent_reverse()(B[m
ok 196 - commit NNO files attr=text aeol=lf crlf=input CRLF_mix_LF(B[m
ok 16 - symbolic-ref can overwrite pointer to invalid name(B[m
ok 17 - core.logAllRefUpdates=true creates reflog in bare repository(B[m
*** t1407-worktree-ref-store.sh ***
ok 34 - ref name 'heads/*foo/bar' is valid with options --refspec-pattern(B[m
ok 380 - --stdin -z from subdirectory with -v(B[m
ok 197 - commit NNO files attr=text aeol=lf crlf=input LF_mix_cr(B[m
ok 13 - reflog_exists(HEAD)(B[m
ok 9 - resolve_ref(master)(B[m
ok 35 - ref name 'heads/foo*/bar' is valid with options --refspec-pattern(B[m
ok 14 - delete_reflog(HEAD)(B[m
ok 198 - commit NNO files attr=text aeol=lf crlf=input CRLF_nul(B[m
ok 10 - verify_ref(new-master)(B[m
ok 36 - ref name 'heads/f*o/bar' is valid with options --refspec-pattern(B[m
ok 90 - get --expiry-date(B[m
ok 381 - -z --stdin from subdirectory(B[m
ok 15 - create-reflog(HEAD)(B[m
ok 9 - new ref is a deeper prefix of existing packed(B[m
ok 17 - symbolic-ref can resolve d/f name (EISDIR)(B[m
ok 37 - ref name 'heads/f*o*/bar' is invalid with options --refspec-pattern(B[m
ok 11 - for_each_reflog()(B[m
ok 18 - core.logAllRefUpdates=true does not create reflog by default(B[m
ok 38 - ref name 'heads/foo*/bar*' is invalid with options --refspec-pattern(B[m
ok 91 - get --type=color(B[m
ok 382 - -z --stdin from subdirectory with -v(B[m
ok 39 - ref name 'foo' is invalid(B[m
ok 12 - for_each_reflog_ent()(B[m
ok 10 - one new ref is a simple prefix of another(B[m
ok 40 - ref name 'foo' is valid with options --allow-onelevel(B[m
ok 92 - set --type=color(B[m
ok 18 - symbolic-ref can resolve d/f name (ENOTDIR)(B[m
ok 199 - commit NNO files crlf=input attr=text LF(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 13 - for_each_reflog_ent_reverse()(B[m
ok 41 - ref name 'foo' is invalid with options --refspec-pattern(B[m
ok 93 - get --type=color barfs on non-color(B[m
ok 200 - commit NNO files attr=text aeol=crlf crlf=input CRLF(B[m
*** t1408-packed-refs.sh ***
ok 14 - reflog_exists(HEAD)(B[m
ok 42 - ref name 'foo' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 383 - streaming support for --stdin(B[m
ok 19 - core.logAllRefUpdates=always creates reflog by default(B[m
ok 94 - set --type=color barfs on non-color(B[m
ok 11 - empty directory should not fool rev-parse(B[m
ok 201 - commit NNO files attr=text aeol=crlf crlf=input CRLF_mix_LF(B[m
ok 15 - delete_reflog() not allowed(B[m
ok 43 - ref name 'foo' is invalid with options --normalize(B[m
ok 16 - delete_ref(refs/heads/foo)(B[m
ok 202 - commit NNO files attr=text aeol=crlf crlf=input LF_mix_cr(B[m
ok 16 - create-reflog() not allowed(B[m
ok 44 - ref name 'foo' is valid with options --allow-onelevel --normalize(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 384 - existing file and directory(B[m
ok 203 - commit NNO files attr=text aeol=crlf crlf=input CRLF_nul(B[m
ok 45 - ref name 'foo/bar' is valid(B[m
ok 20 - core.logAllRefUpdates=always creates no reflog for ORIG_HEAD(B[m
*** t1409-avoid-packing-refs.sh ***
ok 12 - empty directory should not fool for-each-ref(B[m
ok 95 - quoting(B[m
ok 7 - show-ref --heads, --tags, --head, pattern(B[m
ok 17 - delete_ref(refs/heads/foo)(B[m
ok 46 - ref name 'foo/bar' is valid with options --allow-onelevel(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 1 - setup(B[m
ok 385 - existing directory and file(B[m
ok 13 - empty directory should not fool create(B[m
*** t1410-reflog.sh ***
ok 96 - key with newline(B[m
ok 47 - ref name 'foo/bar' is valid with options --refspec-pattern(B[m
ok 8 - show-ref --verify HEAD(B[m
ok 48 - ref name 'foo/bar' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 97 - value with newline(B[m
ok 386 - trailing whitespace is ignored(B[m
ok 2 - resolve_ref(<shared-ref>)(B[m
ok 49 - ref name 'foo/bar' is valid with options --normalize(B[m
ok 14 - empty directory should not fool verify(B[m
ok 21 - --no-create-reflog overrides core.logAllRefUpdates=always(B[m
ok 204 - commit NNO files crlf=false attr=text LF(B[m
ok 98 - value continued on next line(B[m
ok 50 - ref name 'foo/*' is invalid(B[m
ok 387 - quoting allows trailing whitespace(B[m
ok 22 - create refs/heads/master (by HEAD)(B[m
ok 51 - ref name 'foo/*' is invalid with options --allow-onelevel(B[m
ok 205 - commit NNO files attr=text aeol= crlf=false CRLF(B[m
ok 4 - git read-tree -u -m --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
ok 15 - empty directory should not fool 1-arg update(B[m
ok 23 - pack refs(B[m
ok 99 - --null --list(B[m
ok 52 - ref name 'foo/*' is valid with options --refspec-pattern(B[m
ok 3 - resolve_ref(<per-worktree-ref>)(B[m
ok 206 - commit NNO files attr=text aeol= crlf=false CRLF_mix_LF(B[m
ok 388 - correct handling of backslashes(B[m
ok 53 - ref name 'foo/*' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 24 - move refs/heads/master (by HEAD)(B[m
ok 9 - show-ref --verify with dangling ref(B[m
ok 207 - commit NNO files attr=text aeol= crlf=false LF_mix_cr(B[m
ok 100 - --null --get-regexp(B[m
ok 389 - info/exclude trumps core.excludesfile(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
[32m# passed all 389 test(s)(B[m
[36m1..389(B[m
ok 16 - empty directory should not fool 2-arg update(B[m
ok 54 - ref name '*/foo' is invalid(B[m
ok 208 - commit NNO files attr=text aeol= crlf=false CRLF_nul(B[m
*** t1411-reflog-show.sh ***
ok 25 - delete refs/heads/master (by HEAD) should remove both packed and loose refs/heads/master(B[m
ok 4 - create_symref(FOO, refs/heads/master)(B[m
*** t1412-reflog-loop.sh ***
ok 55 - ref name '*/foo' is invalid with options --allow-onelevel(B[m
ok 101 - inner whitespace kept verbatim(B[m
ok 56 - ref name '*/foo' is valid with options --refspec-pattern(B[m
ok 1 - setup(B[m
ok 26 - delete symref without dereference(B[m
ok 17 - empty directory should not fool 0-arg delete(B[m
ok 57 - ref name '*/foo' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 58 - ref name '*/foo' is invalid with options --normalize(B[m
ok 5 - for_each_reflog()(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 2 - do not create packed-refs file gratuitously(B[m
ok 1 - setup(B[m
ok 59 - ref name '*/foo' is valid with options --refspec-pattern --normalize(B[m
ok 18 - empty directory should not fool 1-arg delete(B[m
*** t1413-reflog-detach.sh ***
ok 60 - ref name 'foo/*/bar' is invalid(B[m
ok 27 - delete symref without dereference when the referred ref is packed(B[m
ok 209 - commit NNO files crlf=true attr=text LF(B[m
ok 102 - symlinked configuration(B[m
ok 2 - no error from stale entry in packed-refs(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 61 - ref name 'foo/*/bar' is invalid with options --allow-onelevel(B[m
ok 210 - commit NNO files attr=text aeol= crlf=true CRLF(B[m
*** t1414-reflog-walk.sh ***
ok 103 - nonexistent configuration(B[m
ok 62 - ref name 'foo/*/bar' is valid with options --refspec-pattern(B[m
ok 19 - D/F conflict prevents add long + delete short(B[m
ok 211 - commit NNO files attr=text aeol= crlf=true CRLF_mix_LF(B[m
ok 28 - update-ref -d is not confused by self-reference(B[m
ok 1 - setup(B[m
ok 63 - ref name 'foo/*/bar' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 212 - commit NNO files attr=text aeol= crlf=true LF_mix_cr(B[m
ok 3 - check that marking the packed-refs file works(B[m
ok 64 - ref name '*' is invalid(B[m
ok 104 - symlink to nonexistent configuration(B[m
ok 29 - update-ref --no-deref -d can delete self-reference(B[m
ok 213 - commit NNO files attr=text aeol= crlf=true CRLF_nul(B[m
ok 2 - log -g shows reflog headers(B[m
ok 65 - ref name '*' is invalid with options --allow-onelevel(B[m
ok 20 - D/F conflict prevents add short + delete long(B[m
ok 1 - setup commits(B[m
ok 66 - ref name '*' is invalid with options --refspec-pattern(B[m
ok 4 - leave packed-refs untouched on update of packed(B[m
ok 30 - update-ref --no-deref -d can delete reference to bad ref(B[m
ok 3 - oneline reflog format(B[m
ok 67 - ref name '*' is valid with options --refspec-pattern --allow-onelevel(B[m
ok 31 - (not) create HEAD with old sha1(B[m
ok 4 - reflog default format(B[m
ok 68 - ref name 'foo/*/*' is invalid with options --refspec-pattern(B[m
ok 21 - D/F conflict prevents delete long + add short(B[m
ok 105 - check split_cmdline return(B[m
ok 32 - (not) prior created .git/refs/heads/master(B[m
ok 5 - leave packed-refs untouched on checked update of packed(B[m
ok 1 - setup(B[m
ok 69 - ref name 'foo/*/*' is invalid with options --refspec-pattern --allow-onelevel(B[m
ok 5 - override reflog default format(B[m
ok 33 - create HEAD(B[m
ok 2 - setup reflog with alternating commits(B[m
ok 214 - commit NNO files crlf=input attr=text LF(B[m
ok 70 - ref name '*/foo/*' is invalid with options --refspec-pattern(B[m
ok 34 - (not) change HEAD with wrong SHA1(B[m
ok 215 - commit NNO files attr=text aeol= crlf=input CRLF(B[m
ok 3 - reflog shows all entries(B[m
ok 22 - D/F conflict prevents delete short + add long(B[m
ok 6 - using @{now} syntax shows reflog date (multiline)(B[m
ok 71 - ref name '*/foo/*' is invalid with options --refspec-pattern --allow-onelevel(B[m
ok 106 - git -c "key=value" support(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 35 - (not) changed .git/refs/heads/master(B[m
ok 6 - leave packed-refs untouched on verify of packed(B[m
ok 2 - baseline(B[m
ok 216 - commit NNO files attr=text aeol= crlf=input CRLF_mix_LF(B[m
*** t1415-worktree-refs.sh ***
ok 72 - ref name '*/*/foo' is invalid with options --refspec-pattern(B[m
ok 107 - git -c can represent empty string(B[m
ok 7 - using @{now} syntax shows reflog date (oneline)(B[m
ok 73 - ref name '*/*/foo' is invalid with options --refspec-pattern --allow-onelevel(B[m
ok 217 - commit NNO files attr=text aeol= crlf=input LF_mix_cr(B[m
ok 36 - create refs/heads/master (logged by touch)(B[m
ok 74 - ref name '/foo' is invalid(B[m
ok 8 - using @{now} syntax shows reflog date (format=%gd)(B[m
ok 7 - touch packed-refs on delete of packed(B[m
ok 218 - commit NNO files attr=text aeol= crlf=input CRLF_nul(B[m
ok 23 - D/F conflict prevents add long + delete short packed(B[m
ok 3 - switch to branch(B[m
ok 75 - ref name '/foo' is invalid with options --allow-onelevel(B[m
ok 9 - using --date= shows reflog date (multiline)(B[m
ok 1 - set up some reflog entries(B[m
ok 37 - update refs/heads/master (logged by touch)(B[m
ok 76 - ref name '/foo' is invalid with options --refspec-pattern(B[m
ok 5 - git read-tree -u -m --recurse-submodules: replace directory with submodule(B[m
ok 8 - leave packed-refs untouched on update of loose(B[m
ok 2 - set up expected reflog(B[m
ok 10 - using --date= shows reflog date (oneline)(B[m
ok 77 - ref name '/foo' is invalid with options --refspec-pattern --allow-onelevel(B[m
ok 24 - D/F conflict prevents add short + delete long packed(B[m
ok 3 - reflog walk shows expected logs(B[m
ok 4 - detach to other(B[m
ok 108 - key sanity-checking(B[m
ok 38 - set refs/heads/master (logged by touch)(B[m
ok 78 - ref name '/foo' is invalid with options --normalize(B[m
ok 11 - using --date= shows reflog date (format=%gd)(B[m
ok 9 - leave packed-refs untouched on checked update of loose(B[m
ok 4 - reflog can limit with --no-merges(B[m
ok 79 - ref name '/foo' is valid with options --allow-onelevel --normalize(B[m
ok 109 - git -c works with aliases of builtins(B[m
ok 39 - empty directory removal(B[m
ok 25 - D/F conflict prevents delete long packed + add short(B[m
ok 80 - ref name '/foo' is invalid with options --refspec-pattern --normalize(B[m
ok 5 - reflog can limit with pathspecs(B[m
ok 5 - detach to self(B[m
ok 12 - log.date does not invoke "--date" magic (multiline)(B[m
ok 10 - leave packed-refs untouched on verify of loose(B[m
ok 81 - ref name '/foo' is valid with options --refspec-pattern --allow-onelevel --normalize(B[m
ok 6 - pathspec limiting handles merges(B[m
ok 219 - commit NNO and cleanup(B[m
ok 110 - aliases can be CamelCased(B[m
ok 40 - symref empty directory removal(B[m
ok 26 - D/F conflict prevents delete short packed + add long(B[m
ok 13 - log.date does not invoke "--date" magic (oneline)(B[m
ok 111 - git -c does not split values on equals(B[m
ok 7 - --parents shows true parents(B[m
ok 6 - attach to self(B[m
ok 11 - leave packed-refs untouched on delete of loose(B[m
ok 41 - verifying refs/heads/master's log (logged by touch)(B[m
ok 112 - git -c dies on bogus config(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t1420-lost-found.sh ***
ok 113 - git -c complains about empty key(B[m
ok 14 - log.date does not invoke "--date" magic (format=%gd)(B[m
ok 114 - git -c complains about empty key and value(B[m
ok 27 - D/F conflict prevents indirect add long + delete short(B[m
ok 42 - create refs/heads/master (logged by config)(B[m
ok 8 - walking multiple reflogs shows all(B[m
ok 82 - check-ref-format --branch @{-1}(B[m
ok 15 - --date magic does not override explicit @{0} syntax(B[m
ok 7 - attach to other(B[m
ok 83 - check-ref-format --branch -naster(B[m
ok 9 - date-limiting does not interfere with other logs(B[m
ok 1 - setup(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
*** t1430-bad-ref-name.sh ***
ok 43 - update refs/heads/master (logged by config)(B[m
ok 2 - refs/worktree must not be packed(B[m
ok 115 - multiple git -c appends config(B[m
ok 16 - empty reflog file(B[m
ok 28 - D/F conflict prevents indirect add long + indirect delete short(B[m
ok 44 - set refs/heads/master (logged by config)(B[m
ok 10 - min/max age uses entry date to limit(B[m
ok 45 - verifying refs/heads/master's log (logged by config)(B[m
ok 84 - check-ref-format --branch from subdir(B[m
ok 116 - last one wins: two level vars(B[m
ok 3 - refs/worktree are per-worktree(B[m
ok 1 - setup(B[m
ok 46 - set up for querying the reflog(B[m
ok 11 - walk prefers reflog to ref tip(B[m
ok 29 - D/F conflict prevents indirect add short + indirect delete long(B[m
ok 85 - check-ref-format --branch @{-1} from non-repo(B[m
ok 12 - rev-list -g complains when there are no reflogs(B[m
ok 1 - setup(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 86 - check-ref-format --branch master from non-repo(B[m
ok 220 - commit empty gitattribues(B[m
*** t1450-fsck.sh ***
ok 47 - Query "master@{May 25 2005}" (before history)(B[m
ok 87 - ref name 'heads/foo' simplifies to 'heads/foo'(B[m
ok 4 - resolve main-worktree/HEAD(B[m
ok 17 - git log -g -p shows diffs vs. parents(B[m
ok 88 - ref name 'refs///heads/foo' simplifies to 'refs/heads/foo'(B[m
ok 117 - last one wins: three level vars(B[m
ok 30 - D/F conflict prevents indirect delete long + indirect add short(B[m
ok 48 - Query master@{2005-05-25} (before history)(B[m
ok 89 - ref name '/heads/foo' simplifies to 'heads/foo'(B[m
ok 18 - reflog exists works(B[m
ok 5 - ambiguous main-worktree/HEAD(B[m
ok 1 - setup(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 2 - lost and found something(B[m
ok 90 - ref name '///heads/foo' simplifies to 'heads/foo'(B[m
ok 49 - Query "master@{May 26 2005 23:31:59}" (1 second before history)(B[m
*** t1500-rev-parse.sh ***
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t1501-work-tree.sh ***
ok 91 - check-ref-format --normalize rejects 'foo'(B[m
ok 2 - fast-import: fail on invalid branch name ".badbranchname"(B[m
ok 50 - Query "master@{May 26 2005 23:32:00}" (exactly history start)(B[m
ok 31 - D/F conflict prevents indirect add long + delete short packed(B[m
ok 92 - check-ref-format --normalize rejects '/foo'(B[m
ok 6 - resolve worktrees/xx/HEAD(B[m
ok 3 - fast-import: fail on invalid branch name "bad[branch]name"(B[m
ok 51 - Query "master@{May 26 2005 23:32:30}" (first non-creation change)(B[m
ok 93 - check-ref-format --normalize rejects 'heads/foo/../bar'(B[m
ok 118 - old-fashioned settings are case insensitive(B[m
ok 94 - check-ref-format --normalize rejects 'heads/./foo'(B[m
ok 52 - Query "master@{2005-05-26 23:33:01}" (middle of history with gap)(B[m
ok 7 - ambiguous worktrees/xx/HEAD(B[m
ok 95 - check-ref-format --normalize rejects 'heads\foo'(B[m
ok 4 - git branch shows badly named ref as warning(B[m
ok 96 - check-ref-format --normalize rejects 'heads/foo.lock'(B[m
ok 53 - Query "master@{2005-05-26 23:38:00}" (middle of history)(B[m
ok 32 - D/F conflict prevents indirect add long + indirect delete short packed(B[m
ok 119 - setting different case sensitive subsections (B[m
ok 97 - check-ref-format --normalize rejects 'heads///foo.lock'(B[m
ok 8 - reflog of main-worktree/HEAD(B[m
ok 54 - Query "master@{2005-05-26 23:43:00}" (exact end of history)(B[m
ok 120 - git -c a=VAL rejects invalid 'a'(B[m
ok 98 - check-ref-format --normalize rejects 'foo.lock/bar'(B[m
ok 5 - branch -d can delete badly named ref(B[m
ok 121 - git -c .a=VAL rejects invalid '.a'(B[m
ok 2 - rewind(B[m
ok 99 - check-ref-format --normalize rejects 'foo.lock///bar'(B[m
ok 55 - Query "master@{2005-05-28}" (past end of history)(B[m
[32m# passed all 99 test(s)(B[m
[36m1..99(B[m
ok 1 - setup(B[m
ok 221 - commit text=auto(B[m
ok 122 - git -c a.=VAL rejects invalid 'a.'(B[m
ok 2 - setup: helper for testing rev-parse(B[m
*** t1502-rev-parse-parseopt.sh ***
ok 33 - D/F conflict prevents add long + indirect delete short packed(B[m
ok 123 - git -c a.0b=VAL rejects invalid 'a.0b'(B[m
ok 9 - reflog of worktrees/xx/HEAD(B[m
ok 3 - setup: core.worktree = relative path(B[m
ok 6 - branch -D can delete badly named ref(B[m
ok 3 - corrupt and check(B[m
ok 124 - git -c a.b c.=VAL rejects invalid 'a.b c.'(B[m
ok 7 - branch -D cannot delete non-ref in .git dir(B[m
ok 125 - git -c a.b c.0d=VAL rejects invalid 'a.b c.0d'(B[m
ok 4 - outside(B[m
ok 126 - git -c a.b=VAL works with valid 'a.b'(B[m
ok 34 - D/F conflict prevents indirect delete long packed + indirect add short(B[m
ok 4 - reflog expire --dry-run should not touch reflog(B[m
ok 8 - branch -D cannot delete ref in .git dir(B[m
ok 1 - setup(B[m
ok 127 - git -c a.b c.d=VAL works with valid 'a.b c.d'(B[m
ok 2 - toplevel: --is-bare-repository(B[m
ok 128 - git -c is not confused by empty environment(B[m
ok 35 - missing old value blocks update(B[m
ok 6 - git read-tree -u -m --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 1 - setup optionspec(B[m
ok 56 - creating initial files(B[m
ok 5 - inside work tree(B[m
ok 3 - toplevel: --is-inside-git-dir(B[m
ok 2 - setup optionspec-no-switches(B[m
ok 9 - branch -D cannot delete absolute path(B[m
ok 1 - setup(B[m
ok 57 - git commit logged updates(B[m
ok 5 - reflog expire(B[m
ok 10 - for-each-ref from main repo(B[m
ok 3 - setup optionspec-only-hidden-switches(B[m
ok 36 - incorrect old value blocks update(B[m
ok 6 - empty prefix is actually written out(B[m
ok 4 - toplevel: --is-inside-work-tree(B[m
ok 58 - git cat-file blob master:F (expect OTHER)(B[m
ok 129 - detect bogus GIT_CONFIG_PARAMETERS(B[m
ok 10 - git branch cannot create a badly named ref(B[m
ok 5 - toplevel: --show-prefix(B[m
ok 59 - git cat-file blob master@{2005-05-26 23:30}:F (expect TEST)(B[m
ok 37 - existing old value blocks create(B[m
ok 4 - test --parseopt help output(B[m
ok 60 - git cat-file blob master@{2005-05-26 23:42}:F (expect OTHER)(B[m
ok 6 - toplevel: --git-dir(B[m
ok 130 - git config --edit works(B[m
ok 7 - subdir of work tree(B[m
ok 5 - test --parseopt help output no switches(B[m
ok 38 - incorrect old value blocks delete(B[m
ok 61 - given old value for missing pseudoref, do not create(B[m
ok 7 - toplevel: --absolute-git-dir(B[m
ok 2 - loose objects borrowed from alternate are not missing(B[m
ok 222 - commit text(B[m
ok 8 - setup: core.worktree = absolute path(B[m
ok 6 - test --parseopt help output hidden switches(B[m
ok 8 - .git/: --is-bare-repository(B[m
ok 62 - create pseudoref(B[m
ok 11 - branch -m cannot rename to a bad ref name(B[m
ok 3 - HEAD is part of refs, valid objects appear valid(B[m
ok 39 - missing old value blocks indirect update(B[m
ok 4 - setup: helpers for corruption tests(B[m
ok 9 - .git/: --is-inside-git-dir(B[m
ok 131 - git config --edit respects core.editor(B[m
ok 63 - overwrite pseudoref with no old value given(B[m
ok 7 - test --parseopt help-all output hidden switches(B[m
[33mnot ok 12 - branch -m can rename from a bad ref name # TODO known breakage(B[m
ok 11 - for-each-ref from linked repo(B[m
ok 10 - .git/: --is-inside-work-tree(B[m
ok 132 - barf on syntax error(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 8 - test --parseopt invalid switch help output(B[m
ok 64 - overwrite pseudoref with correct old value(B[m
ok 40 - incorrect old value blocks indirect update(B[m
ok 6 - prune and fsck(B[m
ok 9 - setup expect.1(B[m
ok 11 - .git/: --show-prefix(B[m
ok 13 - push cannot create a badly named ref(B[m
ok 9 - outside(B[m
ok 133 - barf on incomplete section header(B[m
*** t1503-rev-parse-verify.sh ***
ok 65 - do not overwrite pseudoref with wrong old value(B[m
ok 10 - test --parseopt(B[m
ok 12 - .git/: --git-dir(B[m
ok 66 - delete pseudoref(B[m
ok 7 - recover and check(B[m
ok 134 - barf on incomplete string(B[m
ok 11 - test --parseopt with mixed options and arguments(B[m
ok 41 - existing old value blocks indirect create(B[m
ok 13 - .git/: --absolute-git-dir(B[m
ok 12 - setup expect.2(B[m
ok 14 - .git/objects/: --is-bare-repository(B[m
ok 67 - do not delete pseudoref with wrong old value(B[m
ok 10 - inside work tree(B[m
ok 13 - test --parseopt with --(B[m
ok 68 - delete pseudoref with correct old value(B[m
ok 42 - incorrect old value blocks indirect delete(B[m
ok 15 - .git/objects/: --is-inside-git-dir(B[m
ok 5 - object with bad sha1(B[m
ok 14 - test --parseopt --stop-at-non-option(B[m
ok 135 - urlmatch(B[m
ok 15 - setup expect.3(B[m
ok 69 - create pseudoref with old OID zero(B[m
ok 16 - .git/objects/: --is-inside-work-tree(B[m
ok 43 - missing old value blocks indirect no-deref update(B[m
ok 11 - subdir of work tree(B[m
ok 16 - test --parseopt --keep-dashdash(B[m
ok 17 - .git/objects/: --show-prefix(B[m
ok 17 - setup expect.4(B[m
ok 6 - branch pointing to non-commit(B[m
ok 12 - setup: GIT_WORK_TREE=relative (override core.worktree)(B[m
ok 70 - do not overwrite pseudoref with old OID zero(B[m
ok 18 - .git/objects/: --git-dir(B[m
ok 18 - test --parseopt --keep-dashdash --stop-at-non-option with --(B[m
ok 223 - commit -text(B[m
ok 44 - incorrect old value blocks indirect no-deref update(B[m
ok 19 - setup expect.5(B[m
ok 19 - .git/objects/: --absolute-git-dir(B[m
ok 71 - stdin test setup(B[m
ok 7 - HEAD link pointing at a funny object(B[m
ok 224 - compare_files LF NNO_attr__aeol__true_LF.txt(B[m
ok 20 - test --parseopt --keep-dashdash --stop-at-non-option without --(B[m
ok 20 - subdirectory: --is-bare-repository(B[m
ok 72 - -z fails without --stdin(B[m
[33mnot ok 14 - push --mirror can delete badly named ref # TODO known breakage(B[m
ok 21 - setup expect.6(B[m
ok 45 - existing old value blocks indirect no-deref create(B[m
ok 8 - HEAD link pointing at a funny place(B[m
ok 21 - subdirectory: --is-inside-git-dir(B[m
ok 225 - compare_files CRLF NNO_attr__aeol__true_CRLF.txt(B[m
ok 8 - delete(B[m
ok 22 - test --parseopt --stuck-long(B[m
ok 13 - outside(B[m
ok 73 - stdin works with no input(B[m
ok 1 - set up basic repo with 1 file (hello) and 4 commits(B[m
ok 22 - subdirectory: --is-inside-work-tree(B[m
ok 23 - setup expect.7(B[m
ok 136 - urlmatch favors more specific URLs(B[m
ok 226 - compare_files CRLF_mix_LF NNO_attr__aeol__true_CRLF_mix_LF.txt(B[m
ok 74 - stdin fails on empty line(B[m
ok 15 - rev-parse skips symref pointing to broken name(B[m
ok 46 - incorrect old value blocks indirect no-deref delete(B[m
ok 23 - subdirectory: --show-prefix(B[m
ok 9 - rewind2(B[m
ok 24 - test --parseopt --stuck-long and empty optional argument(B[m
ok 75 - stdin fails on only whitespace(B[m
ok 25 - setup expect.8(B[m
ok 227 - compare_files LF_mix_CR NNO_attr__aeol__true_LF_mix_CR.txt(B[m
ok 24 - subdirectory: --git-dir(B[m
ok 9 - HEAD link pointing at a funny object (from different wt)(B[m
ok 2 - works with one good rev(B[m
ok 26 - test --parseopt --stuck-long and long option with unset optional argument(B[m
ok 76 - stdin fails on leading whitespace(B[m
ok 14 - inside work tree(B[m
ok 10 - --expire=never(B[m
ok 228 - compare_files CRLF_nul NNO_attr__aeol__true_CRLF_nul.txt(B[m
ok 25 - subdirectory: --absolute-git-dir(B[m
ok 27 - test --parseopt --stuck-long and short option with unset optional argument(B[m
ok 47 - non-empty directory blocks create(B[m
ok 16 - for-each-ref emits warnings for broken names(B[m
ok 77 - stdin fails on unknown command(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 229 - compare_files LF NNO_attr_-text_aeol__true_LF.txt(B[m
*** t1504-ceiling-dirs.sh ***
ok 137 - urlmatch with wildcard(B[m
ok 78 - stdin fails on unbalanced quotes(B[m
ok 26 - core.bare = true: --is-bare-repository(B[m
ok 230 - compare_files CRLF NNO_attr_-text_aeol__true_CRLF.txt(B[m
ok 15 - subdir of work tree(B[m
ok 10 - other worktree HEAD link pointing at a funny object(B[m
ok 17 - update-ref -d can delete broken name(B[m
ok 3 - fails with any bad rev or many good revs(B[m
ok 79 - stdin fails on invalid escape(B[m
ok 48 - broken reference blocks create(B[m
ok 11 - gc.reflogexpire=never(B[m
ok 16 - setup: GIT_WORK_TREE=absolute, below git dir(B[m
ok 231 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__true_CRLF_mix_LF.txt(B[m
ok 27 - core.bare = true: --is-inside-git-dir(B[m
ok 80 - stdin fails on junk after quoted argument(B[m
ok 232 - compare_files LF_mix_CR NNO_attr_-text_aeol__true_LF_mix_CR.txt(B[m
ok 81 - stdin fails create with no ref(B[m
ok 18 - branch -d can delete broken name(B[m
ok 4 - fails silently when using -q(B[m
ok 17 - outside(B[m
ok 28 - core.bare = true: --is-inside-work-tree(B[m
ok 11 - other worktree HEAD link pointing at missing object(B[m
ok 49 - non-empty directory blocks indirect create(B[m
ok 233 - compare_files CRLF_nul NNO_attr_-text_aeol__true_CRLF_nul.txt(B[m
ok 82 - stdin fails create with no new value(B[m
ok 12 - gc.reflogexpire=false(B[m
ok 19 - update-ref --no-deref -d can delete symref to broken name(B[m
ok 29 - core.bare undefined: --is-bare-repository(B[m
ok 234 - compare_files LF NNO_attr_-text_aeol_lf_true_LF.txt(B[m
ok 1 - no_ceil(B[m
ok 83 - stdin fails create with too many arguments(B[m
ok 5 - fails silently when using -q with deleted reflogs(B[m
ok 138 - --unset last key removes section (except if commented)(B[m
ok 2 - ceil_empty(B[m
ok 20 - branch -d can delete symref to broken name(B[m
ok 84 - stdin fails update with no ref(B[m
ok 30 - core.bare undefined: --is-inside-git-dir(B[m
ok 235 - compare_files CRLF NNO_attr_-text_aeol_lf_true_CRLF.txt(B[m
ok 50 - broken reference blocks indirect create(B[m
ok 3 - ceil_at_parent(B[m
ok 12 - other worktree HEAD link pointing at a funny place(B[m
ok 6 - fails silently when using -q with not enough reflogs(B[m
ok 7 - git read-tree -u -m --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 21 - update-ref --no-deref -d can delete dangling symref to broken name(B[m
ok 139 - --unset-all removes section if empty & uncommented(B[m
ok 85 - stdin fails update with no new value(B[m
ok 236 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_true_CRLF_mix_LF.txt(B[m
ok 13 - git reflog expire unknown reference(B[m
ok 4 - ceil_at_parent_slash(B[m
ok 31 - core.bare undefined: --is-inside-work-tree(B[m
ok 22 - branch -d can delete dangling symref to broken name(B[m
ok 86 - stdin fails update with too many arguments(B[m
ok 5 - ceil_at_trash(B[m
ok 237 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_true_LF_mix_CR.txt(B[m
ok 140 - adding a key into an empty section reuses header(B[m
ok 7 - succeeds silently with -q and reflogs that do not go far back enough in time(B[m
[34mok 141 # skip preserves existing permissions (missing PERL of POSIXPERM,PERL)(B[m
ok 18 - in repo.git(B[m
ok 87 - stdin fails delete with no ref(B[m
ok 6 - ceil_at_trash_slash(B[m
ok 32 - GIT_DIR=../.git, core.bare = false: --is-bare-repository(B[m
ok 238 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_true_CRLF_nul.txt(B[m
ok 23 - update-ref -d can delete broken name through symref(B[m
ok 142 - set up --show-origin tests(B[m
ok 7 - ceil_at_sub(B[m
ok 14 - checkout should not delete log for packed ref(B[m
ok 88 - stdin fails delete with too many arguments(B[m
ok 239 - compare_files LF NNO_attr_-text_aeol_crlf_true_LF.txt(B[m
ok 24 - update-ref --no-deref -d can delete symref with broken name(B[m
ok 13 - email without @ is okay(B[m
ok 8 - ceil_at_sub_slash(B[m
ok 143 - --show-origin with --list(B[m
ok 33 - GIT_DIR=../.git, core.bare = false: --is-inside-git-dir(B[m
ok 8 - no stdout output on error(B[m
ok 89 - stdin fails verify with too many arguments(B[m
ok 240 - compare_files CRLF NNO_attr_-text_aeol_crlf_true_CRLF.txt(B[m
ok 25 - branch -d can delete symref with broken name(B[m
ok 19 - inside work tree(B[m
ok 90 - stdin fails option with unknown name(B[m
ok 9 - subdir_no_ceil(B[m
ok 144 - --show-origin with --list --null(B[m
ok 241 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_true_CRLF_mix_LF.txt(B[m
ok 26 - update-ref --no-deref -d can delete dangling symref with broken name(B[m
ok 34 - GIT_DIR=../.git, core.bare = false: --is-inside-work-tree(B[m
ok 10 - subdir_ceil_empty(B[m
ok 91 - stdin fails with duplicate refs(B[m
ok 15 - stale dirs do not cause d/f conflicts (reflogs on)(B[m
ok 242 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_true_LF_mix_CR.txt(B[m
ok 145 - --show-origin with single file(B[m
ok 14 - email with embedded > is not okay(B[m
ok 11 - subdir_ceil_at_trash: prefix(B[m
ok 27 - branch -d can delete dangling symref with broken name(B[m
ok 20 - subdir of work tree(B[m
ok 35 - GIT_DIR=../.git, core.bare = false: --show-prefix(B[m
ok 243 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_true_CRLF_nul.txt(B[m
ok 12 - subdir_ceil_at_trash_slash: prefix(B[m
ok 146 - --show-origin with --get-regexp(B[m
ok 92 - stdin create ref works(B[m
ok 28 - update-ref -d cannot delete non-ref in .git dir(B[m
ok 9 - use --default(B[m
ok 13 - subdir_ceil_at_sub: prefix(B[m
ok 21 - find work tree from repo(B[m
ok 244 - compare_files LF NNO_attr_auto_aeol__true_LF.txt(B[m
ok 147 - --show-origin getting a single key(B[m
ok 14 - subdir_ceil_at_sub_slash: prefix(B[m
ok 36 - GIT_DIR=../.git, core.bare = false: --git-dir(B[m
ok 16 - stale dirs do not cause d/f conflicts (reflogs off)(B[m
ok 148 - set up custom config file(B[m
ok 15 - subdir_ceil_at_top: prefix(B[m
ok 245 - compare_files CRLF NNO_attr_auto_aeol__true_CRLF.txt(B[m
ok 22 - find work tree from work tree(B[m
ok 29 - update-ref -d cannot delete absolute path(B[m
ok 149 - set up custom config file with special name characters(B[m
ok 15 - missing < email delimiter is reported nicely(B[m
ok 16 - subdir_ceil_at_top_slash: prefix(B[m
ok 93 - stdin does not create reflogs by default(B[m
ok 246 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__true_CRLF_mix_LF.txt(B[m
ok 10 - master@{n} for various n(B[m
ok 37 - GIT_DIR=../.git, core.bare = false: --absolute-git-dir(B[m
ok 30 - update-ref --stdin fails create with bad ref name(B[m
ok 23 - _gently() groks relative GIT_DIR & GIT_WORK_TREE(B[m
ok 17 - subdir_ceil_at_top_no_resolve(B[m
ok 150 - --show-origin escape special file name characters(B[m
ok 17 - parsing reverse reflogs at BUFSIZ boundaries(B[m
ok 247 - compare_files LF_mix_CR NNO_attr_auto_aeol__true_LF_mix_CR.txt(B[m
ok 31 - update-ref --stdin fails update with bad ref name(B[m
ok 18 - subdir_ceil_at_top_slash_no_resolve(B[m
ok 11 - ref resolution not confused by broken symlinks(B[m
ok 151 - --show-origin stdin(B[m
ok 19 - subdir_ceil_at_subdir(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 38 - GIT_DIR=../.git, core.bare = true: --is-bare-repository(B[m
ok 32 - update-ref --stdin fails delete with bad ref name(B[m
ok 248 - compare_files CRLF_nul NNO_attr_auto_aeol__true_CRLF_nul.txt(B[m
ok 94 - stdin creates reflogs with --create-reflog(B[m
ok 24 - diff-index respects work tree under .git dir(B[m
*** t1505-rev-parse-last.sh ***
ok 20 - subdir_ceil_at_subdir_slash(B[m
ok 16 - missing email is reported nicely(B[m
ok 18 - no segfaults for reflog containing non-commit sha1s(B[m
ok 33 - update-ref --stdin -z fails create with bad ref name(B[m
ok 152 - --show-origin stdin with file include(B[m
ok 249 - compare_files LF NNO_attr_auto_aeol_lf_true_LF.txt(B[m
ok 21 - subdir_ceil_at_su(B[m
ok 25 - diff-files respects work tree under .git dir(B[m
ok 39 - GIT_DIR=../.git, core.bare = true: --is-inside-git-dir(B[m
ok 34 - update-ref --stdin -z fails update with bad ref name(B[m
ok 22 - subdir_ceil_at_su_slash(B[m
ok 250 - compare_files CRLF NNO_attr_auto_aeol_lf_true_CRLF.txt(B[m
ok 95 - stdin succeeds with quoted argument(B[m
[33mnot ok 19 - reflog with non-commit entries displays all entries # TODO known breakage(B[m
ok 153 - --show-origin blob(B[m
ok 23 - subdir_ceil_at_sub_di(B[m
ok 35 - update-ref --stdin -z fails delete with bad ref name(B[m
ok 251 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_true_CRLF_mix_LF.txt(B[m
ok 40 - GIT_DIR=../.git, core.bare = true: --is-inside-work-tree(B[m
ok 24 - subdir_ceil_at_sub_di_slash(B[m
ok 26 - git diff respects work tree under .git dir(B[m
ok 17 - > in name is reported(B[m
ok 36 - branch rejects HEAD as a branch name(B[m
ok 96 - stdin succeeds with escaped character(B[m
ok 25 - subdir_ceil_at_subdi(B[m
ok 252 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_true_LF_mix_CR.txt(B[m
ok 154 - --show-origin blob ref(B[m
ok 27 - git grep(B[m
ok 20 - reflog expire operates on symref not referrent(B[m
ok 41 - GIT_DIR=../.git, core.bare = true: --show-prefix(B[m
ok 26 - subdir_ceil_at_subdi_slash(B[m
ok 37 - checkout -b rejects HEAD as a branch name(B[m
ok 253 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_true_CRLF_nul.txt(B[m
ok 27 - second_of_two: prefix(B[m
ok 155 - --show-scope with --list(B[m
ok 28 - git commit(B[m
ok 97 - stdin update ref creates with zero old value(B[m
ok 42 - GIT_DIR=../.git, core.bare undefined: --is-bare-repository(B[m
ok 28 - first_of_two: prefix(B[m
ok 254 - compare_files LF NNO_attr_auto_aeol_crlf_true_LF.txt(B[m
ok 29 - second_of_three: prefix(B[m
ok 38 - update-ref can operate on refs/heads/HEAD(B[m
ok 18 - integer overflow in timestamps is reported(B[m
ok 29 - absolute pathspec should fail gracefully(B[m
ok 255 - compare_files CRLF NNO_attr_auto_aeol_crlf_true_CRLF.txt(B[m
ok 43 - GIT_DIR=../.git, core.bare undefined: --is-inside-git-dir(B[m
ok 156 - --show-scope with --blob(B[m
ok 98 - stdin update ref creates with empty old value(B[m
ok 30 - git_dir_specified(B[m
ok 30 - make_relative_path handles double slashes in GIT_DIR(B[m
ok 256 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_true_CRLF_mix_LF.txt(B[m
ok 157 - --show-scope with --local(B[m
ok 39 - branch -d can remove refs/heads/HEAD(B[m
ok 31 - sd_no_ceil(B[m
ok 44 - GIT_DIR=../.git, core.bare undefined: --is-inside-work-tree(B[m
ok 257 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_true_LF_mix_CR.txt(B[m
ok 31 - relative $GIT_WORK_TREE and git subprocesses(B[m
ok 32 - sd_ceil_empty(B[m
ok 99 - stdin create ref works with path with space to blob(B[m
ok 158 - --show-scope getting a single value(B[m
ok 33 - sd_ceil_at_trash: prefix(B[m
ok 45 - GIT_DIR=../.git, core.bare undefined: --show-prefix(B[m
ok 32 - Multi-worktree setup(B[m
ok 19 - commit with NUL in header(B[m
ok 258 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_true_CRLF_nul.txt(B[m
ok 40 - branch -m can rename refs/heads/HEAD(B[m
ok 159 - --show-scope with --show-origin(B[m
ok 34 - sd_ceil_at_trash_slash: prefix(B[m
ok 100 - stdin update ref fails with wrong old value(B[m
ok 259 - compare_files LF NNO_attr_text_aeol__true_LF.txt(B[m
ok 1 - setup(B[m
ok 160 - --local requires a repo(B[m
ok 35 - sd_ceil_at_s: prefix(B[m
ok 33 - GIT_DIR set (1)(B[m
ok 46 - GIT_DIR=../repo.git, core.bare = false: --is-bare-repository(B[m
ok 41 - branch -d can remove refs/heads/-dash(B[m
ok 36 - sd_ceil_at_s_slash: prefix(B[m
ok 101 - stdin update ref fails with bad old value(B[m
ok 260 - compare_files LF NNO_attr_text_aeol__true_CRLF.txt(B[m
ok 161 - identical modern --type specifiers are allowed(B[m
ok 2 - @{-1} works(B[m
ok 37 - sd_ceil_at_sd(B[m
ok 34 - GIT_DIR set (2)(B[m
ok 21 - continue walking past root commits(B[m
ok 162 - identical legacy --type specifiers are allowed(B[m
ok 261 - compare_files LF NNO_attr_text_aeol__true_CRLF_mix_LF.txt(B[m
ok 47 - GIT_DIR=../repo.git, core.bare = false: --is-inside-git-dir(B[m
ok 8 - git read-tree -u -m --recurse-submodules: replace submodule with a file(B[m
ok 38 - sd_ceil_at_sd_slash(B[m
ok 102 - stdin create ref fails with bad new value(B[m
ok 3 - @{-1}~2 works(B[m
ok 42 - branch -m can rename refs/heads/-dash(B[m
ok 39 - sd_ceil_at_su(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 40 test(s)(B[m
[36m1..42(B[m
ok 163 - identical mixed --type specifiers are allowed(B[m
ok 262 - compare_files LF_mix_CR NNO_attr_text_aeol__true_LF_mix_CR.txt(B[m
ok 20 - tree object with duplicate entries(B[m
ok 103 - stdin create ref fails with zero new value(B[m
ok 4 - @{-1}^2 works(B[m
ok 40 - sd_ceil_at_su_slash(B[m
ok 35 - Auto discovery(B[m
ok 48 - GIT_DIR=../repo.git, core.bare = false: --is-inside-work-tree(B[m
*** t1506-rev-parse-diagnosis.sh ***
ok 164 - non-identical modern --type specifiers are not allowed(B[m
ok 263 - compare_files LF_nul NNO_attr_text_aeol__true_CRLF_nul.txt(B[m
ok 41 - sd_ceil_at_s_di(B[m
ok 5 - @{-1}@{1} works(B[m
ok 165 - non-identical legacy --type specifiers are not allowed(B[m
ok 264 - compare_files LF NNO_attr_text_aeol_lf_true_LF.txt(B[m
ok 104 - stdin update ref works with right old value(B[m
ok 42 - sd_ceil_at_s_di_slash(B[m
ok 49 - GIT_DIR=../repo.git, core.bare = false: --show-prefix(B[m
ok 6 - @{-2} works(B[m
ok 166 - non-identical mixed --type specifiers are not allowed(B[m
ok 43 - sd_ceil_at_sdi(B[m
ok 265 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF.txt(B[m
ok 7 - @{-3} fails(B[m
ok 36 - $GIT_DIR/common overrides core.worktree(B[m
ok 167 - --type allows valid type specifiers(B[m
ok 44 - sd_ceil_at_sdi_slash(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 105 - stdin delete ref fails with wrong old value(B[m
ok 21 - unparseable tree object(B[m
ok 266 - compare_files LF NNO_attr_text_aeol_lf_true_CRLF_mix_LF.txt(B[m
[32m# passed all 44 test(s)(B[m
[36m1..44(B[m
ok 50 - GIT_DIR=../repo.git, core.bare = false: --git-dir(B[m
*** t1507-rev-parse-upstream.sh ***
*** t1508-at-combinations.sh ***
ok 22 - expire with multiple worktrees(B[m
ok 168 - --no-type unsets type specifiers(B[m
ok 37 - $GIT_WORK_TREE overrides $GIT_DIR/common(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 21 test(s)(B[m
[36m1..22(B[m
ok 267 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_true_LF_mix_CR.txt(B[m
ok 169 - unset type specifiers may be reset to conflicting ones(B[m
ok 38 - error out gracefully on invalid $GIT_WORK_TREE(B[m
ok 106 - stdin delete ref fails with zero old value(B[m
ok 51 - GIT_DIR=../repo.git, core.bare = false: --absolute-git-dir(B[m
*** t1509-root-work-tree.sh ***
ok 268 - compare_files LF_nul NNO_attr_text_aeol_lf_true_CRLF_nul.txt(B[m
ok 170 - --type rejects unknown specifiers(B[m
ok 1 - set up basic repo(B[m
ok 269 - compare_files LF NNO_attr_text_aeol_crlf_true_LF.txt(B[m
ok 52 - GIT_DIR=../repo.git, core.bare = true: --is-bare-repository(B[m
ok 171 - --replace-all does not invent newlines(B[m
[32m# passed all 171 test(s)(B[m
[36m1..171(B[m
ok 270 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF.txt(B[m
*** t1510-repo-setup.sh ***
ok 22 - tree entry with type mismatch(B[m
ok 107 - stdin update symref works option no-deref(B[m
ok 39 - refs work with relative gitdir and work tree(B[m
ok 271 - compare_files LF NNO_attr_text_aeol_crlf_true_CRLF_mix_LF.txt(B[m
[32m# passed all 39 test(s)(B[m
[36m1..39(B[m
ok 53 - GIT_DIR=../repo.git, core.bare = true: --is-inside-git-dir(B[m
ok 2 - correct file objects(B[m
ok 272 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_true_LF_mix_CR.txt(B[m
*** t1511-rev-parse-caret.sh ***
[36m1..0 # SKIP Test requiring writable / skipped. Read this test if you want to run it(B[m
*** t1512-rev-parse-disambiguation.sh ***
ok 23 - tag pointing to nonexistent(B[m
ok 54 - GIT_DIR=../repo.git, core.bare = true: --is-inside-work-tree(B[m
ok 273 - compare_files LF_nul NNO_attr_text_aeol_crlf_true_CRLF_nul.txt(B[m
ok 108 - stdin delete symref works option no-deref(B[m
ok 3 - correct relative file objects (0)(B[m
ok 274 - compare_files LF NNO_attr__aeol__false_LF.txt(B[m
ok 55 - GIT_DIR=../repo.git, core.bare = true: --show-prefix(B[m
ok 4 - correct relative file objects (1)(B[m
ok 275 - compare_files CRLF NNO_attr__aeol__false_CRLF.txt(B[m
ok 5 - correct relative file objects (2)(B[m
ok 56 - GIT_DIR=../repo.git, core.bare undefined: --is-bare-repository(B[m
ok 24 - tag pointing to something else than its type(B[m
ok 276 - compare_files CRLF_mix_LF NNO_attr__aeol__false_CRLF_mix_LF.txt(B[m
ok 109 - stdin update symref works flag --no-deref(B[m
ok 6 - correct relative file objects (3)(B[m
ok 277 - compare_files LF_mix_CR NNO_attr__aeol__false_LF_mix_CR.txt(B[m
ok 57 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-git-dir(B[m
ok 1 - #0: nonbare repo, no explicit configuration(B[m
ok 7 - correct relative file objects (4)(B[m
ok 278 - compare_files CRLF_nul NNO_attr__aeol__false_CRLF_nul.txt(B[m
ok 58 - GIT_DIR=../repo.git, core.bare undefined: --is-inside-work-tree(B[m
ok 1 - blob and tree(B[m
ok 25 - tag with incorrect tag name & missing tagger(B[m
ok 279 - compare_files LF NNO_attr_-text_aeol__false_LF.txt(B[m
ok 110 - stdin delete symref works flag --no-deref(B[m
ok 8 - correct relative file objects (5)(B[m
ok 59 - GIT_DIR=../repo.git, core.bare undefined: --show-prefix(B[m
ok 280 - compare_files CRLF NNO_attr_-text_aeol__false_CRLF.txt(B[m
ok 2 - warn ambiguity when no candidate matches type hint(B[m
ok 60 - git-common-dir from worktree root(B[m
ok 111 - stdin delete ref works with right old value(B[m
ok 281 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__false_CRLF_mix_LF.txt(B[m
ok 3 - disambiguate tree-ish(B[m
ok 2 - #1: GIT_WORK_TREE without explicit GIT_DIR is accepted(B[m
ok 9 - correct relative file objects (6)(B[m
ok 26 - tag with bad tagger(B[m
ok 282 - compare_files LF_mix_CR NNO_attr_-text_aeol__false_LF_mix_CR.txt(B[m
ok 61 - git-common-dir inside sub-dir(B[m
ok 4 - disambiguate blob(B[m
ok 283 - compare_files CRLF_nul NNO_attr_-text_aeol__false_CRLF_nul.txt(B[m
ok 62 - git-path from worktree root(B[m
ok 51 - no bogus intermediate values during delete(B[m
ok 10 - incorrect revision id(B[m
ok 112 - stdin update/create/verify combination works(B[m
ok 284 - compare_files LF NNO_attr_-text_aeol_lf_false_LF.txt(B[m
ok 5 - disambiguate tree(B[m
ok 3 - #2: worktree defaults to cwd with explicit GIT_DIR(B[m
ok 1 - setup(B[m
ok 63 - git-path inside sub-dir(B[m
ok 27 - tag with NUL in header(B[m
ok 6 - first commit(B[m
ok 285 - compare_files CRLF NNO_attr_-text_aeol_lf_false_CRLF.txt(B[m
ok 113 - stdin verify succeeds for correct value(B[m
ok 11 - incorrect file in sha1:path(B[m
ok 1 - setup(B[m
ok 28 - cleaned up(B[m
[33mnot ok 9 - git read-tree -u -m --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 2 - ref^{non-existent}(B[m
ok 286 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_false_CRLF_mix_LF.txt(B[m
ok 114 - stdin verify succeeds for missing reference(B[m
ok 2 - @{upstream} resolves to correct full name(B[m
ok 1 - setup(B[m
ok 7 - disambiguate commit-ish(B[m
ok 29 - rev-list --verify-objects(B[m
ok 287 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_false_LF_mix_CR.txt(B[m
ok 2 - HEAD = refs/heads/new-branch(B[m
ok 115 - stdin verify treats no value as missing(B[m
ok 4 - #2b: relative GIT_DIR(B[m
ok 3 - @{u} resolves to correct full name(B[m
ok 8 - disambiguate commit(B[m
ok 3 - ref^{}(B[m
ok 3 - @{1} = new-one(B[m
ok 288 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_false_CRLF_nul.txt(B[m
ok 4 - my-side@{upstream} resolves to correct full name(B[m
ok 5 - #3: setup(B[m
ok 4 - HEAD@{1} = new-one(B[m
ok 116 - stdin verify fails for wrong value(B[m
ok 289 - compare_files LF NNO_attr_-text_aeol_crlf_false_LF.txt(B[m
ok 64 - rev-parse --is-shallow-repository in shallow repo(B[m
ok 5 - upstream of branch with @ in middle(B[m
ok 5 - @{now} = new-two(B[m
ok 290 - compare_files CRLF NNO_attr_-text_aeol_crlf_false_CRLF.txt(B[m
ok 12 - incorrect file in :path and :N:path(B[m
ok 9 - log name1..name2 takes only commit-ishes on both ends(B[m
ok 117 - stdin verify fails for mistaken null value(B[m
ok 65 - rev-parse --is-shallow-repository in non-shallow repo(B[m
ok 4 - ref^{commit}(B[m
ok 6 - upstream of branch with @ at start(B[m
ok 6 - HEAD@{now} = new-two(B[m
ok 291 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_false_CRLF_mix_LF.txt(B[m
ok 7 - @{-1} = refs/heads/old-branch(B[m
ok 7 - upstream of branch with @ at end(B[m
ok 13 - invalid @{n} reference(B[m
ok 10 - rev-parse name1..name2 takes only commit-ishes on both ends(B[m
ok 30 - rev-list --verify-objects with bad sha1(B[m
ok 292 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_false_LF_mix_CR.txt(B[m
ok 8 - refs/heads/my-side@{upstream} does not resolve to my-side{upstream}(B[m
ok 8 - @{-1}@{0} = old-two(B[m
ok 14 - relative path not found(B[m
ok 11 - git log takes only commit-ish(B[m
ok 5 - ref^{tree}(B[m
ok 118 - stdin verify fails for mistaken empty value(B[m
ok 293 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_false_CRLF_nul.txt(B[m
ok 6 - #3: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 9 - @{-1}@{1} = old-one(B[m
ok 66 - rev-parse --show-object-format in repo(B[m
ok 12 - git reset takes only commit-ish(B[m
ok 15 - relative path outside worktree(B[m
ok 294 - compare_files LF NNO_attr_auto_aeol__false_LF.txt(B[m
ok 10 - @{u} = refs/heads/upstream-branch(B[m
ok 13 - first tag(B[m
ok 67 - --show-toplevel from subdir of working tree(B[m
ok 6 - ref^{tag}(B[m
ok 16 - relative path when cwd is outside worktree(B[m
ok 68 - --show-toplevel from inside .git(B[m
[33mnot ok 14 - two semi-ambiguous commit-ish # TODO known breakage(B[m
ok 11 - HEAD@{u} = refs/heads/upstream-branch(B[m
ok 295 - compare_files CRLF NNO_attr_auto_aeol__false_CRLF.txt(B[m
ok 119 - stdin update refs works with identity updates(B[m
ok 7 - ref^{/.}(B[m
ok 17 - <commit>:file correctly diagnosed after a pathname(B[m
ok 31 - force fsck to ignore double author(B[m
[33mnot ok 15 - three semi-ambiguous tree-ish # TODO known breakage(B[m
ok 12 - @{u}@{1} = upstream-one(B[m
ok 296 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__false_CRLF_mix_LF.txt(B[m
ok 8 - ref^{/non-existent}(B[m
ok 16 - parse describe name(B[m
ok 13 - @{-1}@{u} = refs/heads/master(B[m
ok 297 - compare_files LF_mix_CR NNO_attr_auto_aeol__false_LF_mix_CR.txt(B[m
ok 9 - my-side@{u} resolves to correct commit(B[m
ok 9 - ref^{/Initial}(B[m
ok 14 - @{-1}@{u}@{1} = master-one(B[m
ok 7 - #3: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 18 - dotdot is not an empty set(B[m
ok 298 - compare_files CRLF_nul NNO_attr_auto_aeol__false_CRLF_nul.txt(B[m
ok 32 - fsck notices blob entry pointing to null sha1(B[m
ok 10 - ref^{/!Exp}(B[m
ok 15 - @ = new-two(B[m
ok 120 - stdin update refs fails with wrong old value(B[m
ok 19 - arg before dashdash must be a revision (missing)(B[m
ok 11 - ref^{/!}(B[m
ok 299 - compare_files LF NNO_attr_auto_aeol_lf_false_LF.txt(B[m
ok 10 - not-tracking@{u} fails(B[m
ok 16 - @@{u} = refs/heads/upstream-branch(B[m
ok 20 - arg before dashdash must be a revision (file)(B[m
ok 300 - compare_files CRLF NNO_attr_auto_aeol_lf_false_CRLF.txt(B[m
ok 12 - ref^{/!!Exp}(B[m
ok 17 - @@/at-test = refs/heads/@@/at-test(B[m
ok 33 - fsck notices submodule entry pointing to null sha1(B[m
ok 301 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_false_CRLF_mix_LF.txt(B[m
ok 13 - ref^{/!-}(B[m
ok 21 - arg before dashdash must be a revision (ambiguous)(B[m
ok 18 - @/at-test = refs/heads/@/at-test(B[m
ok 14 - ref^{/!-.}(B[m
ok 121 - stdin delete refs works with packed and loose refs(B[m
ok 22 - reject Nth parent if N is too high(B[m
ok 302 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_false_LF_mix_CR.txt(B[m
ok 19 - @at-test = refs/heads/@at-test(B[m
ok 8 - #3: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 23 - reject Nth ancestor if N is too high(B[m
ok 122 - stdin -z works on empty input(B[m
ok 20 - @{u}@{-1} is nonsensical(B[m
ok 15 - ref^{/!-non-existent}(B[m
ok 303 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_false_CRLF_nul.txt(B[m
ok 24 - pathspecs with wildcards are not ambiguous(B[m
ok 21 - @{0}@{0} is nonsensical(B[m
ok 123 - stdin -z fails on empty line(B[m
ok 304 - compare_files LF NNO_attr_auto_aeol_crlf_false_LF.txt(B[m
ok 11 - <branch>@{u}@{1} resolves correctly(B[m
ok 25 - backslash does not trigger wildcard rule(B[m
ok 16 - ref^{/!-Changed}(B[m
ok 22 - @{1}@{u} is nonsensical(B[m
ok 124 - stdin -z fails on empty command(B[m
ok 26 - escaped char does not trigger wildcard rule(B[m
ok 34 - fsck notices . as blob(B[m
ok 23 - HEAD@{-1} is nonsensical(B[m
ok 305 - compare_files CRLF NNO_attr_auto_aeol_crlf_false_CRLF.txt(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
ok 125 - stdin -z fails on only whitespace(B[m
ok 17 - ref^{/!-!Exp}(B[m
ok 12 - @{u} without specifying branch fails on a detached HEAD(B[m
*** t1513-rev-parse-prefix.sh ***
ok 17 - more history(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 24 - @{-1}@{-1} is nonsensical(B[m
ok 306 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_false_CRLF_mix_LF.txt(B[m
ok 126 - stdin -z fails on leading whitespace(B[m
*** t1514-rev-parse-push.sh ***
[33mnot ok 18 - parse describe name taking advantage of generation # TODO known breakage(B[m
ok 25 - HEAD@{3} = old-two(B[m
ok 307 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_false_LF_mix_CR.txt(B[m
ok 9 - #3: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 19 - parse describe name not ignoring ambiguity(B[m
ok 127 - stdin -z fails on unknown command(B[m
ok 26 - @{3} is nonsensical(B[m
ok 13 - checkout -b new my-side@{u} forks from the same(B[m
ok 308 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_false_CRLF_nul.txt(B[m
ok 128 - stdin -z fails create with no ref(B[m
ok 27 - switch to old-branch(B[m
ok 309 - compare_files LF NNO_attr_text_aeol__false_LF.txt(B[m
ok 129 - stdin -z fails create with no new value(B[m
ok 28 - HEAD = refs/heads/old-branch(B[m
ok 35 - fsck notices . as tree(B[m
ok 130 - stdin -z fails create with too many arguments(B[m
ok 29 - HEAD@{1} = new-two(B[m
ok 310 - compare_files LF NNO_attr_text_aeol__false_CRLF.txt(B[m
ok 14 - merge my-side@{u} records the correct name(B[m
ok 131 - stdin -z fails update with no ref(B[m
ok 30 - @{1} = old-one(B[m
ok 311 - compare_files LF NNO_attr_text_aeol__false_CRLF_mix_LF.txt(B[m
ok 20 - ambiguous commit-ish(B[m
ok 1 - setup(B[m
ok 132 - stdin -z fails update with too few args(B[m
ok 10 - #3: chdir_to_toplevel uses worktree, not git dir(B[m
ok 21 - ambiguous tags peel to treeish(B[m
ok 312 - compare_files LF_mix_CR NNO_attr_text_aeol__false_LF_mix_CR.txt(B[m
ok 2 - empty prefix -- file(B[m
ok 31 - create path with @(B[m
ok 15 - branch -d other@{u}(B[m
ok 313 - compare_files LF_nul NNO_attr_text_aeol__false_CRLF_nul.txt(B[m
ok 32 - @:normal = content(B[m
ok 22 - rev-parse --disambiguate(B[m
ok 133 - stdin -z emits warning with empty new value(B[m
ok 3 - valid prefix -- file(B[m
ok 36 - fsck notices .. as blob(B[m
ok 314 - compare_files LF NNO_attr_text_aeol_lf_false_LF.txt(B[m
ok 33 - @:fun@ny = content(B[m
ok 134 - stdin -z fails update with no new value(B[m
ok 4 - valid prefix -- ../file(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 16 - checkout other@{u}(B[m
ok 315 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF.txt(B[m
ok 135 - stdin -z fails update with no old value(B[m
*** t1515-rev-parse-outside-repo.sh ***
ok 5 - empty prefix HEAD:./path(B[m
ok 17 - branch@{u} works when tracking a local branch(B[m
ok 23 - rev-parse --disambiguate drops duplicates(B[m
ok 136 - stdin -z fails update with too many arguments(B[m
ok 316 - compare_files LF NNO_attr_text_aeol_lf_false_CRLF_mix_LF.txt(B[m
ok 11 - #3: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 6 - valid prefix HEAD:./path(B[m
ok 137 - stdin -z fails delete with no ref(B[m
ok 317 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_false_LF_mix_CR.txt(B[m
ok 18 - branch@{u} error message when no upstream(B[m
ok 10 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 138 - stdin -z fails delete with no old value(B[m
ok 24 - ambiguous 40-hex ref(B[m
ok 7 - valid prefix HEAD:../path(B[m
ok 37 - fsck notices .. as tree(B[m
ok 318 - compare_files LF_nul NNO_attr_text_aeol_lf_false_CRLF_nul.txt(B[m
ok 19 - @{u} error message when no upstream(B[m
ok 139 - stdin -z fails delete with too many arguments(B[m
ok 12 - #4: core.worktree without GIT_DIR set is accepted(B[m
ok 319 - compare_files LF NNO_attr_text_aeol_crlf_false_LF.txt(B[m
ok 8 - prefix ignored with HEAD:top(B[m
ok 20 - branch@{u} error message with misspelt branch(B[m
ok 140 - stdin -z fails verify with too many arguments(B[m
ok 320 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF.txt(B[m
ok 1 - setup(B[m
ok 141 - stdin -z fails verify with no old value(B[m
ok 25 - ambiguous short sha1 ref(B[m
ok 9 - disambiguate path with valid prefix(B[m
ok 1 - set up non-repo directory(B[m
ok 21 - @{u} error message when not on a branch(B[m
ok 69 - showing the superproject correctly(B[m
ok 321 - compare_files LF NNO_attr_text_aeol_crlf_false_CRLF_mix_LF.txt(B[m
ok 142 - stdin -z fails option with unknown name(B[m
ok 2 - rev-parse --sq-quote(B[m
[32m# passed all 69 test(s)(B[m
[36m1..69(B[m
ok 26 - ambiguity errors are not repeated (raw)(B[m
ok 10 - file and refs with prefix(B[m
ok 322 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_false_LF_mix_CR.txt(B[m
ok 3 - rev-parse --local-env-vars(B[m
ok 22 - branch@{u} error message if upstream branch not fetched(B[m
ok 143 - stdin -z fails with duplicate refs(B[m
ok 2 - @{push} with default=nothing(B[m
ok 38 - fsck notices .git as blob(B[m
*** t1600-index.sh ***
ok 27 - ambiguity errors are not repeated (treeish)(B[m
ok 323 - compare_files LF_nul NNO_attr_text_aeol_crlf_false_CRLF_nul.txt(B[m
ok 11 - two-levels deep(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 144 - stdin -z create ref works(B[m
*** t1601-index-bogus.sh ***
ok 4 - rev-parse --resolve-git-dir(B[m
ok 324 - compare_files LF NNO_attr__aeol__input_LF.txt(B[m
ok 28 - ambiguity errors are not repeated (peel)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t1700-split-index.sh ***
ok 325 - compare_files CRLF NNO_attr__aeol__input_CRLF.txt(B[m
ok 3 - @{push} with default=simple(B[m
ok 29 - ambiguity hints(B[m
ok 23 - pull works when tracking a local branch(B[m
ok 145 - stdin -z update ref creates with zero old value(B[m
ok 13 - #5: core.worktree + GIT_WORK_TREE is accepted(B[m
ok 326 - compare_files CRLF_mix_LF NNO_attr__aeol__input_CRLF_mix_LF.txt(B[m
ok 24 - @{u} works when tracking a local branch(B[m
ok 4 - triangular @{push} fails with default=simple(B[m
ok 30 - ambiguity hints respect type(B[m
ok 327 - compare_files LF_mix_CR NNO_attr__aeol__input_LF_mix_CR.txt(B[m
ok 1 - setup(B[m
ok 146 - stdin -z update ref creates with empty old value(B[m
ok 39 - fsck notices .git as tree(B[m
ok 328 - compare_files CRLF_nul NNO_attr__aeol__input_CRLF_nul.txt(B[m
ok 25 - log -g other@{u}(B[m
ok 5 - @{push} with default=current(B[m
ok 1 - create tree with null sha1(B[m
ok 31 - failed type-selector still shows hint(B[m
ok 329 - compare_files LF NNO_attr_-text_aeol__input_LF.txt(B[m
ok 2 - bogus GIT_INDEX_VERSION issues warning(B[m
ok 2 - read-tree refuses to read null sha1(B[m
ok 147 - stdin -z create ref works with path with space to blob(B[m
ok 26 - log -g other@{u}@{now}(B[m
ok 330 - compare_files CRLF NNO_attr_-text_aeol__input_CRLF.txt(B[m
ok 3 - GIT_ALLOW_NULL_SHA1 overrides refusal(B[m
ok 6 - @{push} with default=matching(B[m
ok 1 - setup(B[m
ok 32 - core.disambiguate config can prefer types(B[m
ok 148 - stdin -z update ref fails with wrong old value(B[m
ok 4 - git write-tree refuses to write null sha1(B[m
ok 331 - compare_files CRLF_mix_LF NNO_attr_-text_aeol__input_CRLF_mix_LF.txt(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 3 - out of bounds GIT_INDEX_VERSION issues warning(B[m
ok 33 - core.disambiguate does not override context(B[m
*** t1701-racy-split-index.sh ***
ok 27 - @{reflog}-parsing does not look beyond colon(B[m
ok 14 - #6: setting GIT_DIR brings core.worktree to life(B[m
ok 4 - no warning with bogus GIT_INDEX_VERSION and existing index(B[m
ok 40 - fsck notices .GIT as blob(B[m
ok 149 - stdin -z update ref fails with bad old value(B[m
ok 332 - compare_files LF_mix_CR NNO_attr_-text_aeol__input_LF_mix_CR.txt(B[m
ok 7 - @{push} with pushremote defined(B[m
ok 2 - enable split index(B[m
ok 333 - compare_files CRLF_nul NNO_attr_-text_aeol__input_CRLF_nul.txt(B[m
ok 28 - @{upstream}-parsing does not look beyond colon(B[m
[32m# passed all 28 test(s)(B[m
[36m1..28(B[m
ok 334 - compare_files LF NNO_attr_-text_aeol_lf_input_LF.txt(B[m
ok 150 - stdin -z create ref fails when ref exists(B[m
ok 5 - out of bounds index.version issues warning(B[m
*** t2000-conflict-when-checking-files-out.sh ***
ok 335 - compare_files CRLF NNO_attr_-text_aeol_lf_input_CRLF.txt(B[m
ok 34 - ambiguous commits are printed by type first, then hash order(B[m
ok 3 - add one file(B[m
ok 151 - stdin -z create ref fails with bad new value(B[m
ok 336 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_lf_input_CRLF_mix_LF.txt(B[m
ok 41 - fsck notices .GIT as tree(B[m
ok 35 - cat-file --batch and --batch-check show ambiguous(B[m
ok 8 - @{push} with push refspecs(B[m
ok 337 - compare_files LF_mix_CR NNO_attr_-text_aeol_lf_input_LF_mix_CR.txt(B[m
ok 152 - stdin -z create ref fails with empty new value(B[m
[33m# still have 3 known breakage(s)(B[m
[32m# passed all remaining 32 test(s)(B[m
[36m1..35(B[m
ok 15 - #6b: GIT_DIR set, core.worktree relative(B[m
ok 1 - setup(B[m
ok 4 - disable split index(B[m
*** t2002-checkout-cache-u.sh ***
ok 338 - compare_files CRLF_nul NNO_attr_-text_aeol_lf_input_CRLF_nul.txt(B[m
ok 52 - delete fails cleanly if packed-refs file is locked(B[m
ok 9 - resolving @{push} fails with a detached HEAD(B[m
ok 153 - stdin -z update ref works with right old value(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 339 - compare_files LF NNO_attr_-text_aeol_crlf_input_LF.txt(B[m
ok 2 - split the index while adding a racily clean file #0(B[m
*** t2003-checkout-cache-mkdir.sh ***
ok 5 - enable split index again, "one" now belongs to base index"(B[m
ok 340 - compare_files CRLF NNO_attr_-text_aeol_crlf_input_CRLF.txt(B[m
ok 1 - git update-index --add various paths.(B[m
ok 154 - stdin -z delete ref fails with wrong old value(B[m
ok 3 - split the index while adding a racily clean file #1(B[m
ok 42 - fsck notices .gI{u200c}T as blob(B[m
ok 341 - compare_files CRLF_mix_LF NNO_attr_-text_aeol_crlf_input_CRLF_mix_LF.txt(B[m
ok 2 - git checkout-index without -f should fail on conflicting work tree.(B[m
ok 53 - delete fails cleanly if packed-refs.new write fails(B[m
[32m# passed all 53 test(s)(B[m
[36m1..53(B[m
ok 342 - compare_files LF_mix_CR NNO_attr_-text_aeol_crlf_input_LF_mix_CR.txt(B[m
ok 3 - git checkout-index with -f should succeed.(B[m
ok 4 - split the index while adding a racily clean file #2(B[m
ok 155 - stdin -z delete ref fails with zero old value(B[m
ok 4 - git checkout-index conflicting paths.(B[m
ok 6 - modify original file, base index untouched(B[m
*** t2004-checkout-cache-temp.sh ***
ok 343 - compare_files CRLF_nul NNO_attr_-text_aeol_crlf_input_CRLF_nul.txt(B[m
ok 1 - preparation(B[m
ok 16 - #6c: GIT_DIR set, core.worktree=../wt (absolute)(B[m
ok 5 - split the index while adding a racily clean file #3(B[m
ok 344 - compare_files LF NNO_attr_auto_aeol__input_LF.txt(B[m
ok 1 - setup(B[m
ok 5 - checkout-index -f twice with --prefix(B[m
ok 2 - without -u, git checkout-index smudges stat information.(B[m
ok 345 - compare_files CRLF NNO_attr_auto_aeol__input_CRLF.txt(B[m
ok 156 - stdin -z update symref works option no-deref(B[m
ok 43 - fsck notices .gI{u200c}T as tree(B[m
ok 7 - add another file, which stays index(B[m
ok 6 - split the index while adding a racily clean file #4(B[m
ok 11 - git read-tree -u -m --recurse-submodules: updating to a missing submodule commit fails(B[m
ok 6 - git update-index --add path2/file0(B[m
ok 346 - compare_files CRLF_mix_LF NNO_attr_auto_aeol__input_CRLF_mix_LF.txt(B[m
ok 2 - have symlink in place where dir is expected.(B[m
ok 3 - with -u, git checkout-index picks up stat information from new files.(B[m
ok 7 - writing tree out with git write-tree(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 347 - compare_files LF_mix_CR NNO_attr_auto_aeol__input_LF_mix_CR.txt(B[m
*** t2005-checkout-index-symlinks.sh ***
ok 3 - use --prefix=path2/(B[m
ok 7 - add a racily clean file to an already split index #0(B[m
ok 157 - stdin -z delete symref works option no-deref(B[m
ok 8 - remove file not in base index(B[m
ok 8 - git update-index --add path3/file1(B[m
ok 348 - compare_files CRLF_nul NNO_attr_auto_aeol__input_CRLF_nul.txt(B[m
ok 4 - use --prefix=tmp-(B[m
ok 9 - writing tree out with git write-tree(B[m
ok 158 - stdin -z delete ref works with right old value(B[m
ok 6 - index version config precedence(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 349 - compare_files LF NNO_attr_auto_aeol_lf_input_LF.txt(B[m
ok 17 - #6d: GIT_DIR set, core.worktree=../wt (relative)(B[m
ok 8 - add a racily clean file to an already split index #1(B[m
ok 5 - use --prefix=tmp- but with a conflicting file and dir(B[m
ok 9 - remove file in base index(B[m
*** t2006-checkout-index-basic.sh ***
ok 44 - fsck notices .Git as blob(B[m
ok 10 - read previously written tree and checkout.(B[m
ok 350 - compare_files CRLF NNO_attr_auto_aeol_lf_input_CRLF.txt(B[m
ok 1 - setup(B[m
ok 11 - add a symlink(B[m
ok 6 - use --prefix=tmp/orary/ where tmp is a symlink(B[m
ok 159 - stdin -z update/create/verify combination works(B[m
ok 351 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_lf_input_CRLF_mix_LF.txt(B[m
ok 9 - add a racily clean file to an already split index #2(B[m
ok 12 - writing tree out with git write-tree(B[m
ok 10 - add original file back(B[m
ok 352 - compare_files LF_mix_CR NNO_attr_auto_aeol_lf_input_LF_mix_CR.txt(B[m
ok 7 - use --prefix=tmp/orary- where tmp is a symlink(B[m
ok 2 - checkout one stage 0 to temporary file(B[m
ok 13 - read previously written tree and checkout.(B[m
ok 160 - stdin -z verify succeeds for correct value(B[m
ok 1 - preparation(B[m
ok 14 - checking out conflicting path with -f(B[m
ok 353 - compare_files CRLF_nul NNO_attr_auto_aeol_lf_input_CRLF_nul.txt(B[m
ok 10 - add a racily clean file to an already split index #3(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 2 - the checked-out symlink must be a file(B[m
ok 11 - add new file(B[m
ok 8 - use --prefix=tmp- where tmp-path1 is a symlink(B[m
ok 161 - stdin -z verify succeeds for missing reference(B[m
*** t2007-checkout-symlink.sh ***
ok 45 - fsck notices .Git as tree(B[m
ok 3 - the file must be the blob we added during the setup(B[m
ok 354 - compare_files LF NNO_attr_auto_aeol_crlf_input_LF.txt(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 18 - #6e: GIT_DIR set, core.worktree=../.. (absolute)(B[m
ok 162 - stdin -z verify treats no value as missing(B[m
*** t2008-checkout-subdir.sh ***
ok 1 - checkout-index --gobbledegook(B[m
ok 11 - add a racily clean file to an already split index #4(B[m
ok 355 - compare_files CRLF NNO_attr_auto_aeol_crlf_input_CRLF.txt(B[m
ok 12 - unify index, two files remain(B[m
ok 163 - stdin -z verify fails for wrong value(B[m
ok 356 - compare_files CRLF_mix_LF NNO_attr_auto_aeol_crlf_input_CRLF_mix_LF.txt(B[m
ok 9 - apply filter from working tree .gitattributes with --prefix(B[m
ok 2 - checkout-index -h in broken repository(B[m
ok 3 - checkout all stage 0 to temporary files(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t2009-checkout-statinfo.sh ***
ok 357 - compare_files LF_mix_CR NNO_attr_auto_aeol_crlf_input_LF_mix_CR.txt(B[m
ok 4 - setup 3-way merge(B[m
ok 10 - apply CRLF filter from working tree .gitattributes with --prefix(B[m
ok 164 - stdin -z verify fails for mistaken null value(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 13 - rev-parse --shared-index-path(B[m
ok 46 - fsck notices git~1 as blob(B[m
ok 358 - compare_files CRLF_nul NNO_attr_auto_aeol_crlf_input_CRLF_nul.txt(B[m
*** t2010-checkout-ambiguous.sh ***
ok 5 - checkout one stage 2 to temporary file(B[m
ok 359 - compare_files LF NNO_attr_text_aeol__input_LF.txt(B[m
ok 19 - #6f: GIT_DIR set, core.worktree=../.. (relative)(B[m
ok 165 - stdin -z verify fails for mistaken empty value(B[m
ok 360 - compare_files LF NNO_attr_text_aeol__input_CRLF.txt(B[m
ok 12 - git read-tree -u -m --recurse-submodules: added submodule doesn't remove untracked file with same name(B[m
ok 14 - set core.splitIndex config variable to true(B[m
ok 361 - compare_files LF NNO_attr_text_aeol__input_CRLF_mix_LF.txt(B[m
ok 1 - setup(B[m
ok 20 - #7: setup(B[m
ok 6 - checkout all stage 2 to temporary files(B[m
ok 362 - compare_files LF_mix_CR NNO_attr_text_aeol__input_LF_mix_CR.txt(B[m
ok 166 - stdin -z update refs works with identity updates(B[m
ok 47 - fsck notices git~1 as tree(B[m
ok 7 - checkout all stages/one file to nothing(B[m
ok 363 - compare_files LF_nul NNO_attr_text_aeol__input_CRLF_nul.txt(B[m
ok 15 - set core.splitIndex config variable to false(B[m
ok 1 - setup(B[m
ok 2 - remove and restore with relative path(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 364 - compare_files LF NNO_attr_text_aeol_lf_input_LF.txt(B[m
ok 8 - checkout all stages/one file to temporary files(B[m
ok 2 - switch from symlink to dir(B[m
ok 3 - checkout with empty prefix(B[m
ok 2 - reference must be a tree(B[m
ok 365 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF.txt(B[m
ok 167 - stdin -z update refs fails with wrong old value(B[m
ok 3 - Remove temporary directories & switch to master(B[m
ok 21 - #7: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 366 - compare_files LF NNO_attr_text_aeol_lf_input_CRLF_mix_LF.txt(B[m
ok 9 - checkout some stages/one file to temporary files(B[m
ok 3 - branch switching(B[m
ok 4 - switch from dir to symlink(B[m
ok 4 - checkout with simple prefix(B[m
ok 48 - fsck notices .git. as blob(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 367 - compare_files LF_mix_CR NNO_attr_text_aeol_lf_input_LF_mix_CR.txt(B[m
ok 16 - set core.splitIndex config variable back to true(B[m
ok 10 - checkout all stages/all files to temporary files(B[m
ok 2 - branch switching(B[m
*** t2011-checkout-invalid-head.sh ***
ok 4 - checkout world from the index(B[m
ok 5 - checkout with complex relative path(B[m
ok 168 - stdin -z delete refs works with packed and loose refs(B[m
ok 11 - -- path0: no entry(B[m
ok 368 - compare_files LF_nul NNO_attr_text_aeol_lf_input_CRLF_nul.txt(B[m
ok 5 - non ambiguous call(B[m
ok 6 - relative path outside tree should fail(B[m
ok 369 - compare_files LF NNO_attr_text_aeol_crlf_input_LF.txt(B[m
ok 12 - -- path1: all 3 stages(B[m
ok 7 - incorrect relative path to file should fail (1)(B[m
ok 6 - allow the most common case(B[m
ok 8 - incorrect relative path should fail (2)(B[m
ok 370 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF.txt(B[m
ok 13 - -- path2: no stage 1, have stage 2 and 3(B[m
ok 7 - check ambiguity(B[m
ok 22 - #7: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 169 - fails with duplicate HEAD update(B[m
ok 9 - incorrect relative path should fail (3)(B[m
ok 3 - path checkout(B[m
ok 49 - fsck notices .git. as tree(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 371 - compare_files LF NNO_attr_text_aeol_crlf_input_CRLF_mix_LF.txt(B[m
ok 14 - -- path3: no stage 2, have stage 1 and 3(B[m
ok 17 - check behavior with splitIndex.maxPercentChange unset(B[m
*** t2012-checkout-last.sh ***
*** t2013-checkout-submodule.sh ***
ok 8 - check ambiguity in subdir(B[m
ok 372 - compare_files LF_mix_CR NNO_attr_text_aeol_crlf_input_LF_mix_CR.txt(B[m
ok 15 - -- path4: no stage 3, have stage 1 and 3(B[m
ok 1 - setup(B[m
ok 9 - disambiguate checking out from a tree-ish(B[m
ok 373 - compare_files LF_nul NNO_attr_text_aeol_crlf_input_CRLF_nul.txt(B[m
ok 16 - -- asubdir/path5: no stage 2 and 3 have stage 1(B[m
ok 170 - fails with duplicate ref update via symref(B[m
ok 2 - checkout should not start branch from a tree(B[m
ok 3 - checkout master from invalid HEAD(B[m
ok 10 - accurate error message with more than one ref(B[m
[33mnot ok 13 - git read-tree -u -m --recurse-submodules: added submodule removes an untracked ignored file # TODO known breakage(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 17 - checkout --temp within subdir(B[m
ok 23 - #7: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 50 - fsck notices .\.GIT\foobar as blob(B[m
*** t2014-checkout-switch.sh ***
ok 171 - large transaction creating branches does not burst open file limit(B[m
ok 18 - check splitIndex.maxPercentChange set to 0(B[m
ok 172 - large transaction deleting branches does not burst open file limit(B[m
ok 18 - checkout --temp symlink(B[m
ok 1 - setup(B[m
ok 374 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=lf(B[m
ok 2 - "checkout -" does not work initially(B[m
ok 19 - emit well-formed relative path(B[m
ok 375 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 51 - fsck notices .\.GIT\foobar as tree(B[m
ok 24 - #7: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 3 - first branch switch(B[m
ok 19 - shared index files expire after 2 weeks by default(B[m
*** t2015-checkout-unborn.sh ***
ok 376 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 4 - "checkout -" switches back(B[m
ok 4 - checkout notices failure to lock HEAD(B[m
ok 1 - setup(B[m
ok 377 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 1 - setup(B[m
ok 5 - create ref directory/file conflict scenario(B[m
ok 2 - check all changes are staged(B[m
ok 5 - "checkout -" switches forth(B[m
ok 378 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 6 - checkout away from d/f HEAD (unpacked, to branch)(B[m
ok 173 - handle per-worktree refs in refs/bisect(B[m
ok 3 - second commit(B[m
[32m# passed all 173 test(s)(B[m
[36m1..173(B[m
ok 6 - detach HEAD(B[m
ok 379 - checkout attr=-text  aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 20 - check splitIndex.sharedIndexExpire set to 16 days(B[m
ok 7 - checkout away from d/f HEAD (unpacked, to detached)(B[m
ok 4 - check(B[m
ok 52 - fsck notices .git\foobar as blob(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t2016-checkout-patch.sh ***
ok 25 - #7: chdir_to_toplevel uses worktree, not git dir(B[m
ok 8 - pack refs(B[m
ok 7 - "checkout -" attaches again(B[m
*** t2017-checkout-orphan.sh ***
ok 2 - "reset <submodule>" updates the index(B[m
ok 9 - checkout away from d/f HEAD (packed, to branch)(B[m
ok 10 - checkout away from d/f HEAD (packed, to detached)(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 8 - "checkout -" detaches again(B[m
*** t2018-checkout-branch.sh ***
ok 21 - check splitIndex.sharedIndexExpire set to "never" and "now"(B[m
ok 1 - setup(B[m
ok 380 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=lf(B[m
[34mok 1 # skip setup (missing PERL)(B[m
ok 53 - fsck notices .git\foobar as tree(B[m
[34mok 2 # skip saying "n" does nothing (missing PERL)(B[m
ok 3 - "checkout <submodule>" updates the index only(B[m
[34mok 3 # skip git checkout -p (missing PERL)(B[m
ok 2 - checkout from unborn preserves untracked files(B[m
ok 26 - #7: chdir_to_toplevel uses worktree (from subdir)(B[m
[34mok 4 # skip git checkout -p with staged changes (missing PERL)(B[m
[34mok 5 # skip git checkout -p HEAD with NO staged changes: abort (missing PERL)(B[m
ok 381 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
[34mok 6 # skip git checkout -p HEAD with NO staged changes: apply (missing PERL)(B[m
[34mok 7 # skip git checkout -p HEAD with change already staged (missing PERL)(B[m
[34mok 8 # skip git checkout -p HEAD^ (missing PERL)(B[m
ok 4 - "checkout <submodule>" honors diff.ignoreSubmodules(B[m
[34mok 9 # skip git checkout -p handles deletion (missing PERL)(B[m
[34mok 10 # skip path limiting works: dir (missing PERL)(B[m
ok 382 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
[34mok 11 # skip path limiting works: -- dir (missing PERL)(B[m
[34mok 12 # skip path limiting works: HEAD^ -- dir (missing PERL)(B[m
[34mok 13 # skip path limiting works: foo inside dir (missing PERL)(B[m
ok 3 - checkout from unborn preserves index contents(B[m
[34mok 14 # skip none of this moved HEAD (missing PERL)(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 1 - Setup(B[m
ok 383 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
*** t2019-checkout-ambiguous-ref.sh ***
ok 22 - same mode for index & split index(B[m
ok 5 - "checkout <submodule>" honors submodule.*.ignore from .gitmodules(B[m
ok 4 - checkout from unborn merges identical index contents(B[m
ok 27 - #8: gitfile, easy case(B[m
ok 54 - fsck allows .Ňit(B[m
ok 384 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 385 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 9 - more switches(B[m
ok 6 - "checkout <submodule>" honors submodule.*.ignore from .git/config(B[m
ok 5 - checking out another branch from unborn state(B[m
ok 2 - --orphan creates a new orphan branch from HEAD(B[m
ok 23 - split index respects core.sharedrepository 0666(B[m
ok 1 - setup(B[m
ok 28 - #9: GIT_WORK_TREE accepted with gitfile(B[m
ok 6 - checking out in a newly created repo(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t2020-checkout-detach.sh ***
ok 55 - NUL in commit(B[m
ok 3 - --orphan creates a new orphan branch from <start_point>(B[m
ok 386 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=lf(B[m
ok 2 - checkout -b to a new branch, set to HEAD(B[m
ok 29 - #10: GIT_DIR can point to gitfile(B[m
ok 12 - split the index when the index contains a racily clean cache entry #0(B[m
ok 4 - --orphan must be rejected with -b(B[m
[33mnot ok 14 - git read-tree -u -m --recurse-submodules: replace submodule with a directory # TODO known breakage(B[m
ok 387 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
ok 24 - split index respects core.sharedrepository 0642(B[m
ok 388 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 3 - checkout -b to a merge base(B[m
ok 5 - --orphan must be rejected with -t(B[m
ok 389 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 10 - switch to the last(B[m
ok 1 - setup ambiguous refs(B[m
ok 390 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 30 - #10b: relative GIT_DIR can point to gitfile(B[m
ok 56 - fsck notices missing blob(B[m
ok 2 - checkout ambiguous ref succeeds(B[m
ok 4 - checkout -b to a new branch, set to an explicit ref(B[m
ok 3 - checkout produces ambiguity warning(B[m
ok 391 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 6 - --orphan ignores branch.autosetupmerge(B[m
ok 31 - #11: setup(B[m
ok 5 - checkout -b to a new branch with unmergeable changes fails(B[m
ok 4 - checkout chooses branch over tag(B[m
ok 5 - checkout reports switch to branch(B[m
ok 25 - graceful handling when splitting index is not allowed(B[m
ok 7 - --orphan makes reflog by default(B[m
ok 6 - checkout vague ref succeeds(B[m
ok 7 - checkout produces ambiguity warning(B[m
ok 6 - checkout -f -b to a new branch with unmergeable changes discards changes(B[m
ok 57 - fsck notices missing subtree(B[m
ok 392 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=lf(B[m
ok 8 - checkout chooses branch over tag(B[m
ok 32 - #11: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 9 - checkout reports switch to branch(B[m
ok 393 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
ok 1 - setup(B[m
ok 8 - --orphan does not make reflog when core.logAllRefUpdates = false(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
*** t2021-checkout-overwrite.sh ***
ok 11 - switch to second from the last(B[m
ok 394 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 26 - writing split index with null sha1 does not write cache tree(B[m
ok 2 - checkout branch does not detach(B[m
ok 7 - checkout -b to a new branch preserves mergeable changes(B[m
ok 395 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 9 - --orphan with -l makes reflog when core.logAllRefUpdates = false(B[m
ok 396 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 33 - #11: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 3 - checkout tag detaches(B[m
ok 58 - fsck notices missing root tree(B[m
ok 397 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 10 - giving up --orphan not committed when -l and core.logAllRefUpdates = false deletes reflog(B[m
ok 8 - checkout -f -b to a new branch with mergeable changes discards changes(B[m
ok 4 - checkout branch by full name detaches(B[m
ok 9 - checkout -b to an existing branch fails(B[m
ok 11 - --orphan is rejected with an existing name(B[m
ok 1 - setup(B[m
ok 5 - checkout non-ref detaches(B[m
ok 34 - #11: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 2 - create a commit where dir a/b changed to file(B[m
ok 27 - do not refresh null base index(B[m
ok 10 - checkout -b to @{-1} fails with the right branch name(B[m
ok 398 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=lf(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 12 - switch to third from the last(B[m
ok 59 - fsck notices missing parent(B[m
ok 12 - --orphan refuses to switch if a merge is needed(B[m
ok 6 - checkout ref^0 detaches(B[m
ok 399 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
*** t2022-checkout-paths.sh ***
ok 3 - checkout commit with dir must not remove untracked a/b(B[m
ok 400 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 13 - cannot --detach on an unborn branch(B[m
ok 11 - checkout -B to an existing branch resets branch to HEAD(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 7 - checkout --detach detaches(B[m
ok 401 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
*** t2023-checkout-m.sh ***
ok 35 - #11: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 12 - checkout -B to a merge base(B[m
ok 402 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 4 - create a commit where dir a/b changed to symlink(B[m
ok 8 - checkout --detach without branch name(B[m
ok 403 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 60 - fsck notices missing tagged object(B[m
ok 5 - checkout commit with dir must not remove untracked a/b(B[m
ok 9 - checkout --detach errors out for non-commit(B[m
ok 13 - checkout -B to an existing branch from detached HEAD resets branch to HEAD(B[m
ok 6 - the symlink remained(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t2024-checkout-dwim.sh ***
[33mnot ok 15 - git read-tree -u -m --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage(B[m
ok 36 - #11: chdir_to_toplevel uses worktree, not git dir(B[m
ok 13 - switch to fourth from the last(B[m
ok 10 - checkout --detach errors out for extra argument(B[m
ok 1 - setup(B[m
ok 14 - checkout -B to an existing branch with an explicit ref resets branch to that ref(B[m
ok 404 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=lf(B[m
ok 11 - checkout --detached and -b are incompatible(B[m
ok 15 - checkout -B to an existing branch with unmergeable changes fails(B[m
ok 405 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
ok 61 - fsck notices ref pointing to missing commit(B[m
ok 406 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 2 - checking out paths out of a tree does not clobber unrelated paths(B[m
ok 16 - checkout -f -B to an existing branch with unmergeable changes discards changes(B[m
ok 407 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 37 - #11: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 12 - checkout --detach moves HEAD(B[m
ok 408 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 409 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 1 - setup(B[m
ok 62 - fsck notices ref pointing to missing tag(B[m
ok 2 - git merge master(B[m
ok 17 - checkout -B to an existing branch preserves mergeable changes(B[m
ok 3 - do not touch unmerged entries matching $path but not in $tree(B[m
ok 38 - #12: core.worktree with gitfile is accepted(B[m
ok 14 - switch to twelfth from the last(B[m
ok 13 - checkout warns on orphan commits(B[m
ok 3 - -m restores 2-way conflicted+resolved file(B[m
ok 15 - merge base test setup(B[m
ok 14 - checkout warns on orphan commits: output(B[m
ok 18 - checkout -f -B to an existing branch with mergeable changes discards changes(B[m
ok 4 - -m restores 3-way conflicted+resolved file(B[m
ok 410 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=lf(B[m
ok 4 - do not touch files that are already up-to-date(B[m
ok 15 - checkout warns orphaning 1 of 2 commits(B[m
ok 16 - another...master(B[m
ok 39 - #13: core.worktree+GIT_WORK_TREE accepted (with gitfile)(B[m
ok 16 - checkout warns orphaning 1 of 2 commits: output(B[m
ok 411 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
ok 412 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 17 - ...master(B[m
ok 19 - checkout -b <describe>(B[m
ok 17 - checkout does not warn leaving ref tip(B[m
ok 413 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 63 - fsck --connectivity-only(B[m
ok 5 - checkout HEAD adds deleted intent-to-add file back to index(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 18 - checkout does not warn leaving ref tip(B[m
*** t2025-checkout-no-overlay.sh ***
ok 414 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 18 - master...(B[m
ok 20 - checkout -B to the current branch works(B[m
ok 415 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 13 - split the index when the index contains a racily clean cache entry #1(B[m
ok 19 - checkout does not warn leaving reachable commit(B[m
ok 20 - checkout does not warn leaving reachable commit(B[m
ok 19 - "checkout -" works after a rebase A(B[m
ok 64 - fsck --connectivity-only with explicit head(B[m
ok 5 - force checkout a conflict file creates stage zero entry(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 1 - setup(B[m
ok 21 - checkout -b after clone --no-checkout does a checkout of HEAD(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
*** t2026-checkout-pathspec-file.sh ***
ok 21 - tracking count is accurate after orphan check(B[m
ok 416 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=lf(B[m
*** t2030-unresolve-info.sh ***
ok 2 - checkout --no-overlay deletes files not in <tree-ish>(B[m
ok 20 - "checkout -" works after a rebase A B(B[m
ok 417 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF(B[m
ok 3 - checkout --no-overlay removing last file from directory(B[m
ok 418 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 4 - checkout -p --overlay is disallowed(B[m
ok 419 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 16 - git read-tree -u -m --recurse-submodules: replace submodule with a file works ignores ignored files in submodule(B[m
ok 21 - "checkout -" works after a rebase -i A(B[m
ok 1 - setup(B[m
ok 420 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 421 - checkout attr=-text  aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 65 - fsck --name-objects(B[m
ok 2 - checkout of non-existing branch fails(B[m
ok 22 - "checkout -" works after a rebase -i A B(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
*** t2050-git-dir-relative.sh ***
ok 1 - setup(B[m
ok 5 - --no-overlay --theirs with D/F conflict deletes file(B[m
ok 22 - no advice given for explicit detached head state(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 66 - alternate objects are correctly blamed(B[m
*** t2060-switch.sh ***
ok 3 - checkout of branch from multiple remotes fails #1(B[m
ok 2 - --pathspec-from-file from stdin(B[m
ok 422 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 423 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
ok 3 - --pathspec-from-file from file(B[m
ok 424 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 1 - Setting up post-commit hook(B[m
ok 40 - #14: core.worktree with GIT_DIR pointing to gitfile(B[m
ok 4 - when arg matches multiple remotes, do not fallback to interpreting as pathspec(B[m
ok 425 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 67 - fsck errors in packed objects(B[m
ok 4 - NUL delimiters(B[m
ok 2 - post-commit hook used ordinarily(B[m
ok 426 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 427 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 5 - LF delimiters(B[m
ok 3 - post-commit-hook created and used from top dir(B[m
ok 1 - setup(B[m
ok 68 - fsck fails on corrupt packfile(B[m
ok 5 - checkout of branch from multiple remotes fails with advice(B[m
[34mok 6 # skip checkout -p with multiple remotes does not print advice (missing PERL)(B[m
ok 6 - no trailing delimiter(B[m
ok 4 - post-commit-hook from sub dir(B[m
ok 23 - describe_detached_head prints no SHA-1 ellipsis when not asked to(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 1 - setup(B[m
*** t2070-restore.sh ***
ok 2 - switch branch no arguments(B[m
ok 7 - CRLF delimiters(B[m
ok 428 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 3 - switch branch(B[m
ok 429 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 69 - fsck finds problems in duplicate loose objects(B[m
ok 8 - quotes(B[m
ok 7 - checkout of branch from multiple remotes succeeds with checkout.defaultRemote #1(B[m
ok 4 - switch and detach(B[m
ok 430 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 431 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 9 - quotes not compatible with --pathspec-file-nul(B[m
ok 41 - #14b: core.worktree is relative to actual git dir(B[m
ok 70 - fsck detects trailing loose garbage (commit)(B[m
ok 2 - add records switch clears(B[m
ok 5 - switch and detach current branch(B[m
ok 432 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 24 - describe_detached_head does print SHA-1 ellipsis when asked to(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 433 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 10 - only touches what was listed(B[m
ok 42 - #15: setup(B[m
*** t2071-restore-patch.sh ***
ok 71 - fsck detects trailing loose garbage (large blob)(B[m
ok 8 - checkout of branch from a single remote succeeds #1(B[m
ok 6 - switch and create branch(B[m
ok 1 - setup(B[m
ok 2 - restore without pathspec is not ok(B[m
ok 11 - error conditions(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 72 - fsck detects truncated loose object(B[m
ok 3 - restore a file, ignoring branch of same name(B[m
*** t2072-restore-pathspec-file.sh ***
[34mok 1 # skip setup (missing PERL)(B[m
[34mok 2 # skip restore -p without pathspec is fine (missing PERL)(B[m
ok 7 - force create branch from HEAD(B[m
ok 43 - #15: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
[34mok 3 # skip saying "n" does nothing (missing PERL)(B[m
ok 434 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 9 - checkout of branch from a single remote succeeds #2(B[m
[34mok 4 # skip git restore -p (missing PERL)(B[m
[34mok 5 # skip git restore -p with staged changes (missing PERL)(B[m
[34mok 6 # skip git restore -p --source=HEAD (missing PERL)(B[m
[34mok 7 # skip git restore -p --source=HEAD^ (missing PERL)(B[m
[34mok 8 # skip git restore -p handles deletion (missing PERL)(B[m
ok 435 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
[34mok 9 # skip path limiting works: dir (missing PERL)(B[m
[34mok 10 # skip path limiting works: -- dir (missing PERL)(B[m
[34mok 11 # skip path limiting works: HEAD^ -- dir (missing PERL)(B[m
[34mok 12 # skip path limiting works: foo inside dir (missing PERL)(B[m
[34mok 13 # skip none of this moved HEAD (missing PERL)(B[m
ok 436 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 4 - restore a file on worktree from another ref(B[m
*** t2100-update-cache-badpath.sh ***
ok 73 - create dangling-object repository(B[m
ok 437 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 10 - --no-guess suppresses branch auto-vivification(B[m
ok 8 - new orphan branch from empty(B[m
ok 438 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 3 - rm records reset clears(B[m
ok 44 - #15: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 74 - fsck notices dangling objects(B[m
ok 17 - git -c submodule.recurse=true read-tree -u -m: modified submodule updates submodule work tree(B[m
ok 5 - restore a file in the index from another ref(B[m
ok 439 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 9 - switching ignores file of same branch name(B[m
ok 75 - fsck --connectivity-only notices dangling objects(B[m
ok 6 - restore a file in both the index and worktree from another ref(B[m
ok 10 - guess and create branch (B[m
ok 76 - fsck $name notices bogus $name(B[m
ok 1 - setup(B[m
ok 1 - git update-index --add to add various paths.(B[m
ok 11 - not switching when something is in progress(B[m
ok 45 - #15: explicit GIT_WORK_TREE from parent of worktree(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 7 - restore --staged uses HEAD as source(B[m
*** t2101-update-index-reupdate.sh ***
ok 440 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 14 - split the index when the index contains a racily clean cache entry #2(B[m
ok 2 - --pathspec-from-file from stdin(B[m
ok 2 - git update-index to add conflicting path path0/file0 should fail.(B[m
ok 77 - bogus head does not fallback to all heads(B[m
ok 3 - git update-index to add conflicting path path1/file1 should fail.(B[m
ok 441 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 4 - git update-index to add conflicting path path2 should fail.(B[m
ok 4 - plumbing clears(B[m
ok 3 - --pathspec-from-file from file(B[m
ok 442 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 5 - git update-index to add conflicting path path3 should fail.(B[m
ok 78 - detect corrupt index file in fsck(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
[32m# passed all 78 test(s)(B[m
[36m1..78(B[m
ok 443 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
*** t2102-update-index-symlinks.sh ***
ok 46 - #15: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 4 - NUL delimiters(B[m
ok 444 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 445 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 8 - restore --ignore-unmerged ignores unmerged entries(B[m
ok 7 - git checkout --recurse-submodules: added submodule is checked out(B[m
ok 1 - update-index --add(B[m
ok 5 - LF delimiters(B[m
ok 2 - update-index --again(B[m
ok 6 - no trailing delimiter(B[m
ok 5 - add records checkout -m undoes(B[m
*** t2103-update-index-ignore-missing.sh ***
ok 47 - #15: chdir_to_toplevel uses worktree, not git dir(B[m
ok 9 - restore --staged adds deleted intent-to-add file back to index(B[m
ok 1 - preparation(B[m
ok 3 - update-index --remove --again(B[m
ok 2 - modify the symbolic link(B[m
ok 7 - CRLF delimiters(B[m
ok 446 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 3 - the index entry must still be a symbolic link(B[m
ok 4 - first commit(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t2104-update-index-skip-worktree.sh ***
ok 447 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
ok 8 - quotes(B[m
ok 448 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 10 - restore --staged invalidates cache tree for deletions(B[m
ok 5 - update-index again(B[m
ok 449 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 48 - #15: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 9 - quotes not compatible with --pathspec-file-nul(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 6 - unmerge with plumbing(B[m
ok 11 - setup more remotes with unconventional refspecs(B[m
*** t2105-update-index-gitfile.sh ***
ok 450 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 451 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 6 - update-index --update from subdir(B[m
ok 10 - only touches what was listed(B[m
ok 12 - checkout of branch from multiple remotes fails #2(B[m
ok 1 - setup(B[m
ok 7 - update-index --update with pathspec(B[m
ok 49 - #16a: implicitly bare repo (cwd inside .git dir)(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 2 - index is at version 2(B[m
*** t2106-update-index-assume-unchanged.sh ***
ok 3 - update-index --skip-worktree(B[m
ok 1 - basics(B[m
ok 11 - error conditions(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 4 - index is at version 3 after having some skip-worktree entries(B[m
*** t2107-update-index-basic.sh ***
ok 452 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 13 - checkout of branch from multiple remotes fails #3(B[m
ok 5 - ls-files -t(B[m
ok 1 - submodule with absolute .git file(B[m
ok 453 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 6 - update-index --no-skip-worktree(B[m
ok 2 - add gitlink to absolute .git file(B[m
ok 2 - --ignore-missing --refresh(B[m
ok 7 - index version is back to 2 when there is no skip-worktree entry(B[m
ok 50 - #16b: bare .git (cwd inside .git dir)(B[m
ok 454 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 7 - rerere and rerere forget(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
*** t2200-add-update.sh ***
ok 455 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 8 - git checkout --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 3 - submodule with relative .git file(B[m
ok 456 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 1 - update-index --nonsense fails(B[m
ok 14 - checkout of branch from a single remote succeeds #3(B[m
ok 4 - add gitlink to relative .git file(B[m
ok 3 - --unmerged --refresh(B[m
ok 1 - setup(B[m
ok 457 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 51 - #16c: bare .git has no worktree(B[m
*** t2201-add-update-typechange.sh ***
ok 2 - update-index --nonsense dumps usage(B[m
ok 4 - --ignore-submodules --refresh (1)(B[m
ok 2 - do not switch branches with dirty file(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 3 - update-index -h with corrupt index(B[m
ok 52 - #16d: bareness preserved across alias(B[m
*** t2202-add-addremove.sh ***
ok 4 - --cacheinfo complains of missing arguments(B[m
ok 1 - setup(B[m
ok 5 - --ignore-submodules --refresh (2)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 15 - checkout of branch from a single remote succeeds #4(B[m
ok 2 - update(B[m
ok 53 - #16e: bareness preserved by --bare(B[m
*** t2203-add-intent.sh ***
ok 458 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=lf(B[m
ok 3 - update noticed a removal(B[m
ok 5 - --cacheinfo does not accept blob null sha1(B[m
ok 4 - update touched correct path(B[m
ok 459 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF(B[m
ok 8 - rerere and rerere forget (subdirectory)(B[m
ok 460 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 5 - update did not touch other tracked files(B[m
ok 1 - setup(B[m
ok 16 - checkout of branch with a file having the same name fails(B[m
ok 6 - update did not touch untracked files(B[m
ok 461 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 462 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 6 - --cacheinfo does not accept gitlink null sha1(B[m
ok 1 - setup(B[m
ok 9 - rerere forget (binary)(B[m
ok 7 - cache tree has not been corrupted(B[m
ok 463 - checkout attr=-text  aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 8 - update from a subdirectory(B[m
ok 9 - change gets noticed(B[m
ok 2 - git add --all(B[m
ok 17 - checkout of branch with a file in subdir having the same name fails(B[m
ok 7 - --cacheinfo mode,sha1,path (new syntax)(B[m
ok 1 - intent to add(B[m
ok 10 - non-qualified update in subdir updates from the root(B[m
ok 3 - Just "git add" is a no-op(B[m
ok 10 - rerere forget (add-add conflict)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 2 - git status(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 8 - .lock files cleaned up(B[m
*** t2204-add-ignored.sh ***
ok 18 - git read-tree -u -m --recurse-submodules: modified submodule updates submodule recursively(B[m
ok 11 - replace a file with a symlink(B[m
*** t2300-cd-to-toplevel.sh ***
ok 464 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 2 - modify(B[m
ok 3 - git status with porcelain v2(B[m
ok 12 - add everything changed(B[m
ok 9 - --chmod=+x and chmod=-x in the same argument list(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 3 - diff-files(B[m
ok 465 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 18 - checkout <branch> -- succeeds, even if a file with the same name exists(B[m
ok 4 - check result of "add -N"(B[m
*** t2400-worktree-add.sh ***
ok 13 - touch and then add -u(B[m
ok 54 - #17: GIT_WORK_TREE without explicit GIT_DIR is accepted (bare case)(B[m
ok 4 - diff-index(B[m
ok 466 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 5 - intent to add is just an ordinary empty blob(B[m
ok 14 - touch and then add explicitly(B[m
ok 467 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 1 - setup(B[m
ok 5 - add -u(B[m
ok 468 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 2 - no complaints for unignored file(B[m
ok 15 - split the index when the index contains a racily clean cache entry #3(B[m
ok 6 - intent to add does not clobber existing paths(B[m
ok 469 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 15 - add -n -u should not add but just report(B[m
ok 3 - no complaints for unignored dir/file(B[m
ok 1 - at physical root(B[m
ok 6 - commit -a(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 4 - no complaints for unignored dir(B[m
ok 1 - setup(B[m
*** t2401-worktree-prune.sh ***
ok 2 - "add" an existing worktree(B[m
ok 5 - no complaints for unignored d*(B[m
ok 55 - #18: bare .git named by GIT_DIR has no worktree(B[m
ok 19 - loosely defined local base branch is reported correctly(B[m
ok 2 - at physical subdir(B[m
ok 7 - i-t-a entry is simply ignored(B[m
ok 6 - complaints for ignored ign(B[m
ok 3 - "add" an existing empty worktree(B[m
ok 16 - add -u resolves unmerged paths(B[m
ok 470 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 56 - #19: setup(B[m
ok 4 - "add" using shorthand - fails when no previous branch(B[m
ok 7 - complaints for ignored ign output(B[m
ok 17 - "add -u non-existent" should fail(B[m
ok 471 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 20 - reject when arg could be part of dwim branch(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 8 - can commit with an unrelated i-t-a entry in index(B[m
*** t2402-worktree-list.sh ***
ok 472 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 8 - complaints for ignored ign with unignored file(B[m
ok 3 - at symbolic root(B[m
ok 1 - initialize(B[m
ok 9 - complaints for ignored ign with unignored file output(B[m
ok 473 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 21 - disambiguate dwim branch and checkout path (1)(B[m
ok 9 - can "commit -a" with an i-t-a entry(B[m
ok 2 - worktree prune on normal repo(B[m
ok 10 - complaints for ignored dir/ign(B[m
ok 474 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 5 - "add" using - shorthand(B[m
ok 11 - complaints for ignored dir/ign output(B[m
ok 57 - #19: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 4 - at symbolic subdir(B[m
ok 475 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 6 - "add" refuses to checkout locked branch(B[m
ok 22 - disambiguate dwim branch and checkout path (2)(B[m
ok 3 - prune files inside $GIT_DIR/worktrees(B[m
ok 12 - complaints for ignored dir/ign with unignored file(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 7 - checking out paths not complaining about linked checkouts(B[m
ok 13 - complaints for ignored dir/ign with unignored file output(B[m
ok 19 - git read-tree -u --reset --recurse-submodules: added submodule is checked out(B[m
ok 9 - git checkout --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 4 - prune directories without gitdir(B[m
ok 10 - cache-tree invalidates i-t-a paths(B[m
ok 14 - complaints for ignored dir/sub(B[m
ok 1 - setup(B[m
*** t2403-worktree-move.sh ***
ok 5 - at internal symbolic subdir(B[m
ok 15 - complaints for ignored dir/sub output(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t2404-worktree-config.sh ***
ok 2 - rev-parse --git-common-dir on main worktree(B[m
ok 58 - #19: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 16 - complaints for ignored dir/sub with unignored file(B[m
ok 8 - "add" worktree(B[m
ok 17 - complaints for ignored dir/sub with unignored file output(B[m
ok 5 - prune directories with unreadable gitdir(B[m
ok 476 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 11 - cache-tree does not ignore dir that has i-t-a entries(B[m
ok 6 - prune directories with invalid gitdir(B[m
ok 18 - complaints for ignored dir/sub/ign(B[m
ok 477 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 9 - "add" worktree with lock(B[m
ok 19 - complaints for ignored dir/sub/ign output(B[m
ok 3 - rev-parse --git-path objects linked worktree(B[m
ok 7 - prune directories with gitdir pointing to nowhere(B[m
ok 478 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 12 - cache-tree does skip dir that becomes empty(B[m
ok 20 - complaints for ignored dir/sub/ign with unignored file(B[m
ok 8 - not prune locked checkout(B[m
ok 10 - "add" worktree from a subdir(B[m
ok 479 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 21 - complaints for ignored dir/sub/ign with unignored file output(B[m
ok 59 - #19: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 1 - setup(B[m
ok 480 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 13 - commit: ita entries ignored in empty initial commit check(B[m
ok 22 - complaints for ignored sub/file(B[m
ok 9 - not prune recent checkouts(B[m
ok 23 - complaints for ignored sub/file output(B[m
ok 481 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 2 - config --worktree in single worktree(B[m
ok 11 - "add" from a linked checkout(B[m
ok 1 - setup(B[m
ok 4 - "list" all worktrees from main(B[m
ok 2 - lock main worktree(B[m
ok 24 - complaints for ignored sub/file with unignored file(B[m
ok 10 - not prune proper checkouts(B[m
ok 25 - complaints for ignored sub/file with unignored file output(B[m
ok 3 - lock linked worktree(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
*** t2405-worktree-submodule.sh ***
ok 14 - commit: ita entries ignored in empty commit check(B[m
ok 3 - add worktrees(B[m
ok 26 - complaints for ignored sub(B[m
ok 27 - complaints for ignored sub output(B[m
ok 60 - #19: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 4 - config --worktree without extension(B[m
ok 12 - "add" worktree creating new branch(B[m
ok 4 - lock linked worktree from another worktree(B[m
ok 13 - die the same branch is already checked out(B[m
ok 28 - complaints for ignored sub with unignored file(B[m
ok 5 - enable worktreeConfig extension(B[m
ok 5 - lock worktree twice(B[m
ok 482 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 29 - complaints for ignored sub with unignored file output(B[m
ok 5 - "list" all worktrees from linked(B[m
ok 6 - lock worktree twice (from the locked worktree)(B[m
ok 483 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 30 - complaints for ignored sub/file(B[m
ok 7 - unlock main worktree(B[m
ok 31 - complaints for ignored sub/file output(B[m
ok 14 - die the same branch is already checked out (symlink)(B[m
ok 6 - config is shared as before(B[m
ok 484 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 8 - unlock linked worktree(B[m
ok 61 - #19: chdir_to_toplevel uses worktree, not git dir(B[m
ok 32 - complaints for ignored sub/file with unignored file(B[m
ok 9 - unlock worktree twice(B[m
ok 485 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 15 - not die the same branch is already checked out(B[m
ok 33 - complaints for ignored sub/file with unignored file output(B[m
ok 10 - move non-worktree(B[m
ok 20 - git read-tree -u --reset --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 7 - config is shared (set from another worktree)(B[m
ok 16 - not die on re-checking out current branch(B[m
ok 15 - rename detection finds the right names(B[m
ok 486 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 10 - git checkout --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
ok 6 - "list" all worktrees --porcelain(B[m
ok 34 - complaints for ignored sub/ign(B[m
ok 487 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 35 - complaints for ignored sub/ign output(B[m
ok 11 - move locked worktree(B[m
ok 8 - config private to main worktree(B[m
ok 17 - "add" from a bare repo(B[m
ok 36 - complaints for ignored sub/ign with unignored file(B[m
ok 37 - complaints for ignored sub/ign with unignored file output(B[m
ok 12 - move worktree(B[m
ok 18 - checkout from a bare repo without "add"(B[m
ok 62 - #19: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 13 - move main worktree(B[m
ok 38 - complaints for ignored sub in dir(B[m
ok 9 - config private to linked worktree(B[m
ok 7 - bare repo setup(B[m
ok 39 - complaints for ignored sub in dir output(B[m
ok 19 - "add" default branch of a bare repo(B[m
ok 16 - double rename detection in status(B[m
ok 488 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 40 - complaints for ignored sub/file in dir(B[m
ok 14 - move worktree to another dir(B[m
ok 41 - complaints for ignored sub/file in dir output(B[m
ok 10 - core.bare no longer for main only(B[m
ok 489 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 8 - "list" all worktrees from bare main(B[m
ok 42 - complaints for ignored sub/ign in dir(B[m
ok 490 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 17 - diff-files/diff-cached shows ita as new/not-new files(B[m
ok 63 - #20a: core.worktree without GIT_DIR accepted (inside .git)(B[m
ok 11 - per-worktree core.bare is picked up(B[m
ok 43 - complaints for ignored sub/ign in dir output(B[m
ok 491 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 44 - complaints for ignored ign in sub(B[m
ok 492 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 45 - complaints for ignored ign in sub output(B[m
ok 15 - move locked worktree (force)(B[m
ok 64 - #20b/c: core.worktree and core.bare conflict(B[m
ok 18 - "diff HEAD" includes ita as new files(B[m
ok 12 - config.worktree no longer read without extension(B[m
ok 493 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 9 - "list" all worktrees --porcelain from bare main(B[m
*** t3000-ls-files-others.sh ***
ok 46 - complaints for ignored file in sub(B[m
ok 47 - complaints for ignored file in sub output(B[m
[32m# passed all 47 test(s)(B[m
[36m1..47(B[m
ok 65 - #20d: core.worktree and core.bare OK when working tree not needed(B[m
*** t3001-ls-files-others-exclude.sh ***
ok 20 - checkout with grafts(B[m
ok 19 - apply --intent-to-add(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 16 - split the index when the index contains a racily clean cache entry #4(B[m
ok 10 - "list" all worktrees from linked with a bare main(B[m
ok 66 - #21: setup, core.worktree warns before overriding core.bare(B[m
ok 1 - setup: create origin repos(B[m
ok 11 - bare repo cleanup(B[m
*** t3002-ls-files-dashpath.sh ***
ok 494 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 495 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 1 - setup (B[m
ok 496 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 11 - git checkout --recurse-submodules: replace directory with submodule(B[m
ok 2 - setup: expected output(B[m
ok 497 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 1 - git ls-files --others with various exclude options.(B[m
ok 3 - ls-files --others(B[m
ok 1 - setup(B[m
ok 67 - #21: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 2 - git ls-files --others with \r\n line endings.(B[m
ok 498 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 12 - broken main worktree still at the top(B[m
ok 21 - "add" from relative HEAD(B[m
ok 4 - ls-files --others --directory(B[m
ok 2 - git ls-files without path restriction.(B[m
ok 499 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 3 - setup skip-worktree gitignore(B[m
ok 5 - --no-empty-directory hides empty directory(B[m
ok 3 - git ls-files with path restriction.(B[m
ok 4 - git ls-files --others with various exclude options.(B[m
ok 4 - git ls-files with path restriction with --.(B[m
ok 6 - ls-files --others handles non-submodule .git(B[m
ok 22 - "add -b" with <branch> omitted(B[m
ok 16 - move a repo with uninitialized submodule(B[m
ok 5 - restore gitignore(B[m
ok 5 - git ls-files with path restriction with -- --.(B[m
ok 6 - git ls-files with no path restriction.(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 68 - #21: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 6 - git status honors core.excludesfile(B[m
*** t3003-ls-files-exclude.sh ***
ok 23 - "add --detach" with <branch> omitted(B[m
ok 7 - trailing slash in exclude allows directory match(1)(B[m
ok 500 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=lf(B[m
ok 13 - linked worktrees are sorted(B[m
ok 8 - trailing slash in exclude allows directory match (2)(B[m
ok 2 - setup: clone superproject to create main worktree(B[m
ok 501 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF(B[m
ok 9 - trailing slash in exclude forces directory match (1)(B[m
ok 14 - worktree path when called in .git directory(B[m
ok 24 - "add" with <branch> omitted(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 502 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 10 - trailing slash in exclude forces directory match (2)(B[m
ok 3 - add superproject worktree(B[m
*** t3004-ls-files-basic.sh ***
ok 69 - #21: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 503 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 11 - negated exclude matches can override previous ones(B[m
[33mnot ok 4 - submodule is checked out just after worktree add # TODO known breakage(B[m
ok 7 - ls-files --others with symlinked submodule(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 12 - excluded directory overrides content patterns(B[m
ok 504 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 1 - create repo with file(B[m
*** t3005-ls-files-relative.sh ***
ok 13 - negated directory doesn't affect content patterns(B[m
ok 25 - "add" checks out existing branch of dwimd name(B[m
ok 505 - checkout attr=  aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 2 - ls-files output contains file (cached)(B[m
ok 14 - subdirectory ignore (setup)(B[m
ok 3 - ls-files output contains file (modified)(B[m
ok 26 - "add <path>" dwim fails with checked out branch(B[m
ok 21 - git read-tree -u --reset --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 4 - add file to gitignore(B[m
ok 17 - not move a repo with initialized submodule(B[m
ok 15 - subdirectory ignore (toplevel)(B[m
ok 18 - remove main worktree(B[m
ok 5 - ls-files output contains file (cached)(B[m
ok 1 - ls-files in empty repository(B[m
ok 16 - subdirectory ignore (l1/l2)(B[m
ok 70 - #21: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 27 - "add --force" with existing dwimd name doesnt die(B[m
ok 6 - ls-files output contains file (modified)(B[m
ok 2 - ls-files with nonexistent path(B[m
ok 17 - subdirectory ignore (l1)(B[m
ok 19 - remove locked worktree(B[m
ok 18 - show/hide empty ignored directory (setup)(B[m
ok 7 - ls-files -i lists only tracked-but-ignored files(B[m
ok 19 - show empty ignored directory with --directory(B[m
[32m# passed all 7 test(s)(B[m
ok 3 - ls-files with nonsense option(B[m
[36m1..7(B[m
ok 506 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=lf(B[m
ok 20 - remove worktree with dirty tracked file(B[m
ok 28 - "add" no auto-vivify with --detach and <branch> omitted(B[m
*** t3006-ls-files-long.sh ***
ok 1 - prepare(B[m
ok 20 - hide empty ignored directory with --no-empty-directory(B[m
ok 507 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 29 - "add" -b/-B mutually exclusive(B[m
ok 21 - remove worktree with untracked file(B[m
ok 21 - show/hide empty ignored sub-directory (setup)(B[m
ok 4 - ls-files -h in corrupt repository(B[m
ok 2 - ls-files with mixed levels(B[m
ok 30 - "add" -b/--detach mutually exclusive(B[m
ok 22 - force remove worktree with untracked file(B[m
ok 508 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 22 - show empty ignored sub-directory with --directory(B[m
ok 31 - "add" -B/--detach mutually exclusive(B[m
ok 71 - #21: chdir_to_toplevel uses worktree, not git dir(B[m
ok 509 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 23 - hide empty ignored sub-directory with --no-empty-directory(B[m
ok 5 - add superproject worktree and initialize submodules(B[m
ok 3 - ls-files -c(B[m
ok 24 - pattern matches prefix completely(B[m
ok 510 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 23 - remove missing worktree(B[m
ok 32 - "add -B" fails if the branch is checked out(B[m
ok 6 - submodule is checked out just after submodule update in linked worktree(B[m
ok 25 - ls-files with "**" patterns(B[m
ok 511 - checkout attr=  aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 5 - ls-files with absolute paths to symlinks(B[m
ok 1 - setup(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 26 - ls-files with "**" patterns and no slashes(B[m
ok 4 - ls-files -o(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
*** t3007-ls-files-recurse-submodules.sh ***
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 24 - NOT remove missing-but-locked worktree(B[m
*** t3009-ls-files-others-nonsubmodule.sh ***
*** t3008-ls-files-lazy-init-name-hash.sh ***
ok 2 - overly-long path by itself is not a problem(B[m
ok 72 - #21: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 7 - add superproject worktree and manually add submodule worktree(B[m
ok 33 - add -B(B[m
ok 3 - overly-long path does not replace another by mistake(B[m
ok 8 - submodule is checked out after manually adding submodule worktree(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 25 - proper error when worktree not found(B[m
*** t3010-ls-files-killed-modified.sh ***
ok 34 - add --quiet(B[m
ok 512 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=lf(B[m
ok 513 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 35 - local clone from linked checkout(B[m
ok 514 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 26 - remove locked worktree (force)(B[m
ok 12 - git checkout --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 515 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 1 - no buffer overflow in lazy_init_name_hash(B[m
ok 516 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
ok 36 - local clone --shared from linked checkout(B[m
ok 22 - git read-tree -u --reset --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
*** t3011-common-prefixes-and-directory-traversal.sh ***
ok 517 - checkout attr=auto  aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 1 - setup: directories(B[m
ok 2 - ls-files --others handles untracked git repositories(B[m
ok 27 - remove cleans up .git/worktrees when empty(B[m
ok 37 - "add" worktree with --no-checkout(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t3020-ls-files-error-unmatch.sh ***
ok 38 - "add" worktree with --checkout(B[m
ok 73 - #22a: core.worktree = GIT_DIR = .git dir(B[m
ok 28 - remove a repo with uninitialized submodule(B[m
ok 1 - git update-index --add to add various paths.(B[m
ok 518 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=lf(B[m
ok 519 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 2 - git ls-files -k to show killed files.(B[m
ok 1 - setup directory structure and submodules(B[m
ok 1 - setup(B[m
ok 520 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 3 - git ls-files -k output (w/o icase)(B[m
ok 2 - ls-files correctly outputs files in submodule(B[m
ok 2 - git ls-files -o shows the right entries(B[m
ok 4 - git ls-files -k output (w/ icase)(B[m
ok 521 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 39 - put a worktree under rebase(B[m
ok 1 - setup(B[m
ok 3 - ls-files correctly outputs files in submodule with -z(B[m
ok 5 - git ls-files -m to show modified files.(B[m
ok 3 - git ls-files -o --exclude-standard shows the right entries(B[m
ok 17 - update the split index when it contains a new racily clean cache entry #0(B[m
ok 2 - git ls-files --error-unmatch should fail with unmatched path.(B[m
ok 522 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 40 - add a worktree, checking out a rebased branch(B[m
ok 6 - validate git ls-files -m output.(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 4 - ls-files does not output files not added to a repo(B[m
ok 4 - git ls-files -o untracked_dir recurses(B[m
ok 3 - git ls-files --error-unmatch should succeed with matched paths.(B[m
ok 523 - checkout attr=text  aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t3030-merge-recursive.sh ***
ok 5 - git ls-files -o untracked_dir/ recurses(B[m
*** t3031-merge-criscross.sh ***
ok 9 - checkout --recurse-submodules uses $GIT_DIR for submodules in a linked worktree(B[m
ok 6 - git ls-files -o --directory untracked_dir does not recurse(B[m
ok 41 - checking out a rebased branch from another worktree(B[m
ok 42 - not allow to delete a branch under rebase(B[m
ok 7 - git ls-files -o --directory untracked_dir/ does not recurse(B[m
ok 43 - rename a branch under rebase not allowed(B[m
ok 8 - git ls-files -o untracked_repo does not recurse(B[m
ok 9 - git ls-files -o untracked_repo/ does not recurse(B[m
ok 29 - not remove a repo with initialized submodule(B[m
[32m# passed all 29 test(s)(B[m
[36m1..29(B[m
ok 74 - #22b: core.worktree child of .git, GIT_DIR=.git(B[m
ok 524 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=lf(B[m
ok 10 - git ls-files -o untracked_dir untracked_repo recurses into untracked_dir only(B[m
ok 44 - check out from current worktree branch ok(B[m
ok 525 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF(B[m
*** t3032-merge-recursive-space-options.sh ***
ok 11 - git ls-files -o untracked_dir/ untracked_repo/ recurses into untracked_dir only(B[m
ok 526 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 23 - git read-tree -u --reset --recurse-submodules: replace directory with submodule(B[m
ok 12 - git ls-files -o --directory untracked_dir untracked_repo does not recurse(B[m
ok 527 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 10 - core.worktree is removed in $GIT_DIR/modules/<name>/config, not in $GIT_COMMON_DIR/modules/<name>/config(B[m
ok 13 - git ls-files -o --directory untracked_dir/ untracked_repo/ does not recurse(B[m
ok 528 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 11 - unsetting core.worktree does not prevent running commands directly against the submodule repository(B[m
ok 14 - git ls-files -o .git shows nothing(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 10 test(s)(B[m
[36m1..11(B[m
ok 529 - checkout attr=text  aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 15 - git ls-files -o .git/ shows nothing(B[m
*** t3033-merge-toplevel.sh ***
ok 16 - git ls-files -o untracked_* recurses appropriately(B[m
[33mnot ok 17 - git ls-files -o untracked_*/ recurses appropriately # TODO known breakage(B[m
ok 1 - setup 1(B[m
ok 18 - git ls-files -o --directory untracked_* does not recurse(B[m
ok 5 - ls-files recurses more than 1 level(B[m
ok 530 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=lf(B[m
ok 1 - setup(B[m
ok 19 - git ls-files -o --directory untracked_*/ does not recurse(B[m
ok 6 - ls-files works with GIT_DIR(B[m
ok 13 - git checkout --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 531 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF(B[m
ok 75 - #22c: core.worktree = .git/.., GIT_DIR=.git(B[m
ok 532 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 20 - git ls-files -o consistent between one or two dirs(B[m
ok 2 - naive merge fails(B[m
ok 533 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 2 - setup 2(B[m
ok 3 - --ignore-space-change makes merge succeed(B[m
ok 21 - git status --ignored shows same files under dir with or without pathspec(B[m
ok 76 - #22.2: core.worktree and core.bare conflict(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 20 test(s)(B[m
[36m1..21(B[m
ok 534 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
*** t3034-merge-recursive-rename-options.sh ***
ok 1 - setup repo with criss-cross history(B[m
ok 535 - checkout attr=auto  aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 45 - checkout a branch under bisect(B[m
ok 77 - #23: setup(B[m
ok 46 - rename a branch under bisect not allowed(B[m
ok 2 - recursive merge between F and G does not cause segfault(B[m
ok 4 - naive cherry-pick fails(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t3035-merge-sparse.sh ***
ok 5 - -Xignore-space-change makes cherry-pick succeed(B[m
ok 3 - setup 3(B[m
ok 47 - --track sets up tracking(B[m
ok 6 - --ignore-space-change: our w/s-only change wins(B[m
ok 536 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=crlf(B[m
ok 78 - #23: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 7 - --ignore-space-change: their real change wins over w/s(B[m
ok 537 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 1 - setup(B[m
ok 538 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 8 - --ignore-space-change: does not ignore new spaces(B[m
ok 539 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 4 - setup 4(B[m
ok 540 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 9 - --ignore-all-space drops their new spaces(B[m
ok 2 - merge an octopus into void(B[m
ok 79 - #23: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 541 - checkout attr=-text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 7 - --recurse-submodules and pathspecs setup(B[m
ok 10 - --ignore-all-space keeps our new spaces(B[m
ok 1 - setup(B[m
ok 11 - --ignore-space-at-eol(B[m
ok 5 - setup 5(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 2 - reset --hard works after the conflict(B[m
*** t3040-subprojects-basic.sh ***
ok 8 - inactive submodule(B[m
ok 3 - is reset properly(B[m
ok 80 - #23: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 1 - setup repo(B[m
ok 542 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 4 - setup: conflict back(B[m
ok 9 - --recurse-submodules and pathspecs(B[m
ok 543 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 5 - Merge abort works after the conflict(B[m
ok 48 - --no-track avoids setting up tracking(B[m
ok 24 - git read-tree -u --reset --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 2 - setup thresholds(B[m
ok 10 - --recurse-submodules and pathspecs(B[m
ok 49 - "add" <path> <non-existent-branch> fails(B[m
ok 6 - is aborted properly(B[m
ok 544 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 11 - --recurse-submodules and pathspecs(B[m
*** t3050-subprojects-fetch.sh ***
ok 545 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 6 - setup 6(B[m
ok 546 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 81 - #23: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 3 - assumption for tests: rename detection with diff(B[m
ok 1 - setup: create superproject(B[m
ok 3 - merge an octopus, fast-forward (ff)(B[m
ok 547 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 12 - --recurse-submodules and pathspecs(B[m
ok 7 - setup 7(B[m
ok 14 - git checkout --recurse-submodules: replace submodule with a file(B[m
ok 4 - default similarity threshold is 50%(B[m
ok 13 - --recurse-submodules and pathspecs(B[m
ok 82 - #23: chdir_to_toplevel uses worktree, not git dir(B[m
ok 18 - update the split index when it contains a new racily clean cache entry #1(B[m
ok 1 - setup(B[m
ok 548 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 14 - --recurse-submodules and relative paths(B[m
ok 2 - setup: create subprojects(B[m
ok 549 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 5 - low rename threshold(B[m
ok 3 - check if fsck ignores the subprojects(B[m
ok 550 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 15 - --recurse-submodules does not support --error-unmatch(B[m
ok 8 - setup 8(B[m
ok 16 - --recurse-submodules and --deleted are incompatible(B[m
ok 551 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 83 - #23: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 4 - check if commit in a subproject detected(B[m
ok 17 - --recurse-submodules and --modified are incompatible(B[m
ok 552 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 2 - clone(B[m
ok 4 - merge octopus, non-fast-forward (ff)(B[m
ok 9 - setup 9(B[m
ok 50 - "add" <path> <branch> dwims(B[m
ok 18 - --recurse-submodules and --others are incompatible(B[m
ok 553 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 5 - check if a changed subproject HEAD can be committed(B[m
ok 6 - medium rename threshold(B[m
ok 19 - --recurse-submodules and --stage are incompatible(B[m
ok 10 - merge-recursive simple(B[m
ok 6 - check if diff-index works for subproject elements(B[m
ok 3 - advance(B[m
ok 20 - --recurse-submodules and --killed are incompatible(B[m
ok 11 - merge-recursive result(B[m
ok 7 - check if diff-tree works for subproject elements(B[m
ok 84 - #24: bare repo has no worktree (gitfile case)(B[m
ok 8 - check if git diff works for subproject elements(B[m
ok 21 - --recurse-submodules and --unmerged are incompatible(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
*** t3060-ls-files-with-tree.sh ***
ok 7 - high rename threshold(B[m
ok 9 - check if clone works(B[m
ok 554 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 85 - #25: GIT_WORK_TREE accepted if GIT_DIR unset (bare gitfile case)(B[m
ok 4 - fetch(B[m
ok 555 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 12 - fail if the index has unresolved entries(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t3070-wildmatch.sh ***
ok 556 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 10 - removing and adding subproject(B[m
ok 13 - merge-recursive remove conflict(B[m
ok 8 - exact renames only(B[m
ok 557 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 11 - checkout in superproject(B[m
ok 14 - merge-recursive remove conflict(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 5 - merge octopus, fast-forward (does not ff)(B[m
ok 558 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
*** t3100-ls-tree-restrict.sh ***
ok 559 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 15 - merge-recursive d/f simple(B[m
ok 9 - rename threshold is truncated(B[m
ok 16 - merge-recursive result(B[m
ok 1 - setup(B[m
ok 1 - cleanup after previous file test(B[m
ok 2 - git ls-files --with-tree should succeed from subdir(B[m
ok 86 - #26: bare repo has no worktree (GIT_DIR -> gitfile case)(B[m
ok 3 - git ls-files --with-tree should add entries from named tree.(B[m
ok 2 - setup match file test for foo(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 17 - merge-recursive d/f conflict(B[m
ok 3 - wildmatch: match 'foo' 'foo'(B[m
*** t3101-ls-tree-dirname.sh ***
ok 25 - git read-tree -u --reset --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 87 - #27: setup(B[m
ok 18 - merge-recursive d/f conflict result(B[m
ok 560 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 4 - wildmatch (via ls-files): match 'foo' 'foo'(B[m
ok 10 - disabled rename detection(B[m
ok 51 - "add" <path> <branch> dwims with checkout.defaultRemote(B[m
ok 5 - iwildmatch: match 'foo' 'foo'(B[m
ok 561 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 19 - merge-recursive d/f conflict the other way(B[m
[33mnot ok 15 - git checkout --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 1 - setup(B[m
ok 562 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 6 - iwildmatch (via ls-files): match 'foo' 'foo'(B[m
ok 20 - merge-recursive d/f conflict result the other way(B[m
ok 7 - pathmatch: match 'foo' 'foo'(B[m
ok 2 - ls-tree plain(B[m
ok 563 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 6 - merge octopus, non-fast-forward(B[m
ok 3 - ls-tree recursive(B[m
ok 8 - pathmatch (via ls-files): match 'foo' 'foo'(B[m
ok 564 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 11 - last wins in --find-renames=<m> --find-renames=<n>(B[m
ok 88 - #27: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 21 - merge-recursive d/f conflict(B[m
ok 9 - ipathmatch: match 'foo' 'foo'(B[m
ok 1 - setup(B[m
ok 4 - ls-tree recursive with -t(B[m
ok 565 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 22 - merge-recursive d/f conflict result(B[m
ok 10 - ipathmatch (via ls-files): match 'foo' 'foo'(B[m
ok 2 - ls-tree plain(B[m
ok 5 - ls-tree recursive with -d(B[m
ok 11 - cleanup after previous file test(B[m
ok 3 - ls-tree recursive(B[m
ok 6 - ls-tree filtered with path(B[m
ok 23 - merge-recursive d/f conflict(B[m
ok 12 - --find-renames resets threshold(B[m
ok 7 - merge FETCH_HEAD octopus into void(B[m
ok 12 - setup match file test for foo(B[m
ok 4 - ls-tree filter 1.txt(B[m
ok 24 - merge-recursive d/f conflict result(B[m
ok 7 - ls-tree filtered with path1 path0(B[m
ok 89 - #27: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 13 - wildmatch: no match 'foo' 'bar'(B[m
ok 8 - ls-tree filtered with path0/(B[m
ok 5 - ls-tree filter path1/b/c/1.txt(B[m
ok 566 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 14 - wildmatch (via ls-files): no match 'bar' 'foo'(B[m
ok 9 - ls-tree filtered with path2(B[m
ok 6 - ls-tree filter all 1.txt files(B[m
ok 15 - iwildmatch: no match 'foo' 'bar'(B[m
ok 567 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 13 - last wins in --no-renames --find-renames(B[m
ok 10 - ls-tree filtered with path2/(B[m
ok 568 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 7 - ls-tree filter directories(B[m
ok 16 - iwildmatch (via ls-files): no match 'bar' 'foo'(B[m
ok 52 - git worktree add does not match remote(B[m
ok 17 - pathmatch: no match 'foo' 'bar'(B[m
ok 569 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 11 - ls-tree filtered with path2/baz(B[m
ok 8 - ls-tree filter odd names(B[m
ok 90 - #27: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 570 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 18 - pathmatch (via ls-files): no match 'bar' 'foo'(B[m
ok 9 - ls-tree filter missing files and extra slashes(B[m
ok 12 - ls-tree filtered with path2/bak(B[m
ok 19 - ipathmatch: no match 'foo' 'bar'(B[m
ok 571 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 25 - dir in working tree with symlink ancestor does not produce d/f conflict(B[m
ok 14 - last wins in --find-renames --no-renames(B[m
ok 10 - ls-tree filter is leading path match(B[m
ok 13 - ls-tree -t filtered with path2/bak(B[m
ok 20 - ipathmatch (via ls-files): no match 'bar' 'foo'(B[m
ok 26 - reset and 3-way merge(B[m
ok 11 - ls-tree --full-name(B[m
ok 14 - ls-tree with one path a prefix of the other(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 21 - cleanup after previous file test(B[m
*** t3102-ls-tree-wildcards.sh ***
ok 12 - ls-tree --full-tree(B[m
ok 91 - #27: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 22 - setup match file test for (B[m
ok 23 - wildmatch: match '' ''(B[m
ok 13 - ls-tree --full-tree -r(B[m
[33mnot ok 24 - wildmatch (via ls-files): match skip '' '' # TODO known breakage(B[m
ok 8 - merge FETCH_HEAD octopus fast-forward (ff)(B[m
ok 15 - assumption for further tests: trivial merge succeeds(B[m
ok 572 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 27 - reset and bind merge(B[m
ok 25 - iwildmatch: match '' ''(B[m
ok 14 - ls-tree --abbrev=5(B[m
[33mnot ok 26 - iwildmatch (via ls-files): match skip '' '' # TODO known breakage(B[m
ok 573 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 16 - --find-renames rejects negative argument(B[m
ok 27 - pathmatch: match '' ''(B[m
ok 15 - ls-tree --name-only(B[m
[33mnot ok 28 - pathmatch (via ls-files): match skip '' '' # TODO known breakage(B[m
ok 574 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 29 - ipathmatch: match '' ''(B[m
ok 92 - #27: chdir_to_toplevel uses worktree, not git dir(B[m
ok 28 - merge-recursive w/ empty work tree - ours has rename(B[m
ok 17 - --find-renames rejects non-numbers(B[m
ok 16 - ls-tree --name-only -r(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 19 - update the split index when it contains a new racily clean cache entry #2(B[m
[33mnot ok 30 - ipathmatch (via ls-files): match skip '' '' # TODO known breakage(B[m
ok 575 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 1 - setup(B[m
*** t3103-ls-tree-misc.sh ***
ok 31 - cleanup after previous file test(B[m
ok 26 - git read-tree -u --reset --recurse-submodules: replace submodule with a file(B[m
ok 576 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 2 - ls-tree a[a] matches literally(B[m
ok 32 - setup match file test for foo(B[m
ok 53 - git worktree add --guess-remote sets up tracking(B[m
ok 29 - merge-recursive w/ empty work tree - theirs has rename(B[m
ok 577 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 33 - wildmatch: match 'foo' '???'(B[m
ok 3 - ls-tree outside prefix(B[m
ok 18 - rename-threshold=<n> is a synonym for find-renames=<n>(B[m
ok 34 - wildmatch (via ls-files): match '???' 'foo'(B[m
[33mnot ok 4 - ls-tree does not yet support negated pathspec # TODO known breakage(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 3 test(s)(B[m
[36m1..4(B[m
ok 93 - #27: chdir_to_toplevel uses worktree (from subdir)(B[m
ok 35 - iwildmatch: match 'foo' '???'(B[m
*** t3200-branch.sh ***
ok 30 - merge removes empty directories(B[m
ok 36 - iwildmatch (via ls-files): match '???' 'foo'(B[m
ok 1 - setup(B[m
ok 37 - pathmatch: match 'foo' '???'(B[m
ok 94 - #28: core.worktree and core.bare conflict (gitfile case)(B[m
ok 578 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=crlf(B[m
ok 31 - merge-recursive simple w/submodule(B[m
ok 19 - last wins in --no-renames --rename-threshold=<n>(B[m
ok 2 - ls-tree fails with non-zero exit code on broken tree(B[m
ok 38 - pathmatch (via ls-files): match '???' 'foo'(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 579 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 32 - merge-recursive simple w/submodule result(B[m
ok 39 - ipathmatch: match 'foo' '???'(B[m
*** t3201-branch-contains.sh ***
ok 9 - merge FETCH_HEAD octopus non-fast-forward (ff)(B[m
ok 580 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 95 - #29: setup(B[m
ok 40 - ipathmatch (via ls-files): match '???' 'foo'(B[m
ok 16 - git checkout --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 581 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 33 - merge-recursive copy vs. rename(B[m
ok 41 - cleanup after previous file test(B[m
ok 20 - last wins in --rename-threshold=<n> --no-renames(B[m
ok 582 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 1 - prepare a trivial repository(B[m
ok 42 - setup match file test for foo(B[m
ok 2 - git branch --help should not have created a bogus branch(B[m
ok 583 - checkout attr=-text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 21 - --rename-threshold=<n> rejects negative argument(B[m
ok 43 - wildmatch: no match 'foo' '??'(B[m
[33mnot ok 34 - merge-recursive rename vs. rename/symlink # TODO known breakage(B[m
ok 44 - wildmatch (via ls-files): no match '??' 'foo'(B[m
ok 22 - --rename-threshold=<n> rejects non-numbers(B[m
ok 96 - #29: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 3 - branch -h in broken repository(B[m
ok 45 - iwildmatch: no match 'foo' '??'(B[m
ok 54 - git worktree add with worktree.guessRemote sets up tracking(B[m
ok 4 - git branch abc should create a branch(B[m
ok 46 - iwildmatch (via ls-files): no match '??' 'foo'(B[m
ok 5 - git branch a/b/c should create a branch(B[m
ok 47 - pathmatch: no match 'foo' '??'(B[m
ok 1 - setup(B[m
ok 6 - git branch mb master... should create a branch(B[m
ok 584 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 2 - branch --contains=master(B[m
ok 48 - pathmatch (via ls-files): no match '??' 'foo'(B[m
ok 7 - git branch HEAD should fail(B[m
ok 23 - last wins in --rename-threshold=<m> --find-renames=<n>(B[m
ok 49 - ipathmatch: no match 'foo' '??'(B[m
ok 585 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 3 - branch --contains master(B[m
ok 8 - git branch --create-reflog d/e/f should create a branch and a log(B[m
ok 97 - #29: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 4 - branch --no-contains=master(B[m
ok 586 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 50 - ipathmatch (via ls-files): no match '??' 'foo'(B[m
ok 10 - merge FETCH_HEAD octopus fast-forward (does not ff)(B[m
ok 9 - git branch -d d/e/f should delete a branch and a log(B[m
ok 5 - branch --no-contains master(B[m
ok 587 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 51 - cleanup after previous file test(B[m
ok 6 - branch --contains=side(B[m
ok 10 - git branch j/k should work after branch j has been deleted(B[m
ok 588 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 35 - merging with triple rename across D/F conflict(B[m
ok 24 - last wins in --find-renames=<m> --rename-threshold=<n>(B[m
ok 7 - branch --no-contains=side(B[m
ok 52 - setup match file test for foo(B[m
ok 589 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 53 - wildmatch: match 'foo' '*'(B[m
ok 11 - git branch l should work after branch l/m has been deleted(B[m
ok 8 - branch --contains with pattern implies --list(B[m
ok 98 - #29: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 12 - git branch -m dumps usage(B[m
ok 9 - branch --no-contains with pattern implies --list(B[m
ok 54 - wildmatch (via ls-files): match '*' 'foo'(B[m
ok 55 - iwildmatch: match 'foo' '*'(B[m
ok 10 - side: branch --merged(B[m
[33mnot ok 27 - git read-tree -u --reset --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 25 - merge.renames disables rename detection(B[m
ok 11 - branch --merged with pattern implies --list(B[m
ok 56 - iwildmatch (via ls-files): match '*' 'foo'(B[m
ok 13 - git branch -m m broken_symref should work(B[m
ok 12 - side: branch --no-merged(B[m
ok 57 - pathmatch: match 'foo' '*'(B[m
ok 36 - merge-recursive remembers the names of all base trees(B[m
ok 590 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf(B[m
ok 13 - master: branch --merged(B[m
ok 58 - pathmatch (via ls-files): match '*' 'foo'(B[m
ok 14 - git branch -m m m/m should work(B[m
ok 55 - git worktree --no-guess-remote option overrides config(B[m
ok 99 - #29: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 59 - ipathmatch: match 'foo' '*'(B[m
ok 591 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 14 - master: branch --no-merged(B[m
ok 26 - merge.renames defaults to diff.renames(B[m
ok 15 - git branch -m n/n n should work(B[m
ok 15 - branch --no-merged with pattern implies --list(B[m
ok 592 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 60 - ipathmatch (via ls-files): match '*' 'foo'(B[m
ok 593 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 61 - cleanup after previous file test(B[m
ok 11 - merge FETCH_HEAD octopus non-fast-forward(B[m
ok 16 - implicit --list conflicts with modification options(B[m
ok 594 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 56 - "add" invokes post-checkout hook (branch)(B[m
ok 62 - setup match file test for foo(B[m
ok 595 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 63 - wildmatch: match 'foo' 'f*'(B[m
ok 27 - merge.renames overrides diff.renames(B[m
ok 100 - #29: chdir_to_toplevel uses worktree, not git dir(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 17 - Assert that --contains only works on commits, not trees & blobs(B[m
ok 16 - git branch -m bbb should rename checked out branch(B[m
ok 12 - refuse two-project merge by default(B[m
*** t3202-show-branch-octopus.sh ***
ok 64 - wildmatch (via ls-files): match 'f*' 'foo'(B[m
ok 57 - "add" invokes post-checkout hook (detached)(B[m
ok 65 - iwildmatch: match 'foo' 'f*'(B[m
ok 37 - merge-recursive internal merge resolves to the sameness(B[m
ok 66 - iwildmatch (via ls-files): match 'f*' 'foo'(B[m
ok 17 - renaming checked out branch works with d/f conflict(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 36 test(s)(B[m
[36m1..37(B[m
ok 67 - pathmatch: match 'foo' 'f*'(B[m
ok 13 - two-project merge with --allow-unrelated-histories(B[m
ok 58 - "add --no-checkout" suppresses post-checkout hook(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 17 - git checkout --recurse-submodules: updating to a missing submodule commit fails(B[m
*** t3203-branch-output.sh ***
ok 18 - git branch -m o/o o should fail when o/p exists(B[m
ok 596 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 101 - #29: chdir_to_toplevel uses worktree (from subdir)(B[m
*** t3204-branch-name-interpretation.sh ***
ok 68 - pathmatch (via ls-files): match 'f*' 'foo'(B[m
ok 597 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 69 - ipathmatch: match 'foo' 'f*'(B[m
ok 19 - git branch -m o/q o/p should fail when o/p exists(B[m
ok 20 - git branch -M o/q o/p should work when o/p exists(B[m
ok 18 - branch --merged with --verbose(B[m
ok 598 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 70 - ipathmatch (via ls-files): match 'f*' 'foo'(B[m
ok 59 - "add" in other worktree invokes post-checkout hook(B[m
ok 102 - #30: core.worktree and core.bare conflict (gitfile version)(B[m
ok 19 - branch --contains combined with --no-contains(B[m
ok 599 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 21 - git branch -m -f o/q o/p should work when o/p exists(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 71 - cleanup after previous file test(B[m
*** t3205-branch-color.sh ***
ok 600 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 72 - setup match file test for foo(B[m
ok 22 - git branch -m q r/q should fail when r exists(B[m
ok 103 - #31: setup(B[m
ok 601 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 73 - wildmatch: no match 'foo' '*f'(B[m
ok 1 - make commits(B[m
ok 23 - git branch -M foo bar should fail when bar is checked out(B[m
ok 74 - wildmatch (via ls-files): no match '*f' 'foo'(B[m
ok 2 - make branches(B[m
ok 20 - update the split index when it contains a new racily clean cache entry #3(B[m
ok 60 - "add" in bare repo invokes post-checkout hook(B[m
ok 75 - iwildmatch: no match 'foo' '*f'(B[m
ok 1 - set up repo(B[m
ok 24 - git branch -M baz bam should succeed when baz is checked out(B[m
ok 76 - iwildmatch (via ls-files): no match '*f' 'foo'(B[m
ok 3 - make remote branches(B[m
ok 25 - git branch -M baz bam should add entries to .git/logs/HEAD(B[m
ok 77 - pathmatch: no match 'foo' '*f'(B[m
ok 4 - git branch shows local branches(B[m
ok 104 - #31: explicit GIT_WORK_TREE and GIT_DIR at toplevel(B[m
ok 602 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=crlf(B[m
ok 2 - update branch via @{-1}(B[m
ok 78 - pathmatch (via ls-files): no match '*f' 'foo'(B[m
ok 5 - git branch --list shows local branches(B[m
ok 1 - set up some sample branches(B[m
ok 61 - "add" an existing but missing worktree(B[m
ok 79 - ipathmatch: no match 'foo' '*f'(B[m
ok 603 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 6 - git branch --list pattern shows matching local branches(B[m
ok 2 - set up some color config(B[m
ok 604 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 80 - ipathmatch (via ls-files): no match '*f' 'foo'(B[m
ok 3 - update branch via local @{upstream}(B[m
ok 7 - git branch -r shows remote branches(B[m
ok 26 - git branch -M should leave orphaned HEAD alone(B[m
ok 3 - regular output shows colors(B[m
ok 605 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 8 - git branch -a shows local and remote branches(B[m
ok 81 - cleanup after previous file test(B[m
ok 4 - disallow updating branch via remote @{upstream}(B[m
ok 27 - resulting reflog can be shown by log -g(B[m
ok 105 - #31: explicit GIT_WORK_TREE and GIT_DIR in subdir(B[m
ok 606 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 4 - verbose output shows colors(B[m
ok 9 - git branch -v shows branch summaries(B[m
ok 82 - setup match file test for foo(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 18 - git checkout --recurse-submodules: added submodule doesn't remove untracked file with same name(B[m
ok 5 - create branch with pseudo-qualified name(B[m
ok 607 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
*** t3206-range-diff.sh ***
ok 83 - wildmatch: match 'foo' '*foo*'(B[m
ok 62 - "add" an existing locked but missing worktree(B[m
ok 10 - git branch --list -v pattern shows branch summaries(B[m
ok 84 - wildmatch (via ls-files): match '*foo*' 'foo'(B[m
ok 1 - setup(B[m
ok 11 - git branch --ignore-case --list -v pattern shows branch summaries(B[m
ok 85 - iwildmatch: match 'foo' '*foo*'(B[m
ok 6 - delete branch via @{-1}(B[m
ok 12 - git branch -v pattern does not show branch summaries(B[m
ok 2 - show-branch with more than 8 branches(B[m
ok 28 - git read-tree -u --reset --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 63 - "add" not tripped up by magic worktree matching"(B[m
ok 86 - iwildmatch (via ls-files): match '*foo*' 'foo'(B[m
ok 28 - git branch -M baz bam should succeed when baz is checked out as linked working tree(B[m
ok 106 - #31: explicit GIT_WORK_TREE from parent of worktree(B[m
ok 13 - git branch `--show-current` shows current branch(B[m
ok 7 - delete branch via local @{upstream}(B[m
ok 87 - pathmatch: match 'foo' '*foo*'(B[m
ok 608 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 14 - git branch `--show-current` is silent when detached HEAD(B[m
ok 88 - pathmatch (via ls-files): match '*foo*' 'foo'(B[m
ok 64 - sanitize generated worktree name(B[m
ok 89 - ipathmatch: match 'foo' '*foo*'(B[m
ok 8 - delete branch via remote @{upstream}(B[m
ok 609 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 29 - git branch -M baz bam should succeed within a worktree in which baz is checked out(B[m
ok 610 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 90 - ipathmatch (via ls-files): match '*foo*' 'foo'(B[m
ok 3 - show-branch with showbranch.default(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 107 - #31: explicit GIT_WORK_TREE from nephew of worktree(B[m
ok 611 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 30 - git branch -M master should work when master is checked out(B[m
ok 15 - git branch `--show-current` works properly when tag exists(B[m
*** t3210-pack-refs.sh ***
ok 91 - cleanup after previous file test(B[m
ok 612 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 9 - delete @{upstream} expansion matches -r option(B[m
ok 31 - git branch -M master master should work when master is checked out(B[m
ok 92 - setup match file test for foobar(B[m
ok 613 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 93 - wildmatch: match 'foobar' '*ob*a*r*'(B[m
ok 65 - "add" should not fail because of another bad worktree(B[m
ok 32 - git branch -M master2 master2 should work when master is checked out(B[m
ok 94 - wildmatch (via ls-files): match '*ob*a*r*' 'foobar'(B[m
ok 16 - git branch `--show-current` works properly with worktrees(B[m
ok 95 - iwildmatch: match 'foobar' '*ob*a*r*'(B[m
ok 10 - disallow deleting remote branch via @{-1}(B[m
ok 108 - #31: chdir_to_toplevel uses worktree, not git dir(B[m
ok 1 - enable reflogs(B[m
ok 33 - git branch -v -d t should work(B[m
ok 96 - iwildmatch (via ls-files): match '*ob*a*r*' 'foobar'(B[m
ok 11 - create branch named "@"(B[m
ok 97 - pathmatch: match 'foobar' '*ob*a*r*'(B[m
ok 17 - git branch shows detached HEAD properly(B[m
ok 2 - prepare a trivial repository(B[m
ok 614 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf(B[m
ok 12 - delete branch named "@"(B[m
ok 98 - pathmatch (via ls-files): match '*ob*a*r*' 'foobar'(B[m
ok 34 - git branch -v -m t s should work(B[m
ok 3 - see if git show-ref works as expected(B[m
ok 615 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 99 - ipathmatch: match 'foobar' '*ob*a*r*'(B[m
ok 18 - git branch shows detached HEAD properly after checkout --detach(B[m
ok 616 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 100 - ipathmatch (via ls-files): match '*ob*a*r*' 'foobar'(B[m
ok 109 - #31: chdir_to_toplevel uses worktree (from subdir)(B[m
[32m# passed all 109 test(s)(B[m
[36m1..109(B[m
ok 35 - git branch -m -d t s should fail(B[m
ok 19 - git checkout --recurse-submodules: added submodule removes an untracked ignored file(B[m
ok 4 - see if a branch still exists when packed(B[m
ok 617 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 13 - checkout does not treat remote @{upstream} as a branch(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 19 - git branch shows detached HEAD properly after moving(B[m
ok 101 - cleanup after previous file test(B[m
*** t3211-peel-ref.sh ***
ok 618 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 5 - git branch c/d should barf if branch c exists(B[m
ok 102 - setup match file test for aaaaaaabababab(B[m
ok 36 - git branch --list -d t should fail(B[m
ok 619 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 1 - setup(B[m
ok 20 - git branch shows detached HEAD properly from tag(B[m
ok 103 - wildmatch: match 'aaaaaaabababab' '*ab'(B[m
ok 6 - see if a branch still exists after git pack-refs --prune(B[m
ok 104 - wildmatch (via ls-files): match '*ab' 'aaaaaaabababab'(B[m
ok 2 - simple A..B A..C (unmodified)(B[m
ok 21 - git branch shows detached HEAD properly after moving from tag(B[m
ok 7 - see if git pack-refs --prune remove ref files(B[m
ok 105 - iwildmatch: match 'aaaaaaabababab' '*ab'(B[m
ok 22 - git branch `--sort` option(B[m
ok 8 - see if git pack-refs --prune removes empty dirs(B[m
ok 3 - simple B...C (unmodified)(B[m
ok 106 - iwildmatch (via ls-files): match '*ab' 'aaaaaaabababab'(B[m
ok 107 - pathmatch: match 'aaaaaaabababab' '*ab'(B[m
ok 23 - git branch --points-at option(B[m
*** t3300-funny-names.sh ***
ok 620 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=crlf(B[m
ok 4 - simple A B C (unmodified)(B[m
ok 66 - "add" with uninitialized submodule, with submodule.recurse unset(B[m
ok 1 - create annotated tag in refs/tags(B[m
ok 108 - pathmatch (via ls-files): match '*ab' 'aaaaaaabababab'(B[m
ok 621 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 9 - git branch g should work when git branch g/h has been deleted(B[m
ok 2 - create annotated tag outside of refs/tags(B[m
ok 24 - ambiguous branch/tag not marked(B[m
ok 109 - ipathmatch: match 'aaaaaaabababab' '*ab'(B[m
ok 67 - "add" with uninitialized submodule, with submodule.recurse set(B[m
ok 622 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 5 - trivial reordering(B[m
ok 10 - git branch i/j/k should barf if branch i exists(B[m
ok 110 - ipathmatch (via ls-files): match '*ab' 'aaaaaaabababab'(B[m
ok 623 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 25 - local-branch symrefs shortened properly(B[m
ok 3 - set up expected show-ref output(B[m
ok 111 - cleanup after previous file test(B[m
ok 6 - removed a commit(B[m
ok 624 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1 - setup(B[m
ok 4 - refs are peeled outside of refs/tags (loose)(B[m
ok 112 - setup match file test for foo*(B[m
ok 625 - checkout attr=-text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 29 - git read-tree -u --reset --recurse-submodules: updating to a missing submodule commit fails(B[m
ok 11 - test git branch k after branch k/l/m and k/lm have been deleted(B[m
ok 2 - setup: populate index and tree(B[m
ok 113 - wildmatch: match 'foo*' 'foo\*'(B[m
ok 7 - added a commit(B[m
ok 5 - refs are peeled outside of refs/tags (packed)(B[m
ok 3 - ls-files prints space in filename verbatim(B[m
ok 114 - wildmatch (via ls-files): match 'foo\*' 'foo*'(B[m
ok 4 - setup: add funny filename(B[m
ok 26 - sort branches, ignore case(B[m
ok 115 - iwildmatch: match 'foo*' 'foo\*'(B[m
ok 8 - new base, A B C(B[m
ok 6 - create old-style pack-refs without fully-peeled(B[m
ok 27 - git branch --format option(B[m
ok 5 - ls-files quotes funny filename(B[m
ok 116 - iwildmatch (via ls-files): match 'foo\*' 'foo*'(B[m
ok 12 - test git branch n after some branch deletion and pruning(B[m
ok 7 - refs are peeled outside of refs/tags (old packed)(B[m
ok 117 - pathmatch: match 'foo*' 'foo\*'(B[m
ok 6 - ls-files -z does not quote funny filename(B[m
ok 9 - new base, B...C(B[m
ok 626 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=crlf(B[m
ok 13 - see if up-to-date packed refs are preserved(B[m
ok 118 - pathmatch (via ls-files): match 'foo\*' 'foo*'(B[m
ok 7 - ls-tree quotes funny filename(B[m
ok 627 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 8 - peeled refs survive deletion of packed ref(B[m
ok 21 - update the split index when it contains a new racily clean cache entry #4(B[m
ok 28 - worktree colors correct(B[m
ok 119 - ipathmatch: match 'foo*' 'foo\*'(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 10 - changed commit(B[m
ok 29 - set up color tests(B[m
ok 8 - diff-index --name-status quotes funny filename(B[m
*** t3301-notes.sh ***
ok 628 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 68 - "add" with initialized submodule, with submodule.recurse unset(B[m
ok 120 - ipathmatch (via ls-files): match 'foo\*' 'foo*'(B[m
ok 30 - %(color) omitted without tty(B[m
ok 14 - pack, prune and repack(B[m
ok 9 - diff-tree --name-status quotes funny filename(B[m
[34mok 31 # skip %(color) present with tty (missing TTY)(B[m
ok 629 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 11 - changed commit with --no-patch diff option(B[m
ok 69 - "add" with initialized submodule, with submodule.recurse set(B[m
ok 121 - cleanup after previous file test(B[m
[32m# passed all 69 test(s)(B[m
[36m1..69(B[m
ok 10 - diff-index -z does not quote funny filename(B[m
ok 32 - --color overrides auto-color(B[m
ok 630 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 122 - setup match file test for foobar(B[m
ok 12 - changed commit with --stat diff option(B[m
ok 11 - diff-tree -z does not quote funny filename(B[m
ok 631 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 123 - wildmatch: no match 'foobar' 'foo\*bar'(B[m
ok 12 - diff-tree --find-copies-harder quotes funny filename(B[m
ok 15 - explicit pack-refs with dangling packed reference(B[m
ok 124 - wildmatch (via ls-files): no match 'foo\*bar' 'foobar'(B[m
ok 1 - cannot annotate non-existing HEAD(B[m
ok 13 - changed commit with sm config(B[m
ok 13 - setup: remove unfunny index entry(B[m
ok 33 - verbose output lists worktree path(B[m
[33mnot ok 20 - git checkout --recurse-submodules: replace submodule with a directory # TODO known breakage(B[m
ok 125 - iwildmatch: no match 'foobar' 'foo\*bar'(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 37 - deleting checked-out branch from repo that is a submodule(B[m
*** t3302-notes-index-expensive.sh ***
ok 14 - diff-tree -M quotes funny filename(B[m
*** t3303-notes-subtrees.sh ***
ok 126 - iwildmatch (via ls-files): no match 'foo\*bar' 'foobar'(B[m
ok 14 - renamed file(B[m
ok 127 - pathmatch: no match 'foobar' 'foo\*bar'(B[m
ok 15 - diff-index -M -p quotes funny filename(B[m
ok 632 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 16 - setup: mode change(B[m
ok 2 - setup(B[m
ok 128 - pathmatch (via ls-files): no match 'foo\*bar' 'foobar'(B[m
ok 15 - file with mode only change(B[m
ok 633 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 3 - need valid notes ref(B[m
ok 129 - ipathmatch: no match 'foobar' 'foo\*bar'(B[m
ok 17 - diff-index -M -p with mode change quotes funny filename(B[m
ok 16 - delete ref with dangling packed version(B[m
ok 4 - refusing to add notes in refs/heads/(B[m
ok 634 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 30 - git read-tree -u --reset --recurse-submodules: added submodule does remove untracked unignored file with same name when forced(B[m
ok 16 - file added and later removed(B[m
ok 130 - ipathmatch (via ls-files): no match 'foo\*bar' 'foobar'(B[m
ok 5 - refusing to edit notes in refs/remotes/(B[m
ok 38 - bare main worktree has HEAD at branch deleted by secondary worktree(B[m
ok 635 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 6 - handle empty notes gracefully(B[m
ok 18 - diffstat for rename quotes funny filename(B[m
ok 131 - cleanup after previous file test(B[m
ok 636 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 7 - show non-existent notes entry with %N(B[m
ok 17 - no commits on one side(B[m
ok 19 - numstat for rename quotes funny filename(B[m
ok 637 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 132 - setup match file test for f\oo(B[m
ok 17 - delete ref while another dangling packed ref(B[m
ok 133 - wildmatch: match 'f\oo' 'f\\oo'(B[m
ok 20 - numstat without -M quotes funny filename(B[m
ok 18 - changed message(B[m
ok 39 - git branch --list -v with --abbrev(B[m
ok 18 - pack ref directly below refs/(B[m
ok 134 - wildmatch (via ls-files): match 'f\\oo' 'f\oo'(B[m
ok 1 - setup 10(B[m
ok 8 - create notes(B[m
ok 21 - numstat for non-git rename diff quotes funny filename(B[m
ok 135 - iwildmatch: match 'f\oo' 'f\\oo'(B[m
ok 40 - git branch --column(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 9 - show notes entry with %N(B[m
ok 19 - do not pack ref in refs/bisect(B[m
ok 19 - dual-coloring(B[m
ok 2 - notes work(B[m
*** t3304-notes-mixed.sh ***
[34mok 3 # skip notes timing with /usr/bin/time (missing USR_BIN_TIME)(B[m
ok 136 - iwildmatch (via ls-files): match 'f\\oo' 'f\oo'(B[m
ok 20 - disable reflogs(B[m
[34mok 4 # skip setup 100 (missing EXPENSIVE)(B[m
ok 10 - create reflog entry(B[m
[34mok 5 # skip notes work (missing EXPENSIVE)(B[m
ok 137 - pathmatch: match 'f\oo' 'f\\oo'(B[m
ok 638 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=crlf(B[m
[34mok 6 # skip notes timing with /usr/bin/time (missing EXPENSIVE,USR_BIN_TIME of USR_BIN_TIME,EXPENSIVE)(B[m
[34mok 7 # skip setup 1000 (missing EXPENSIVE)(B[m
[34mok 8 # skip notes work (missing EXPENSIVE)(B[m
[34mok 9 # skip notes timing with /usr/bin/time (missing EXPENSIVE,USR_BIN_TIME of USR_BIN_TIME,EXPENSIVE)(B[m
[34mok 10 # skip setup 10000 (missing EXPENSIVE)(B[m
ok 21 - create packed foo/bar/baz branch(B[m
ok 41 - git branch --column with an extremely long branch name(B[m
[34mok 11 # skip notes work (missing EXPENSIVE)(B[m
ok 639 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
[34mok 12 # skip notes timing with /usr/bin/time (missing EXPENSIVE,USR_BIN_TIME of USR_BIN_TIME,EXPENSIVE)(B[m
ok 138 - pathmatch (via ls-files): match 'f\\oo' 'f\oo'(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 20 - format-patch --range-diff=topic(B[m
ok 139 - ipathmatch: match 'f\oo' 'f\\oo'(B[m
ok 22 - notice d/f conflict with existing directory(B[m
ok 640 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
*** t3305-notes-fanout.sh ***
ok 11 - edit existing notes(B[m
ok 641 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 140 - ipathmatch (via ls-files): match 'f\\oo' 'f\oo'(B[m
ok 23 - existing directory reports concrete ref(B[m
ok 42 - git branch with column.*(B[m
ok 642 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 43 - git branch --column -v should fail(B[m
ok 21 - format-patch --range-diff=master..topic(B[m
ok 141 - cleanup after previous file test(B[m
ok 1 - setup: create a couple of commits(B[m
ok 24 - notice d/f conflict with existing ref(B[m
ok 12 - show notes from treeish(B[m
ok 643 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 13 - cannot edit notes from non-ref(B[m
ok 142 - setup match file test for ball(B[m
ok 25 - reject packed-refs with unterminated line(B[m
ok 44 - git branch -v with column.ui ignored(B[m
ok 22 - format-patch --range-diff as commentary(B[m
ok 143 - wildmatch: match 'ball' '*[al]?'(B[m
ok 26 - reject packed-refs containing junk(B[m
ok 23 - range-diff overrides diff.noprefix internally(B[m
ok 45 - git branch -m q q2 without config should succeed(B[m
ok 144 - wildmatch (via ls-files): match '*[al]?' 'ball'(B[m
ok 2 - create a notes tree with both notes and non-notes(B[m
ok 145 - iwildmatch: match 'ball' '*[al]?'(B[m
ok 27 - reject packed-refs with a short SHA-1(B[m
ok 14 - cannot "git notes add -m" where notes already exists(B[m
ok 1 - tweak test environment(B[m
ok 3 - verify contents of notes(B[m
ok 146 - iwildmatch (via ls-files): match '*[al]?' 'ball'(B[m
ok 644 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 147 - pathmatch: match 'ball' '*[al]?'(B[m
ok 24 - range-diff compares notes by default(B[m
ok 645 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 46 - git branch -m s/s s should work when s/t is deleted(B[m
ok 15 - can overwrite existing note with "git notes add -f -m"(B[m
ok 1 - setup: create 100 commits(B[m
ok 148 - pathmatch (via ls-files): match '*[al]?' 'ball'(B[m
ok 4 - verify contents of non-notes(B[m
ok 646 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 149 - ipathmatch: match 'ball' '*[al]?'(B[m
ok 47 - config information was renamed, too(B[m
ok 5 - git-notes preserves non-notes(B[m
ok 647 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 150 - ipathmatch (via ls-files): match '*[al]?' 'ball'(B[m
ok 25 - range-diff with --no-notes(B[m
ok 648 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 16 - add w/no options on existing note morphs into edit(B[m
ok 151 - cleanup after previous file test(B[m
[33mnot ok 21 - git checkout --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage(B[m
ok 649 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 6 - verify contents of non-notes after git-notes(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 48 - git branch -m correctly renames multiple config sections(B[m
ok 152 - setup match file test for ten(B[m
*** t3306-notes-prune.sh ***
ok 49 - git branch -c dumps usage(B[m
ok 153 - wildmatch: no match 'ten' '[ten]'(B[m
ok 50 - git branch --copy dumps usage(B[m
ok 17 - can overwrite existing note with "git notes add -f"(B[m
ok 154 - wildmatch (via ls-files): no match '[ten]' 'ten'(B[m
ok 155 - iwildmatch: no match 'ten' '[ten]'(B[m
ok 26 - range-diff with multiple --notes(B[m
ok 18 - show notes(B[m
ok 156 - iwildmatch (via ls-files): no match '[ten]' 'ten'(B[m
ok 650 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=crlf(B[m
ok 157 - pathmatch: no match 'ten' '[ten]'(B[m
ok 51 - git branch -c d e should work(B[m
ok 651 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 31 - git read-tree -u --reset --recurse-submodules: replace submodule with a directory(B[m
ok 158 - pathmatch (via ls-files): no match '[ten]' 'ten'(B[m
ok 652 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 159 - ipathmatch: no match 'ten' '[ten]'(B[m
ok 27 - format-patch --range-diff does not compare notes by default(B[m
ok 653 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 19 - show multi-line notes(B[m
ok 160 - ipathmatch (via ls-files): no match '[ten]' 'ten'(B[m
ok 654 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 52 - git branch --copy is a synonym for -c(B[m
ok 161 - cleanup after previous file test(B[m
ok 655 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 162 - setup match file test for ten(B[m
ok 22 - update the split index when a racily clean cache entry is stored only in the shared index #0(B[m
ok 163 - wildmatch: match 'ten' '**[!te]'(B[m
ok 28 - format-patch --range-diff with --no-notes(B[m
ok 20 - show -F notes(B[m
ok 1 - setup: create a few commits with notes(B[m
ok 164 - wildmatch (via ls-files): match '**[!te]' 'ten'(B[m
ok 53 - git branch -c ee ef should copy ee to create branch ef(B[m
ok 2 - verify commits and notes(B[m
ok 21 - Re-adding -F notes without -f fails(B[m
ok 165 - iwildmatch: match 'ten' '**[!te]'(B[m
ok 166 - iwildmatch (via ls-files): match '**[!te]' 'ten'(B[m
ok 656 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 22 - git log --pretty=raw does not show notes(B[m
ok 167 - pathmatch: match 'ten' '**[!te]'(B[m
ok 657 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 54 - git branch -c f/f g/g should work(B[m
ok 29 - format-patch --range-diff with --notes(B[m
ok 23 - git log --show-notes(B[m
ok 168 - pathmatch (via ls-files): match '**[!te]' 'ten'(B[m
ok 658 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 169 - ipathmatch: match 'ten' '**[!te]'(B[m
ok 24 - git log --no-notes(B[m
ok 659 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 3 - remove some commits(B[m
ok 25 - git format-patch does not show notes(B[m
ok 170 - ipathmatch (via ls-files): match '**[!te]' 'ten'(B[m
ok 55 - git branch -c m2 m2 should work(B[m
ok 660 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 26 - git format-patch --show-notes does show notes(B[m
ok 4 - verify that commits are gone(B[m
ok 171 - cleanup after previous file test(B[m
ok 661 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 56 - git branch -c zz zz/zz should fail(B[m
ok 27 - git show  does show notes(B[m
ok 172 - setup match file test for ten(B[m
ok 28 - git show --pretty does not show notes(B[m
ok 57 - git branch -c b/b b should fail(B[m
ok 30 - format-patch --range-diff with format.notes config(B[m
ok 5 - verify that notes are still present(B[m
ok 173 - wildmatch: no match 'ten' '**[!ten]'(B[m
ok 29 - git show --pretty=raw does not show notes(B[m
ok 174 - wildmatch (via ls-files): no match '**[!ten]' 'ten'(B[m
ok 30 - git show --pretty=short does not show notes(B[m
ok 6 - prune -n does not remove notes(B[m
ok 58 - git branch -C o/q o/p should work when o/p exists(B[m
ok 175 - iwildmatch: no match 'ten' '**[!ten]'(B[m
ok 31 - git show --pretty=medium does not show notes(B[m
ok 7 - prune -n lists prunable notes(B[m
ok 59 - git branch -c -f o/q o/p should work when o/p exists(B[m
ok 662 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=crlf(B[m
ok 8 - prune notes(B[m
ok 176 - iwildmatch (via ls-files): no match '**[!ten]' 'ten'(B[m
ok 32 - git show --pretty=full does not show notes(B[m
ok 177 - pathmatch: no match 'ten' '**[!ten]'(B[m
ok 22 - git checkout --recurse-submodules: replace submodule with a file works ignores ignored files in submodule(B[m
ok 33 - git show --pretty=fuller does not show notes(B[m
ok 663 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 60 - git branch -c qq rr/qq should fail when rr exists(B[m
ok 9 - verify that notes are gone(B[m
ok 34 - git show --pretty=format:%s does not show notes(B[m
ok 178 - pathmatch (via ls-files): no match '**[!ten]' 'ten'(B[m
ok 664 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 31 - format-patch --range-diff with multiple notes(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
ok 179 - ipathmatch: no match 'ten' '**[!ten]'(B[m
ok 35 - git show --oneline does not show notes(B[m
ok 61 - git branch -C b1 b2 should fail when b2 is checked out(B[m
ok 665 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 36 - setup alternate notes ref(B[m
ok 180 - ipathmatch (via ls-files): no match '**[!ten]' 'ten'(B[m
*** t3307-notes-man.sh ***
ok 666 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 37 - git log --notes shows default notes(B[m
ok 62 - git branch -C c1 c2 should succeed when c1 is checked out(B[m
ok 181 - cleanup after previous file test(B[m
ok 667 - checkout attr=  aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 63 - git branch -C c1 c2 should never touch HEAD(B[m
ok 38 - git log --notes=X shows only X(B[m
ok 182 - setup match file test for ten(B[m
ok 10 - remove some commits(B[m
ok 39 - git log --notes --notes=X shows both(B[m
ok 64 - git branch -C master should work when master is checked out(B[m
ok 2 - test notes in 2/38-fanout(B[m
ok 183 - wildmatch: match 'ten' 't[a-g]n'(B[m
ok 11 - prune -v notes(B[m
ok 40 - git log --no-notes resets default state(B[m
ok 3 - verify notes in 2/38-fanout(B[m
ok 65 - git branch -C master master should work when master is checked out(B[m
ok 184 - wildmatch (via ls-files): match 't[a-g]n' 'ten'(B[m
ok 41 - git log --no-notes resets ref list(B[m
ok 185 - iwildmatch: match 'ten' 't[a-g]n'(B[m
ok 12 - verify that notes are gone(B[m
ok 32 - git read-tree -u --reset --recurse-submodules: replace submodule containing a .git directory with a directory must fail(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 66 - git branch -C master5 master5 should work when master is checked out(B[m
*** t3308-notes-merge.sh ***
ok 668 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=crlf(B[m
ok 186 - iwildmatch (via ls-files): match 't[a-g]n' 'ten'(B[m
ok 187 - pathmatch: match 'ten' 't[a-g]n'(B[m
ok 669 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 188 - pathmatch (via ls-files): match 't[a-g]n' 'ten'(B[m
ok 670 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 42 - show -m notes(B[m
ok 189 - ipathmatch: match 'ten' 't[a-g]n'(B[m
ok 1 - setup(B[m
ok 671 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 190 - ipathmatch (via ls-files): match 't[a-g]n' 'ten'(B[m
ok 67 - git branch -C ab cd should overwrite existing config for cd(B[m
ok 672 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 2 - example 1: notes to add an Acked-by line(B[m
ok 43 - remove note with add -f -F /dev/null(B[m
ok 673 - checkout attr=  aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 191 - cleanup after previous file test(B[m
ok 44 - do not create empty note with -m ""(B[m
ok 192 - setup match file test for ten(B[m
ok 193 - wildmatch: no match 'ten' 't[!a-g]n'(B[m
ok 3 - example 2: binary notes(B[m
ok 68 - git branch -c correctly copies multiple config sections(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 45 - create note with combination of -m and -F(B[m
*** t3309-notes-merge-auto-resolve.sh ***
ok 194 - wildmatch (via ls-files): no match 't[!a-g]n' 'ten'(B[m
ok 69 - deleting a symref(B[m
ok 195 - iwildmatch: no match 'ten' 't[!a-g]n'(B[m
ok 674 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=crlf(B[m
ok 70 - deleting a dangling symref(B[m
ok 196 - iwildmatch (via ls-files): no match 't[!a-g]n' 'ten'(B[m
ok 197 - pathmatch: no match 'ten' 't[!a-g]n'(B[m
ok 675 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 46 - remove note with "git notes remove"(B[m
ok 71 - deleting a self-referential symref(B[m
ok 676 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 198 - pathmatch (via ls-files): no match 't[!a-g]n' 'ten'(B[m
ok 47 - removing non-existing note should not create new commit(B[m
ok 199 - ipathmatch: no match 'ten' 't[!a-g]n'(B[m
ok 72 - renaming a symref is not allowed(B[m
ok 677 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 28 - timeout if packed-refs.lock exists(B[m
ok 200 - ipathmatch (via ls-files): no match 't[!a-g]n' 'ten'(B[m
ok 678 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 73 - git branch -m u v should fail when the reflog for u is a symlink(B[m
ok 679 - checkout attr=auto  aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 201 - cleanup after previous file test(B[m
ok 48 - removing more than one(B[m
ok 202 - setup match file test for ton(B[m
ok 203 - wildmatch: match 'ton' 't[!a-g]n'(B[m
ok 49 - removing is atomic(B[m
ok 204 - wildmatch (via ls-files): match 't[!a-g]n' 'ton'(B[m
ok 205 - iwildmatch: match 'ton' 't[!a-g]n'(B[m
ok 680 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=crlf(B[m
ok 50 - removing with --ignore-missing(B[m
ok 74 - test tracking setup via --track(B[m
ok 206 - iwildmatch (via ls-files): match 't[!a-g]n' 'ton'(B[m
ok 681 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 207 - pathmatch: match 'ton' 't[!a-g]n'(B[m
ok 682 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 51 - removing with --ignore-missing but bogus ref(B[m
ok 208 - pathmatch (via ls-files): match 't[!a-g]n' 'ton'(B[m
ok 23 - git -c submodule.recurse=true checkout: modified submodule updates submodule work tree(B[m
ok 683 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 209 - ipathmatch: match 'ton' 't[!a-g]n'(B[m
ok 75 - test tracking setup (non-wildcard, matching)(B[m
ok 23 - update the split index when a racily clean cache entry is stored only in the shared index #1(B[m
ok 684 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 33 - git read-tree -u --reset --recurse-submodules: replace submodule with a file ignoring ignored files(B[m
ok 1 - setup(B[m
ok 210 - ipathmatch (via ls-files): match 't[!a-g]n' 'ton'(B[m
ok 685 - checkout attr=text  aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 52 - remove reads from --stdin(B[m
ok 211 - cleanup after previous file test(B[m
ok 76 - tracking setup fails on non-matching refspec(B[m
ok 212 - setup match file test for ton(B[m
ok 213 - wildmatch: match 'ton' 't[^a-g]n'(B[m
ok 53 - remove --stdin is also atomic(B[m
ok 2 - verify initial notes (x)(B[m
ok 214 - wildmatch (via ls-files): match 't[^a-g]n' 'ton'(B[m
ok 3 - fail to merge empty notes ref into empty notes ref (z => y)(B[m
ok 77 - test tracking setup via config(B[m
ok 215 - iwildmatch: match 'ton' 't[^a-g]n'(B[m
ok 686 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=crlf(B[m
ok 216 - iwildmatch (via ls-files): match 't[^a-g]n' 'ton'(B[m
ok 687 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 54 - removing with --stdin --ignore-missing(B[m
ok 217 - pathmatch: match 'ton' 't[^a-g]n'(B[m
ok 688 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 218 - pathmatch (via ls-files): match 't[^a-g]n' 'ton'(B[m
ok 689 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 78 - test overriding tracking setup via --no-track(B[m
ok 4 - fail to merge into various non-notes refs(B[m
ok 219 - ipathmatch: match 'ton' 't[^a-g]n'(B[m
ok 55 - list notes with "git notes list"(B[m
ok 690 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 4 - test notes in 2/2/36-fanout(B[m
ok 56 - list notes with "git notes"(B[m
ok 220 - ipathmatch (via ls-files): match 't[^a-g]n' 'ton'(B[m
ok 691 - checkout attr=text  aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 79 - no tracking without .fetch entries(B[m
ok 5 - verify notes in 2/2/36-fanout(B[m
ok 57 - list specific note with "git notes list <object>"(B[m
ok 221 - cleanup after previous file test(B[m
ok 5 - merge non-notes ref into empty notes ref (remote-notes/origin/x => v)(B[m
ok 58 - listing non-existing notes fails(B[m
ok 222 - setup match file test for a]b(B[m
ok 223 - wildmatch: match 'a]b' 'a[]]b'(B[m
ok 80 - test tracking setup via --track but deeper(B[m
ok 59 - append to existing note with "git notes append"(B[m
ok 224 - wildmatch (via ls-files): match 'a[]]b' 'a]b'(B[m
ok 6 - merge notes into empty notes ref (x => y)(B[m
ok 81 - test deleting branch deletes branch config(B[m
ok 225 - iwildmatch: match 'a]b' 'a[]]b'(B[m
ok 692 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=crlf(B[m
ok 7 - merge empty notes ref (z => y)(B[m
ok 60 - "git notes list" does not expand to "git notes list HEAD"(B[m
ok 693 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 226 - iwildmatch (via ls-files): match 'a[]]b' 'a]b'(B[m
ok 82 - test deleting branch without config(B[m
ok 227 - pathmatch: match 'a]b' 'a[]]b'(B[m
ok 694 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 61 - appending empty string does not change existing note(B[m
ok 34 - git read-tree -u --reset --recurse-submodules: modified submodule does update submodule work tree from invalid commit(B[m
ok 8 - change notes on other notes ref (y)(B[m
ok 228 - pathmatch (via ls-files): match 'a[]]b' 'a]b'(B[m
ok 695 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 229 - ipathmatch: match 'a]b' 'a[]]b'(B[m
ok 1 - setup commits(B[m
ok 696 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 83 - deleting currently checked out branch fails(B[m
ok 9 - merge previous notes commit (y^ => y) => No-op(B[m
ok 62 - git notes append == add when there is no existing note(B[m
ok 230 - ipathmatch (via ls-files): match 'a[]]b' 'a]b'(B[m
ok 697 - checkout attr=auto  aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 84 - test --track without .fetch entries(B[m
ok 231 - cleanup after previous file test(B[m
ok 63 - appending empty string to non-existing note does not create note(B[m
ok 10 - verify changed notes on other notes ref (y)(B[m
ok 85 - branch from non-branch HEAD w/autosetupmerge=always(B[m
ok 232 - setup match file test for a-b(B[m
ok 86 - branch from non-branch HEAD w/--track causes failure(B[m
ok 11 - verify unchanged notes on original notes ref (x)(B[m
ok 233 - wildmatch: match 'a-b' 'a[]-]b'(B[m
ok 87 - branch from tag w/--track causes failure(B[m
ok 234 - wildmatch (via ls-files): match 'a[]-]b' 'a-b'(B[m
ok 64 - create other note on a different notes ref (setup)(B[m
ok 88 - --set-upstream-to fails on multiple branches(B[m
ok 698 - ls-files --eol attr=-text  aeol= core.autocrlf=true core.eol=native(B[m
ok 235 - iwildmatch: match 'a-b' 'a[]-]b'(B[m
ok 65 - Do not show note on other ref by default(B[m
ok 699 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 12 - merge original notes (x) into changed notes (y) => No-op(B[m
ok 89 - --set-upstream-to fails on detached HEAD(B[m
ok 66 - Do show note when ref is given in GIT_NOTES_REF(B[m
ok 236 - iwildmatch (via ls-files): match 'a[]-]b' 'a-b'(B[m
ok 90 - --set-upstream-to fails on a missing dst branch(B[m
ok 237 - pathmatch: match 'a-b' 'a[]-]b'(B[m
ok 700 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 91 - --set-upstream-to fails on a missing src branch(B[m
ok 67 - Do show note when ref is given in core.notesRef config(B[m
ok 701 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 238 - pathmatch (via ls-files): match 'a[]-]b' 'a-b'(B[m
ok 92 - --set-upstream-to fails on a non-ref(B[m
ok 239 - ipathmatch: match 'a-b' 'a[]-]b'(B[m
ok 702 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 68 - Do not show note when core.notesRef is overridden(B[m
ok 93 - --set-upstream-to fails on locked config(B[m
ok 2 - setup merge base (x)(B[m
ok 240 - ipathmatch (via ls-files): match 'a[]-]b' 'a-b'(B[m
ok 703 - checkout attr=-text  aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 13 - merge changed (y) into original (x) => Fast-forward(B[m
ok 241 - cleanup after previous file test(B[m
ok 3 - verify state of merge base (x)(B[m
ok 242 - setup match file test for a]b(B[m
ok 94 - use --set-upstream-to modify HEAD(B[m
ok 243 - wildmatch: match 'a]b' 'a[]-]b'(B[m
ok 69 - Show all notes when notes.displayRef=refs/notes/*(B[m
ok 244 - wildmatch (via ls-files): match 'a[]-]b' 'a]b'(B[m
ok 704 - ls-files --eol attr=-text  aeol=lf core.autocrlf=true core.eol=native(B[m
ok 245 - iwildmatch: match 'a]b' 'a[]-]b'(B[m
ok 14 - merge empty notes ref (z => y)(B[m
ok 95 - use --set-upstream-to modify a particular branch(B[m
ok 70 - core.notesRef is implicitly in notes.displayRef(B[m
ok 705 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 96 - --unset-upstream should fail if given a non-existent branch(B[m
ok 246 - iwildmatch (via ls-files): match 'a[]-]b' 'a]b'(B[m
ok 706 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 247 - pathmatch: match 'a]b' 'a[]-]b'(B[m
ok 97 - --unset-upstream should fail if config is locked(B[m
ok 4 - setup local branch (y)(B[m
ok 707 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 248 - pathmatch (via ls-files): match 'a[]-]b' 'a]b'(B[m
ok 71 - notes.displayRef can be given more than once(B[m
ok 15 - change notes on other notes ref (y)(B[m
ok 249 - ipathmatch: match 'a]b' 'a[]-]b'(B[m
ok 708 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 5 - verify state of local branch (y)(B[m
ok 250 - ipathmatch (via ls-files): match 'a[]-]b' 'a]b'(B[m
ok 709 - checkout attr=-text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 72 - notes.displayRef respects order(B[m
ok 251 - cleanup after previous file test(B[m
ok 98 - test --unset-upstream on HEAD(B[m
ok 16 - change notes on notes ref (x)(B[m
ok 99 - --unset-upstream should fail on multiple branches(B[m
ok 73 - GIT_NOTES_DISPLAY_REF works(B[m
ok 24 - git checkout --recurse-submodules: modified submodule updates submodule recursively(B[m
ok 252 - setup match file test for aab(B[m
ok 253 - wildmatch: no match 'aab' 'a[]-]b'(B[m
ok 100 - --unset-upstream should fail on detached HEAD(B[m
ok 35 - git read-tree -u --reset --recurse-submodules: updating submodules fixes .git links(B[m
ok 254 - wildmatch (via ls-files): no match 'a[]-]b' 'aab'(B[m
ok 74 - GIT_NOTES_DISPLAY_REF overrides config(B[m
ok 24 - update the split index when a racily clean cache entry is stored only in the shared index #2(B[m
ok 710 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 255 - iwildmatch: no match 'aab' 'a[]-]b'(B[m
ok 6 - setup remote branch (z)(B[m
ok 17 - merge y into x => Non-conflicting 3-way merge(B[m
ok 29 - retry acquiring packed-refs.lock(B[m
ok 75 - --show-notes=* adds to GIT_NOTES_DISPLAY_REF(B[m
ok 101 - test --unset-upstream on a particular branch(B[m
ok 711 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 256 - iwildmatch (via ls-files): no match 'a[]-]b' 'aab'(B[m
ok 102 - disabled option --set-upstream fails(B[m
ok 712 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 6 - test notes in 2/2/2/34-fanout(B[m
ok 76 - --no-standard-notes(B[m
ok 257 - pathmatch: no match 'aab' 'a[]-]b'(B[m
ok 7 - verify state of remote branch (z)(B[m
ok 713 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 7 - verify notes in 2/2/2/34-fanout(B[m
ok 103 - --set-upstream-to notices an error to set branch as own upstream(B[m
ok 258 - pathmatch (via ls-files): no match 'a[]-]b' 'aab'(B[m
ok 18 - create notes on new, separate notes ref (w)(B[m
ok 77 - --standard-notes(B[m
ok 714 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 259 - ipathmatch: no match 'aab' 'a[]-]b'(B[m
ok 30 - pack symlinked packed-refs(B[m
[32m# passed all 30 test(s)(B[m
[36m1..30(B[m
ok 104 - git checkout -b g/h/i -l should create a branch and a log(B[m
ok 8 - merge z into y with invalid strategy => Fail/No changes(B[m
ok 78 - --show-notes=ref accumulates(B[m
ok 715 - checkout attr=-text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
*** t3310-notes-merge-manual-resolve.sh ***
ok 260 - ipathmatch (via ls-files): no match 'a[]-]b' 'aab'(B[m
ok 261 - cleanup after previous file test(B[m
ok 105 - checkout -b makes reflog by default(B[m
ok 9 - merge z into y with invalid configuration option => Fail/No changes(B[m
ok 262 - setup match file test for aab(B[m
ok 263 - wildmatch: match 'aab' 'a[]a-]b'(B[m
ok 106 - checkout -b does not make reflog when core.logAllRefUpdates = false(B[m
ok 19 - merge w into x => Non-conflicting history-less merge(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 264 - wildmatch (via ls-files): match 'a[]a-]b' 'aab'(B[m
ok 716 - ls-files --eol attr=text  aeol=lf core.autocrlf=true core.eol=native(B[m
ok 10 - merge z into y with "ours" strategy => Non-conflicting 3-way merge(B[m
*** t3311-notes-merge-fanout.sh ***
ok 79 - Allow notes on non-commits (trees, blobs, tags)(B[m
ok 265 - iwildmatch: match 'aab' 'a[]a-]b'(B[m
ok 107 - checkout -b with -l makes reflog when core.logAllRefUpdates = false(B[m
ok 717 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 266 - iwildmatch (via ls-files): match 'a[]a-]b' 'aab'(B[m
ok 718 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 11 - reset to pre-merge state (y)(B[m
ok 267 - pathmatch: match 'aab' 'a[]a-]b'(B[m
ok 719 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 108 - avoid ambiguous track(B[m
ok 268 - pathmatch (via ls-files): match 'a[]a-]b' 'aab'(B[m
ok 720 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 12 - merge z into y with "ours" configuration option => Non-conflicting 3-way merge(B[m
ok 269 - ipathmatch: match 'aab' 'a[]a-]b'(B[m
ok 25 - git checkout -f --recurse-submodules: added submodule is checked out(B[m
ok 721 - checkout attr=text  aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 80 - create note from other note with "git notes add -C"(B[m
ok 270 - ipathmatch (via ls-files): match 'a[]a-]b' 'aab'(B[m
ok 13 - reset to pre-merge state (y)(B[m
ok 271 - cleanup after previous file test(B[m
ok 81 - create note from non-existing note with "git notes add -C" fails(B[m
ok 14 - merge z into y with "ours" per-ref configuration option => Non-conflicting 3-way merge(B[m
ok 272 - setup match file test for ](B[m
ok 273 - wildmatch: match ']' ']'(B[m
ok 15 - reset to pre-merge state (y)(B[m
ok 722 - ls-files --eol attr=text  aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 274 - wildmatch (via ls-files): match ']' ']'(B[m
ok 82 - create note from non-blob with "git notes add -C" fails(B[m
ok 109 - autosetuprebase local on a tracked local branch(B[m
ok 275 - iwildmatch: match ']' ']'(B[m
ok 723 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 1 - setup commits(B[m
ok 276 - iwildmatch (via ls-files): match ']' ']'(B[m
ok 724 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 277 - pathmatch: match ']' ']'(B[m
ok 16 - merge z into y with "theirs" strategy => Non-conflicting 3-way merge(B[m
ok 83 - create note from blob with "git notes add -C" reuses blob id(B[m
ok 725 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 278 - pathmatch (via ls-files): match ']' ']'(B[m
ok 726 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 279 - ipathmatch: match ']' ']'(B[m
ok 17 - reset to pre-merge state (y)(B[m
ok 727 - checkout attr=text  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 280 - ipathmatch (via ls-files): match ']' ']'(B[m
ok 2 - setup merge base (x)(B[m
ok 18 - merge z into y with "theirs" strategy overriding configuration option "ours" => Non-conflicting 3-way merge(B[m
ok 1 - setup a few initial commits with notes (notes ref: x)(B[m
ok 281 - cleanup after previous file test(B[m
ok 84 - create note from other note with "git notes add -c"(B[m
ok 36 - git read-tree -u --reset --recurse-submodules: changed submodule worktree is reset(B[m
ok 110 - autosetuprebase always on a tracked local branch(B[m
ok 282 - setup match file test for foo/baz/bar(B[m
ok 19 - reset to pre-merge state (y)(B[m
ok 283 - wildmatch: no match 'foo/baz/bar' 'foo*bar'(B[m
ok 85 - create note from non-existing note with "git notes add -c" fails(B[m
ok 284 - wildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'(B[m
ok 728 - ls-files --eol attr=auto  aeol=lf core.autocrlf=true core.eol=native(B[m
ok 3 - setup local branch (y)(B[m
ok 285 - iwildmatch: no match 'foo/baz/bar' 'foo*bar'(B[m
ok 729 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 20 - merge z into y with "union" strategy => Non-conflicting 3-way merge(B[m
ok 286 - iwildmatch (via ls-files): no match 'foo*bar' 'foo/baz/bar'(B[m
ok 86 - append to note from other note with "git notes append -C"(B[m
ok 26 - git checkout -f --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 2 - sanity check (x)(B[m
ok 730 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 287 - pathmatch: match 'foo/baz/bar' 'foo*bar'(B[m
ok 731 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 21 - reset to pre-merge state (y)(B[m
ok 288 - pathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'(B[m
ok 732 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 289 - ipathmatch: match 'foo/baz/bar' 'foo*bar'(B[m
ok 111 - autosetuprebase remote on a tracked local branch(B[m
ok 87 - create note from other note with "git notes append -c"(B[m
ok 4 - setup remote branch (z)(B[m
ok 733 - checkout attr=auto  aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 22 - merge z into y with "union" strategy overriding per-ref configuration => Non-conflicting 3-way merge(B[m
ok 290 - ipathmatch (via ls-files): match 'foo*bar' 'foo/baz/bar'(B[m
ok 291 - cleanup after previous file test(B[m
ok 88 - append to note from other note with "git notes append -c"(B[m
ok 23 - reset to pre-merge state (y)(B[m
ok 292 - setup match file test for foo/baz/bar(B[m
ok 293 - wildmatch: no match 'foo/baz/bar' 'foo**bar'(B[m
ok 24 - merge z into y with "union" per-ref overriding general configuration => Non-conflicting 3-way merge(B[m
ok 294 - wildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'(B[m
ok 89 - copy note with "git notes copy"(B[m
ok 734 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 295 - iwildmatch: no match 'foo/baz/bar' 'foo**bar'(B[m
ok 735 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 25 - reset to pre-merge state (y)(B[m
ok 296 - iwildmatch (via ls-files): no match 'foo**bar' 'foo/baz/bar'(B[m
ok 112 - autosetuprebase never on a tracked local branch(B[m
ok 736 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 297 - pathmatch: match 'foo/baz/bar' 'foo**bar'(B[m
ok 5 - merge z into m (== y) with default ("manual") resolver => Conflicting 3-way merge(B[m
ok 25 - update the split index when a racily clean cache entry is stored only in the shared index #3(B[m
ok 737 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 298 - pathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'(B[m
ok 26 - merge z into y with "manual" per-ref only checks specific ref configuration => Conflicting 3-way merge(B[m
ok 90 - copy note with "git notes copy" with default(B[m
ok 299 - ipathmatch: match 'foo/baz/bar' 'foo**bar'(B[m
ok 738 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 6 - change notes in z(B[m
ok 113 - autosetuprebase local on a tracked remote branch(B[m
ok 739 - checkout attr=auto  aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 300 - ipathmatch (via ls-files): match 'foo**bar' 'foo/baz/bar'(B[m
ok 7 - cannot do merge w/conflicts when previous merge is unfinished(B[m
ok 91 - prevent overwrite with "git notes copy"(B[m
ok 301 - cleanup after previous file test(B[m
ok 27 - merge y into z with "union" strategy => Non-conflicting 3-way merge(B[m
ok 302 - setup match file test for foobazbar(B[m
ok 114 - autosetuprebase never on a tracked remote branch(B[m
ok 303 - wildmatch: match 'foobazbar' 'foo**bar'(B[m
ok 28 - reset to pre-merge state (z)(B[m
ok 8 - setup unrelated notes ref (w)(B[m
ok 92 - allow overwrite with "git notes copy -f"(B[m
ok 304 - wildmatch (via ls-files): match 'foo**bar' 'foobazbar'(B[m
ok 740 - ls-files --eol attr=-text  aeol= core.autocrlf=false core.eol=native(B[m
ok 305 - iwildmatch: match 'foobazbar' 'foo**bar'(B[m
ok 741 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 29 - merge y into z with "cat_sort_uniq" strategy => Non-conflicting 3-way merge(B[m
ok 306 - iwildmatch (via ls-files): match 'foo**bar' 'foobazbar'(B[m
ok 742 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 93 - allow overwrite with "git notes copy -f" with default(B[m
ok 115 - autosetuprebase remote on a tracked remote branch(B[m
ok 307 - pathmatch: match 'foobazbar' 'foo**bar'(B[m
ok 743 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 30 - reset to pre-merge state (z)(B[m
ok 308 - pathmatch (via ls-files): match 'foo**bar' 'foobazbar'(B[m
ok 9 - can do merge without conflicts even if previous merge is unfinished (x => w)(B[m
ok 744 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 309 - ipathmatch: match 'foobazbar' 'foo**bar'(B[m
ok 745 - checkout attr=-text  aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 10 - do not allow mixing --commit and --abort(B[m
ok 31 - merge y into z with "cat_sort_uniq" strategy configuration option => Non-conflicting 3-way merge(B[m
ok 310 - ipathmatch (via ls-files): match 'foo**bar' 'foobazbar'(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
ok 116 - autosetuprebase always on a tracked remote branch(B[m
ok 11 - do not allow mixing --commit and --strategy(B[m
ok 94 - cannot copy note from object without notes(B[m
ok 12 - do not allow mixing --abort and --strategy(B[m
ok 37 - git read-tree -u -m: added submodule creates empty directory(B[m
ok 311 - cleanup after previous file test(B[m
*** t3320-notes-merge-worktrees.sh ***
ok 8 - test same notes in no fanout and 2/38-fanout(B[m
ok 312 - setup match file test for foo/baz/bar(B[m
ok 9 - verify same notes in no fanout and 2/38-fanout(B[m
ok 313 - wildmatch: match 'foo/baz/bar' 'foo/**/bar'(B[m
ok 117 - autosetuprebase unconfigured on a tracked remote branch(B[m
ok 746 - ls-files --eol attr=-text  aeol=lf core.autocrlf=false core.eol=native(B[m
ok 314 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'(B[m
ok 747 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 315 - iwildmatch: match 'foo/baz/bar' 'foo/**/bar'(B[m
ok 95 - git notes copy --stdin(B[m
ok 748 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 316 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'(B[m
ok 749 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1 - setup commit(B[m
ok 317 - pathmatch: match 'foo/baz/bar' 'foo/**/bar'(B[m
ok 750 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 27 - git checkout -f --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 318 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'(B[m
ok 2 - setup notes ref (x)(B[m
ok 319 - ipathmatch: match 'foo/baz/bar' 'foo/**/bar'(B[m
ok 751 - checkout attr=-text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 3 - setup local branch (y)(B[m
ok 320 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/baz/bar'(B[m
ok 13 - finalize conflicting merge (z => m)(B[m
ok 118 - autosetuprebase unconfigured on a tracked local branch(B[m
ok 4 - setup remote branch (z)(B[m
ok 321 - cleanup after previous file test(B[m
ok 96 - git notes copy --for-rewrite (unconfigured)(B[m
ok 5 - modify notes ref ourselves (x)(B[m
ok 322 - setup match file test for foo/baz/bar(B[m
ok 323 - wildmatch: match 'foo/baz/bar' 'foo/**/**/bar'(B[m
ok 119 - autosetuprebase unconfigured on untracked local branch(B[m
ok 752 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=false core.eol=native(B[m
ok 324 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'(B[m
ok 753 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 6 - create some new worktrees(B[m
ok 325 - iwildmatch: match 'foo/baz/bar' 'foo/**/**/bar'(B[m
ok 754 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 7 - merge z into y fails and sets NOTES_MERGE_REF(B[m
ok 326 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/baz/bar'(B[m
ok 755 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 120 - autosetuprebase unconfigured on untracked remote branch(B[m
ok 14 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge(B[m
ok 327 - pathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'(B[m
ok 97 - git notes copy --for-rewrite (enabled)(B[m
ok 756 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 328 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'(B[m
ok 8 - merge z into y while mid-merge in another workdir fails(B[m
ok 757 - checkout attr=-text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 329 - ipathmatch: no match 'foo/baz/bar' 'foo/**/**/bar'(B[m
ok 98 - git notes copy --for-rewrite (disabled)(B[m
ok 330 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/baz/bar'(B[m
ok 121 - autosetuprebase never on an untracked local branch(B[m
ok 9 - merge z into x while mid-merge on y succeeds(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 331 - cleanup after previous file test(B[m
*** t3400-rebase.sh ***
ok 332 - setup match file test for foo/b/a/z/bar(B[m
ok 15 - abort notes merge(B[m
ok 758 - ls-files --eol attr=text  aeol=lf core.autocrlf=false core.eol=native(B[m
ok 333 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'(B[m
ok 122 - autosetuprebase local on an untracked local branch(B[m
ok 759 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 99 - git notes copy --for-rewrite (overwrite)(B[m
ok 334 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'(B[m
ok 28 - git checkout -f --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
ok 335 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/bar'(B[m
ok 760 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 336 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'(B[m
ok 761 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 123 - autosetuprebase remote on an untracked local branch(B[m
ok 337 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'(B[m
ok 762 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 100 - git notes copy --for-rewrite (ignore)(B[m
ok 338 - pathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'(B[m
ok 16 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge(B[m
ok 763 - checkout attr=text  aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 339 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/bar'(B[m
ok 26 - update the split index when a racily clean cache entry is stored only in the shared index #4(B[m
ok 340 - ipathmatch (via ls-files): match 'foo/**/bar' 'foo/b/a/z/bar'(B[m
ok 124 - autosetuprebase always on an untracked local branch(B[m
ok 38 - git read-tree -u -m: added submodule leaves existing empty directory alone(B[m
ok 341 - cleanup after previous file test(B[m
ok 101 - git notes copy --for-rewrite (append)(B[m
ok 342 - setup match file test for foo/b/a/z/bar(B[m
ok 764 - ls-files --eol attr=text  aeol=crlf core.autocrlf=false core.eol=native(B[m
ok 343 - wildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'(B[m
ok 125 - autosetuprebase never on an untracked remote branch(B[m
ok 765 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 344 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'(B[m
ok 766 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 345 - iwildmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'(B[m
ok 767 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1 - prepare repository with topic branches(B[m
ok 346 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'(B[m
ok 2 - rebase on dirty worktree(B[m
ok 768 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 347 - pathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'(B[m
ok 126 - autosetuprebase local on an untracked remote branch(B[m
ok 3 - rebase on dirty cache(B[m
ok 769 - checkout attr=text  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 348 - pathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'(B[m
ok 102 - git notes copy --for-rewrite (append two to one)(B[m
ok 17 - add + remove notes in finalized merge (z => m)(B[m
ok 349 - ipathmatch: match 'foo/b/a/z/bar' 'foo/**/**/bar'(B[m
ok 4 - rebase against master(B[m
ok 350 - ipathmatch (via ls-files): match 'foo/**/**/bar' 'foo/b/a/z/bar'(B[m
ok 127 - autosetuprebase remote on an untracked remote branch(B[m
ok 351 - cleanup after previous file test(B[m
ok 103 - git notes copy --for-rewrite (append empty)(B[m
ok 29 - git checkout -f --recurse-submodules: replace directory with submodule(B[m
ok 770 - ls-files --eol attr=auto  aeol=lf core.autocrlf=false core.eol=native(B[m
ok 352 - setup match file test for foo/bar(B[m
ok 5 - rebase sets ORIG_HEAD to pre-rebase state(B[m
ok 353 - wildmatch: match 'foo/bar' 'foo/**/bar'(B[m
ok 771 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 18 - redo merge of z into m (== y) with default ("manual") resolver => Conflicting 3-way merge(B[m
ok 354 - wildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'(B[m
ok 772 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 128 - autosetuprebase always on an untracked remote branch(B[m
ok 355 - iwildmatch: match 'foo/bar' 'foo/**/bar'(B[m
ok 773 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 356 - iwildmatch (via ls-files): match 'foo/**/bar' 'foo/bar'(B[m
ok 774 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 104 - GIT_NOTES_REWRITE_MODE works(B[m
ok 19 - reset notes ref m to somewhere else (w)(B[m
ok 357 - pathmatch: no match 'foo/bar' 'foo/**/bar'(B[m
ok 129 - autosetuprebase always on detached HEAD(B[m
ok 6 - rebase, with <onto> and <upstream> specified as :/quuxery(B[m
ok 775 - checkout attr=auto  aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 358 - pathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'(B[m
ok 7 - the rebase operation should not have destroyed author information(B[m
ok 130 - detect misconfigured autosetuprebase (bad value)(B[m
ok 359 - ipathmatch: no match 'foo/bar' 'foo/**/bar'(B[m
ok 8 - the rebase operation should not have destroyed author information (2)(B[m
ok 131 - detect misconfigured autosetuprebase (no value)(B[m
ok 360 - ipathmatch (via ls-files): no match 'foo/**/bar' 'foo/bar'(B[m
ok 9 - HEAD was detached during rebase(B[m
ok 105 - GIT_NOTES_REWRITE_REF works(B[m
ok 361 - cleanup after previous file test(B[m
ok 132 - attempt to delete a branch without base and unmerged to HEAD(B[m
ok 10 - rebase from ambiguous branch name(B[m
ok 776 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=false core.eol=native(B[m
ok 133 - attempt to delete a branch merged to its base(B[m
ok 362 - setup match file test for foo/bar(B[m
ok 777 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 363 - wildmatch: match 'foo/bar' 'foo/**/**/bar'(B[m
ok 778 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 364 - wildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'(B[m
ok 106 - GIT_NOTES_REWRITE_REF overrides config(B[m
ok 365 - iwildmatch: match 'foo/bar' 'foo/**/**/bar'(B[m
ok 779 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 134 - attempt to delete a branch merged to its base(B[m
ok 10 - test same notes in no fanout and 2/2/36-fanout(B[m
ok 20 - fail to finalize conflicting merge if underlying ref has moved in the meantime (m != NOTES_MERGE_PARTIAL^1)(B[m
ok 366 - iwildmatch (via ls-files): match 'foo/**/**/bar' 'foo/bar'(B[m
ok 780 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 11 - verify same notes in no fanout and 2/2/36-fanout(B[m
ok 107 - git notes copy diagnoses too many or too few parameters(B[m
ok 367 - pathmatch: no match 'foo/bar' 'foo/**/**/bar'(B[m
ok 781 - checkout attr=auto  aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 11 - rebase off of the previous branch using "-"(B[m
ok 135 - use --edit-description(B[m
ok 108 - git notes get-ref expands refs/heads/master to refs/notes/refs/heads/master(B[m
ok 368 - pathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'(B[m
ok 369 - ipathmatch: no match 'foo/bar' 'foo/**/**/bar'(B[m
ok 136 - detect typo in branch name when using --edit-description(B[m
ok 109 - git notes get-ref (no overrides)(B[m
ok 370 - ipathmatch (via ls-files): no match 'foo/**/**/bar' 'foo/bar'(B[m
ok 137 - refuse --edit-description on unborn branch for now(B[m
ok 39 - git read-tree -u -m: replace tracked file with submodule creates empty directory(B[m
ok 110 - git notes get-ref (core.notesRef)(B[m
ok 138 - --merged catches invalid object names(B[m
ok 371 - cleanup after previous file test(B[m
ok 782 - ls-files --eol attr=-text  aeol= core.autocrlf=input core.eol=native(B[m
ok 111 - git notes get-ref (GIT_NOTES_REF)(B[m
ok 139 - --merged is incompatible with --no-merged(B[m
ok 21 - resolve situation by aborting the notes merge(B[m
ok 372 - setup match file test for foo/bar(B[m
ok 112 - git notes get-ref (--ref)(B[m
ok 783 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 12 - rebase a single mode change(B[m
ok 373 - wildmatch: no match 'foo/bar' 'foo?bar'(B[m
ok 784 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 374 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'(B[m
ok 785 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 375 - iwildmatch: no match 'foo/bar' 'foo?bar'(B[m
ok 113 - setup testing of empty notes(B[m
ok 786 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 13 - rebase is not broken by diff.renames(B[m
ok 22 - switch cwd before committing notes merge(B[m
ok 376 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 787 - checkout attr=-text  aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 377 - pathmatch: match 'foo/bar' 'foo?bar'(B[m
ok 114 - 'git notes add' removes empty note(B[m
ok 14 - setup: recover(B[m
*** t3401-rebase-and-am-rename.sh ***
ok 140 - --list during rebase(B[m
ok 378 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'(B[m
ok 379 - ipathmatch: match 'foo/bar' 'foo?bar'(B[m
ok 15 - Show verbose error when HEAD could not be detached(B[m
ok 115 - 'git notes add --allow-empty' stores empty note(B[m
ok 380 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'(B[m
ok 16 - fail when upstream arg is missing and not on branch(B[m
ok 116 - 'git notes add -F /dev/null' removes empty note(B[m
ok 788 - ls-files --eol attr=-text  aeol=lf core.autocrlf=input core.eol=native(B[m
ok 381 - cleanup after previous file test(B[m
ok 30 - git checkout -f --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 17 - fail when upstream arg is missing and not configured(B[m
ok 27 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #0(B[m
ok 789 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 117 - 'git notes add -F /dev/null --allow-empty' stores empty note(B[m
ok 382 - setup match file test for foo/bar(B[m
ok 790 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 383 - wildmatch: no match 'foo/bar' 'foo[/]bar'(B[m
ok 18 - rebase works with format.useAutoBase(B[m
ok 118 - 'git notes add -m ""' removes empty note(B[m
ok 141 - --list during rebase from detached HEAD(B[m
ok 791 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 384 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'(B[m
ok 792 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 385 - iwildmatch: no match 'foo/bar' 'foo[/]bar'(B[m
ok 119 - 'git notes add -m "" --allow-empty' stores empty note(B[m
ok 793 - checkout attr=-text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 386 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'(B[m
ok 387 - pathmatch: match 'foo/bar' 'foo[/]bar'(B[m
ok 120 - 'git notes add -c "$empty_blob"' removes empty note(B[m
ok 1 - setup testcase where directory rename should be detected(B[m
ok 388 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'(B[m
ok 389 - ipathmatch: match 'foo/bar' 'foo[/]bar'(B[m
ok 121 - 'git notes add -c "$empty_blob" --allow-empty' stores empty note(B[m
ok 390 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'(B[m
ok 794 - ls-files --eol attr=-text  aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 122 - 'git notes add -C "$empty_blob"' removes empty note(B[m
ok 19 - default to common base in @{upstream}s reflog if no upstream arg (--merge)(B[m
ok 391 - cleanup after previous file test(B[m
ok 795 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 2 - rebase --interactive: directory rename detected(B[m
ok 796 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 392 - setup match file test for foo/bar(B[m
ok 123 - 'git notes add -C "$empty_blob" --allow-empty' stores empty note(B[m
ok 393 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 797 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 798 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 394 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 124 - 'git notes append' removes empty note(B[m
[33mnot ok 3 - rebase --apply: directory rename detected # TODO known breakage(B[m
ok 395 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 799 - checkout attr=-text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 396 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 125 - 'git notes append --allow-empty' stores empty note(B[m
ok 397 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 4 - rebase --merge: directory rename detected(B[m
ok 398 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 126 - 'git notes append -F /dev/null' removes empty note(B[m
ok 399 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 20 - default to common base in @{upstream}s reflog if no upstream arg (--apply)(B[m
ok 142 - tracking with unexpected .fetch refspec(B[m
ok 800 - ls-files --eol attr=text  aeol=lf core.autocrlf=input core.eol=native(B[m
ok 127 - 'git notes append -F /dev/null --allow-empty' stores empty note(B[m
ok 400 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 40 - git read-tree -u -m: replace directory with submodule(B[m
[33mnot ok 5 - am: directory rename detected # TODO known breakage(B[m
ok 801 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 401 - cleanup after previous file test(B[m
ok 128 - 'git notes append -m ""' removes empty note(B[m
ok 802 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 402 - setup match file test for foo/bar(B[m
ok 803 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 129 - 'git notes append -m "" --allow-empty' stores empty note(B[m
ok 403 - wildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 804 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 404 - wildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'(B[m
ok 805 - checkout attr=text  aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 130 - 'git notes append -c "$empty_blob"' removes empty note(B[m
ok 405 - iwildmatch: no match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 406 - iwildmatch (via ls-files): no match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'(B[m
ok 407 - pathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 131 - 'git notes append -c "$empty_blob" --allow-empty' stores empty note(B[m
ok 6 - setup testcase where directory rename should NOT be detected(B[m
ok 408 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'(B[m
ok 143 - configured committerdate sort(B[m
ok 31 - git checkout -f --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 132 - 'git notes append -C "$empty_blob"' removes empty note(B[m
ok 409 - ipathmatch: match 'foo/bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 806 - ls-files --eol attr=text  aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 144 - option override configured sort(B[m
ok 410 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo/bar'(B[m
ok 133 - 'git notes append -C "$empty_blob" --allow-empty' stores empty note(B[m
ok 807 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 145 - invalid sort parameter in configuration(B[m
[32m# passed all 145 test(s)(B[m
[36m1..145(B[m
ok 411 - cleanup after previous file test(B[m
ok 21 - cherry-picked commits and fork-point work together(B[m
ok 808 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 7 - rebase --interactive: NO directory rename(B[m
ok 412 - setup match file test for foo-bar(B[m
ok 134 - 'git notes edit' removes empty note(B[m
ok 809 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 413 - wildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 810 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 22 - rebase --apply -q is quiet(B[m
*** t3402-rebase-merge.sh ***
ok 414 - wildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'(B[m
ok 135 - 'git notes edit --allow-empty' stores empty note(B[m
ok 811 - checkout attr=text  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 415 - iwildmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 8 - rebase (am): NO directory rename(B[m
ok 23 - rebase --merge -q is quiet(B[m
ok 416 - iwildmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'(B[m
ok 417 - pathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 418 - pathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'(B[m
ok 136 - empty notes are displayed by git log(B[m
[32m# passed all 136 test(s)(B[m
[36m1..136(B[m
ok 419 - ipathmatch: match 'foo-bar' 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r'(B[m
ok 9 - rebase --merge: NO directory rename(B[m
ok 812 - ls-files --eol attr=auto  aeol=lf core.autocrlf=input core.eol=native(B[m
ok 420 - ipathmatch (via ls-files): match 'f[^eiu][^eiu][^eiu][^eiu][^eiu]r' 'foo-bar'(B[m
ok 24 - Rebase a commit that sprinkles CRs in(B[m
*** t3403-rebase-skip.sh ***
ok 12 - test same notes in 2/38-fanout and 2/2/36-fanout(B[m
ok 813 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 421 - cleanup after previous file test(B[m
ok 814 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 13 - verify same notes in 2/38-fanout and 2/2/36-fanout(B[m
ok 422 - setup match file test for foo(B[m
ok 815 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 10 - am: NO directory rename(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 8 test(s)(B[m
[36m1..10(B[m
ok 423 - wildmatch: match 'foo' '**/foo'(B[m
ok 816 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
*** t3404-rebase-interactive.sh ***
ok 424 - wildmatch (via ls-files): match '**/foo' 'foo'(B[m
ok 817 - checkout attr=auto  aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 41 - git read-tree -u -m: removed submodule leaves submodule directory and its contents in place(B[m
ok 28 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #1(B[m
ok 425 - iwildmatch: match 'foo' '**/foo'(B[m
ok 426 - iwildmatch (via ls-files): match '**/foo' 'foo'(B[m
ok 427 - pathmatch: no match 'foo' '**/foo'(B[m
ok 25 - rebase can copy notes(B[m
ok 1 - setup(B[m
ok 428 - pathmatch (via ls-files): no match '**/foo' 'foo'(B[m
ok 2 - reference merge(B[m
ok 429 - ipathmatch: no match 'foo' '**/foo'(B[m
ok 818 - ls-files --eol attr=auto  aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 26 - rebase -m can copy notes(B[m
ok 430 - ipathmatch (via ls-files): no match '**/foo' 'foo'(B[m
ok 819 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 431 - cleanup after previous file test(B[m
ok 3 - rebase(B[m
ok 820 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 4 - test-rebase@{1} is pre rebase(B[m
ok 821 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 432 - setup match file test for XXX/foo(B[m
ok 5 - merge and rebase should match(B[m
ok 1 - setup(B[m
ok 32 - git checkout -f --recurse-submodules: replace submodule with a file(B[m
ok 433 - wildmatch: match 'XXX/foo' '**/foo'(B[m
ok 822 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 2 - rebase with git am -3 (default)(B[m
ok 434 - wildmatch (via ls-files): match '**/foo' 'XXX/foo'(B[m
ok 823 - checkout attr=auto  aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 6 - rebase the other way(B[m
ok 3 - rebase --skip can not be used with other options(B[m
ok 435 - iwildmatch: match 'XXX/foo' '**/foo'(B[m
ok 436 - iwildmatch (via ls-files): match '**/foo' 'XXX/foo'(B[m
ok 4 - rebase --skip with am -3(B[m
ok 437 - pathmatch: match 'XXX/foo' '**/foo'(B[m
ok 27 - rebase commit with an ancient timestamp(B[m
ok 7 - rebase -Xtheirs(B[m
ok 438 - pathmatch (via ls-files): match '**/foo' 'XXX/foo'(B[m
ok 439 - ipathmatch: match 'XXX/foo' '**/foo'(B[m
ok 3 - Add a few hundred commits w/notes to trigger fanout (x -> y)(B[m
ok 824 - ls-files --eol attr=  aeol= core.autocrlf=false core.eol=native(B[m
ok 440 - ipathmatch (via ls-files): match '**/foo' 'XXX/foo'(B[m
ok 825 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 8 - rebase -Xtheirs from orphan(B[m
ok 826 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 28 - rebase with "From " line in commit message(B[m
ok 441 - cleanup after previous file test(B[m
ok 5 - rebase moves back to skip-reference(B[m
ok 9 - merge and rebase should match(B[m
ok 6 - checkout skip-merge(B[m
ok 827 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 442 - setup match file test for bar/baz/foo(B[m
ok 828 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 7 - rebase with --merge(B[m
ok 443 - wildmatch: match 'bar/baz/foo' '**/foo'(B[m
ok 829 - checkout attr=  aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 8 - rebase --skip with --merge(B[m
ok 444 - wildmatch (via ls-files): match '**/foo' 'bar/baz/foo'(B[m
ok 10 - picking rebase(B[m
ok 9 - merge and reference trees equal(B[m
ok 445 - iwildmatch: match 'bar/baz/foo' '**/foo'(B[m
ok 10 - moved back to branch correctly(B[m
ok 446 - iwildmatch (via ls-files): match '**/foo' 'bar/baz/foo'(B[m
ok 447 - pathmatch: match 'bar/baz/foo' '**/foo'(B[m
ok 448 - pathmatch (via ls-files): match '**/foo' 'bar/baz/foo'(B[m
ok 29 - rebase --apply and --show-current-patch(B[m
ok 830 - ls-files --eol attr=  aeol= core.autocrlf=true core.eol=native(B[m
ok 449 - ipathmatch: match 'bar/baz/foo' '**/foo'(B[m
ok 11 - fixup that empties commit fails(B[m
ok 831 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 11 - rebase -s funny -Xopt(B[m
ok 450 - ipathmatch (via ls-files): match '**/foo' 'bar/baz/foo'(B[m
ok 832 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 42 - git read-tree -u -m: removed submodule leaves submodule containing a .git directory alone(B[m
ok 451 - cleanup after previous file test(B[m
ok 833 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 452 - setup match file test for bar/baz/foo(B[m
ok 834 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 453 - wildmatch: no match 'bar/baz/foo' '*/foo'(B[m
ok 12 - squash that empties commit fails(B[m
ok 835 - checkout attr=  aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 454 - wildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'(B[m
ok 12 - rebase --skip works with two conflicts in a row(B[m
ok 13 - $EDITOR and friends are unchanged(B[m
ok 455 - iwildmatch: no match 'bar/baz/foo' '*/foo'(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
*** t3405-rebase-malformed.sh ***
*** t3406-rebase-message.sh ***
ok 456 - iwildmatch (via ls-files): no match '*/foo' 'bar/baz/foo'(B[m
[33mnot ok 33 - git checkout -f --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 457 - pathmatch: match 'bar/baz/foo' '*/foo'(B[m
ok 458 - pathmatch (via ls-files): match '*/foo' 'bar/baz/foo'(B[m
ok 836 - ls-files --eol attr=auto  aeol= core.autocrlf=true core.eol=native(B[m
ok 459 - ipathmatch: match 'bar/baz/foo' '*/foo'(B[m
ok 1 - setup(B[m
ok 837 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 460 - ipathmatch (via ls-files): match '*/foo' 'bar/baz/foo'(B[m
ok 838 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 839 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 461 - cleanup after previous file test(B[m
ok 2 - rebase --keep-empty(B[m
ok 840 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 462 - setup match file test for foo/bar/baz(B[m
ok 841 - checkout attr=auto  aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 463 - wildmatch: no match 'foo/bar/baz' '**/bar*'(B[m
ok 464 - wildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'(B[m
ok 465 - iwildmatch: no match 'foo/bar/baz' '**/bar*'(B[m
ok 3 - rebase -i with empty todo list(B[m
ok 466 - iwildmatch (via ls-files): no match '**/bar*' 'foo/bar/baz'(B[m
ok 467 - pathmatch: match 'foo/bar/baz' '**/bar*'(B[m
ok 30 - rebase --apply and .gitattributes(B[m
ok 468 - pathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'(B[m
ok 29 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #2(B[m
ok 842 - ls-files --eol attr=text  aeol= core.autocrlf=true core.eol=native(B[m
ok 469 - ipathmatch: match 'foo/bar/baz' '**/bar*'(B[m
ok 843 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 470 - ipathmatch (via ls-files): match '**/bar*' 'foo/bar/baz'(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 844 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 471 - cleanup after previous file test(B[m
ok 845 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 2 - rebase -m(B[m
ok 846 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 2 - rebase commit with multi-line subject(B[m
ok 472 - setup match file test for deep/foo/bar/baz(B[m
ok 847 - checkout attr=text  aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 4 - rebase -i with the exec command(B[m
ok 473 - wildmatch: match 'deep/foo/bar/baz' '**/bar/*'(B[m
ok 3 - rebase against master twice(B[m
ok 474 - wildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'(B[m
ok 3 - rebase commit with diff in message(B[m
ok 14 - test same notes in 2/2/2/34-fanout and 2/2/36-fanout(B[m
ok 31 - rebase--merge.sh and --show-current-patch(B[m
ok 475 - iwildmatch: match 'deep/foo/bar/baz' '**/bar/*'(B[m
ok 43 - git read-tree -u -m: replace submodule with a directory must fail(B[m
ok 4 - rebase against master twice with --force(B[m
ok 4 - rebase -m commit with empty message(B[m
ok 15 - verify same notes in 2/2/2/34-fanout and 2/2/36-fanout(B[m
ok 476 - iwildmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'(B[m
ok 5 - rebase -i with the exec command runs from tree root(B[m
ok 477 - pathmatch: match 'deep/foo/bar/baz' '**/bar/*'(B[m
ok 32 - rebase -c rebase.useBuiltin=false warning(B[m
ok 5 - rebase against master twice from another branch(B[m
ok 848 - ls-files --eol attr=text  aeol= core.autocrlf=input core.eol=native(B[m
ok 478 - pathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'(B[m
ok 33 - switch to branch checked out here(B[m
ok 479 - ipathmatch: match 'deep/foo/bar/baz' '**/bar/*'(B[m
ok 849 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 6 - rebase fast-forward to master(B[m
ok 5 - rebase -i commit with empty message(B[m
ok 850 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 480 - ipathmatch (via ls-files): match '**/bar/*' 'deep/foo/bar/baz'(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 34 - switch to branch not checked out(B[m
*** t3407-rebase-abort.sh ***
ok 851 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 481 - cleanup after previous file test(B[m
ok 7 - rebase --stat(B[m
ok 6 - rebase -i with exec allows git commands in subdirs(B[m
ok 482 - setup match file test for deep/foo/bar/baz/(B[m
ok 852 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 483 - wildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'(B[m
ok 35 - refuse to switch to branch checked out elsewhere(B[m
ok 853 - checkout attr=text  aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
[33mnot ok 484 - wildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage(B[m
[32m# passed all 35 test(s)(B[m
[36m1..35(B[m
ok 7 - rebase -i sets work tree properly(B[m
ok 8 - rebase w/config rebase.stat(B[m
ok 485 - iwildmatch: no match 'deep/foo/bar/baz/' '**/bar/*'(B[m
[33mnot ok 486 - iwildmatch (via ls-files): no match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 487 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/*'(B[m
*** t3408-rebase-multi-line.sh ***
[33mnot ok 488 - pathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 489 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/*'(B[m
ok 9 - rebase -n overrides config rebase.stat config(B[m
[33mnot ok 490 - ipathmatch (via ls-files): match skip '**/bar/*' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 34 - git checkout -f --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 4 - notes tree has fanout (y)(B[m
ok 10 - rebase --onto outputs the invalid ref(B[m
ok 491 - cleanup after previous file test(B[m
ok 854 - ls-files --eol attr=auto  aeol= core.autocrlf=input core.eol=native(B[m
ok 492 - setup match file test for deep/foo/bar/baz/(B[m
ok 11 - error out early upon -C<n> or --whitespace=<bad>(B[m
ok 493 - wildmatch: match 'deep/foo/bar/baz/' '**/bar/**'(B[m
ok 855 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 8 - rebase -i with the exec command checks tree cleanness(B[m
[33mnot ok 494 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 5 - No-op merge (already included) (x => y)(B[m
ok 856 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 495 - iwildmatch: match 'deep/foo/bar/baz/' '**/bar/**'(B[m
[33mnot ok 496 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 1 - setup(B[m
ok 857 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 9 - rebase -x with empty command fails(B[m
ok 497 - pathmatch: match 'deep/foo/bar/baz/' '**/bar/**'(B[m
[33mnot ok 498 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 858 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 6 - Fast-forward merge (y => x)(B[m
ok 499 - ipathmatch: match 'deep/foo/bar/baz/' '**/bar/**'(B[m
ok 10 - rebase -x with newline in command fails(B[m
[33mnot ok 500 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/baz/' # TODO known breakage(B[m
ok 859 - checkout attr=auto  aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 501 - cleanup after previous file test(B[m
ok 2 - rebase --apply --abort(B[m
ok 502 - setup match file test for deep/foo/bar(B[m
ok 503 - wildmatch: no match 'deep/foo/bar' '**/bar/*'(B[m
ok 504 - wildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'(B[m
ok 11 - rebase -i with exec of inexistent command(B[m
ok 7 - change some of the initial 5 notes (x -> z)(B[m
ok 505 - iwildmatch: no match 'deep/foo/bar' '**/bar/*'(B[m
ok 860 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=crlf(B[m
ok 12 - GIT_REFLOG_ACTION(B[m
ok 1 - setup(B[m
ok 12 - implicit interactive rebase does not invoke sequence editor(B[m
ok 8 - notes tree has no fanout (z)(B[m
ok 506 - iwildmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'(B[m
ok 861 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 507 - pathmatch: no match 'deep/foo/bar' '**/bar/*'(B[m
ok 862 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 508 - pathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'(B[m
ok 3 - rebase --apply --abort after --skip(B[m
ok 863 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 2 - rebase(B[m
ok 13 - no changes are a nop(B[m
ok 509 - ipathmatch: no match 'deep/foo/bar' '**/bar/*'(B[m
ok 864 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 510 - ipathmatch (via ls-files): no match '**/bar/*' 'deep/foo/bar'(B[m
ok 44 - git read-tree -u -m: replace submodule containing a .git directory with a directory must fail(B[m
ok 865 - checkout attr=text  aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 511 - cleanup after previous file test(B[m
ok 512 - setup match file test for deep/foo/bar/(B[m
ok 9 - successful merge without conflicts (y => z)(B[m
ok 513 - wildmatch: match 'deep/foo/bar/' '**/bar/**'(B[m
[33mnot ok 514 - wildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage(B[m
ok 14 - test the [branch] option(B[m
ok 13 - rebase -i onto unrelated history(B[m
ok 515 - iwildmatch: match 'deep/foo/bar/' '**/bar/**'(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 4 - rebase --apply --abort after --continue(B[m
[33mnot ok 516 - iwildmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage(B[m
ok 517 - pathmatch: match 'deep/foo/bar/' '**/bar/**'(B[m
*** t3409-rebase-preserve-merges.sh ***
ok 866 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=lf(B[m
[33mnot ok 518 - pathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage(B[m
ok 519 - ipathmatch: match 'deep/foo/bar/' '**/bar/**'(B[m
ok 867 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF(B[m
[33mnot ok 520 - ipathmatch (via ls-files): match skip '**/bar/**' 'deep/foo/bar/' # TODO known breakage(B[m
ok 521 - cleanup after previous file test(B[m
ok 15 - test --onto <branch>(B[m
ok 868 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 5 - rebase --apply --abort does not update reflog(B[m
ok 869 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 522 - setup match file test for foo/bar/baz(B[m
ok 30 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #3(B[m
ok 870 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 523 - wildmatch: no match 'foo/bar/baz' '**/bar**'(B[m
ok 871 - checkout attr=text  aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 524 - wildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'(B[m
ok 525 - iwildmatch: no match 'foo/bar/baz' '**/bar**'(B[m
ok 6 - rebase --abort can not be used with other options(B[m
ok 16 - rebase on top of a non-conflicting commit(B[m
ok 35 - git checkout -f --recurse-submodules: updating to a missing submodule commit fails(B[m
ok 526 - iwildmatch (via ls-files): no match '**/bar**' 'foo/bar/baz'(B[m
ok 17 - reflog for the branch shows state before rebase(B[m
ok 527 - pathmatch: match 'foo/bar/baz' '**/bar**'(B[m
ok 18 - reflog for the branch shows correct finish message(B[m
ok 528 - pathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'(B[m
ok 7 - rebase --merge --abort(B[m
ok 529 - ipathmatch: match 'foo/bar/baz' '**/bar**'(B[m
ok 872 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=(B[m
ok 530 - ipathmatch (via ls-files): match '**/bar**' 'foo/bar/baz'(B[m
ok 873 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF(B[m
ok 531 - cleanup after previous file test(B[m
ok 874 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF(B[m
ok 875 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF(B[m
ok 532 - setup match file test for foo/bar/baz/x(B[m
ok 8 - rebase --merge --abort after --skip(B[m
ok 876 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_mix_CR(B[m
ok 533 - wildmatch: match 'foo/bar/baz/x' '*/bar/**'(B[m
ok 19 - exchange two commits(B[m
ok 877 - checkout attr=text  aeol= core.autocrlf=false core.eol= file=LF_nul(B[m
ok 534 - wildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'(B[m
ok 535 - iwildmatch: match 'foo/bar/baz/x' '*/bar/**'(B[m
ok 536 - iwildmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'(B[m
[33mnot ok 45 - git read-tree -u -m: replace submodule with a file must fail # TODO known breakage(B[m
ok 537 - pathmatch: match 'foo/bar/baz/x' '*/bar/**'(B[m
ok 20 - stop on conflicting pick(B[m
ok 538 - pathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'(B[m
ok 9 - rebase --merge --abort after --continue(B[m
ok 539 - ipathmatch: match 'foo/bar/baz/x' '*/bar/**'(B[m
ok 878 - ls-files --eol attr=text  aeol= core.autocrlf=false core.eol=native(B[m
ok 21 - show conflicted patch(B[m
ok 1 - setup for merge-preserving rebase(B[m
ok 879 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 540 - ipathmatch (via ls-files): match '*/bar/**' 'foo/bar/baz/x'(B[m
ok 880 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 16 - test notes in no fanout concatenated with 2/38-fanout(B[m
ok 541 - cleanup after previous file test(B[m
ok 22 - abort(B[m
ok 10 - rebase --merge --abort does not update reflog(B[m
ok 881 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 542 - setup match file test for deep/foo/bar/baz/x(B[m
ok 882 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 36 - git checkout -f --recurse-submodules: added submodule does remove untracked unignored file with same name when forced(B[m
ok 543 - wildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'(B[m
ok 17 - verify notes in no fanout concatenated with 2/38-fanout(B[m
ok 883 - checkout attr=text  aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 544 - wildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'(B[m
ok 23 - abort with error when new base cannot be checked out(B[m
ok 11 - rebase --abort can not be used with other options(B[m
ok 545 - iwildmatch: no match 'deep/foo/bar/baz/x' '*/bar/**'(B[m
ok 546 - iwildmatch (via ls-files): no match '*/bar/**' 'deep/foo/bar/baz/x'(B[m
ok 547 - pathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'(B[m
ok 24 - retain authorship(B[m
ok 548 - pathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'(B[m
ok 12 - rebase --apply --quit(B[m
ok 884 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=(B[m
ok 549 - ipathmatch: match 'deep/foo/bar/baz/x' '*/bar/**'(B[m
ok 885 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF(B[m
ok 550 - ipathmatch (via ls-files): match '*/bar/**' 'deep/foo/bar/baz/x'(B[m
ok 886 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF(B[m
ok 13 - rebase --merge --quit(B[m
ok 551 - cleanup after previous file test(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 887 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF(B[m
*** t3410-rebase-preserve-dropped-merges.sh ***
ok 888 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_mix_CR(B[m
ok 552 - setup match file test for deep/foo/bar/baz/x(B[m
ok 553 - wildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'(B[m
ok 889 - checkout attr=auto  aeol= core.autocrlf=false core.eol= file=LF_nul(B[m
ok 554 - wildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'(B[m
ok 555 - iwildmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'(B[m
ok 25 - retain authorship w/ conflicts(B[m
ok 556 - iwildmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'(B[m
ok 557 - pathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'(B[m
ok 558 - pathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'(B[m
ok 890 - ls-files --eol attr=auto  aeol= core.autocrlf=false core.eol=native(B[m
ok 559 - ipathmatch: match 'deep/foo/bar/baz/x' '**/bar/*/*'(B[m
ok 891 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 560 - ipathmatch (via ls-files): match '**/bar/*/*' 'deep/foo/bar/baz/x'(B[m
[33mnot ok 46 - git read-tree -u -m: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 892 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 561 - cleanup after previous file test(B[m
ok 893 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 894 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 562 - setup match file test for acrt(B[m
ok 26 - squash(B[m
ok 563 - wildmatch: no match 'acrt' 'a[c-c]st'(B[m
ok 27 - retain authorship when squashing(B[m
ok 895 - checkout attr=auto  aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 10 - notes tree still has fanout after merge (m)(B[m
ok 564 - wildmatch (via ls-files): no match 'a[c-c]st' 'acrt'(B[m
ok 565 - iwildmatch: no match 'acrt' 'a[c-c]st'(B[m
ok 31 - update the split index after unpack trees() copied a racily clean cache entry from the shared index #4(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
ok 566 - iwildmatch (via ls-files): no match 'a[c-c]st' 'acrt'(B[m
*** t3411-rebase-preserve-around-merges.sh ***
ok 567 - pathmatch: no match 'acrt' 'a[c-c]st'(B[m
ok 11 - introduce conflicting changes (y -> w)(B[m
ok 568 - pathmatch (via ls-files): no match 'a[c-c]st' 'acrt'(B[m
ok 896 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=lf(B[m
ok 569 - ipathmatch: no match 'acrt' 'a[c-c]st'(B[m
ok 897 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 570 - ipathmatch (via ls-files): no match 'a[c-c]st' 'acrt'(B[m
ok 1 - setup(B[m
ok 898 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 571 - cleanup after previous file test(B[m
ok 899 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 37 - git checkout -f --recurse-submodules: replace submodule with a directory(B[m
ok 572 - setup match file test for acrt(B[m
ok 900 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 573 - wildmatch: match 'acrt' 'a[c-c]rt'(B[m
ok 901 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 3 - rebasep(B[m
ok 12 - successful merge using "ours" strategy (z => w)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 574 - wildmatch (via ls-files): match 'a[c-c]rt' 'acrt'(B[m
*** t3412-rebase-root.sh ***
ok 575 - iwildmatch: match 'acrt' 'a[c-c]rt'(B[m
ok 576 - iwildmatch (via ls-files): match 'a[c-c]rt' 'acrt'(B[m
ok 577 - pathmatch: match 'acrt' 'a[c-c]rt'(B[m
ok 578 - pathmatch (via ls-files): match 'a[c-c]rt' 'acrt'(B[m
ok 902 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=lf(B[m
ok 579 - ipathmatch: match 'acrt' 'a[c-c]rt'(B[m
ok 903 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
ok 580 - ipathmatch (via ls-files): match 'a[c-c]rt' 'acrt'(B[m
ok 1 - setup(B[m
ok 904 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 581 - cleanup after previous file test(B[m
ok 905 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 582 - setup match file test for ](B[m
ok 906 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 583 - wildmatch: no match ']' '[!]-]'(B[m
ok 907 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 584 - wildmatch (via ls-files): no match '[!]-]' ']'(B[m
ok 585 - iwildmatch: no match ']' '[!]-]'(B[m
ok 586 - iwildmatch (via ls-files): no match '[!]-]' ']'(B[m
ok 1 - prepare repository(B[m
ok 587 - pathmatch: no match ']' '[!]-]'(B[m
ok 2 - rebase --root fails with too many args(B[m
ok 588 - pathmatch (via ls-files): no match '[!]-]' ']'(B[m
ok 3 - setup pre-rebase hook(B[m
ok 589 - ipathmatch: no match ']' '[!]-]'(B[m
ok 908 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf(B[m
ok 590 - ipathmatch (via ls-files): no match '[!]-]' ']'(B[m
ok 909 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
ok 591 - cleanup after previous file test(B[m
ok 910 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 4 - rebase --root --onto <newbase>(B[m
ok 5 - pre-rebase got correct input (1)(B[m
ok 911 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 592 - setup match file test for a(B[m
ok 593 - wildmatch: match 'a' '[!]-]'(B[m
ok 912 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 47 - git read-tree -u -m: modified submodule does not update submodule work tree(B[m
ok 913 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 594 - wildmatch (via ls-files): match '[!]-]' 'a'(B[m
ok 6 - rebase --root --onto <newbase> <branch>(B[m
ok 595 - iwildmatch: match 'a' '[!]-]'(B[m
ok 7 - pre-rebase got correct input (2)(B[m
ok 596 - iwildmatch (via ls-files): match '[!]-]' 'a'(B[m
ok 597 - pathmatch: match 'a' '[!]-]'(B[m
ok 8 - rebase -i --root --onto <newbase>(B[m
ok 598 - pathmatch (via ls-files): match '[!]-]' 'a'(B[m
ok 9 - pre-rebase got correct input (3)(B[m
ok 2 - --continue works after a conflict(B[m
ok 599 - ipathmatch: match 'a' '[!]-]'(B[m
ok 914 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=lf(B[m
ok 18 - test notes in no fanout concatenated with 2/2/36-fanout(B[m
ok 38 - git checkout -f --recurse-submodules: replace submodule containing a .git directory with a directory must fail(B[m
ok 600 - ipathmatch (via ls-files): match '[!]-]' 'a'(B[m
ok 915 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
ok 19 - verify notes in no fanout concatenated with 2/2/36-fanout(B[m
ok 601 - cleanup after previous file test(B[m
ok 916 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 10 - rebase -i --root --onto <newbase> <branch>(B[m
ok 11 - pre-rebase got correct input (4)(B[m
ok 602 - setup match file test for (B[m
ok 917 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 603 - wildmatch: no match '' '\'(B[m
ok 918 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
[33mnot ok 604 - wildmatch (via ls-files): no match skip '\' '' # TODO known breakage(B[m
ok 605 - iwildmatch: no match '' '\'(B[m
ok 919 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
[33mnot ok 606 - iwildmatch (via ls-files): no match skip '\' '' # TODO known breakage(B[m
ok 607 - pathmatch: no match '' '\'(B[m
[33mnot ok 608 - pathmatch (via ls-files): no match skip '\' '' # TODO known breakage(B[m
ok 2 - creating many notes with git-notes(B[m
ok 609 - ipathmatch: no match '' '\'(B[m
[33mnot ok 610 - ipathmatch (via ls-files): no match skip '\' '' # TODO known breakage(B[m
ok 611 - cleanup after previous file test(B[m
ok 3 - many notes created correctly with git-notes(B[m
ok 612 - setup match file test for \(B[m
ok 920 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=lf(B[m
ok 613 - wildmatch: no match '\' '\'(B[m
ok 921 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
ok 614 - wildmatch (via ls-files): match '\' '\'(B[m
ok 28 - -p handles "no changes" gracefully(B[m
ok 922 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 615 - iwildmatch: no match '\' '\'(B[m
ok 923 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 616 - iwildmatch (via ls-files): match '\' '\'(B[m
ok 924 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 617 - pathmatch: no match '\' '\'(B[m
ok 925 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 618 - pathmatch (via ls-files): match '\' '\'(B[m
ok 619 - ipathmatch: no match '\' '\'(B[m
ok 620 - ipathmatch (via ls-files): match '\' '\'(B[m
ok 621 - cleanup after previous file test(B[m
ok 926 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=lf(B[m
ok 622 - setup match file test for XXX/\(B[m
ok 623 - wildmatch: no match 'XXX/\' '*/\'(B[m
ok 927 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF(B[m
ok 624 - wildmatch (via ls-files): no match '*/\' 'XXX/\'(B[m
ok 928 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 625 - iwildmatch: no match 'XXX/\' '*/\'(B[m
ok 929 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 626 - iwildmatch (via ls-files): no match '*/\' 'XXX/\'(B[m
ok 930 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 627 - pathmatch: no match 'XXX/\' '*/\'(B[m
ok 39 - git checkout -f --recurse-submodules: replace submodule with a file ignoring ignored files(B[m
ok 13 - notes tree still has fanout after merge (m)(B[m
ok 931 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 628 - pathmatch (via ls-files): no match '*/\' 'XXX/\'(B[m
ok 629 - ipathmatch: no match 'XXX/\' '*/\'(B[m
ok 630 - ipathmatch (via ls-files): no match '*/\' 'XXX/\'(B[m
ok 2 - squash F1 into D1(B[m
ok 48 - git read-tree -u -m: modified submodule does not update submodule work tree to invalid commit(B[m
ok 631 - cleanup after previous file test(B[m
ok 932 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf(B[m
ok 632 - setup match file test for XXX/\(B[m
ok 633 - wildmatch: match 'XXX/\' '*/\\'(B[m
ok 933 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF(B[m
ok 14 - successful merge using "theirs" strategy (z => w)(B[m
ok 934 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 634 - wildmatch (via ls-files): match '*/\\' 'XXX/\'(B[m
ok 635 - iwildmatch: match 'XXX/\' '*/\\'(B[m
ok 935 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 636 - iwildmatch (via ls-files): match '*/\\' 'XXX/\'(B[m
ok 936 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 637 - pathmatch: match 'XXX/\' '*/\\'(B[m
ok 937 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 638 - pathmatch (via ls-files): match '*/\\' 'XXX/\'(B[m
ok 639 - ipathmatch: match 'XXX/\' '*/\\'(B[m
ok 640 - ipathmatch (via ls-files): match '*/\\' 'XXX/\'(B[m
ok 641 - cleanup after previous file test(B[m
[33mnot ok 29 - exchange two commits with -p # TODO known breakage(B[m
ok 938 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=lf(B[m
ok 642 - setup match file test for foo(B[m
ok 643 - wildmatch: match 'foo' 'foo'(B[m
ok 939 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF(B[m
ok 644 - wildmatch (via ls-files): match 'foo' 'foo'(B[m
ok 940 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 40 - git checkout -f --recurse-submodules: modified submodule does update submodule work tree from invalid commit(B[m
ok 645 - iwildmatch: match 'foo' 'foo'(B[m
ok 2 - skip same-resolution merges with -p(B[m
ok 941 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 646 - iwildmatch (via ls-files): match 'foo' 'foo'(B[m
ok 942 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 647 - pathmatch: match 'foo' 'foo'(B[m
ok 943 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 648 - pathmatch (via ls-files): match 'foo' 'foo'(B[m
ok 649 - ipathmatch: match 'foo' 'foo'(B[m
ok 650 - ipathmatch (via ls-files): match 'foo' 'foo'(B[m
ok 651 - cleanup after previous file test(B[m
ok 652 - setup match file test for @foo(B[m
ok 944 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 653 - wildmatch: match '@foo' '@foo'(B[m
ok 945 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
ok 654 - wildmatch (via ls-files): match '@foo' '@foo'(B[m
ok 946 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 655 - iwildmatch: match '@foo' '@foo'(B[m
ok 947 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 656 - iwildmatch (via ls-files): match '@foo' '@foo'(B[m
ok 948 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 657 - pathmatch: match '@foo' '@foo'(B[m
ok 949 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 3 - rebase -p preserves no-ff merges(B[m
ok 658 - pathmatch (via ls-files): match '@foo' '@foo'(B[m
ok 659 - ipathmatch: match '@foo' '@foo'(B[m
ok 12 - rebase -i -p with linear history(B[m
ok 20 - test notes in 2/38-fanout concatenated with 2/2/36-fanout(B[m
ok 660 - ipathmatch (via ls-files): match '@foo' '@foo'(B[m
ok 49 - git read-tree -u -m: modified submodule does not update submodule work tree from invalid commit(B[m
ok 13 - pre-rebase got correct input (5)(B[m
ok 21 - verify notes in 2/38-fanout concatenated with 2/2/36-fanout(B[m
ok 661 - cleanup after previous file test(B[m
ok 662 - setup match file test for foo(B[m
ok 950 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 663 - wildmatch: no match 'foo' '@foo'(B[m
ok 14 - set up merge history(B[m
ok 951 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 664 - wildmatch (via ls-files): no match '@foo' 'foo'(B[m
ok 952 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 665 - iwildmatch: no match 'foo' '@foo'(B[m
ok 953 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 666 - iwildmatch (via ls-files): no match '@foo' 'foo'(B[m
ok 954 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 667 - pathmatch: no match 'foo' '@foo'(B[m
ok 955 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 668 - pathmatch (via ls-files): no match '@foo' 'foo'(B[m
ok 669 - ipathmatch: no match 'foo' '@foo'(B[m
ok 670 - ipathmatch (via ls-files): no match '@foo' 'foo'(B[m
ok 41 - git checkout -f --recurse-submodules: updating submodules fixes .git links(B[m
ok 671 - cleanup after previous file test(B[m
ok 672 - setup match file test for [ab](B[m
ok 956 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 50 - git read-tree -u -m: added submodule doesn't remove untracked unignored file with same name(B[m
ok 673 - wildmatch: match '[ab]' '\[ab]'(B[m
ok 957 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
ok 674 - wildmatch (via ls-files): match '\[ab]' '[ab]'(B[m
ok 958 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 675 - iwildmatch: match '[ab]' '\[ab]'(B[m
ok 959 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 676 - iwildmatch (via ls-files): match '\[ab]' '[ab]'(B[m
ok 960 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 677 - pathmatch: match '[ab]' '\[ab]'(B[m
ok 961 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 678 - pathmatch (via ls-files): match '\[ab]' '[ab]'(B[m
ok 679 - ipathmatch: match '[ab]' '\[ab]'(B[m
ok 680 - ipathmatch (via ls-files): match '\[ab]' '[ab]'(B[m
ok 681 - cleanup after previous file test(B[m
ok 682 - setup match file test for [ab](B[m
ok 962 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 15 - notes tree still has fanout after merge (m)(B[m
ok 683 - wildmatch: match '[ab]' '[[]ab]'(B[m
ok 963 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 684 - wildmatch (via ls-files): match '[[]ab]' '[ab]'(B[m
ok 685 - iwildmatch: match '[ab]' '[[]ab]'(B[m
ok 964 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 965 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 686 - iwildmatch (via ls-files): match '[[]ab]' '[ab]'(B[m
ok 687 - pathmatch: match '[ab]' '[[]ab]'(B[m
ok 966 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 688 - pathmatch (via ls-files): match '[[]ab]' '[ab]'(B[m
ok 967 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 16 - successful merge using "union" strategy (z => w)(B[m
ok 689 - ipathmatch: match '[ab]' '[[]ab]'(B[m
ok 690 - ipathmatch (via ls-files): match '[[]ab]' '[ab]'(B[m
ok 691 - cleanup after previous file test(B[m
ok 692 - setup match file test for [ab](B[m
ok 968 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=lf(B[m
ok 693 - wildmatch: match '[ab]' '[[:]ab]'(B[m
ok 969 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF(B[m
ok 694 - wildmatch (via ls-files): match '[[:]ab]' '[ab]'(B[m
ok 695 - iwildmatch: match '[ab]' '[[:]ab]'(B[m
ok 970 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 971 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 696 - iwildmatch (via ls-files): match '[[:]ab]' '[ab]'(B[m
ok 697 - pathmatch: match '[ab]' '[[:]ab]'(B[m
ok 972 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 698 - pathmatch (via ls-files): match '[[:]ab]' '[ab]'(B[m
ok 973 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 699 - ipathmatch: match '[ab]' '[[:]ab]'(B[m
ok 42 - git checkout -f --recurse-submodules: changed submodule worktree is reset(B[m
ok 700 - ipathmatch (via ls-files): match '[[:]ab]' '[ab]'(B[m
ok 701 - cleanup after previous file test(B[m
ok 51 - git read-tree -u --reset: added submodule creates empty directory(B[m
ok 702 - setup match file test for [ab](B[m
ok 974 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf(B[m
ok 703 - wildmatch: no match '[ab]' '[[::]ab]'(B[m
ok 975 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF(B[m
ok 704 - wildmatch (via ls-files): no match '[[::]ab]' '[ab]'(B[m
ok 976 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 705 - iwildmatch: no match '[ab]' '[[::]ab]'(B[m
ok 977 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 706 - iwildmatch (via ls-files): no match '[[::]ab]' '[ab]'(B[m
ok 707 - pathmatch: no match '[ab]' '[[::]ab]'(B[m
ok 978 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 708 - pathmatch (via ls-files): no match '[[::]ab]' '[ab]'(B[m
ok 979 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 709 - ipathmatch: no match '[ab]' '[[::]ab]'(B[m
ok 710 - ipathmatch (via ls-files): no match '[[::]ab]' '[ab]'(B[m
ok 711 - cleanup after previous file test(B[m
ok 712 - setup match file test for [ab](B[m
ok 980 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=lf(B[m
ok 713 - wildmatch: match '[ab]' '[[:digit]ab]'(B[m
ok 4 - rebase -p ignores merge.log config(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 981 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF(B[m
ok 714 - wildmatch (via ls-files): match '[[:digit]ab]' '[ab]'(B[m
*** t3413-rebase-hook.sh ***
ok 982 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 715 - iwildmatch: match '[ab]' '[[:digit]ab]'(B[m
ok 983 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 716 - iwildmatch (via ls-files): match '[[:digit]ab]' '[ab]'(B[m
ok 984 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 717 - pathmatch: match '[ab]' '[[:digit]ab]'(B[m
ok 22 - test notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout(B[m
ok 985 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 718 - pathmatch (via ls-files): match '[[:digit]ab]' '[ab]'(B[m
ok 23 - verify notes in 2/2/36-fanout concatenated with 2/2/2/34-fanout(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
ok 719 - ipathmatch: match '[ab]' '[[:digit]ab]'(B[m
ok 720 - ipathmatch (via ls-files): match '[[:digit]ab]' '[ab]'(B[m
*** t3414-rebase-preserve-onto.sh ***
ok 721 - cleanup after previous file test(B[m
ok 986 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 722 - setup match file test for [ab](B[m
ok 723 - wildmatch: match '[ab]' '[\[:]ab]'(B[m
ok 987 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 1 - setup(B[m
ok 988 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 724 - wildmatch (via ls-files): match '[\[:]ab]' '[ab]'(B[m
ok 725 - iwildmatch: match '[ab]' '[\[:]ab]'(B[m
ok 989 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 726 - iwildmatch (via ls-files): match '[\[:]ab]' '[ab]'(B[m
ok 990 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 2 - rebase(B[m
ok 727 - pathmatch: match '[ab]' '[\[:]ab]'(B[m
ok 3 - keep different-resolution merges with -p(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 991 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 728 - pathmatch (via ls-files): match '[\[:]ab]' '[ab]'(B[m
*** t3415-rebase-autosquash.sh ***
ok 43 - git checkout: added submodule creates empty directory(B[m
ok 729 - ipathmatch: match '[ab]' '[\[:]ab]'(B[m
ok 3 - rebase -i(B[m
ok 730 - ipathmatch (via ls-files): match '[\[:]ab]' '[ab]'(B[m
ok 4 - setup pre-rebase hook(B[m
ok 731 - cleanup after previous file test(B[m
ok 3 - rebase two levels of merge(B[m
ok 732 - setup match file test for ?a?b(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 992 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 52 - git read-tree -u --reset: added submodule leaves existing empty directory alone(B[m
ok 5 - pre-rebase hook gets correct input (1)(B[m
ok 733 - wildmatch: match '?a?b' '\??\?b'(B[m
*** t3416-rebase-onto-threedots.sh ***
ok 15 - rebase -i -p with merge(B[m
ok 993 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 734 - wildmatch (via ls-files): match '\??\?b' '?a?b'(B[m
ok 994 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 735 - iwildmatch: match '?a?b' '\??\?b'(B[m
ok 995 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 6 - pre-rebase hook gets correct input (2)(B[m
ok 736 - iwildmatch (via ls-files): match '\??\?b' '?a?b'(B[m
ok 1 - setup(B[m
ok 996 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 737 - pathmatch: match '?a?b' '\??\?b'(B[m
ok 16 - set up second root and merge(B[m
ok 1 - setup(B[m
ok 997 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 17 - notes tree still has fanout after merge (m)(B[m
ok 738 - pathmatch (via ls-files): match '\??\?b' '?a?b'(B[m
ok 739 - ipathmatch: match '?a?b' '\??\?b'(B[m
ok 7 - pre-rebase hook gets correct input (3)(B[m
ok 740 - ipathmatch (via ls-files): match '\??\?b' '?a?b'(B[m
ok 741 - cleanup after previous file test(B[m
ok 8 - pre-rebase hook gets correct input (4)(B[m
ok 998 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 2 - auto fixup (option)(B[m
ok 742 - setup match file test for abc(B[m
ok 743 - wildmatch: match 'abc' '\a\b\c'(B[m
ok 999 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 18 - successful merge using "cat_sort_uniq" strategy (z => w)(B[m
ok 744 - wildmatch (via ls-files): match '\a\b\c' 'abc'(B[m
ok 1000 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 30 - preserve merges with -p(B[m
ok 9 - pre-rebase hook gets correct input (5)(B[m
ok 745 - iwildmatch: match 'abc' '\a\b\c'(B[m
ok 1001 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 746 - iwildmatch (via ls-files): match '\a\b\c' 'abc'(B[m
ok 1002 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 747 - pathmatch: match 'abc' '\a\b\c'(B[m
ok 1003 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 748 - pathmatch (via ls-files): match '\a\b\c' 'abc'(B[m
ok 10 - pre-rebase hook gets correct input (6)(B[m
ok 749 - ipathmatch: match 'abc' '\a\b\c'(B[m
ok 11 - setup pre-rebase hook that fails(B[m
ok 750 - ipathmatch (via ls-files): match '\a\b\c' 'abc'(B[m
ok 751 - cleanup after previous file test(B[m
ok 12 - pre-rebase hook stops rebase (1)(B[m
ok 752 - setup match file test for foo(B[m
ok 1004 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 753 - wildmatch: no match 'foo' ''(B[m
ok 1005 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 754 - wildmatch (via ls-files): match dies on '' 'foo'(B[m
ok 1006 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 13 - pre-rebase hook stops rebase (2)(B[m
ok 755 - iwildmatch: no match 'foo' ''(B[m
ok 3 - auto fixup (config)(B[m
ok 1 - setup(B[m
ok 1007 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 756 - iwildmatch (via ls-files): match dies on '' 'foo'(B[m
ok 757 - pathmatch: no match 'foo' ''(B[m
ok 1008 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 758 - pathmatch (via ls-files): match dies on '' 'foo'(B[m
ok 14 - rebase --no-verify overrides pre-rebase (1)(B[m
ok 1009 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 759 - ipathmatch: no match 'foo' ''(B[m
ok 760 - ipathmatch (via ls-files): match dies on '' 'foo'(B[m
ok 44 - git checkout: added submodule leaves existing empty directory alone(B[m
ok 2 - rebase --onto master...topic(B[m
ok 761 - cleanup after previous file test(B[m
ok 15 - rebase --no-verify overrides pre-rebase (2)(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 4 - auto squash (option)(B[m
*** t3417-rebase-whitespace-fix.sh ***
ok 762 - setup match file test for foo/bar/baz/to(B[m
ok 763 - wildmatch: match 'foo/bar/baz/to' '**/t[o]'(B[m
ok 1010 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=lf(B[m
ok 3 - rebase --onto master...(B[m
ok 53 - git read-tree -u --reset: replace tracked file with submodule creates empty directory(B[m
ok 764 - wildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'(B[m
ok 1011 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF(B[m
ok 765 - iwildmatch: match 'foo/bar/baz/to' '**/t[o]'(B[m
ok 1012 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 4 - rebase --onto master...side(B[m
ok 766 - iwildmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'(B[m
ok 1013 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 767 - pathmatch: match 'foo/bar/baz/to' '**/t[o]'(B[m
ok 1014 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 768 - pathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'(B[m
ok 1015 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 769 - ipathmatch: match 'foo/bar/baz/to' '**/t[o]'(B[m
ok 770 - ipathmatch (via ls-files): match '**/t[o]' 'foo/bar/baz/to'(B[m
ok 5 - rebase -i --onto master...topic(B[m
ok 771 - cleanup after previous file test(B[m
ok 772 - setup match file test for a1B(B[m
ok 1 - blank line at end of file; extend at end of file(B[m
ok 773 - wildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'(B[m
ok 1016 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf(B[m
ok 774 - wildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'(B[m
ok 1017 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF(B[m
ok 775 - iwildmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'(B[m
ok 6 - rebase -i --onto master...(B[m
ok 5 - auto squash (config)(B[m
ok 1018 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 776 - iwildmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'(B[m
ok 2 - two blanks line at end of file; extend at end of file(B[m
ok 1019 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 777 - pathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'(B[m
ok 7 - rebase -i --onto master...side(B[m
ok 1020 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 778 - pathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'(B[m
ok 8 - rebase --keep-base --onto incompatible(B[m
ok 1021 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 779 - ipathmatch: match 'a1B' '[[:alpha:]][[:digit:]][[:upper:]]'(B[m
ok 9 - rebase --keep-base --root incompatible(B[m
ok 6 - misspelled auto squash(B[m
ok 780 - ipathmatch (via ls-files): match '[[:alpha:]][[:digit:]][[:upper:]]' 'a1B'(B[m
ok 3 - same, but do not remove trailing spaces(B[m
ok 781 - cleanup after previous file test(B[m
ok 782 - setup match file test for a(B[m
ok 10 - rebase --keep-base master from topic(B[m
ok 783 - wildmatch: no match 'a' '[[:digit:][:upper:][:space:]]'(B[m
ok 1022 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=lf(B[m
ok 784 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'(B[m
ok 1023 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF(B[m
ok 785 - iwildmatch: match 'a' '[[:digit:][:upper:][:space:]]'(B[m
ok 11 - rebase --keep-base master from side(B[m
ok 4 - at beginning of file(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 1024 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
*** t3418-rebase-continue.sh ***
ok 786 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'(B[m
ok 1025 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 787 - pathmatch: no match 'a' '[[:digit:][:upper:][:space:]]'(B[m
ok 7 - auto squash that matches 2 commits(B[m
ok 1026 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 788 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:space:]]' 'a'(B[m
ok 789 - ipathmatch: match 'a' '[[:digit:][:upper:][:space:]]'(B[m
ok 1027 - checkout attr= ident aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 790 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'a'(B[m
ok 12 - rebase -i --keep-base master from topic(B[m
ok 45 - git checkout: replace tracked file with submodule creates empty directory(B[m
ok 791 - cleanup after previous file test(B[m
ok 792 - setup match file test for A(B[m
ok 13 - rebase -i --keep-base master from side(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 793 - wildmatch: match 'A' '[[:digit:][:upper:][:space:]]'(B[m
ok 1028 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=lf(B[m
*** t3419-rebase-patch-id.sh ***
ok 54 - git read-tree -u --reset: replace directory with submodule(B[m
ok 794 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'(B[m
ok 1029 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 8 - auto squash that matches a commit after the squash(B[m
ok 795 - iwildmatch: match 'A' '[[:digit:][:upper:][:space:]]'(B[m
ok 19 - notes tree still has fanout after merge (m)(B[m
ok 1030 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 1 - setup(B[m
ok 796 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'(B[m
ok 1031 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 797 - pathmatch: match 'A' '[[:digit:][:upper:][:space:]]'(B[m
ok 20 - fails to merge using "manual" strategy (z => w)(B[m
ok 1032 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 798 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'(B[m
ok 31 - edit ancestor with -p(B[m
ok 1033 - checkout attr= ident aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 799 - ipathmatch: match 'A' '[[:digit:][:upper:][:space:]]'(B[m
ok 1 - setup(B[m
ok 800 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' 'A'(B[m
ok 2 - interactive rebase --continue works with touched file(B[m
ok 9 - auto squash that matches a sha1(B[m
ok 801 - cleanup after previous file test(B[m
ok 802 - setup match file test for 1(B[m
ok 803 - wildmatch: match '1' '[[:digit:][:upper:][:space:]]'(B[m
ok 1034 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=lf(B[m
ok 32 - --continue tries to commit(B[m
ok 804 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'(B[m
ok 1035 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 3 - non-interactive rebase --continue works with touched file(B[m
ok 805 - iwildmatch: match '1' '[[:digit:][:upper:][:space:]]'(B[m
ok 2 - setup: 500 lines(B[m
ok 1036 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
ok 3 - setup attributes(B[m
ok 4 - rebase --continue can not be used with other options(B[m
ok 806 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'(B[m
ok 1037 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 807 - pathmatch: match '1' '[[:digit:][:upper:][:space:]]'(B[m
ok 33 - verbose flag is heeded, even after --continue(B[m
ok 10 - auto squash that matches longer sha1(B[m
ok 1038 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 808 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'(B[m
ok 1039 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 809 - ipathmatch: match '1' '[[:digit:][:upper:][:space:]]'(B[m
ok 810 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' '1'(B[m
ok 4 - detect upstream patch(B[m
ok 811 - cleanup after previous file test(B[m
ok 812 - setup match file test for 1(B[m
ok 11 - use commit --fixup(B[m
ok 5 - rebase --continue remembers merge strategy and options(B[m
ok 34 - multi-squash only fires up editor once(B[m
ok 813 - wildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'(B[m
ok 1040 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=lf(B[m
ok 2 - rebase from B1 onto H1(B[m
ok 5 - do not drop patch(B[m
ok 1041 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF(B[m
ok 814 - wildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'(B[m
[34mok 6 # skip setup: 50000 lines (missing EXPENSIVE)(B[m
[34mok 7 # skip setup attributes (missing EXPENSIVE)(B[m
[34mok 8 # skip detect upstream patch (missing EXPENSIVE)(B[m
[34mok 9 # skip do not drop patch (missing EXPENSIVE)(B[m
ok 815 - iwildmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'(B[m
ok 1042 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
*** t3420-rebase-autostash.sh ***
ok 1043 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=CRLF_mix_LF(B[m
ok 816 - iwildmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'(B[m
ok 817 - pathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'(B[m
ok 1044 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_mix_CR(B[m
ok 818 - pathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'(B[m
ok 1045 - checkout attr=text ident aeol= core.autocrlf=true core.eol=lf file=LF_nul(B[m
ok 55 - git read-tree -u --reset: removed submodule leaves submodule directory and its contents in place(B[m
ok 819 - ipathmatch: no match '1' '[[:digit:][:upper:][:spaci:]]'(B[m
ok 12 - use commit --squash(B[m
ok 35 - multi-fixup does not fire up editor(B[m
ok 820 - ipathmatch (via ls-files): no match '[[:digit:][:upper:][:spaci:]]' '1'(B[m
ok 6 - rebase -i --continue handles merge strategy and options(B[m
ok 46 - git checkout: replace directory with submodule(B[m
ok 821 - cleanup after previous file test(B[m
ok 822 - setup match file test for  (B[m
ok 17 - rebase -i -p with two roots(B[m
ok 823 - wildmatch: match ' ' '[[:digit:][:upper:][:space:]]'(B[m
ok 1046 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=lf(B[m
ok 18 - setup pre-rebase hook that fails(B[m
ok 1047 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF(B[m
ok 824 - wildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '(B[m
ok 825 - iwildmatch: match ' ' '[[:digit:][:upper:][:space:]]'(B[m
ok 1048 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 19 - pre-rebase hook stops rebase(B[m
ok 826 - iwildmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '(B[m
ok 1049 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 827 - pathmatch: match ' ' '[[:digit:][:upper:][:space:]]'(B[m
ok 1 - setup(B[m
ok 1050 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
ok 36 - commit message used after conflict(B[m
ok 20 - pre-rebase hook stops rebase -i(B[m
ok 828 - pathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '(B[m
ok 1051 - checkout attr=text ident aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 21 - remove pre-rebase hook(B[m
ok 829 - ipathmatch: match ' ' '[[:digit:][:upper:][:space:]]'(B[m
ok 13 - fixup! fixup!(B[m
ok 830 - ipathmatch (via ls-files): match '[[:digit:][:upper:][:space:]]' ' '(B[m
ok 22 - set up a conflict(B[m
ok 831 - cleanup after previous file test(B[m
ok 832 - setup match file test for .(B[m
ok 23 - rebase --root with conflict (first part)(B[m
ok 833 - wildmatch: no match '.' '[[:digit:][:upper:][:space:]]'(B[m
ok 2 - rebase: fast-forward rebase(B[m
ok 1052 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=lf(B[m
ok 24 - fix the conflict(B[m
[33mnot ok 834 - wildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage(B[m
ok 1053 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF(B[m
ok 835 - iwildmatch: no match '.' '[[:digit:][:upper:][:space:]]'(B[m
[33mnot ok 836 - iwildmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage(B[m
ok 1054 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF(B[m
ok 837 - pathmatch: no match '.' '[[:digit:][:upper:][:space:]]'(B[m
ok 25 - rebase --root with conflict (second part)(B[m
[33mnot ok 838 - pathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage(B[m
ok 1055 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=CRLF_mix_LF(B[m
ok 37 - commit message retained after conflict(B[m
ok 839 - ipathmatch: no match '.' '[[:digit:][:upper:][:space:]]'(B[m
ok 1056 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_mix_CR(B[m
[33mnot ok 840 - ipathmatch (via ls-files): no match skip '[[:digit:][:upper:][:space:]]' '.' # TODO known breakage(B[m
ok 841 - cleanup after previous file test(B[m
ok 26 - rebase -i --root with conflict (first part)(B[m
ok 1057 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=lf file=LF_nul(B[m
ok 3 - rebase: noop rebase(B[m
ok 842 - setup match file test for .(B[m
ok 27 - fix the conflict(B[m
ok 843 - wildmatch: match '.' '[[:digit:][:punct:][:space:]]'(B[m
[33mnot ok 844 - wildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage(B[m
ok 14 - fixup! squash!(B[m
ok 845 - iwildmatch: match '.' '[[:digit:][:punct:][:space:]]'(B[m
[33mnot ok 846 - iwildmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage(B[m
ok 28 - rebase -i --root with conflict (second part)(B[m
ok 4 - rebase --apply: dirty worktree, --no-autostash(B[m
ok 847 - pathmatch: match '.' '[[:digit:][:punct:][:space:]]'(B[m
[33mnot ok 848 - pathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage(B[m
ok 1058 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=crlf(B[m
ok 849 - ipathmatch: match '.' '[[:digit:][:punct:][:space:]]'(B[m
[33mnot ok 850 - ipathmatch (via ls-files): match skip '[[:digit:][:punct:][:space:]]' '.' # TODO known breakage(B[m
ok 851 - cleanup after previous file test(B[m
ok 1059 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 38 - squash and fixup generate correct log messages(B[m
ok 1060 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 852 - setup match file test for 5(B[m
ok 47 - git checkout: removed submodule leaves submodule directory and its contents in place(B[m
ok 853 - wildmatch: match '5' '[[:xdigit:]]'(B[m
ok 56 - git read-tree -u --reset: removed submodule leaves submodule containing a .git directory alone(B[m
ok 1061 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 21 - notes tree still has fanout after merge (m)(B[m
ok 854 - wildmatch (via ls-files): match '[[:xdigit:]]' '5'(B[m
ok 1062 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 5 - rebase --apply: dirty worktree, non-conflicting rebase(B[m
ok 855 - iwildmatch: match '5' '[[:xdigit:]]'(B[m
ok 1063 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 22 - verify conflict entries (with no fanout)(B[m
ok 856 - iwildmatch (via ls-files): match '[[:xdigit:]]' '5'(B[m
ok 857 - pathmatch: match '5' '[[:xdigit:]]'(B[m
ok 6 - rebase --apply --autostash: check output(B[m
ok 15 - squash! squash!(B[m
ok 858 - pathmatch (via ls-files): match '[[:xdigit:]]' '5'(B[m
ok 859 - ipathmatch: match '5' '[[:xdigit:]]'(B[m
ok 39 - squash ignores comments(B[m
ok 860 - ipathmatch (via ls-files): match '[[:xdigit:]]' '5'(B[m
ok 1064 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 23 - resolve and finalize merge (z => w)(B[m
ok 1065 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 861 - cleanup after previous file test(B[m
ok 1066 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 862 - setup match file test for f(B[m
ok 1067 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 863 - wildmatch: match 'f' '[[:xdigit:]]'(B[m
ok 7 - rebase --apply: dirty index, non-conflicting rebase(B[m
ok 1068 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 864 - wildmatch (via ls-files): match '[[:xdigit:]]' 'f'(B[m
ok 1069 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 865 - iwildmatch: match 'f' '[[:xdigit:]]'(B[m
ok 866 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'f'(B[m
ok 40 - squash ignores blank lines(B[m
ok 867 - pathmatch: match 'f' '[[:xdigit:]]'(B[m
ok 868 - pathmatch (via ls-files): match '[[:xdigit:]]' 'f'(B[m
ok 16 - squash! fixup!(B[m
ok 869 - ipathmatch: match 'f' '[[:xdigit:]]'(B[m
ok 8 - rebase --apply: conflicting rebase(B[m
ok 1070 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 870 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'f'(B[m
ok 1071 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 871 - cleanup after previous file test(B[m
ok 29 - rebase -i -p --root with conflict (first part)(B[m
ok 1072 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 41 - squash works as expected(B[m
ok 30 - fix the conflict(B[m
ok 872 - setup match file test for D(B[m
ok 1073 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 873 - wildmatch: match 'D' '[[:xdigit:]]'(B[m
ok 1074 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 874 - wildmatch (via ls-files): match '[[:xdigit:]]' 'D'(B[m
ok 875 - iwildmatch: match 'D' '[[:xdigit:]]'(B[m
ok 1075 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
[33mnot ok 57 - git read-tree -u --reset: replace submodule with a directory must fail # TODO known breakage(B[m
ok 876 - iwildmatch (via ls-files): match '[[:xdigit:]]' 'D'(B[m
ok 3 - rebase from E1 onto H1(B[m
ok 877 - pathmatch: match 'D' '[[:xdigit:]]'(B[m
ok 17 - autosquash with custom inst format(B[m
ok 9 - rebase --apply: --continue(B[m
ok 7 - rebase passes merge strategy options correctly(B[m
ok 878 - pathmatch (via ls-files): match '[[:xdigit:]]' 'D'(B[m
ok 879 - ipathmatch: match 'D' '[[:xdigit:]]'(B[m
ok 48 - git checkout: removed submodule leaves submodule containing a .git directory alone(B[m
ok 42 - interrupted squash works as expected(B[m
ok 1076 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 880 - ipathmatch (via ls-files): match '[[:xdigit:]]' 'D'(B[m
ok 1077 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 881 - cleanup after previous file test(B[m
ok 18 - autosquash with empty custom instructionFormat(B[m
ok 1078 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 882 - setup match file test for _(B[m
ok 1079 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 883 - wildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'(B[m
ok 1080 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 884 - wildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'(B[m
ok 1081 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 885 - iwildmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'(B[m
ok 10 - rebase --apply: --skip(B[m
ok 886 - iwildmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'(B[m
ok 19 - autosquash with multiple empty patches(B[m
ok 887 - pathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'(B[m
ok 888 - pathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'(B[m
ok 8 - rebase -r passes merge strategy options correctly(B[m
ok 43 - interrupted squash works as expected (case 2)(B[m
ok 889 - ipathmatch: match '_' '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]'(B[m
ok 1082 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 890 - ipathmatch (via ls-files): match '[[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:graph:][:lower:][:print:][:punct:][:space:][:upper:][:xdigit:]]' '_'(B[m
ok 20 - extra spaces after fixup!(B[m
ok 1083 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 891 - cleanup after previous file test(B[m
ok 1084 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 892 - setup match file test for .(B[m
ok 11 - rebase --apply: --abort(B[m
ok 893 - wildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'(B[m
ok 1085 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
[33mnot ok 894 - wildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage(B[m
ok 895 - iwildmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'(B[m
ok 1086 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
[33mnot ok 896 - iwildmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage(B[m
ok 21 - wrapped original subject(B[m
ok 897 - pathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'(B[m
ok 1087 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
[33mnot ok 898 - pathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage(B[m
ok 44 - --continue tries to commit, even for "edit"(B[m
ok 899 - ipathmatch: match '.' '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]'(B[m
[33mnot ok 900 - ipathmatch (via ls-files): match skip '[^[:alnum:][:alpha:][:blank:][:cntrl:][:digit:][:lower:][:space:][:upper:][:xdigit:]]' '.' # TODO known breakage(B[m
ok 901 - cleanup after previous file test(B[m
ok 902 - setup match file test for 5(B[m
[33mnot ok 58 - git read-tree -u --reset: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 903 - wildmatch: match '5' '[a-c[:digit:]x-z]'(B[m
ok 1088 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf(B[m
ok 904 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'(B[m
ok 12 - rebase --apply: non-conflicting rebase, conflicting stash(B[m
ok 1089 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 905 - iwildmatch: match '5' '[a-c[:digit:]x-z]'(B[m
ok 45 - aborted --continue does not squash commits after "edit"(B[m
ok 1090 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 13 - rebase --apply: check output with conflicting stash(B[m
ok 906 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'(B[m
ok 907 - pathmatch: match '5' '[a-c[:digit:]x-z]'(B[m
ok 1091 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 22 - abort last squash(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 1092 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 49 - git checkout: replace submodule with a directory must fail(B[m
ok 908 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'(B[m
*** t3421-rebase-topology-linear.sh ***
ok 909 - ipathmatch: match '5' '[a-c[:digit:]x-z]'(B[m
ok 1093 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 14 - rebase --merge: dirty worktree, --no-autostash(B[m
ok 910 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' '5'(B[m
ok 46 - auto-amend only edited commits after "edit"(B[m
ok 911 - cleanup after previous file test(B[m
ok 9 - --skip after failed fixup cleans commit message(B[m
ok 912 - setup match file test for b(B[m
ok 913 - wildmatch: match 'b' '[a-c[:digit:]x-z]'(B[m
ok 1094 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf(B[m
ok 24 - notes tree still has fanout after merge (m)(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 914 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'(B[m
ok 1095 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF(B[m
ok 15 - rebase --merge: dirty worktree, non-conflicting rebase(B[m
ok 915 - iwildmatch: match 'b' '[a-c[:digit:]x-z]'(B[m
ok 47 - clean error after failed "exec"(B[m
ok 1096 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 916 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'(B[m
ok 16 - rebase --merge --autostash: check output(B[m
ok 1097 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 917 - pathmatch: match 'b' '[a-c[:digit:]x-z]'(B[m
ok 1098 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 918 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'(B[m
ok 1099 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 919 - ipathmatch: match 'b' '[a-c[:digit:]x-z]'(B[m
*** t3422-rebase-incompatible-options.sh ***
ok 920 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'b'(B[m
ok 1 - setup(B[m
ok 48 - rebase a detached HEAD(B[m
ok 10 - setup rerere database(B[m
ok 921 - cleanup after previous file test(B[m
ok 922 - setup match file test for y(B[m
ok 17 - rebase --merge: dirty index, non-conflicting rebase(B[m
ok 1100 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=crlf(B[m
ok 923 - wildmatch: match 'y' '[a-c[:digit:]x-z]'(B[m
ok 1101 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 924 - wildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'(B[m
ok 2 - simple rebase --apply(B[m
ok 925 - iwildmatch: match 'y' '[a-c[:digit:]x-z]'(B[m
ok 1102 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
[33mnot ok 59 - git read-tree -u --reset: replace submodule with a file must fail # TODO known breakage(B[m
ok 49 - rebase a commit violating pre-commit(B[m
ok 1103 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 926 - iwildmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'(B[m
ok 927 - pathmatch: match 'y' '[a-c[:digit:]x-z]'(B[m
ok 1104 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 11 - rebase  --continue remembers --rerere-autoupdate(B[m
ok 18 - rebase --merge: conflicting rebase(B[m
ok 1 - setup(B[m
ok 928 - pathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'(B[m
ok 1105 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 929 - ipathmatch: match 'y' '[a-c[:digit:]x-z]'(B[m
ok 2 - --whitespace=fix incompatible with --merge(B[m
ok 3 - simple rebase -m(B[m
ok 930 - ipathmatch (via ls-files): match '[a-c[:digit:]x-z]' 'y'(B[m
ok 3 - --whitespace=fix incompatible with --strategy=ours(B[m
ok 4 - --whitespace=fix incompatible with --strategy-option=ours(B[m
ok 931 - cleanup after previous file test(B[m
ok 5 - --whitespace=fix incompatible with --interactive(B[m
ok 932 - setup match file test for q(B[m
ok 1106 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 50 - rebase with a file named HEAD in worktree(B[m
ok 933 - wildmatch: no match 'q' '[a-c[:digit:]x-z]'(B[m
ok 6 - --whitespace=fix incompatible with --exec(B[m
ok 4 - simple rebase -i(B[m
ok 1107 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 50 - git checkout: replace submodule containing a .git directory with a directory must fail(B[m
ok 7 - --ignore-whitespace incompatible with --merge(B[m
ok 934 - wildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'(B[m
ok 1108 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 19 - rebase --merge: --continue(B[m
ok 12 - rebase  --continue honors rerere.autoUpdate(B[m
ok 935 - iwildmatch: no match 'q' '[a-c[:digit:]x-z]'(B[m
ok 8 - --ignore-whitespace incompatible with --strategy=ours(B[m
ok 1109 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 4 - rebase from C1 onto H1(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 936 - iwildmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'(B[m
ok 9 - --ignore-whitespace incompatible with --strategy-option=ours(B[m
ok 51 - do "noop" when there is nothing to cherry-pick(B[m
*** t3423-rebase-reword.sh ***
ok 1110 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 937 - pathmatch: no match 'q' '[a-c[:digit:]x-z]'(B[m
ok 10 - --ignore-whitespace incompatible with --interactive(B[m
ok 1111 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 938 - pathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'(B[m
ok 11 - --ignore-whitespace incompatible with --exec(B[m
ok 939 - ipathmatch: no match 'q' '[a-c[:digit:]x-z]'(B[m
ok 12 - --committer-date-is-author-date incompatible with --merge(B[m
ok 940 - ipathmatch (via ls-files): no match '[a-c[:digit:]x-z]' 'q'(B[m
ok 13 - --committer-date-is-author-date incompatible with --strategy=ours(B[m
ok 20 - rebase --merge: --skip(B[m
ok 941 - cleanup after previous file test(B[m
ok 14 - --committer-date-is-author-date incompatible with --strategy-option=ours(B[m
ok 31 - rebase -i -p --root with conflict (second part)(B[m
ok 942 - setup match file test for ](B[m
ok 52 - submodule rebase setup(B[m
ok 1112 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
ok 13 - rebase  --continue remembers --no-rerere-autoupdate(B[m
ok 943 - wildmatch: match ']' '[\\-^]'(B[m
ok 15 - --committer-date-is-author-date incompatible with --interactive(B[m
*** t3424-rebase-empty.sh ***
ok 1113 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 16 - --committer-date-is-author-date incompatible with --exec(B[m
ok 944 - wildmatch (via ls-files): match '[\\-^]' ']'(B[m
ok 1114 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 945 - iwildmatch: match ']' '[\\-^]'(B[m
ok 17 - -C4 incompatible with --merge(B[m
ok 1 - setup(B[m
ok 1115 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 946 - iwildmatch (via ls-files): match '[\\-^]' ']'(B[m
ok 18 - -C4 incompatible with --strategy=ours(B[m
ok 1116 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 947 - pathmatch: match ']' '[\\-^]'(B[m
ok 53 - submodule rebase -i(B[m
ok 21 - rebase --merge: --abort(B[m
ok 19 - -C4 incompatible with --strategy-option=ours(B[m
ok 1117 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 948 - pathmatch (via ls-files): match '[\\-^]' ']'(B[m
[33mnot ok 60 - git read-tree -u --reset: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 20 - -C4 incompatible with --interactive(B[m
ok 949 - ipathmatch: match ']' '[\\-^]'(B[m
ok 21 - -C4 incompatible with --exec(B[m
ok 14 - rebase -m --continue remembers --rerere-autoupdate(B[m
ok 950 - ipathmatch (via ls-files): match '[\\-^]' ']'(B[m
ok 22 - --preserve-merges incompatible with --signoff(B[m
ok 951 - cleanup after previous file test(B[m
ok 54 - submodule conflict setup(B[m
ok 2 - reword without issues functions as intended(B[m
ok 1118 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 23 - --preserve-merges incompatible with --rebase-merges(B[m
[32m# passed all 23 test(s)(B[m
ok 952 - setup match file test for [(B[m
[36m1..23(B[m
*** t3425-rebase-topology-merges.sh ***
ok 953 - wildmatch: no match '[' '[\\-^]'(B[m
ok 1119 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 1120 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 954 - wildmatch (via ls-files): no match '[\\-^]' '['(B[m
ok 55 - rebase -i continue with only submodule staged(B[m
ok 955 - iwildmatch: no match '[' '[\\-^]'(B[m
ok 1 - setup test repository(B[m
ok 1121 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 22 - rebase --merge: non-conflicting rebase, conflicting stash(B[m
[33mnot ok 51 - git checkout: replace submodule with a file must fail # TODO known breakage(B[m
ok 956 - iwildmatch (via ls-files): no match '[\\-^]' '['(B[m
ok 1122 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 957 - pathmatch: no match '[' '[\\-^]'(B[m
ok 23 - rebase --merge: check output with conflicting stash(B[m
ok 15 - rebase -m --continue honors rerere.autoUpdate(B[m
ok 1123 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 958 - pathmatch (via ls-files): no match '[\\-^]' '['(B[m
ok 959 - ipathmatch: no match '[' '[\\-^]'(B[m
[33mnot ok 2 - rebase (apply-backend) # TODO known breakage(B[m
ok 3 - reword after a conflict preserves commit(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 56 - rebase -i continue with unstaged submodule(B[m
*** t3426-rebase-submodule.sh ***
ok 960 - ipathmatch (via ls-files): no match '[\\-^]' '['(B[m
ok 24 - rebase --interactive: dirty worktree, --no-autostash(B[m
ok 961 - cleanup after previous file test(B[m
ok 3 - rebase --merge --empty=drop(B[m
ok 1124 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf(B[m
ok 962 - setup match file test for -(B[m
ok 1125 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 963 - wildmatch: match '-' '[\-_]'(B[m
ok 57 - avoid unnecessary reset(B[m
ok 4 - rebase --merge uses default of --empty=drop(B[m
ok 1126 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 964 - wildmatch (via ls-files): match '[\-_]' '-'(B[m
ok 965 - iwildmatch: match '-' '[\-_]'(B[m
ok 1127 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 16 - rebase -m --continue remembers --no-rerere-autoupdate(B[m
ok 25 - rebase --interactive: dirty worktree, non-conflicting rebase(B[m
ok 966 - iwildmatch (via ls-files): match '[\-_]' '-'(B[m
ok 1128 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 5 - rebase --merge --empty=keep(B[m
ok 967 - pathmatch: match '-' '[\-_]'(B[m
ok 1129 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 26 - rebase --interactive --autostash: check output(B[m
ok 968 - pathmatch (via ls-files): match '[\-_]' '-'(B[m
ok 969 - ipathmatch: match '-' '[\-_]'(B[m
ok 6 - rebase --merge --empty=ask(B[m
ok 970 - ipathmatch (via ls-files): match '[\-_]' '-'(B[m
ok 971 - cleanup after previous file test(B[m
ok 1130 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf(B[m
ok 7 - rebase --interactive --empty=drop(B[m
ok 17 - rebase -i --continue remembers --rerere-autoupdate(B[m
ok 972 - setup match file test for ](B[m
ok 1131 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 973 - wildmatch: match ']' '[\]]'(B[m
ok 1132 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 27 - rebase --interactive: dirty index, non-conflicting rebase(B[m
ok 974 - wildmatch (via ls-files): match '[\]]' ']'(B[m
ok 8 - rebase --interactive --empty=keep(B[m
ok 975 - iwildmatch: match ']' '[\]]'(B[m
ok 1133 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 976 - iwildmatch (via ls-files): match '[\]]' ']'(B[m
ok 1134 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 977 - pathmatch: match ']' '[\]]'(B[m
ok 1135 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 978 - pathmatch (via ls-files): match '[\]]' ']'(B[m
ok 9 - rebase --interactive --empty=ask(B[m
ok 979 - ipathmatch: match ']' '[\]]'(B[m
[33mnot ok 52 - git checkout: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 28 - rebase --interactive: conflicting rebase(B[m
ok 18 - rebase -i --continue honors rerere.autoUpdate(B[m
ok 980 - ipathmatch (via ls-files): match '[\]]' ']'(B[m
ok 1 - setup of non-linear-history(B[m
ok 61 - git read-tree -u --reset: modified submodule does not update submodule work tree(B[m
ok 4 - stable fanout 0 is followed by stable fanout 1(B[m
ok 981 - cleanup after previous file test(B[m
ok 10 - rebase --interactive uses default of --empty=ask(B[m
ok 1136 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf(B[m
ok 58 - reword(B[m
ok 982 - setup match file test for \](B[m
ok 1137 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF(B[m
ok 983 - wildmatch: no match '\]' '[\]]'(B[m
ok 11 - rebase --merge does not leave state laying around(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 10 test(s)(B[m
[36m1..11(B[m
ok 1138 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF(B[m
*** t3427-rebase-subtree.sh ***
ok 984 - wildmatch (via ls-files): no match '[\]]' '\]'(B[m
ok 2 - rebase --apply after merge from upstream(B[m
ok 985 - iwildmatch: no match '\]' '[\]]'(B[m
ok 1139 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 1140 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 986 - iwildmatch (via ls-files): no match '[\]]' '\]'(B[m
ok 5 - simple rebase -p(B[m
ok 29 - rebase --interactive: --continue(B[m
ok 987 - pathmatch: no match '\]' '[\]]'(B[m
ok 1141 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 19 - rebase -i --continue remembers --no-rerere-autoupdate(B[m
ok 988 - pathmatch (via ls-files): no match '[\]]' '\]'(B[m
ok 989 - ipathmatch: no match '\]' '[\]]'(B[m
ok 3 - rebase -m after merge from upstream(B[m
ok 59 - rebase -i can copy notes(B[m
ok 990 - ipathmatch (via ls-files): no match '[\]]' '\]'(B[m
ok 6 - setup branches and remote tracking(B[m
ok 991 - cleanup after previous file test(B[m
ok 1142 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=crlf(B[m
ok 992 - setup match file test for \(B[m
ok 1143 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 30 - rebase --interactive: --skip(B[m
ok 993 - wildmatch: no match '\' '[\]]'(B[m
ok 4 - rebase -i after merge from upstream(B[m
ok 1144 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 7 - rebase --apply is no-op if upstream is an ancestor(B[m
ok 994 - wildmatch (via ls-files): no match '[\]]' '\'(B[m
ok 1145 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 995 - iwildmatch: no match '\' '[\]]'(B[m
ok 60 - rebase -i can copy notes over a fixup(B[m
ok 1146 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 996 - iwildmatch (via ls-files): no match '[\]]' '\'(B[m
ok 997 - pathmatch: no match '\' '[\]]'(B[m
ok 1147 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 8 - rebase -m is no-op if upstream is an ancestor(B[m
ok 998 - pathmatch (via ls-files): no match '[\]]' '\'(B[m
ok 5 - rebase --apply of non-linear history is linearized in place(B[m
ok 999 - ipathmatch: no match '\' '[\]]'(B[m
ok 31 - rebase --interactive: --abort(B[m
ok 9 - rebase -i is no-op if upstream is an ancestor(B[m
ok 1000 - ipathmatch (via ls-files): no match '[\]]' '\'(B[m
ok 61 - rebase while detaching HEAD(B[m
ok 1001 - cleanup after previous file test(B[m
ok 1148 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf(B[m
ok 6 - rebase -m of non-linear history is linearized in place(B[m
ok 1002 - setup match file test for ab(B[m
ok 10 - rebase -p is no-op if upstream is an ancestor(B[m
ok 1149 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 1003 - wildmatch: no match 'ab' 'a[]b'(B[m
ok 1150 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1004 - wildmatch (via ls-files): no match 'a[]b' 'ab'(B[m
ok 1 - setup(B[m
ok 1005 - iwildmatch: no match 'ab' 'a[]b'(B[m
ok 1151 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 1006 - iwildmatch (via ls-files): no match 'a[]b' 'ab'(B[m
ok 1152 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 7 - rebase -i of non-linear history is linearized in place(B[m
ok 1007 - pathmatch: no match 'ab' 'a[]b'(B[m
ok 1153 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 32 - rebase --interactive: non-conflicting rebase, conflicting stash(B[m
ok 62 - always cherry-pick with --no-ff(B[m
ok 1008 - pathmatch (via ls-files): no match 'a[]b' 'ab'(B[m
ok 11 - rebase --apply -f rewrites even if upstream is an ancestor(B[m
ok 1009 - ipathmatch: no match 'ab' 'a[]b'(B[m
ok 33 - rebase --interactive: check output with conflicting stash(B[m
ok 1010 - ipathmatch (via ls-files): no match 'a[]b' 'ab'(B[m
ok 1011 - cleanup after previous file test(B[m
ok 8 - rebase --apply of non-linear history is linearized upstream(B[m
ok 63 - set up commits with funny messages(B[m
ok 1154 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 1012 - setup match file test for a[]b(B[m
ok 53 - git checkout: modified submodule does not update submodule work tree(B[m
ok 1013 - wildmatch: no match 'a[]b' 'a[]b'(B[m
ok 1155 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 12 - rebase --fork-point -f rewrites even if upstream is an ancestor(B[m
ok 34 - abort rebase -i with --autostash(B[m
ok 1014 - wildmatch (via ls-files): match 'a[]b' 'a[]b'(B[m
ok 1156 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1015 - iwildmatch: no match 'a[]b' 'a[]b'(B[m
ok 1157 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 62 - git read-tree -u --reset: modified submodule does not update submodule work tree to invalid commit(B[m
ok 64 - rebase-i history with funny messages(B[m
ok 1016 - iwildmatch (via ls-files): match 'a[]b' 'a[]b'(B[m
ok 9 - rebase -m of non-linear history is linearized upstream(B[m
ok 1158 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1017 - pathmatch: no match 'a[]b' 'a[]b'(B[m
ok 35 - restore autostash on editor failure(B[m
ok 1159 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 1018 - pathmatch (via ls-files): match 'a[]b' 'a[]b'(B[m
ok 13 - rebase -m -f rewrites even if upstream is an ancestor(B[m
ok 1019 - ipathmatch: no match 'a[]b' 'a[]b'(B[m
ok 1020 - ipathmatch (via ls-files): match 'a[]b' 'a[]b'(B[m
ok 10 - rebase -i of non-linear history is linearized upstream(B[m
ok 1021 - cleanup after previous file test(B[m
ok 65 - prepare for rebase -i --exec(B[m
ok 1160 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=crlf(B[m
ok 1022 - setup match file test for ab[(B[m
ok 36 - autostash is saved on editor failure with conflict(B[m
ok 1023 - wildmatch: no match 'ab[' 'ab['(B[m
ok 1161 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 14 - rebase -i -f rewrites even if upstream is an ancestor(B[m
ok 1162 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1024 - wildmatch (via ls-files): match 'ab[' 'ab['(B[m
ok 1025 - iwildmatch: no match 'ab[' 'ab['(B[m
ok 1163 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 11 - rebase --apply of non-linear history with merges after upstream merge is linearized(B[m
ok 1026 - iwildmatch (via ls-files): match 'ab[' 'ab['(B[m
ok 1164 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1027 - pathmatch: no match 'ab[' 'ab['(B[m
ok 1165 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 1028 - pathmatch (via ls-files): match 'ab[' 'ab['(B[m
ok 66 - running "git rebase -i --exec git show HEAD"(B[m
ok 1029 - ipathmatch: no match 'ab[' 'ab['(B[m
ok 1030 - ipathmatch (via ls-files): match 'ab[' 'ab['(B[m
ok 12 - rebase -m of non-linear history with merges after upstream merge is linearized(B[m
ok 1031 - cleanup after previous file test(B[m
ok 1166 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 1032 - setup match file test for ab(B[m
ok 1033 - wildmatch: no match 'ab' '[!'(B[m
ok 1167 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 1034 - wildmatch (via ls-files): no match '[!' 'ab'(B[m
ok 1168 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 37 - autostash with dirty submodules(B[m
ok 13 - rebase -i of non-linear history with merges after upstream merge is linearized(B[m
ok 1035 - iwildmatch: no match 'ab' '[!'(B[m
ok 1169 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 67 - running "git rebase --exec git show HEAD -i"(B[m
ok 1036 - iwildmatch (via ls-files): no match '[!' 'ab'(B[m
ok 1170 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1037 - pathmatch: no match 'ab' '[!'(B[m
ok 1171 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 1038 - pathmatch (via ls-files): no match '[!' 'ab'(B[m
ok 38 - branch is left alone when possible(B[m
ok 1039 - ipathmatch: no match 'ab' '[!'(B[m
ok 1040 - ipathmatch (via ls-files): no match '[!' 'ab'(B[m
ok 1041 - cleanup after previous file test(B[m
ok 1172 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf(B[m
ok 1042 - setup match file test for ab(B[m
ok 1043 - wildmatch: no match 'ab' '[-'(B[m
ok 1173 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 68 - running "git rebase -ix git show HEAD"(B[m
ok 39 - never change active branch(B[m
[32m# passed all 39 test(s)(B[m
[36m1..39(B[m
ok 1044 - wildmatch (via ls-files): no match '[-' 'ab'(B[m
ok 1174 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1045 - iwildmatch: no match 'ab' '[-'(B[m
ok 63 - git read-tree -u --reset: modified submodule does not update submodule work tree from invalid commit(B[m
*** t3428-rebase-signoff.sh ***
ok 1175 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 1046 - iwildmatch (via ls-files): no match '[-' 'ab'(B[m
ok 1176 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1047 - pathmatch: no match 'ab' '[-'(B[m
ok 54 - git checkout: modified submodule does not update submodule work tree to invalid commit(B[m
ok 1177 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 1048 - pathmatch (via ls-files): no match '[-' 'ab'(B[m
ok 1049 - ipathmatch: no match 'ab' '[-'(B[m
ok 1050 - ipathmatch (via ls-files): no match '[-' 'ab'(B[m
[33mnot ok 2 - Rebase -Xsubtree --preserve-merges --onto commit # TODO known breakage(B[m
ok 69 - rebase -ix with several <CMD>(B[m
ok 1051 - cleanup after previous file test(B[m
ok 1178 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf(B[m
ok 1052 - setup match file test for -(B[m
ok 1179 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF(B[m
ok 1053 - wildmatch: match '-' '[-]'(B[m
ok 1180 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1054 - wildmatch (via ls-files): match '[-]' '-'(B[m
ok 1 - rebase --signoff adds a sign-off line(B[m
ok 1181 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 1055 - iwildmatch: match '-' '[-]'(B[m
ok 1182 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1056 - iwildmatch (via ls-files): match '[-]' '-'(B[m
ok 2 - rebase --no-signoff does not add a sign-off line(B[m
ok 1057 - pathmatch: match '-' '[-]'(B[m
ok 1183 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 64 - git read-tree -u --reset: added submodule does remove untracked unignored file with same name when forced(B[m
ok 1058 - pathmatch (via ls-files): match '[-]' '-'(B[m
[33m# still have 11 known breakage(s)(B[m
[32m# passed all remaining 53 test(s)(B[m
[36m1..64(B[m
ok 20 - rebase --preserve-merges --continue remembers --rerere-autoupdate(B[m
ok 1059 - ipathmatch: match '-' '[-]'(B[m
ok 70 - rebase -ix with several instances of --exec(B[m
ok 3 - rebase --exec --signoff adds a sign-off line(B[m
ok 1060 - ipathmatch (via ls-files): match '[-]' '-'(B[m
*** t3429-rebase-edit-todo.sh ***
ok 1061 - cleanup after previous file test(B[m
ok 1184 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=crlf(B[m
ok 1062 - setup match file test for -(B[m
ok 1185 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 4 - rebase --root --signoff adds a sign-off line(B[m
ok 1063 - wildmatch: no match '-' '[a-'(B[m
ok 1186 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 1064 - wildmatch (via ls-files): no match '[a-' '-'(B[m
ok 1187 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 1065 - iwildmatch: no match '-' '[a-'(B[m
ok 5 - rebase -i --signoff fails(B[m
ok 1188 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 1066 - iwildmatch (via ls-files): no match '[a-' '-'(B[m
ok 1067 - pathmatch: no match '-' '[a-'(B[m
ok 1189 - checkout attr= ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 1068 - pathmatch (via ls-files): no match '[a-' '-'(B[m
ok 6 - rebase -m --signoff fails(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 1069 - ipathmatch: no match '-' '[a-'(B[m
*** t3430-rebase-merges.sh ***
ok 1 - setup(B[m
ok 1070 - ipathmatch (via ls-files): no match '[a-' '-'(B[m
ok 2 - rebase exec modifies rebase-todo(B[m
ok 1071 - cleanup after previous file test(B[m
ok 71 - rebase -ix with --autosquash(B[m
ok 1190 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=crlf(B[m
ok 1072 - setup match file test for -(B[m
ok 1191 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 1073 - wildmatch: no match '-' '[!a-'(B[m
ok 1192 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 3 - loose object cache vs re-reading todo list(B[m
ok 1074 - wildmatch (via ls-files): no match '[!a-' '-'(B[m
ok 72 - rebase --exec works without -i (B[m
ok 1193 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 1075 - iwildmatch: no match '-' '[!a-'(B[m
ok 73 - rebase -i --exec without <CMD>(B[m
ok 1194 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 1076 - iwildmatch (via ls-files): no match '[!a-' '-'(B[m
ok 1077 - pathmatch: no match '-' '[!a-'(B[m
ok 55 - git checkout: modified submodule does not update submodule work tree from invalid commit(B[m
ok 1195 - checkout attr= ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
[33mnot ok 15 - rebase -p -f rewrites even if upstream is an ancestor # TODO known breakage(B[m
ok 1078 - pathmatch (via ls-files): no match '[!a-' '-'(B[m
ok 1 - git_rebase: added submodule creates empty directory(B[m
ok 1079 - ipathmatch: no match '-' '[!a-'(B[m
ok 1080 - ipathmatch (via ls-files): no match '[!a-' '-'(B[m
ok 4 - todo is re-read after reword and squash(B[m
ok 1081 - cleanup after previous file test(B[m
ok 1196 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=crlf(B[m
ok 16 - rebase --apply -f rewrites even if remote upstream is an ancestor(B[m
ok 1082 - setup match file test for -(B[m
ok 1197 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 74 - rebase -i --root re-order and drop commits(B[m
ok 1083 - wildmatch: match '-' '[--A]'(B[m
ok 1198 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 1084 - wildmatch (via ls-files): match '[--A]' '-'(B[m
ok 5 - re-reading todo doesnt interfere with revert --edit(B[m
ok 1199 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 1085 - iwildmatch: match '-' '[--A]'(B[m
ok 1200 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 1086 - iwildmatch (via ls-files): match '[--A]' '-'(B[m
ok 1201 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 1087 - pathmatch: match '-' '[--A]'(B[m
ok 17 - rebase --fork-point -f rewrites even if remote upstream is an ancestor(B[m
ok 1088 - pathmatch (via ls-files): match '[--A]' '-'(B[m
ok 75 - rebase -i --root retain root commit author and message(B[m
ok 6 - re-reading todo doesnt interfere with cherry-pick --edit(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 1089 - ipathmatch: match '-' '[--A]'(B[m
*** t3431-rebase-fork-point.sh ***
ok 56 - git checkout: added submodule doesn't remove untracked unignored file with same name(B[m
ok 1090 - ipathmatch (via ls-files): match '[--A]' '-'(B[m
ok 1 - setup(B[m
ok 1091 - cleanup after previous file test(B[m
ok 1202 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=crlf(B[m
ok 18 - rebase -m -f rewrites even if remote upstream is an ancestor(B[m
ok 1092 - setup match file test for 5(B[m
ok 1203 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF(B[m
ok 76 - rebase -i --root temporary sentinel commit(B[m
ok 1093 - wildmatch: match '5' '[--A]'(B[m
ok 1204 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF(B[m
ok 1094 - wildmatch (via ls-files): match '[--A]' '5'(B[m
ok 1205 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=CRLF_mix_LF(B[m
ok 1095 - iwildmatch: match '5' '[--A]'(B[m
[33mnot ok 3 - Rebase -Xsubtree --keep-empty --preserve-merges --onto commit # TODO known breakage(B[m
ok 1206 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_mix_CR(B[m
ok 1096 - iwildmatch (via ls-files): match '[--A]' '5'(B[m
ok 1097 - pathmatch: match '5' '[--A]'(B[m
ok 1207 - checkout attr=text ident aeol= core.autocrlf=true core.eol=crlf file=LF_nul(B[m
ok 19 - rebase -i -f rewrites even if remote upstream is an ancestor(B[m
ok 2 - create completely different structure(B[m
ok 1098 - pathmatch (via ls-files): match '[--A]' '5'(B[m
ok 77 - rebase -i --root fixup root commit(B[m
ok 3 - generate correct todo list(B[m
ok 1099 - ipathmatch: match '5' '[--A]'(B[m
ok 1100 - ipathmatch (via ls-files): match '[--A]' '5'(B[m
ok 1101 - cleanup after previous file test(B[m
ok 4 - Rebase -Xsubtree --empty=ask --onto commit(B[m
ok 1208 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=crlf(B[m
ok 1102 - setup match file test for  (B[m
ok 1103 - wildmatch: match ' ' '[ --]'(B[m
ok 1209 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 14 - rebase -p is no-op in non-linear history(B[m
ok 5 - deleting most notes with git-notes(B[m
ok 1104 - wildmatch (via ls-files): match '[ --]' ' '(B[m
ok 4 - `reset` refuses to overwrite untracked files(B[m
ok 1210 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 78 - rebase -i --root reword original root commit(B[m
ok 1105 - iwildmatch: match ' ' '[ --]'(B[m
ok 1 - setup(B[m
ok 6 - most notes deleted correctly with git-notes(B[m
ok 1211 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 1106 - iwildmatch (via ls-files): match '[ --]' ' '(B[m
ok 1212 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1107 - pathmatch: match ' ' '[ --]'(B[m
ok 5 - Rebase -Xsubtree --empty=ask --rebase-merges --onto commit(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 3 test(s)(B[m
[36m1..5(B[m
ok 1213 - checkout attr=text ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 1108 - pathmatch (via ls-files): match '[ --]' ' '(B[m
*** t3432-rebase-fast-forward.sh ***
ok 1109 - ipathmatch: match ' ' '[ --]'(B[m
ok 2 - git rebase (B[m
ok 1110 - ipathmatch (via ls-files): match '[ --]' ' '(B[m
ok 5 - failed `merge -C` writes patch (may be rescheduled, too)(B[m
ok 79 - rebase -i --root reword new root commit(B[m
ok 1111 - cleanup after previous file test(B[m
ok 1112 - setup match file test for $(B[m
ok 1214 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=crlf(B[m
ok 2 - git_rebase: added submodule leaves existing empty directory alone(B[m
ok 3 - git rebase --onto D(B[m
ok 1113 - wildmatch: match '$' '[ --]'(B[m
ok 1215 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF(B[m
ok 6 - failed `merge <branch>` does not crash(B[m
ok 1114 - wildmatch (via ls-files): match '[ --]' '$'(B[m
ok 1216 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF(B[m
ok 1115 - iwildmatch: match '$' '[ --]'(B[m
ok 1217 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=CRLF_mix_LF(B[m
ok 1116 - iwildmatch (via ls-files): match '[ --]' '$'(B[m
ok 1218 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_mix_CR(B[m
ok 1117 - pathmatch: match '$' '[ --]'(B[m
ok 4 - git rebase --keep-base(B[m
ok 1219 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=crlf file=LF_nul(B[m
ok 7 - fast-forward merge -c still rewords(B[m
ok 1118 - pathmatch (via ls-files): match '[ --]' '$'(B[m
ok 80 - rebase -i --root when root has untracked file conflict(B[m
ok 1119 - ipathmatch: match '$' '[ --]'(B[m
ok 1 - setup(B[m
ok 57 - git checkout -f: added submodule creates empty directory(B[m
ok 1120 - ipathmatch (via ls-files): match '[ --]' '$'(B[m
ok 5 - git rebase --no-fork-point(B[m
ok 1121 - cleanup after previous file test(B[m
ok 2 - git rebase --apply  with no changes is noop with same HEAD(B[m
ok 1220 - ls-files --eol attr=-text ident aeol= core.autocrlf=true core.eol=native(B[m
ok 1122 - setup match file test for -(B[m
ok 1123 - wildmatch: match '-' '[ --]'(B[m
ok 1221 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 1222 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1124 - wildmatch (via ls-files): match '[ --]' '-'(B[m
ok 6 - git rebase --no-fork-point --onto D(B[m
ok 81 - rebase -i --root reword root when root has untracked file conflict(B[m
ok 1125 - iwildmatch: match '-' '[ --]'(B[m
ok 3 - git rebase --apply --no-ff  with no changes is work with same HEAD(B[m
ok 1223 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 1126 - iwildmatch (via ls-files): match '[ --]' '-'(B[m
ok 1224 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1127 - pathmatch: match '-' '[ --]'(B[m
ok 1225 - checkout attr=-text ident aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1128 - pathmatch (via ls-files): match '[ --]' '-'(B[m
ok 7 - git rebase --no-fork-point --keep-base(B[m
ok 4 - git rebase --merge  with no changes is noop with same HEAD(B[m
ok 21 - rebase --preserve-merges --continue honors rerere.autoUpdate(B[m
ok 1129 - ipathmatch: match '-' '[ --]'(B[m
ok 8 - with a branch tip that was cherry-picked already(B[m
ok 82 - rebase --edit-todo does not work on non-interactive rebase(B[m
ok 1130 - ipathmatch (via ls-files): match '[ --]' '-'(B[m
ok 1131 - cleanup after previous file test(B[m
ok 1226 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=true core.eol=native(B[m
ok 8 - git rebase --fork-point refs/heads/master(B[m
ok 5 - git rebase --merge --no-ff  with no changes is work with same HEAD(B[m
ok 1132 - setup match file test for 0(B[m
ok 1227 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 1133 - wildmatch: no match '0' '[ --]'(B[m
ok 1228 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1134 - wildmatch (via ls-files): no match '[ --]' '0'(B[m
ok 1135 - iwildmatch: no match '0' '[ --]'(B[m
ok 1229 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 6 - git rebase --apply master with no changes is noop with same HEAD(B[m
ok 9 - do not rebase cousins unless asked for(B[m
ok 9 - git rebase --fork-point --onto D refs/heads/master(B[m
ok 1230 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1136 - iwildmatch (via ls-files): no match '[ --]' '0'(B[m
ok 1231 - checkout attr=-text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1137 - pathmatch: no match '0' '[ --]'(B[m
ok 83 - rebase --edit-todo can be used to modify todo(B[m
ok 1138 - pathmatch (via ls-files): no match '[ --]' '0'(B[m
ok 7 - git rebase --apply --no-ff master with no changes is work with same HEAD(B[m
ok 1139 - ipathmatch: no match '0' '[ --]'(B[m
ok 10 - git rebase --fork-point --keep-base refs/heads/master(B[m
ok 1140 - ipathmatch (via ls-files): no match '[ --]' '0'(B[m
ok 84 - rebase -i produces readable reflog(B[m
ok 10 - refs/rewritten/* is worktree-local(B[m
ok 1141 - cleanup after previous file test(B[m
ok 1232 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 8 - git rebase --merge master with no changes is noop with same HEAD(B[m
ok 1142 - setup match file test for -(B[m
ok 1233 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 1143 - wildmatch: match '-' '[---]'(B[m
ok 11 - git rebase refs/heads/master(B[m
ok 1234 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1144 - wildmatch (via ls-files): match '[---]' '-'(B[m
ok 1235 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 11 - --abort cleans up refs/rewritten(B[m
ok 85 - rebase -i respects core.commentchar(B[m
ok 1145 - iwildmatch: match '-' '[---]'(B[m
ok 9 - git rebase --merge --no-ff master with no changes is work with same HEAD(B[m
ok 1236 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1146 - iwildmatch (via ls-files): match '[---]' '-'(B[m
ok 1237 - checkout attr=-text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1147 - pathmatch: match '-' '[---]'(B[m
ok 3 - git_rebase: replace tracked file with submodule creates empty directory(B[m
ok 12 - git rebase --onto D refs/heads/master(B[m
ok 12 - --quit cleans up refs/rewritten(B[m
ok 86 - rebase -i respects core.commentchar=auto(B[m
ok 1148 - pathmatch (via ls-files): match '[---]' '-'(B[m
ok 10 - git rebase --apply --onto B B with no changes is noop with same HEAD(B[m
ok 1149 - ipathmatch: match '-' '[---]'(B[m
ok 58 - git checkout -f: added submodule leaves existing empty directory alone(B[m
ok 1150 - ipathmatch (via ls-files): match '[---]' '-'(B[m
ok 13 - git rebase --keep-base refs/heads/master(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 1151 - cleanup after previous file test(B[m
ok 1238 - ls-files --eol attr=text ident aeol=lf core.autocrlf=true core.eol=native(B[m
ok 15 - rebase -p is no-op when base inside second parent(B[m
*** t3433-rebase-across-mode-change.sh ***
ok 1152 - setup match file test for -(B[m
ok 11 - git rebase --apply --no-ff --onto B B with no changes is work with diff HEAD(B[m
ok 1239 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 1153 - wildmatch: match '-' '[------]'(B[m
ok 20 - rebase -p -f rewrites even if remote upstream is an ancestor(B[m
ok 1240 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1154 - wildmatch (via ls-files): match '[------]' '-'(B[m
ok 87 - rebase -i, with <onto> and <upstream> specified as :/quuxery(B[m
ok 1241 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 1155 - iwildmatch: match '-' '[------]'(B[m
ok 1242 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 12 - git rebase --merge --onto B B with no changes is noop with same HEAD(B[m
ok 21 - rebase --apply fast-forwards from ancestor of upstream(B[m
ok 1156 - iwildmatch (via ls-files): match '[------]' '-'(B[m
ok 1243 - checkout attr=text ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1157 - pathmatch: match '-' '[------]'(B[m
ok 13 - post-rewrite hook and fixups work for merges(B[m
ok 1158 - pathmatch (via ls-files): match '[------]' '-'(B[m
ok 88 - rebase -i with --strategy and -X(B[m
ok 1159 - ipathmatch: match '-' '[------]'(B[m
ok 22 - rebase --fork-point fast-forwards from ancestor of upstream(B[m
ok 13 - git rebase --merge --no-ff --onto B B with no changes is work with diff HEAD(B[m
ok 1160 - ipathmatch (via ls-files): match '[------]' '-'(B[m
ok 14 - refuse to merge ancestors of HEAD(B[m
ok 1244 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 1161 - cleanup after previous file test(B[m
ok 23 - rebase -m fast-forwards from ancestor of upstream(B[m
ok 1245 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 1162 - setup match file test for j(B[m
ok 1 - setup(B[m
ok 14 - git rebase --apply --onto B... B with no changes is noop with same HEAD(B[m
ok 1163 - wildmatch: no match 'j' '[a-e-n]'(B[m
ok 1246 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1247 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 1164 - wildmatch (via ls-files): no match '[a-e-n]' 'j'(B[m
ok 24 - rebase -i fast-forwards from ancestor of upstream(B[m
ok 2 - rebase changes with the apply backend(B[m
ok 1165 - iwildmatch: no match 'j' '[a-e-n]'(B[m
ok 1248 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 89 - interrupted rebase -i with --strategy and -X(B[m
ok 1249 - checkout attr=text ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1166 - iwildmatch (via ls-files): no match '[a-e-n]' 'j'(B[m
ok 15 - git rebase --apply --no-ff --onto B... B with no changes is work with diff HEAD(B[m
ok 1167 - pathmatch: no match 'j' '[a-e-n]'(B[m
ok 3 - rebase changes with the merge backend(B[m
ok 1168 - pathmatch (via ls-files): no match '[a-e-n]' 'j'(B[m
ok 1169 - ipathmatch: no match 'j' '[a-e-n]'(B[m
ok 1170 - ipathmatch (via ls-files): no match '[a-e-n]' 'j'(B[m
ok 16 - git rebase --merge --onto B... B with no changes is noop with same HEAD(B[m
ok 1250 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=true core.eol=native(B[m
ok 1171 - cleanup after previous file test(B[m
ok 90 - rebase -i error on commits with \ in message(B[m
ok 1251 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF(B[m
ok 1172 - setup match file test for -(B[m
ok 1252 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1173 - wildmatch: match '-' '[a-e-n]'(B[m
ok 1253 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 15 - root commits(B[m
ok 17 - git rebase --merge --no-ff --onto B... B with no changes is work with diff HEAD(B[m
ok 1174 - wildmatch (via ls-files): match '[a-e-n]' '-'(B[m
ok 1254 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1175 - iwildmatch: match '-' '[a-e-n]'(B[m
ok 1255 - checkout attr=auto ident aeol=lf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1176 - iwildmatch (via ls-files): match '[a-e-n]' '-'(B[m
ok 1177 - pathmatch: match '-' '[a-e-n]'(B[m
ok 18 - git rebase --apply --onto master... master with no changes is noop with same HEAD(B[m
ok 1178 - pathmatch (via ls-files): match '[a-e-n]' '-'(B[m
ok 91 - short SHA-1 setup(B[m
ok 16 - a "merge" into a root commit is a fast-forward(B[m
ok 1179 - ipathmatch: match '-' '[a-e-n]'(B[m
ok 59 - git checkout -f: replace tracked file with submodule creates empty directory(B[m
ok 1180 - ipathmatch (via ls-files): match '[a-e-n]' '-'(B[m
ok 1256 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=true core.eol=native(B[m
ok 19 - git rebase --apply --no-ff --onto master... master with no changes is work with same HEAD(B[m
ok 1181 - cleanup after previous file test(B[m
ok 4 - git_rebase: replace directory with submodule(B[m
ok 1257 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF(B[m
ok 1182 - setup match file test for a(B[m
ok 1258 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1183 - wildmatch: match 'a' '[!------]'(B[m
ok 1259 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 1184 - wildmatch (via ls-files): match '[!------]' 'a'(B[m
ok 20 - git rebase --merge --onto master... master with no changes is noop with same HEAD(B[m
ok 1260 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1185 - iwildmatch: match 'a' '[!------]'(B[m
ok 1261 - checkout attr=auto ident aeol=crlf core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1186 - iwildmatch (via ls-files): match '[!------]' 'a'(B[m
ok 1187 - pathmatch: match 'a' '[!------]'(B[m
ok 92 - short SHA-1 collide(B[m
ok 21 - git rebase --merge --no-ff --onto master... master with no changes is work with same HEAD(B[m
ok 1188 - pathmatch (via ls-files): match '[!------]' 'a'(B[m
ok 1189 - ipathmatch: match 'a' '[!------]'(B[m
ok 1190 - ipathmatch (via ls-files): match '[!------]' 'a'(B[m
ok 93 - respect core.abbrev(B[m
ok 17 - A root commit can be a cousin, treat it that way(B[m
ok 1262 - ls-files --eol attr=-text ident aeol= core.autocrlf=false core.eol=native(B[m
ok 1191 - cleanup after previous file test(B[m
ok 22 - git rebase --apply --keep-base master with no changes is noop with same HEAD(B[m
ok 1263 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 94 - todo count(B[m
ok 1192 - setup match file test for [(B[m
ok 1264 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1193 - wildmatch: no match '[' '[]-a]'(B[m
ok 1265 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1194 - wildmatch (via ls-files): no match '[]-a]' '['(B[m
ok 23 - git rebase --apply --no-ff --keep-base master with no changes is work with same HEAD(B[m
ok 1266 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1195 - iwildmatch: no match '[' '[]-a]'(B[m
ok 1267 - checkout attr=-text ident aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1196 - iwildmatch (via ls-files): no match '[]-a]' '['(B[m
ok 1197 - pathmatch: no match '[' '[]-a]'(B[m
ok 18 - labels that are object IDs are rewritten(B[m
ok 24 - git rebase --merge --keep-base master with no changes is noop with same HEAD(B[m
ok 1198 - pathmatch (via ls-files): no match '[]-a]' '['(B[m
ok 1199 - ipathmatch: no match '[' '[]-a]'(B[m
ok 22 - rebase --preserve-merges --continue remembers --no-rerere-autoupdate(B[m
ok 95 - rebase -i commits that overwrite untracked files (pick)(B[m
ok 1200 - ipathmatch (via ls-files): no match '[]-a]' '['(B[m
ok 1268 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=false core.eol=native(B[m
ok 1201 - cleanup after previous file test(B[m
ok 25 - git rebase --merge --no-ff --keep-base master with no changes is work with same HEAD(B[m
ok 1269 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 1202 - setup match file test for ^(B[m
ok 23 - the todo command "break" works(B[m
ok 1270 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1203 - wildmatch: match '^' '[]-a]'(B[m
ok 1271 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1204 - wildmatch (via ls-files): match '[]-a]' '^'(B[m
ok 26 - git rebase --apply --keep-base with no changes is noop with same HEAD(B[m
ok 1272 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1205 - iwildmatch: match '^' '[]-a]'(B[m
ok 1273 - checkout attr=-text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 25 - rebase -p fast-forwards from ancestor of upstream(B[m
ok 1206 - iwildmatch (via ls-files): match '[]-a]' '^'(B[m
ok 24 - --reschedule-failed-exec(B[m
ok 1207 - pathmatch: match '^' '[]-a]'(B[m
ok 27 - git rebase --apply --no-ff --keep-base with no changes is work with same HEAD(B[m
ok 1208 - pathmatch (via ls-files): match '[]-a]' '^'(B[m
ok 96 - rebase -i commits that overwrite untracked files (squash)(B[m
ok 1209 - ipathmatch: match '^' '[]-a]'(B[m
ok 60 - git checkout -f: replace directory with submodule(B[m
ok 25 - rebase.reschedulefailedexec only affects `rebase -i`(B[m
ok 1210 - ipathmatch (via ls-files): match '[]-a]' '^'(B[m
ok 5 - git_rebase: removed submodule leaves submodule directory and its contents in place(B[m
[32m# passed all 25 test(s)(B[m
[36m1..25(B[m
ok 1274 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=false core.eol=native(B[m
*** t3434-rebase-i18n.sh ***
ok 1211 - cleanup after previous file test(B[m
ok 28 - git rebase --merge --keep-base with no changes is noop with same HEAD(B[m
ok 1275 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 1212 - setup match file test for ^(B[m
ok 1276 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1213 - wildmatch: no match '^' '[!]-a]'(B[m
ok 1277 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1214 - wildmatch (via ls-files): no match '[!]-a]' '^'(B[m
ok 1278 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 29 - git rebase --merge --no-ff --keep-base with no changes is work with same HEAD(B[m
ok 26 - setup of linear history for range selection tests(B[m
ok 97 - rebase -i commits that overwrite untracked files (no ff)(B[m
ok 1215 - iwildmatch: no match '^' '[!]-a]'(B[m
ok 1279 - checkout attr=-text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1216 - iwildmatch (via ls-files): no match '[!]-a]' '^'(B[m
ok 1217 - pathmatch: no match '^' '[!]-a]'(B[m
ok 30 - git rebase --apply --no-fork-point with no changes is noop with same HEAD(B[m
ok 1218 - pathmatch (via ls-files): no match '[!]-a]' '^'(B[m
ok 1219 - ipathmatch: no match '^' '[!]-a]'(B[m
ok 27 - rebase --apply drops patches in upstream(B[m
ok 1220 - ipathmatch (via ls-files): no match '[!]-a]' '^'(B[m
ok 1280 - ls-files --eol attr=text ident aeol=lf core.autocrlf=false core.eol=native(B[m
ok 1281 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 1221 - cleanup after previous file test(B[m
ok 31 - git rebase --apply --no-ff --no-fork-point with no changes is work with same HEAD(B[m
ok 1282 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1222 - setup match file test for [(B[m
ok 1223 - wildmatch: match '[' '[!]-a]'(B[m
ok 1283 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 19 - octopus merges(B[m
ok 98 - rebase --continue removes CHERRY_PICK_HEAD(B[m
ok 1284 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 28 - rebase -m drops patches in upstream(B[m
ok 1224 - wildmatch (via ls-files): match '[!]-a]' '['(B[m
ok 32 - git rebase --merge --no-fork-point with no changes is noop with same HEAD(B[m
ok 1225 - iwildmatch: match '[' '[!]-a]'(B[m
ok 1285 - checkout attr=text ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1 - setup(B[m
ok 1226 - iwildmatch (via ls-files): match '[!]-a]' '['(B[m
ok 1227 - pathmatch: match '[' '[!]-a]'(B[m
ok 1228 - pathmatch (via ls-files): match '[!]-a]' '['(B[m
ok 33 - git rebase --merge --no-ff --no-fork-point with no changes is work with same HEAD(B[m
ok 29 - rebase -i drops patches in upstream(B[m
ok 1229 - ipathmatch: match '[' '[!]-a]'(B[m
ok 1286 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=false core.eol=native(B[m
ok 1230 - ipathmatch (via ls-files): match '[!]-a]' '['(B[m
ok 99 - drop(B[m
ok 1287 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 1231 - cleanup after previous file test(B[m
ok 2 - rebase --rebase-merges update encoding eucJP to UTF-8(B[m
ok 34 - git rebase --apply --keep-base --no-fork-point with no changes is noop with same HEAD(B[m
ok 1288 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1232 - setup match file test for ^(B[m
ok 1289 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1233 - wildmatch: match '^' '[a^bc]'(B[m
ok 1290 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 20 - with --autosquash and --exec(B[m
ok 61 - git checkout -f: removed submodule leaves submodule directory and its contents in place(B[m
ok 1234 - wildmatch (via ls-files): match '[a^bc]' '^'(B[m
ok 1235 - iwildmatch: match '^' '[a^bc]'(B[m
ok 35 - git rebase --apply --no-ff --keep-base --no-fork-point with no changes is work with same HEAD(B[m
ok 1291 - checkout attr=text ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1236 - iwildmatch (via ls-files): match '[a^bc]' '^'(B[m
ok 3 - rebase --rebase-merges update encoding eucJP to ISO-2022-JP(B[m
ok 1237 - pathmatch: match '^' '[a^bc]'(B[m
[33mnot ok 16 - rebase -p --root on non-linear history is a no-op # TODO known breakage(B[m
ok 100 - rebase -i respects rebase.missingCommitsCheck = ignore(B[m
ok 1238 - pathmatch (via ls-files): match '[a^bc]' '^'(B[m
ok 36 - git rebase --merge --keep-base --no-fork-point with no changes is noop with same HEAD(B[m
ok 1239 - ipathmatch: match '^' '[a^bc]'(B[m
ok 1240 - ipathmatch (via ls-files): match '[a^bc]' '^'(B[m
ok 1292 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=false core.eol=native(B[m
ok 1293 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF(B[m
ok 1241 - cleanup after previous file test(B[m
ok 6 - git_rebase: removed submodule leaves submodule containing a .git directory alone(B[m
ok 37 - git rebase --merge --no-ff --keep-base --no-fork-point with no changes is work with same HEAD(B[m
ok 1294 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1242 - setup match file test for -b](B[m
ok 21 - --continue after resolving conflicts after a merge(B[m
ok 1295 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1243 - wildmatch: match '-b]' '[a-]b]'(B[m
ok 4 - rebase --continue update from ISO-8859-1 to UTF-8(B[m
ok 1296 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1244 - wildmatch (via ls-files): match '[a-]b]' '-b]'(B[m
ok 1245 - iwildmatch: match '-b]' '[a-]b]'(B[m
ok 38 - git rebase --apply --fork-point master with no changes is noop with same HEAD(B[m
ok 1297 - checkout attr=auto ident aeol=lf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 101 - rebase -i respects rebase.missingCommitsCheck = warn(B[m
ok 1246 - iwildmatch (via ls-files): match '[a-]b]' '-b]'(B[m
ok 1247 - pathmatch: match '-b]' '[a-]b]'(B[m
ok 1248 - pathmatch (via ls-files): match '[a-]b]' '-b]'(B[m
ok 39 - git rebase --apply --no-ff --fork-point master with no changes is work with same HEAD(B[m
ok 1249 - ipathmatch: match '-b]' '[a-]b]'(B[m
ok 22 - --rebase-merges with strategies(B[m
ok 1250 - ipathmatch (via ls-files): match '[a-]b]' '-b]'(B[m
ok 1298 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=false core.eol=native(B[m
ok 5 - rebase --continue update from eucJP to UTF-8(B[m
ok 1299 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF(B[m
ok 1251 - cleanup after previous file test(B[m
ok 40 - git rebase --merge --fork-point master with no changes is noop with same HEAD(B[m
ok 1300 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1252 - setup match file test for \(B[m
ok 4 - rebase changes with the merge backend with a delay(B[m
ok 1301 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 1253 - wildmatch: no match '\' '[\]'(B[m
ok 23 - --rebase-merges with commit that can generate bad characters for filename(B[m
*** t3500-cherry.sh ***
ok 1302 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1254 - wildmatch (via ls-files): no match '[\]' '\'(B[m
ok 1255 - iwildmatch: no match '\' '[\]'(B[m
ok 1303 - checkout attr=auto ident aeol=crlf core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 41 - git rebase --merge --no-ff --fork-point master with no changes is work with same HEAD(B[m
ok 102 - rebase -i respects rebase.missingCommitsCheck = error(B[m
ok 1256 - iwildmatch (via ls-files): no match '[\]' '\'(B[m
ok 6 - rebase --continue update from eucJP to ISO-2022-JP(B[m
ok 1257 - pathmatch: no match '\' '[\]'(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 24 - --rebase-merges with message matched with onto label(B[m
*** t3501-revert-cherry-pick.sh ***
ok 1258 - pathmatch (via ls-files): no match '[\]' '\'(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 42 - git rebase --apply --fork-point --onto B B with no changes is noop with same HEAD(B[m
ok 1259 - ipathmatch: no match '\' '[\]'(B[m
ok 1304 - ls-files --eol attr=-text ident aeol= core.autocrlf=input core.eol=native(B[m
*** t3502-cherry-pick-merge.sh ***
ok 1260 - ipathmatch (via ls-files): no match '[\]' '\'(B[m
ok 1305 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 62 - git checkout -f: removed submodule leaves submodule containing a .git directory alone(B[m
ok 1261 - cleanup after previous file test(B[m
ok 1306 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 1262 - setup match file test for \(B[m
ok 1307 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 43 - git rebase --apply --no-ff --fork-point --onto B B with no changes is work with diff HEAD(B[m
ok 1263 - wildmatch: match '\' '[\\]'(B[m
ok 1 - prepare repository with topic branch, and check cherry finds the 2 patches from there(B[m
ok 1308 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1264 - wildmatch (via ls-files): match '[\\]' '\'(B[m
ok 2 - check that cherry with limit returns only the top patch(B[m
ok 1309 - checkout attr=-text ident aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 1265 - iwildmatch: match '\' '[\\]'(B[m
ok 103 - rebase --edit-todo respects rebase.missingCommitsCheck = ignore(B[m
ok 44 - git rebase --merge --fork-point --onto B B with no changes is noop with same HEAD(B[m
ok 1266 - iwildmatch (via ls-files): match '[\\]' '\'(B[m
ok 3 - cherry-pick one of the 2 patches, and check cherry recognized one and only one as new(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 1267 - pathmatch: match '\' '[\\]'(B[m
*** t3503-cherry-pick-root.sh ***
ok 1268 - pathmatch (via ls-files): match '[\\]' '\'(B[m
ok 1 - setup(B[m
ok 1269 - ipathmatch: match '\' '[\\]'(B[m
ok 7 - git_rebase: replace submodule with a directory must fail(B[m
ok 1310 - ls-files --eol attr=-text ident aeol=lf core.autocrlf=input core.eol=native(B[m
ok 1 - setup(B[m
ok 1270 - ipathmatch (via ls-files): match '[\\]' '\'(B[m
ok 45 - git rebase --merge --no-ff --fork-point --onto B B with no changes is work with diff HEAD(B[m
ok 1311 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 2 - cherry-pick --nonsense(B[m
ok 1271 - cleanup after previous file test(B[m
ok 2 - cherry-pick -m complains of bogus numbers(B[m
ok 1312 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 1272 - setup match file test for \(B[m
ok 1313 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 3 - revert --nonsense(B[m
ok 46 - git rebase --apply --fork-point --onto B... B with no changes is noop with same HEAD(B[m
ok 1273 - wildmatch: no match '\' '[!\\]'(B[m
ok 3 - cherry-pick explicit first parent of a non-merge(B[m
ok 1314 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1274 - wildmatch (via ls-files): no match '[!\\]' '\'(B[m
ok 1315 - checkout attr=-text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 1275 - iwildmatch: no match '\' '[!\\]'(B[m
ok 4 - cherry-pick after renaming branch(B[m
ok 4 - cherry pick a merge without -m should fail(B[m
ok 1 - setup(B[m
ok 1276 - iwildmatch (via ls-files): no match '[!\\]' '\'(B[m
ok 2 - cherry-pick a root commit(B[m
ok 1277 - pathmatch: no match '\' '[!\\]'(B[m
ok 47 - git rebase --apply --no-ff --fork-point --onto B... B with no changes is work with diff HEAD(B[m
ok 5 - cherry pick a merge (1)(B[m
ok 3 - revert a root commit(B[m
ok 5 - revert after renaming branch(B[m
ok 1278 - pathmatch (via ls-files): no match '[!\\]' '\'(B[m
ok 104 - rebase --edit-todo respects rebase.missingCommitsCheck = warn(B[m
ok 1279 - ipathmatch: no match '\' '[!\\]'(B[m
ok 1316 - ls-files --eol attr=-text ident aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 6 - cherry pick a merge (2)(B[m
ok 4 - cherry-pick a root commit with an external strategy(B[m
ok 1280 - ipathmatch (via ls-files): no match '[!\\]' '\'(B[m
ok 1317 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 6 - cherry-pick on stat-dirty working tree(B[m
ok 5 - revert a root commit with an external strategy(B[m
ok 48 - git rebase --merge --fork-point --onto B... B with no changes is noop with same HEAD(B[m
ok 7 - cherry pick a merge relative to nonexistent parent should fail(B[m
ok 1281 - cleanup after previous file test(B[m
ok 1318 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 7 - revert forbidden on dirty working tree(B[m
ok 1319 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1282 - setup match file test for G(B[m
ok 6 - cherry-pick two root commits(B[m
[33mnot ok 63 - git checkout -f: replace submodule with a directory must fail # TODO known breakage(B[m
ok 8 - revert explicit first parent of a non-merge(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 1320 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1283 - wildmatch: match 'G' '[A-\\]'(B[m
*** t3504-cherry-pick-rerere.sh ***
ok 8 - cherry-pick on unborn branch(B[m
ok 1321 - checkout attr=-text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 30 - rebase -p drops patches in upstream(B[m
ok 1284 - wildmatch (via ls-files): match '[A-\\]' 'G'(B[m
ok 49 - git rebase --merge --no-ff --fork-point --onto B... B with no changes is work with diff HEAD(B[m
ok 9 - revert a merge without -m should fail(B[m
ok 1285 - iwildmatch: match 'G' '[A-\\]'(B[m
ok 17 - rebase -p re-creates merge from side branch(B[m
ok 1286 - iwildmatch (via ls-files): match '[A-\\]' 'G'(B[m
ok 10 - revert a merge (1)(B[m
ok 1287 - pathmatch: match 'G' '[A-\\]'(B[m
ok 9 - cherry-pick "-" to pick from previous branch(B[m
ok 50 - git rebase --apply --fork-point --onto master... master with no changes is noop with same HEAD(B[m
ok 1288 - pathmatch (via ls-files): match '[A-\\]' 'G'(B[m
ok 11 - revert a merge (2)(B[m
ok 1322 - ls-files --eol attr=text ident aeol=lf core.autocrlf=input core.eol=native(B[m
ok 31 - rebase --apply can drop last patch if in upstream(B[m
ok 1289 - ipathmatch: match 'G' '[A-\\]'(B[m
ok 1323 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 1290 - ipathmatch (via ls-files): match '[A-\\]' 'G'(B[m
ok 12 - revert a merge relative to nonexistent parent should fail(B[m
ok 1324 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 1291 - cleanup after previous file test(B[m
ok 51 - git rebase --apply --no-ff --fork-point --onto master... master with no changes is work with same HEAD(B[m
*** t3505-cherry-pick-empty.sh ***
ok 1325 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1292 - setup match file test for aaabbb(B[m
ok 1326 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 32 - rebase -m can drop last patch if in upstream(B[m
ok 10 - cherry-pick "-" is meaningless without checkout(B[m
ok 1293 - wildmatch: no match 'aaabbb' 'b*a'(B[m
ok 1327 - checkout attr=text ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 1294 - wildmatch (via ls-files): no match 'b*a' 'aaabbb'(B[m
ok 52 - git rebase --merge --fork-point --onto master... master with no changes is noop with same HEAD(B[m
ok 1295 - iwildmatch: no match 'aaabbb' 'b*a'(B[m
ok 1 - setup(B[m
ok 105 - rebase --edit-todo respects rebase.missingCommitsCheck = error(B[m
ok 1296 - iwildmatch (via ls-files): no match 'b*a' 'aaabbb'(B[m
ok 2 - conflicting merge(B[m
ok 11 - cherry-pick "-" works with arguments(B[m
ok 1297 - pathmatch: no match 'aaabbb' 'b*a'(B[m
ok 33 - rebase -i can drop last patch if in upstream(B[m
ok 53 - git rebase --merge --no-ff --fork-point --onto master... master with no changes is work with same HEAD(B[m
ok 1298 - pathmatch (via ls-files): no match 'b*a' 'aaabbb'(B[m
ok 3 - fixup(B[m
ok 1328 - ls-files --eol attr=text ident aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 1299 - ipathmatch: no match 'aaabbb' 'b*a'(B[m
ok 8 - git_rebase: replace submodule containing a .git directory with a directory must fail(B[m
ok 1329 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 1 - setup(B[m
ok 1300 - ipathmatch (via ls-files): no match 'b*a' 'aaabbb'(B[m
ok 1330 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 2 - cherry-pick an empty commit(B[m
ok 54 - git rebase --apply --keep-base --keep-base master with no changes is noop with same HEAD(B[m
ok 1301 - cleanup after previous file test(B[m
ok 3 - index lockfile was removed(B[m
ok 1331 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1302 - setup match file test for aabcaa(B[m
ok 1332 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 106 - rebase.missingCommitsCheck = error after resolving conflicts(B[m
ok 4 - cherry-pick conflict with --rerere-autoupdate(B[m
ok 12 - cherry-pick works with dirty renamed file(B[m
ok 1303 - wildmatch: no match 'aabcaa' '*ba*'(B[m
ok 4 - cherry-pick a commit with an empty message(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 5 - index lockfile was removed(B[m
ok 1333 - checkout attr=text ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
*** t3506-cherry-pick-ff.sh ***
ok 1304 - wildmatch (via ls-files): no match '*ba*' 'aabcaa'(B[m
ok 55 - git rebase --apply --no-ff --keep-base --keep-base master with no changes is work with same HEAD(B[m
ok 6 - cherry-pick a commit with an empty message with --allow-empty-message(B[m
ok 1305 - iwildmatch: no match 'aabcaa' '*ba*'(B[m
ok 1306 - iwildmatch (via ls-files): no match '*ba*' 'aabcaa'(B[m
[33mnot ok 64 - git checkout -f: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 1307 - pathmatch: no match 'aabcaa' '*ba*'(B[m
ok 7 - cherry pick an empty non-ff commit without --allow-empty(B[m
ok 56 - git rebase --merge --keep-base --keep-base master with no changes is noop with same HEAD(B[m
ok 5 - cherry-pick conflict repsects rerere.autoUpdate(B[m
ok 1308 - pathmatch (via ls-files): no match '*ba*' 'aabcaa'(B[m
ok 1334 - ls-files --eol attr=auto ident aeol=lf core.autocrlf=input core.eol=native(B[m
ok 8 - cherry pick an empty non-ff commit with --allow-empty(B[m
ok 1309 - ipathmatch: no match 'aabcaa' '*ba*'(B[m
ok 1335 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF(B[m
ok 1310 - ipathmatch (via ls-files): no match '*ba*' 'aabcaa'(B[m
ok 9 - cherry pick with --keep-redundant-commits(B[m
ok 107 - rebase.missingCommitsCheck = error when editing for a second time(B[m
ok 1336 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 1311 - cleanup after previous file test(B[m
ok 57 - git rebase --merge --no-ff --keep-base --keep-base master with no changes is work with same HEAD(B[m
ok 1337 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1 - setup(B[m
ok 1312 - setup match file test for ,(B[m
ok 1338 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1313 - wildmatch: match ',' '[,]'(B[m
ok 58 - add work same to side(B[m
ok 10 - cherry-pick a commit that becomes no-op (prep)(B[m
ok 6 - cherry-pick conflict with --no-rerere-autoupdate(B[m
ok 1339 - checkout attr=auto ident aeol=lf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 1314 - wildmatch (via ls-files): match '[,]' ','(B[m
ok 2 - cherry-pick using --ff fast forwards(B[m
ok 1315 - iwildmatch: match ',' '[,]'(B[m
ok 11 - cherry-pick a no-op without --keep-redundant(B[m
ok 1316 - iwildmatch (via ls-files): match '[,]' ','(B[m
ok 59 - git rebase --apply  with our changes is noop with same HEAD(B[m
ok 1317 - pathmatch: match ',' '[,]'(B[m
ok 3 - cherry-pick not using --ff does not fast forwards(B[m
ok 7 - cherry-pick --continue rejects --rerere-autoupdate(B[m
ok 12 - cherry-pick a no-op with --keep-redundant(B[m
ok 1318 - pathmatch (via ls-files): match '[,]' ','(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
*** t3507-cherry-pick-conflict.sh ***
ok 1319 - ipathmatch: match ',' '[,]'(B[m
ok 1340 - ls-files --eol attr=auto ident aeol=crlf core.autocrlf=input core.eol=native(B[m
ok 1341 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF(B[m
ok 1320 - ipathmatch (via ls-files): match '[,]' ','(B[m
ok 1342 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF(B[m
ok 60 - git rebase --apply --no-ff  with our changes is work with same HEAD(B[m
ok 1321 - cleanup after previous file test(B[m
ok 1343 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1322 - setup match file test for ,(B[m
ok 8 - cherry-pick --rerere-autoupdate more than once(B[m
ok 108 - respects rebase.abbreviateCommands with fixup, squash and exec(B[m
ok 1344 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1323 - wildmatch: match ',' '[\\,]'(B[m
ok 4 - merge setup(B[m
ok 1345 - checkout attr=auto ident aeol=crlf core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 1324 - wildmatch (via ls-files): match '[\\,]' ','(B[m
ok 61 - git rebase --merge  with our changes is noop with same HEAD(B[m
ok 9 - cherry-pick conflict without rerere(B[m
ok 1325 - iwildmatch: match ',' '[\\,]'(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 5 - cherry-pick explicit first parent of a non-merge with --ff(B[m
*** t3508-cherry-pick-many-commits.sh ***
ok 1326 - iwildmatch (via ls-files): match '[\\,]' ','(B[m
[33mnot ok 9 - git_rebase: replace submodule with a file must fail # TODO known breakage(B[m
ok 1327 - pathmatch: match ',' '[\\,]'(B[m
ok 6 - cherry pick a merge with --ff but without -m should fail(B[m
ok 1328 - pathmatch (via ls-files): match '[\\,]' ','(B[m
ok 62 - git rebase --merge --no-ff  with our changes is work with same HEAD(B[m
ok 1346 - ls-files --eol attr= ident aeol= core.autocrlf=false core.eol=native(B[m
ok 1329 - ipathmatch: match ',' '[\\,]'(B[m
ok 7 - cherry pick with --ff a merge (1)(B[m
ok 1347 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF(B[m
[33mnot ok 65 - git checkout -f: replace submodule with a file must fail # TODO known breakage(B[m
ok 1330 - ipathmatch (via ls-files): match '[\\,]' ','(B[m
ok 1348 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1331 - cleanup after previous file test(B[m
ok 63 - git rebase --apply master with our changes is noop with same HEAD(B[m
ok 8 - cherry pick with --ff a merge (2)(B[m
ok 1349 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1332 - setup match file test for \(B[m
ok 109 - static check of bad command(B[m
ok 9 - cherry pick a merge relative to nonexistent parent with --ff should fail(B[m
ok 1 - setup(B[m
ok 1350 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1333 - wildmatch: match '\' '[\\,]'(B[m
ok 1351 - checkout attr= ident aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1334 - wildmatch (via ls-files): match '[\\,]' '\'(B[m
ok 1335 - iwildmatch: match '\' '[\\,]'(B[m
ok 2 - failed cherry-pick does not advance HEAD(B[m
ok 64 - git rebase --apply --no-ff master with our changes is work with same HEAD(B[m
ok 10 - cherry pick a root commit with --ff(B[m
ok 1336 - iwildmatch (via ls-files): match '[\\,]' '\'(B[m
ok 1 - setup(B[m
ok 1337 - pathmatch: match '\' '[\\,]'(B[m
ok 110 - tabs and spaces are accepted in the todolist(B[m
ok 1338 - pathmatch (via ls-files): match '[\\,]' '\'(B[m
ok 11 - cherry-pick --ff on unborn branch(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 1352 - ls-files --eol attr= ident aeol= core.autocrlf=true core.eol=native(B[m
ok 1339 - ipathmatch: match '\' '[\\,]'(B[m
ok 3 - advice from failed cherry-pick(B[m
*** t3509-cherry-pick-merge-df.sh ***
ok 65 - git rebase --merge master with our changes is noop with same HEAD(B[m
ok 2 - cherry-pick first..fourth works(B[m
ok 1353 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 1340 - ipathmatch (via ls-files): match '[\\,]' '\'(B[m
ok 1354 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 1341 - cleanup after previous file test(B[m
ok 4 - advice from failed cherry-pick --no-commit(B[m
ok 1355 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 1342 - setup match file test for -(B[m
ok 1356 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 66 - git rebase --merge --no-ff master with our changes is work with same HEAD(B[m
ok 1343 - wildmatch: match '-' '[,-.]'(B[m
ok 1357 - checkout attr= ident aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 5 - failed cherry-pick sets CHERRY_PICK_HEAD(B[m
ok 1 - Initialize repository(B[m
ok 1344 - wildmatch (via ls-files): match '[,-.]' '-'(B[m
ok 1345 - iwildmatch: match '-' '[,-.]'(B[m
ok 111 - static check of bad SHA-1(B[m
ok 67 - git rebase --apply --onto B B with our changes is noop with same HEAD(B[m
ok 1346 - iwildmatch (via ls-files): match '[,-.]' '-'(B[m
ok 6 - successful cherry-pick does not set CHERRY_PICK_HEAD(B[m
ok 34 - rebase -p can drop last patch if in upstream(B[m
ok 1347 - pathmatch: match '-' '[,-.]'(B[m
ok 3 - cherry-pick three one two works(B[m
ok 1358 - ls-files --eol attr=auto ident aeol= core.autocrlf=true core.eol=native(B[m
ok 1348 - pathmatch (via ls-files): match '[,-.]' '-'(B[m
ok 112 - editor saves as CR/LF(B[m
ok 7 - cherry-pick --no-commit does not set CHERRY_PICK_HEAD(B[m
ok 4 - cherry-pick three one two: fails(B[m
ok 1359 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 1349 - ipathmatch: match '-' '[,-.]'(B[m
ok 2 - Setup rename across paths each below D/F conflicts(B[m
ok 1350 - ipathmatch (via ls-files): match '[,-.]' '-'(B[m
ok 1360 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 68 - git rebase --apply --no-ff --onto B B with our changes is work with diff HEAD(B[m
ok 8 - cherry-pick w/dirty tree does not set CHERRY_PICK_HEAD(B[m
ok 3 - Cherry-pick succeeds with rename across D/F conflicts(B[m
ok 1361 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 35 - rebase --apply --onto drops patches in upstream(B[m
ok 1351 - cleanup after previous file test(B[m
ok 113 - rebase -i --gpg-sign=<key-id>(B[m
ok 5 - output to keep user entertained during multi-pick(B[m
ok 1362 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 1352 - setup match file test for +(B[m
ok 1363 - checkout attr=auto ident aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
[33mnot ok 66 - git checkout -f: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 1353 - wildmatch: no match '+' '[,-.]'(B[m
ok 69 - git rebase --merge --onto B B with our changes is noop with same HEAD(B[m
ok 9 - cherry-pick --strategy=resolve w/dirty tree does not set CHERRY_PICK_HEAD(B[m
[33mnot ok 10 - git_rebase: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 1354 - wildmatch (via ls-files): no match '[,-.]' '+'(B[m
ok 1355 - iwildmatch: no match '+' '[,-.]'(B[m
ok 36 - rebase -m --onto drops patches in upstream(B[m
ok 10 - GIT_CHERRY_PICK_HELP suppresses CHERRY_PICK_HEAD(B[m
ok 114 - rebase -i --gpg-sign=<key-id> overrides commit.gpgSign(B[m
ok 4 - Setup rename with file on one side matching directory name on other(B[m
ok 1356 - iwildmatch (via ls-files): no match '[,-.]' '+'(B[m
ok 1357 - pathmatch: no match '+' '[,-.]'(B[m
ok 1364 - ls-files --eol attr=text ident aeol= core.autocrlf=true core.eol=native(B[m
ok 70 - git rebase --merge --no-ff --onto B B with our changes is work with diff HEAD(B[m
ok 1358 - pathmatch (via ls-files): no match '[,-.]' '+'(B[m
ok 6 - cherry-pick --strategy resolve first..fourth works(B[m
ok 1365 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF(B[m
ok 11 - git reset clears CHERRY_PICK_HEAD(B[m
ok 1359 - ipathmatch: no match '+' '[,-.]'(B[m
ok 1366 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF(B[m
ok 37 - rebase -i --onto drops patches in upstream(B[m
ok 1360 - ipathmatch (via ls-files): no match '[,-.]' '+'(B[m
ok 1367 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=CRLF_mix_LF(B[m
ok 71 - git rebase --apply --onto B... B with our changes is noop with same HEAD(B[m
ok 1361 - cleanup after previous file test(B[m
ok 1368 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_mix_CR(B[m
ok 5 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (resolve)(B[m
ok 12 - failed commit does not clear CHERRY_PICK_HEAD(B[m
ok 1369 - checkout attr=text ident aeol= core.autocrlf=true core.eol=native file=LF_nul(B[m
ok 1362 - setup match file test for -.](B[m
ok 115 - valid author header after --root swap(B[m
ok 18 - rebase -p re-creates internal merge(B[m
ok 1363 - wildmatch: no match '-.]' '[,-.]'(B[m
ok 6 - Cherry-pick succeeds with was_a_dir/file -> was_a_dir (recursive)(B[m
ok 7 - output during multi-pick indicates merge strategy(B[m
ok 1364 - wildmatch (via ls-files): no match '[,-.]' '-.]'(B[m
ok 1365 - iwildmatch: no match '-.]' '[,-.]'(B[m
ok 72 - git rebase --apply --no-ff --onto B... B with our changes is work with diff HEAD(B[m
ok 13 - cancelled commit does not clear CHERRY_PICK_HEAD(B[m
ok 1366 - iwildmatch (via ls-files): no match '[,-.]' '-.]'(B[m
ok 1367 - pathmatch: no match '-.]' '[,-.]'(B[m
ok 8 - cherry-pick --ff first..fourth works(B[m
ok 1370 - ls-files --eol attr=text ident aeol= core.autocrlf=input core.eol=native(B[m
ok 1368 - pathmatch (via ls-files): no match '[,-.]' '-.]'(B[m
ok 73 - git rebase --merge --onto B... B with our changes is noop with same HEAD(B[m
ok 1371 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 1369 - ipathmatch: no match '-.]' '[,-.]'(B[m
ok 7 - Setup rename with file on one side matching different dirname on other(B[m
ok 116 - valid author header when author contains single quote(B[m
ok 14 - successful commit clears CHERRY_PICK_HEAD(B[m
ok 1372 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 1370 - ipathmatch (via ls-files): no match '[,-.]' '-.]'(B[m
ok 9 - cherry-pick -n first..fourth works(B[m
ok 1373 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 1371 - cleanup after previous file test(B[m
ok 1374 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 15 - successful final commit clears cherry-pick state(B[m
ok 1372 - setup match file test for 2(B[m
ok 1375 - checkout attr=text ident aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 74 - git rebase --merge --no-ff --onto B... B with our changes is work with diff HEAD(B[m
ok 10 - revert first..fourth works(B[m
ok 1373 - wildmatch: match '2' '[\1-\3]'(B[m
ok 1374 - wildmatch (via ls-files): match '[\1-\3]' '2'(B[m
ok 8 - Cherry-pick with rename to different D/F conflict succeeds (resolve)(B[m
ok 16 - reset after final pick clears cherry-pick state(B[m
ok 1375 - iwildmatch: match '2' '[\1-\3]'(B[m
ok 75 - git rebase --apply --onto master... master with our changes is noop with same HEAD(B[m
ok 9 - Cherry-pick with rename to different D/F conflict succeeds (recursive)(B[m
ok 1376 - iwildmatch (via ls-files): match '[\1-\3]' '2'(B[m
ok 11 - revert ^first fourth works(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 1377 - pathmatch: match '2' '[\1-\3]'(B[m
*** t3510-cherry-pick-sequence.sh ***
ok 1376 - ls-files --eol attr=auto ident aeol= core.autocrlf=input core.eol=native(B[m
ok 17 - failed cherry-pick produces dirty index(B[m
ok 1378 - pathmatch (via ls-files): match '[\1-\3]' '2'(B[m
ok 1377 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF(B[m
ok 1379 - ipathmatch: match '2' '[\1-\3]'(B[m
ok 117 - post-commit hook is called(B[m
ok 1378 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF(B[m
ok 12 - revert fourth fourth~1 fourth~2 works(B[m
ok 1380 - ipathmatch (via ls-files): match '[\1-\3]' '2'(B[m
ok 76 - git rebase --apply --no-ff --onto master... master with our changes is work with same HEAD(B[m
ok 1379 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=CRLF_mix_LF(B[m
ok 118 - $EDITOR and friends are unchanged(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 117 test(s)(B[m
[36m1..118(B[m
ok 1381 - cleanup after previous file test(B[m
ok 1380 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_mix_CR(B[m
ok 1382 - setup match file test for 3(B[m
ok 18 - failed cherry-pick registers participants in index(B[m
ok 1381 - checkout attr=auto ident aeol= core.autocrlf=input core.eol=native file=LF_nul(B[m
ok 13 - cherry-pick -3 fourth works(B[m
ok 77 - git rebase --merge --onto master... master with our changes is noop with same HEAD(B[m
ok 1383 - wildmatch: match '3' '[\1-\3]'(B[m
*** t3511-cherry-pick-x.sh ***
ok 1384 - wildmatch (via ls-files): match '[\1-\3]' '3'(B[m
ok 1385 - iwildmatch: match '3' '[\1-\3]'(B[m
ok 19 - cherry-pick conflict, ensure commit.cleanup = scissors places scissors line properly(B[m
ok 67 - git checkout -f: modified submodule does not update submodule work tree(B[m
ok 14 - cherry-pick --stdin works(B[m
ok 1386 - iwildmatch (via ls-files): match '[\1-\3]' '3'(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 78 - git rebase --merge --no-ff --onto master... master with our changes is work with same HEAD(B[m
ok 1387 - pathmatch: match '3' '[\1-\3]'(B[m
*** t3512-cherry-pick-submodule.sh ***
ok 1382 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=crlf(B[m
ok 20 - cherry-pick conflict, ensure cleanup=scissors places scissors line properly(B[m
ok 1388 - pathmatch (via ls-files): match '[\1-\3]' '3'(B[m
ok 1383 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF(B[m
ok 1389 - ipathmatch: match '3' '[\1-\3]'(B[m
ok 1384 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF(B[m
ok 79 - git rebase --apply --keep-base master with our changes is noop with same HEAD(B[m
ok 1390 - ipathmatch (via ls-files): match '[\1-\3]' '3'(B[m
ok 21 - failed cherry-pick describes conflict in work tree(B[m
ok 1385 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=CRLF_mix_LF(B[m
ok 7 - stable fanout 1 is followed by stable fanout 0(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 11 - git_rebase: modified submodule does not update submodule work tree(B[m
ok 1391 - cleanup after previous file test(B[m
ok 1386 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_mix_CR(B[m
ok 1387 - checkout attr=text ident aeol= core.autocrlf=false core.eol=crlf file=LF_nul(B[m
ok 1392 - setup match file test for 4(B[m
ok 22 - diff3 -m style(B[m
ok 1393 - wildmatch: no match '4' '[\1-\3]'(B[m
ok 1 - setup(B[m
ok 80 - git rebase --apply --no-ff --keep-base master with our changes is work with same HEAD(B[m
ok 1394 - wildmatch (via ls-files): no match '[\1-\3]' '4'(B[m
ok 1395 - iwildmatch: no match '4' '[\1-\3]'(B[m
ok 1396 - iwildmatch (via ls-files): no match '[\1-\3]' '4'(B[m
ok 2 - cherry-pick persists data on failure(B[m
ok 1388 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=lf(B[m
ok 1397 - pathmatch: no match '4' '[\1-\3]'(B[m
ok 81 - git rebase --merge --keep-base master with our changes is noop with same HEAD(B[m
*** t3513-revert-submodule.sh ***
ok 1389 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF(B[m
ok 1398 - pathmatch (via ls-files): no match '[\1-\3]' '4'(B[m
ok 1390 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF(B[m
ok 1399 - ipathmatch: no match '4' '[\1-\3]'(B[m
ok 1391 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=CRLF_mix_LF(B[m
ok 23 - revert also handles conflicts sanely(B[m
ok 1400 - ipathmatch (via ls-files): no match '[\1-\3]' '4'(B[m
ok 1392 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_mix_CR(B[m
ok 82 - git rebase --merge --no-ff --keep-base master with our changes is work with same HEAD(B[m
ok 1401 - cleanup after previous file test(B[m
ok 1393 - checkout attr=text ident aeol= core.autocrlf=false core.eol=lf file=LF_nul(B[m
ok 3 - cherry-pick mid-cherry-pick-sequence(B[m
ok 1402 - setup match file test for \(B[m
ok 24 - failed revert sets REVERT_HEAD(B[m
ok 1403 - wildmatch: match '\' '[[-\]]'(B[m
ok 83 - git rebase --apply --keep-base with our changes is noop with same HEAD(B[m
ok 1404 - wildmatch (via ls-files): match '[[-\]]' '\'(B[m
ok 1405 - iwildmatch: match '\' '[[-\]]'(B[m
ok 25 - successful revert does not set REVERT_HEAD(B[m
ok 1406 - iwildmatch (via ls-files): match '[[-\]]' '\'(B[m
ok 4 - cherry-pick persists opts correctly(B[m
ok 1 - setup(B[m
ok 1394 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=(B[m
ok 1407 - pathmatch: match '\' '[[-\]]'(B[m
ok 1395 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF(B[m
ok 1408 - pathmatch (via ls-files): match '[[-\]]' '\'(B[m
ok 84 - git rebase --apply --no-ff --keep-base with our changes is work with same HEAD(B[m
ok 26 - revert --no-commit sets REVERT_HEAD(B[m
ok 1396 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF(B[m
ok 1409 - ipathmatch: match '\' '[[-\]]'(B[m
ok 5 - cherry-pick cleans up sequencer state upon success(B[m
ok 2 - cherry-pick -x inserts blank line after one line subject(B[m
ok 1397 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF(B[m
ok 1410 - ipathmatch (via ls-files): match '[[-\]]' '\'(B[m
ok 1398 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR(B[m
ok 27 - revert w/dirty tree does not set REVERT_HEAD(B[m
ok 6 - cherry-pick --skip requires cherry-pick in progress(B[m
ok 1411 - cleanup after previous file test(B[m
ok 85 - git rebase --merge --keep-base with our changes is noop with same HEAD(B[m
ok 1399 - checkout attr=text ident aeol= core.autocrlf=false core.eol= file=LF_nul(B[m
ok 1412 - setup match file test for [(B[m
ok 3 - cherry-pick -s inserts blank line after one line subject(B[m
ok 7 - revert --skip requires revert in progress(B[m
ok 1413 - wildmatch: match '[' '[[-\]]'(B[m
ok 28 - GIT_CHERRY_PICK_HELP does not suppress REVERT_HEAD(B[m
ok 1414 - wildmatch (via ls-files): match '[[-\]]' '['(B[m
ok 1415 - iwildmatch: match '[' '[[-\]]'(B[m
ok 86 - git rebase --merge --no-ff --keep-base with our changes is work with same HEAD(B[m
ok 38 - rebase -p --onto drops patches in upstream(B[m
ok 4 - cherry-pick -s inserts blank line after non-conforming footer(B[m
ok 1416 - iwildmatch (via ls-files): match '[[-\]]' '['(B[m
ok 29 - git reset clears REVERT_HEAD(B[m
ok 1400 - ls-files --eol attr=text ident aeol= core.autocrlf=false core.eol=native(B[m
ok 1417 - pathmatch: match '[' '[[-\]]'(B[m
ok 8 - cherry-pick --skip to skip commit(B[m
ok 1401 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 1418 - pathmatch (via ls-files): match '[[-\]]' '['(B[m
ok 87 - git rebase --apply --no-fork-point with our changes is noop with same HEAD(B[m
ok 5 - cherry-pick -s recognizes trailer config(B[m
ok 1419 - ipathmatch: match '[' '[[-\]]'(B[m
ok 1402 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 30 - failed commit does not clear REVERT_HEAD(B[m
ok 1403 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1420 - ipathmatch (via ls-files): match '[[-\]]' '['(B[m
ok 39 - rebase --apply --onto does not drop patches in onto(B[m
ok 68 - git checkout -f: modified submodule does not update submodule work tree to invalid commit(B[m
ok 1404 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 1421 - cleanup after previous file test(B[m
ok 9 - revert --skip to skip commit(B[m
ok 1405 - checkout attr=text ident aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 6 - cherry-pick -x inserts blank line when conforming footer not found(B[m
ok 31 - successful final commit clears revert state(B[m
ok 1422 - setup match file test for ](B[m
ok 88 - git rebase --apply --no-ff --no-fork-point with our changes is work with same HEAD(B[m
ok 1423 - wildmatch: match ']' '[[-\]]'(B[m
ok 1424 - wildmatch (via ls-files): match '[[-\]]' ']'(B[m
ok 40 - rebase -m --onto does not drop patches in onto(B[m
ok 7 - cherry-pick -s inserts blank line when conforming footer not found(B[m
ok 32 - reset after final pick clears revert state(B[m
ok 1425 - iwildmatch: match ']' '[[-\]]'(B[m
ok 89 - git rebase --merge --no-fork-point with our changes is noop with same HEAD(B[m
ok 1426 - iwildmatch (via ls-files): match '[[-\]]' ']'(B[m
ok 1406 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=(B[m
ok 10 - skip "empty" commit(B[m
ok 1427 - pathmatch: match ']' '[[-\]]'(B[m
ok 1407 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF(B[m
ok 33 - revert conflict, diff3 -m style(B[m
ok 1428 - pathmatch (via ls-files): match '[[-\]]' ']'(B[m
ok 1408 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF(B[m
ok 8 - cherry-pick -x -s inserts blank line when conforming footer not found(B[m
ok 1429 - ipathmatch: match ']' '[[-\]]'(B[m
ok 41 - rebase -i --onto does not drop patches in onto(B[m
ok 12 - git_rebase: modified submodule does not update submodule work tree to invalid commit(B[m
ok 1409 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=CRLF_mix_LF(B[m
ok 90 - git rebase --merge --no-ff --no-fork-point with our changes is work with same HEAD(B[m
ok 1430 - ipathmatch (via ls-files): match '[[-\]]' ']'(B[m
ok 34 - revert conflict, ensure commit.cleanup = scissors places scissors line properly(B[m
ok 1410 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_mix_CR(B[m
ok 1431 - cleanup after previous file test(B[m
ok 9 - cherry-pick -s adds sob when last sob doesnt match committer(B[m
ok 1411 - checkout attr=auto ident aeol= core.autocrlf=false core.eol= file=LF_nul(B[m
ok 19 - rebase -p can re-create two branches on onto(B[m
ok 11 - skip a commit and check if rest of sequence is correct(B[m
ok 1432 - setup match file test for -(B[m
ok 91 - git rebase --apply --keep-base --no-fork-point with our changes is noop with same HEAD(B[m
ok 35 - revert conflict, ensure cleanup=scissors places scissors line properly(B[m
ok 1433 - wildmatch: no match '-' '[[-\]]'(B[m
ok 20 - setup of non-linear-history for patch-equivalence tests(B[m
ok 1434 - wildmatch (via ls-files): no match '[[-\]]' '-'(B[m
ok 10 - cherry-pick -x -s adds sob when last sob doesnt match committer(B[m
ok 36 - failed cherry-pick does not forget -s(B[m
ok 1435 - iwildmatch: no match '-' '[[-\]]'(B[m
ok 1412 - ls-files --eol attr=auto ident aeol= core.autocrlf=false core.eol=native(B[m
ok 1436 - iwildmatch (via ls-files): no match '[[-\]]' '-'(B[m
ok 12 - check advice when we move HEAD by committing(B[m
ok 1437 - pathmatch: no match '-' '[[-\]]'(B[m
ok 92 - git rebase --apply --no-ff --keep-base --no-fork-point with our changes is work with same HEAD(B[m
ok 1413 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF(B[m
ok 11 - cherry-pick -s refrains from adding duplicate trailing sob(B[m
ok 1438 - pathmatch (via ls-files): no match '[[-\]]' '-'(B[m
ok 37 - commit after failed cherry-pick does not add duplicated -s(B[m
ok 1414 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF(B[m
ok 1439 - ipathmatch: no match '-' '[[-\]]'(B[m
ok 1415 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=CRLF_mix_LF(B[m
ok 1440 - ipathmatch (via ls-files): no match '[[-\]]' '-'(B[m
ok 93 - git rebase --merge --keep-base --no-fork-point with our changes is noop with same HEAD(B[m
ok 1416 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_mix_CR(B[m
ok 13 - selectively advise --skip while launching another sequence(B[m
ok 12 - cherry-pick -x -s adds sob even when trailing sob exists for committer(B[m
ok 1417 - checkout attr=auto ident aeol= core.autocrlf=false core.eol=native file=LF_nul(B[m
ok 1441 - cleanup after previous file test(B[m
ok 38 - commit after failed cherry-pick adds -s at the right place(B[m
ok 1442 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1(B[m
ok 1418 - ls-files --eol -d -z(B[m
[32m# passed all 1418 test(s)(B[m
[36m1..1418(B[m
ok 1443 - wildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 94 - git rebase --merge --no-ff --keep-base --no-fork-point with our changes is work with same HEAD(B[m
ok 13 - cherry-pick -x handles commits with no NL at end of message(B[m
ok 1444 - wildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'(B[m
ok 14 - allow skipping commit but not abort for a new history(B[m
ok 1445 - iwildmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 39 - commit --amend -s places the sign-off at the right place(B[m
*** t3600-rm.sh ***
ok 1446 - iwildmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'(B[m
ok 1447 - pathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 95 - git rebase --apply --fork-point master with our changes is noop with same HEAD(B[m
ok 14 - cherry-pick -x handles commits with no footer and no NL at end of message(B[m
ok 1448 - pathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'(B[m
ok 15 - allow skipping stopped cherry-pick because of untracked file modifications(B[m
ok 1449 - ipathmatch: match '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 40 - cherry-pick preserves sparse-checkout(B[m
ok 1450 - ipathmatch (via ls-files): match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-m-70-iso8859-1'(B[m
ok 69 - git checkout -f: modified submodule does not update submodule work tree from invalid commit(B[m
ok 15 - cherry-pick -s handles commits with no NL at end of message(B[m
ok 16 - --quit does not complain when no cherry-pick is in progress(B[m
ok 1451 - cleanup after previous file test(B[m
ok 96 - git rebase --apply --no-ff --fork-point master with our changes is work with same HEAD(B[m
ok 1 - Initialize test directory(B[m
ok 1452 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1(B[m
ok 17 - --abort requires cherry-pick in progress(B[m
ok 1453 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 2 - add files with funny names(B[m
ok 41 - cherry-pick --continue remembers --keep-redundant-commits(B[m
ok 97 - git rebase --merge --fork-point master with our changes is noop with same HEAD(B[m
ok 16 - cherry-pick -s handles commits with no footer and no NL at end of message(B[m
ok 1454 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'(B[m
ok 3 - Pre-check that foo exists and is in index before git rm foo(B[m
ok 1455 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 4 - Test that git rm foo succeeds(B[m
ok 18 - --quit cleans up sequencer state(B[m
ok 1456 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'(B[m
ok 5 - Test that git rm --cached foo succeeds if the index matches the file(B[m
ok 1457 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 17 - cherry-pick -x treats "(cherry picked from..." line as part of footer(B[m
ok 42 - cherry-pick --continue remembers --allow-empty and --allow-empty-message(B[m
ok 98 - git rebase --merge --no-ff --fork-point master with our changes is work with same HEAD(B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
ok 1458 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'(B[m
ok 6 - Test that git rm --cached foo succeeds if the index matches the file(B[m
*** t3601-rm-pathspec-file.sh ***
ok 1459 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 19 - --quit keeps HEAD and conflicted index intact(B[m
ok 1460 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-X-70-iso8859-1'(B[m
ok 7 - Test that git rm --cached foo fails if the index matches neither the file nor HEAD(B[m
ok 18 - cherry-pick -s treats "(cherry picked from..." line as part of footer(B[m
ok 99 - git rebase --apply --fork-point --onto B B with our changes is noop with same HEAD(B[m
ok 1461 - cleanup after previous file test(B[m
ok 8 - Test that git rm --cached -f foo works in case where --cached only did not(B[m
ok 1462 - setup match file test for -adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1(B[m
ok 13 - git_rebase: modified submodule does not update submodule work tree from invalid commit(B[m
ok 9 - Post-check that foo exists but is not in index after git rm foo(B[m
ok 1463 - wildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 70 - git checkout -f: added submodule does remove untracked unignored file with same name when forced(B[m
ok 10 - Pre-check that bar exists and is in index before "git rm bar"(B[m
[33m# still have 10 known breakage(s)(B[m
[32m# passed all remaining 60 test(s)(B[m
[36m1..70(B[m
ok 19 - cherry-pick -x -s treats "(cherry picked from..." line as part of footer(B[m
ok 20 - --abort to cancel multiple cherry-pick(B[m
ok 1 - setup(B[m
ok 11 - Test that "git rm bar" succeeds(B[m
ok 1464 - wildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'(B[m
ok 12 - Post-check that bar does not exist and is not in index after "git rm -f bar"(B[m
ok 1465 - iwildmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 100 - git rebase --apply --no-ff --fork-point --onto B B with our changes is work with diff HEAD(B[m
ok 13 - Test that "git rm -- -q" succeeds (remove a file that looks like an option)(B[m
*** t3700-add.sh ***
ok 2 - simplest(B[m
ok 1466 - iwildmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'(B[m
ok 14 - Test that "git rm -f" succeeds with embedded space, tab, or newline characters.(B[m
ok 1467 - pathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 20 - cherry-pick preserves commit message(B[m
ok 3 - --pathspec-file-nul(B[m
ok 1468 - pathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'(B[m
ok 21 - --abort to cancel single cherry-pick(B[m
ok 101 - git rebase --merge --fork-point --onto B B with our changes is noop with same HEAD(B[m
ok 1469 - ipathmatch: no match '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1' '-*-*-*-*-*-*-12-*-*-*-m-*-*-*'(B[m
ok 15 - Test that "git rm -f" fails if its rm fails(B[m
ok 4 - only touches what was listed(B[m
ok 1470 - ipathmatch (via ls-files): no match '-*-*-*-*-*-*-12-*-*-*-m-*-*-*' '-adobe-courier-bold-o-normal--12-120-75-75-/-70-iso8859-1'(B[m
ok 16 - When the rm in "git rm -f" fails, it should not remove the file from the index(B[m
ok 21 - cherry-pick -x cleans commit message(B[m
ok 1 - Test of git add(B[m
ok 17 - Remove nonexistent file with --ignore-unmatch(B[m
ok 2 - Post-check that foo is in the index(B[m
ok 1471 - cleanup after previous file test(B[m
ok 3 - Test that "git add -- -q" works(B[m
ok 1472 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1(B[m
ok 22 - --abort does not unsafely change HEAD(B[m
ok 102 - git rebase --merge --no-ff --fork-point --onto B B with our changes is work with diff HEAD(B[m
ok 1473 - wildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 5 - error conditions(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
[33mnot ok 1474 - wildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage(B[m
ok 22 - cherry-pick -x respects commit.cleanup(B[m
ok 4 - git add: Test that executable bit is not used if core.filemode=0(B[m
*** t3702-add-edit.sh ***
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 18 - "rm" command printed(B[m
ok 1475 - iwildmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
*** t3703-add-magic-pathspec.sh ***
[33mnot ok 1476 - iwildmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage(B[m
ok 1477 - pathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 5 - git add: filemode=0 should not get confused by symlink(B[m
[33mnot ok 1478 - pathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage(B[m
ok 103 - git rebase --apply --fork-point --onto B... B with our changes is noop with same HEAD(B[m
ok 19 - "rm" command suppressed with --quiet(B[m
ok 1479 - ipathmatch: match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 23 - cherry-pick --abort to cancel multiple revert(B[m
[33mnot ok 1480 - ipathmatch (via ls-files): match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/m/70/iso8859/1' # TODO known breakage(B[m
ok 6 - git update-index --add: Test that executable bit is not used...(B[m
ok 20 - Re-add foo and baz(B[m
ok 1481 - cleanup after previous file test(B[m
ok 1482 - setup match file test for XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1(B[m
ok 21 - Modify foo -- rm should refuse(B[m
ok 7 - git add: filemode=0 should not get confused by symlink(B[m
ok 1483 - wildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 1 - setup(B[m
ok 14 - git_rebase: added submodule doesn't remove untracked unignored file with same name(B[m
ok 1 - setup(B[m
[33mnot ok 1484 - wildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage(B[m
ok 22 - Modified foo -- rm -f should work(B[m
ok 2 - add :/(B[m
ok 104 - git rebase --apply --no-ff --fork-point --onto B... B with our changes is work with diff HEAD(B[m
ok 8 - git update-index --add: Test that executable bit is not used...(B[m
ok 1485 - iwildmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 24 - revert --abort works, too(B[m
ok 9 - .gitignore test setup(B[m
[33mnot ok 1486 - iwildmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage(B[m
ok 23 - Re-add foo and baz for HEAD tests(B[m
ok 3 - add :/anothersub(B[m
ok 1487 - pathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 10 - .gitignore is honored(B[m
[33mnot ok 1488 - pathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage(B[m
ok 4 - add :/non-existent(B[m
ok 24 - foo is different in index from HEAD -- rm should refuse(B[m
ok 1489 - ipathmatch: no match 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*'(B[m
ok 11 - error out when attempting to add ignored ones without -f(B[m
[33mnot ok 1490 - ipathmatch (via ls-files): no match skip 'XXX/*/*/*/*/*/*/12/*/*/*/m/*/*/*' 'XXX/adobe/courier/bold/o/normal//12/120/75/75/X/70/iso8859/1' # TODO known breakage(B[m
ok 2 - add -e(B[m
ok 105 - git rebase --merge --fork-point --onto B... B with our changes is noop with same HEAD(B[m
ok 5 - a file with the same (long) magic name exists(B[m
ok 1491 - cleanup after previous file test(B[m
ok 25 - but with -f it should work.(B[m
ok 12 - error out when attempting to add ignored ones without -f(B[m
ok 26 - refuse to remove cached empty file with modifications(B[m
ok 6 - a file with the same (short) magic name exists(B[m
ok 3 - add -e notices editor failure(B[m
ok 25 - --abort to cancel single revert(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 1492 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t3704-add-pathspec-file.sh ***
*** t3800-mktag.sh ***
ok 13 - error out when attempting to add ignored ones but add others(B[m
ok 1493 - wildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'(B[m
ok 27 - remove intent-to-add file without --force(B[m
ok 14 - add ignored ones with -f(B[m
ok 1494 - wildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'(B[m
ok 28 - Recursive test setup(B[m
ok 106 - git rebase --merge --no-ff --fork-point --onto B... B with our changes is work with diff HEAD(B[m
ok 1495 - iwildmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'(B[m
ok 15 - add ignored ones with -f(B[m
ok 26 - --abort keeps unrelated change, easy case(B[m
ok 29 - Recursive without -r fails(B[m
ok 1496 - iwildmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'(B[m
ok 42 - rebase -p --onto does not drop patches in onto(B[m
ok 30 - Recursive with -r but dirty(B[m
ok 16 - add ignored ones with -f(B[m
ok 1497 - pathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'(B[m
ok 31 - Recursive with -r -f(B[m
ok 1498 - pathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'(B[m
ok 32 - Remove nonexistent file returns nonzero exit status(B[m
ok 107 - git rebase --apply --fork-point --onto master... master with our changes is noop with same HEAD(B[m
ok 1 - setup(B[m
ok 1499 - ipathmatch: match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt' '**/*a*b*g*n*t'(B[m
ok 17 - .gitignore with subdirectory(B[m
ok 1500 - ipathmatch (via ls-files): match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txt'(B[m
ok 18 - check correct prefix detection(B[m
ok 2 - --pathspec-from-file from stdin(B[m
ok 33 - Call "rm" from outside the work tree(B[m
ok 43 - setup of linear history for empty commit tests(B[m
ok 1501 - cleanup after previous file test(B[m
ok 27 - --abort refuses to clobber unrelated change, harder case(B[m
ok 3 - --pathspec-from-file from file(B[m
ok 34 - refresh index before checking if it is up-to-date(B[m
ok 1502 - setup match file test for abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz(B[m
ok 108 - git rebase --apply --no-ff --fork-point --onto master... master with our changes is work with same HEAD(B[m
ok 1503 - wildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'(B[m
ok 1 - setup(B[m
ok 4 - NUL delimiters(B[m
ok 1504 - wildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'(B[m
ok 19 - git add with filemode=0, symlinks=0, and unmerged entries(B[m
[33mnot ok 44 - rebase --apply keeps begin-empty commits # TODO known breakage(B[m
ok 1505 - iwildmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'(B[m
ok 2 - Tag object length check(B[m
ok 28 - cherry-pick still writes sequencer state when one commit is left(B[m
ok 5 - LF delimiters(B[m
ok 109 - git rebase --merge --fork-point --onto master... master with our changes is noop with same HEAD(B[m
ok 1506 - iwildmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'(B[m
ok 3 - "object" line label check(B[m
ok 1 - git cherry-pick: added submodule creates empty directory(B[m
ok 1507 - pathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'(B[m
ok 4 - "object" line SHA1 check(B[m
ok 6 - no trailing delimiter(B[m
ok 1508 - pathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'(B[m
ok 5 - "type" line label check(B[m
ok 1509 - ipathmatch: no match 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz' '**/*a*b*g*n*t'(B[m
ok 20 - git add with filemode=0, symlinks=0 prefers stage 2 over stage 1(B[m
ok 45 - rebase -m keeps begin-empty commits(B[m
ok 6 - "type" line eol check(B[m
ok 110 - git rebase --merge --no-ff --fork-point --onto master... master with our changes is work with same HEAD(B[m
ok 1510 - ipathmatch (via ls-files): no match '**/*a*b*g*n*t' 'abcd/abcdefg/abcdefghijk/abcdefghijklmnop.txtz'(B[m
ok 7 - CRLF delimiters(B[m
ok 29 - --abort after last commit in sequence(B[m
ok 7 - "tag" line label check #1(B[m
ok 1511 - cleanup after previous file test(B[m
ok 8 - "tag" line label check #2(B[m
ok 8 - quotes(B[m
ok 1512 - setup match file test for foo(B[m
ok 21 - git add --refresh(B[m
ok 9 - "type" line type-name length check(B[m
ok 1513 - wildmatch: no match 'foo' '*/*/*'(B[m
ok 9 - quotes not compatible with --pathspec-file-nul(B[m
ok 21 - rebase -p re-creates history around dropped commit matching upstream(B[m
ok 111 - git rebase --apply --fork-point --keep-base master with our changes is noop with same HEAD(B[m
ok 46 - rebase -i keeps begin-empty commits(B[m
ok 10 - verify object (SHA1/type) check(B[m
ok 30 - cherry-pick does not implicitly stomp an existing operation(B[m
ok 1514 - wildmatch (via ls-files): no match '*/*/*' 'foo'(B[m
ok 11 - verify tag-name check(B[m
ok 1515 - iwildmatch: no match 'foo' '*/*/*'(B[m
ok 10 - only touches what was listed(B[m
ok 12 - "tagger" line label check #1(B[m
ok 22 - git add --refresh with pathspec(B[m
ok 31 - --continue complains when no cherry-pick is in progress(B[m
ok 1516 - iwildmatch (via ls-files): no match '*/*/*' 'foo'(B[m
ok 1517 - pathmatch: no match 'foo' '*/*/*'(B[m
ok 13 - "tagger" line label check #2(B[m
ok 112 - git rebase --apply --no-ff --fork-point --keep-base master with our changes is work with same HEAD(B[m
ok 1518 - pathmatch (via ls-files): no match '*/*/*' 'foo'(B[m
ok 14 - disallow missing tag author name(B[m
ok 1519 - ipathmatch: no match 'foo' '*/*/*'(B[m
ok 32 - --continue complains when there are unresolved conflicts(B[m
ok 15 - disallow malformed tagger(B[m
ok 11 - error conditions(B[m
ok 23 - git add should fail atomically upon an unreadable file(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 1520 - ipathmatch (via ls-files): no match '*/*/*' 'foo'(B[m
ok 16 - allow empty tag email(B[m
*** t3900-i18n-commit.sh ***
ok 113 - git rebase --merge --fork-point --keep-base master with our changes is noop with same HEAD(B[m
ok 1 - git_revert: added submodule creates empty directory(B[m
ok 15 - git_rebase_interactive: added submodule creates empty directory(B[m
ok 1521 - cleanup after previous file test(B[m
ok 17 - disallow spaces in tag email(B[m
ok 24 - git add --ignore-errors(B[m
ok 18 - disallow missing tag timestamp(B[m
ok 1522 - setup match file test for foo/bar(B[m
ok 1523 - wildmatch: no match 'foo/bar' '*/*/*'(B[m
ok 19 - detect invalid tag timestamp1(B[m
ok 33 - --continue of single cherry-pick(B[m
ok 1524 - wildmatch (via ls-files): no match '*/*/*' 'foo/bar'(B[m
ok 20 - detect invalid tag timestamp2(B[m
ok 114 - git rebase --merge --no-ff --fork-point --keep-base master with our changes is work with same HEAD(B[m
ok 25 - git add (add.ignore-errors)(B[m
ok 1525 - iwildmatch: no match 'foo/bar' '*/*/*'(B[m
ok 21 - detect invalid tag timezone1(B[m
ok 1526 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bar'(B[m
ok 1 - setup(B[m
ok 22 - detect invalid tag timezone2(B[m
ok 1527 - pathmatch: no match 'foo/bar' '*/*/*'(B[m
ok 2 - no encoding header for base case(B[m
ok 115 - add work same to upstream(B[m
ok 26 - git add (add.ignore-errors = false)(B[m
ok 23 - detect invalid tag timezone3(B[m
ok 1528 - pathmatch (via ls-files): no match '*/*/*' 'foo/bar'(B[m
ok 3 - UTF-16 refused because of NULs(B[m
ok 1529 - ipathmatch: no match 'foo/bar' '*/*/*'(B[m
ok 24 - detect invalid header entry(B[m
ok 25 - create valid tag(B[m
ok 1530 - ipathmatch (via ls-files): no match '*/*/*' 'foo/bar'(B[m
ok 4 - UTF-8 invalid characters refused(B[m
ok 27 - --no-ignore-errors overrides config(B[m
ok 116 - git rebase --apply --onto B B with our and their changes is noop with same HEAD(B[m
ok 26 - check mytag(B[m
ok 34 - --continue of single revert(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
ok 1531 - cleanup after previous file test(B[m
*** t3901-i18n-patch.sh ***
ok 5 - UTF-8 overlong sequences rejected(B[m
ok 1532 - setup match file test for foo/bba/arr(B[m
ok 28 - git add 'fo\[ou\]bar' ignores foobar(B[m
ok 1533 - wildmatch: match 'foo/bba/arr' '*/*/*'(B[m
ok 35 - choking "git rm" should not let it die with cruft(B[m
ok 6 - UTF-8 non-characters refused(B[m
ok 1534 - wildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'(B[m
ok 29 - git add to resolve conflicts on otherwise ignored path(B[m
ok 7 - UTF-8 non-characters refused(B[m
ok 117 - git rebase --apply --no-ff --onto B B with our and their changes is work with diff HEAD(B[m
ok 1535 - iwildmatch: match 'foo/bba/arr' '*/*/*'(B[m
ok 35 - --continue after resolving conflicts(B[m
ok 30 - "add non-existent" should fail(B[m
ok 1536 - iwildmatch (via ls-files): match '*/*/*' 'foo/bba/arr'(B[m
ok 8 - ISO8859-1 setup(B[m
ok 2 - git cherry-pick: added submodule leaves existing empty directory alone(B[m
ok 1537 - pathmatch: match 'foo/bba/arr' '*/*/*'(B[m
ok 36 - Resolving by removal is not a warning-worthy event(B[m
ok 31 - git add -A on empty repo does not error out(B[m
ok 1538 - pathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'(B[m
ok 118 - git rebase --merge --onto B B with our and their changes is noop with same HEAD(B[m
ok 37 - rm removes subdirectories recursively(B[m
ok 9 - eucJP setup(B[m
ok 1539 - ipathmatch: match 'foo/bba/arr' '*/*/*'(B[m
ok 32 - "git add ." in empty repo(B[m
ok 1540 - ipathmatch (via ls-files): match '*/*/*' 'foo/bba/arr'(B[m
ok 10 - ISO-2022-JP setup(B[m
ok 36 - --continue after resolving conflicts and committing(B[m
ok 11 - check encoding header for ISO8859-1(B[m
ok 1 - setup(B[m
ok 1541 - cleanup after previous file test(B[m
ok 33 - error on a repository with no commits(B[m
ok 12 - check encoding header for eucJP(B[m
ok 119 - git rebase --merge --no-ff --onto B B with our and their changes is work with diff HEAD(B[m
ok 13 - check encoding header for ISO-2022-JP(B[m
ok 34 - git add --dry-run of existing changed file(B[m
ok 1542 - setup match file test for foo/bb/aa/rr(B[m
ok 35 - git add --dry-run of non-existing file(B[m
ok 2 - format-patch output (ISO-8859-1)(B[m
ok 1543 - wildmatch: no match 'foo/bb/aa/rr' '*/*/*'(B[m
ok 36 - git add --dry-run of an existing file output(B[m
ok 14 - config to remove customization(B[m
ok 1544 - wildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'(B[m
ok 15 - ISO8859-1 should be shown in UTF-8 now(B[m
ok 37 - git add --dry-run --ignore-missing of non-existing file(B[m
ok 37 - --continue asks for help after resolving patch to nil(B[m
ok 1545 - iwildmatch: no match 'foo/bb/aa/rr' '*/*/*'(B[m
ok 3 - format-patch output (UTF-8)(B[m
ok 38 - git add --dry-run --ignore-missing of non-existing file output(B[m
ok 120 - git rebase --apply --onto B... B with our and their changes is noop with same HEAD(B[m
ok 16 - eucJP should be shown in UTF-8 now(B[m
ok 39 - git add empty string should fail(B[m
ok 17 - ISO-2022-JP should be shown in UTF-8 now(B[m
ok 1546 - iwildmatch (via ls-files): no match '*/*/*' 'foo/bb/aa/rr'(B[m
ok 1547 - pathmatch: match 'foo/bb/aa/rr' '*/*/*'(B[m
ok 18 - config to add customization(B[m
ok 38 - rm removes empty submodules from work tree(B[m
ok 40 - git add --chmod=[+-]x stages correctly(B[m
ok 1548 - pathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'(B[m
ok 19 - ISO8859-1 should be shown in itself now(B[m
ok 1549 - ipathmatch: match 'foo/bb/aa/rr' '*/*/*'(B[m
ok 4 - rebase (U/U)(B[m
ok 121 - git rebase --apply --no-ff --onto B... B with our and their changes is work with diff HEAD(B[m
ok 38 - follow advice and skip nil patch(B[m
ok 20 - eucJP should be shown in itself now(B[m
ok 1550 - ipathmatch (via ls-files): match '*/*/*' 'foo/bb/aa/rr'(B[m
ok 41 - git add --chmod=+x with symlinks(B[m
ok 21 - ISO-2022-JP should be shown in itself now(B[m
ok 1551 - cleanup after previous file test(B[m
ok 22 - config to tweak customization(B[m
ok 23 - ISO8859-1 should be shown in UTF-8 now(B[m
ok 122 - git rebase --merge --onto B... B with our and their changes is noop with same HEAD(B[m
ok 1552 - setup match file test for foo/bb/aa/rr(B[m
ok 24 - eucJP should be shown in UTF-8 now(B[m
ok 42 - git add --chmod=[+-]x changes index with already added file(B[m
ok 1553 - wildmatch: match 'foo/bb/aa/rr' '**/**/**'(B[m
ok 2 - git_revert: added submodule leaves existing empty directory alone(B[m
ok 5 - rebase (U/L)(B[m
ok 25 - ISO-2022-JP should be shown in UTF-8 now(B[m
ok 43 - git add --chmod=[+-]x does not change the working tree(B[m
ok 1554 - wildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'(B[m
ok 26 - eucJP should be shown in eucJP now(B[m
ok 1555 - iwildmatch: match 'foo/bb/aa/rr' '**/**/**'(B[m
ok 39 - --continue respects opts(B[m
ok 27 - ISO-2022-JP should be shown in eucJP now(B[m
ok 16 - git_rebase_interactive: added submodule leaves existing empty directory alone(B[m
ok 44 - no file status change if no pathspec is given(B[m
ok 1556 - iwildmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'(B[m
ok 123 - git rebase --merge --no-ff --onto B... B with our and their changes is work with diff HEAD(B[m
ok 1557 - pathmatch: match 'foo/bb/aa/rr' '**/**/**'(B[m
ok 28 - eucJP should be shown in ISO-2022-JP now(B[m
ok 6 - rebase (L/L)(B[m
ok 1558 - pathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'(B[m
ok 45 - no file status change if no pathspec is given in subdir(B[m
ok 39 - rm removes removed submodule from index and .gitmodules(B[m
ok 29 - ISO-2022-JP should be shown in ISO-2022-JP now(B[m
ok 1559 - ipathmatch: match 'foo/bb/aa/rr' '**/**/**'(B[m
ok 40 - --continue of single-pick respects -x(B[m
ok 124 - git rebase --apply --onto master... master with our and their changes is noop with same HEAD(B[m
ok 30 - No conversion with ISO8859-1(B[m
ok 1560 - ipathmatch (via ls-files): match '**/**/**' 'foo/bb/aa/rr'(B[m
ok 31 - No conversion with eucJP(B[m
ok 46 - all statuses changed in folder if . is given(B[m
ok 1561 - cleanup after previous file test(B[m
[34mok 47 # skip path is case-insensitive (missing CASE_INSENSITIVE_FS)(B[m
ok 32 - No conversion with ISO-2022-JP(B[m
[32m# passed all 47 test(s)(B[m
[36m1..47(B[m
ok 7 - rebase (L/U)(B[m
*** t3902-quoted.sh ***
ok 1562 - setup match file test for abcXdefXghi(B[m
ok 1563 - wildmatch: match 'abcXdefXghi' '*X*i'(B[m
ok 125 - git rebase --apply --no-ff --onto master... master with our and their changes is work with diff HEAD(B[m
ok 41 - --continue respects -x in first commit in multi-pick(B[m
ok 1564 - wildmatch (via ls-files): match '*X*i' 'abcXdefXghi'(B[m
ok 1565 - iwildmatch: match 'abcXdefXghi' '*X*i'(B[m
ok 3 - git cherry-pick: replace tracked file with submodule creates empty directory(B[m
ok 1566 - iwildmatch (via ls-files): match '*X*i' 'abcXdefXghi'(B[m
ok 126 - git rebase --merge --onto master... master with our and their changes is noop with same HEAD(B[m
ok 1567 - pathmatch: match 'abcXdefXghi' '*X*i'(B[m
ok 8 - cherry-pick(U/U)(B[m
ok 33 - commit --fixup with eucJP encoding(B[m
ok 1568 - pathmatch (via ls-files): match '*X*i' 'abcXdefXghi'(B[m
ok 1 - setup(B[m
ok 1569 - ipathmatch: match 'abcXdefXghi' '*X*i'(B[m
ok 2 - setup expected files(B[m
[33mnot ok 42 - --signoff is automatically propagated to resolved conflict # TODO known breakage(B[m
[33mnot ok 47 - rebase -p keeps begin-empty commits # TODO known breakage(B[m
ok 1570 - ipathmatch (via ls-files): match '*X*i' 'abcXdefXghi'(B[m
ok 3 - check fully quoted output from ls-files(B[m
ok 127 - git rebase --merge --no-ff --onto master... master with our and their changes is work with diff HEAD(B[m
ok 4 - check fully quoted output from diff-files(B[m
ok 1571 - cleanup after previous file test(B[m
ok 5 - check fully quoted output from diff-index(B[m
ok 9 - cherry-pick(L/L)(B[m
ok 1572 - setup match file test for ab/cXd/efXg/hi(B[m
ok 6 - check fully quoted output from diff-tree(B[m
ok 1573 - wildmatch: no match 'ab/cXd/efXg/hi' '*X*i'(B[m
ok 7 - check fully quoted output from ls-tree(B[m
ok 128 - git rebase --apply --keep-base master with our and their changes is noop with same HEAD(B[m
ok 34 - commit --squash with ISO-2022-JP encoding(B[m
ok 8 - setting core.quotepath(B[m
ok 1574 - wildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'(B[m
ok 48 - rebase --apply --keep-empty(B[m
ok 1575 - iwildmatch: no match 'ab/cXd/efXg/hi' '*X*i'(B[m
[33mnot ok 43 - --signoff dropped for implicit commit of resolution, multi-pick case # TODO known breakage(B[m
ok 9 - check fully quoted output from ls-files(B[m
ok 40 - rm removes work tree of unmodified submodules(B[m
ok 10 - check fully quoted output from diff-files(B[m
ok 1576 - iwildmatch (via ls-files): no match '*X*i' 'ab/cXd/efXg/hi'(B[m
ok 1577 - pathmatch: match 'ab/cXd/efXg/hi' '*X*i'(B[m
ok 11 - check fully quoted output from diff-index(B[m
ok 10 - cherry-pick(U/L)(B[m
ok 129 - git rebase --apply --no-ff --keep-base master with our and their changes is work with diff HEAD(B[m
ok 12 - check fully quoted output from diff-tree(B[m
ok 1578 - pathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'(B[m
ok 13 - check fully quoted output from ls-tree(B[m
ok 49 - rebase -m --keep-empty(B[m
ok 1579 - ipathmatch: match 'ab/cXd/efXg/hi' '*X*i'(B[m
[33mnot ok 4 - git cherry-pick: replace directory with submodule # TODO known breakage(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
*** t3903-stash.sh ***
[33mnot ok 44 - sign-off needs to be reaffirmed after conflict resolution, single-pick case # TODO known breakage(B[m
ok 1580 - ipathmatch (via ls-files): match '*X*i' 'ab/cXd/efXg/hi'(B[m
ok 35 - commit --fixup into UTF-8 from ISO-8859-1(B[m
ok 130 - git rebase --merge --keep-base master with our and their changes is noop with same HEAD(B[m
ok 1581 - cleanup after previous file test(B[m
ok 1582 - setup match file test for ab/cXd/efXg/hi(B[m
ok 11 - cherry-pick(L/U)(B[m
ok 50 - rebase -i --keep-empty(B[m
ok 1583 - wildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'(B[m
ok 22 - rebase -p --onto in merged history drops patches in upstream(B[m
ok 45 - malformed instruction sheet 1(B[m
ok 1584 - wildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'(B[m
ok 131 - git rebase --merge --no-ff --keep-base master with our and their changes is work with diff HEAD(B[m
ok 1585 - iwildmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'(B[m
ok 3 - git_revert: replace tracked file with submodule creates empty directory(B[m
ok 1586 - iwildmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'(B[m
ok 12 - rebase --merge (U/U)(B[m
ok 1587 - pathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'(B[m
ok 1 - stash some dirty working directory(B[m
ok 51 - rebase -p --keep-empty(B[m
ok 36 - commit --squash into ISO-8859-1 from UTF-8(B[m
ok 132 - git rebase --apply --keep-base with our and their changes is noop with same HEAD(B[m
ok 1588 - pathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'(B[m
ok 46 - malformed instruction sheet 2(B[m
ok 1589 - ipathmatch: match 'ab/cXd/efXg/hi' '*/*X*/*/*i'(B[m
ok 2 - parents of stash(B[m
ok 1590 - ipathmatch (via ls-files): match '*/*X*/*/*i' 'ab/cXd/efXg/hi'(B[m
ok 3 - applying bogus stash does nothing(B[m
ok 47 - empty commit set (no commits to walk)(B[m
ok 17 - git_rebase_interactive: replace tracked file with submodule creates empty directory(B[m
ok 1591 - cleanup after previous file test(B[m
ok 13 - rebase --merge (U/L)(B[m
ok 41 - rm removes a submodule with a trailing /(B[m
ok 52 - rebase --apply --keep-empty keeps empty even if already in upstream(B[m
ok 133 - git rebase --apply --no-ff --keep-base with our and their changes is work with diff HEAD(B[m
ok 4 - apply does not need clean working directory(B[m
ok 42 - rm fails when given a file with a trailing /(B[m
ok 1592 - setup match file test for ab/cXd/efXg/hi(B[m
ok 48 - empty commit set (culled during walk)(B[m
ok 43 - rm succeeds when given a directory with a trailing /(B[m
ok 1593 - wildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'(B[m
ok 5 - apply does not clobber working directory changes(B[m
ok 1594 - wildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'(B[m
ok 37 - commit --squash into eucJP from ISO-2022-JP(B[m
ok 134 - git rebase --merge --keep-base with our and their changes is noop with same HEAD(B[m
ok 1595 - iwildmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'(B[m
ok 14 - rebase --merge (L/L)(B[m
ok 53 - rebase -m --keep-empty keeps empty even if already in upstream(B[m
ok 1596 - iwildmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'(B[m
ok 49 - malformed instruction sheet 3(B[m
ok 1597 - pathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'(B[m
ok 6 - apply stashed changes(B[m
ok 1598 - pathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'(B[m
ok 1599 - ipathmatch: match 'ab/cXd/efXg/hi' '**/*X*/**/*i'(B[m
ok 135 - git rebase --merge --no-ff --keep-base with our and their changes is work with diff HEAD(B[m
ok 1600 - ipathmatch (via ls-files): match '**/*X*/**/*i' 'ab/cXd/efXg/hi'(B[m
ok 15 - rebase --merge (L/U)(B[m
ok 54 - rebase -i --keep-empty keeps empty even if already in upstream(B[m
ok 50 - instruction sheet, fat-fingers version(B[m
ok 1601 - cleanup after previous file test(B[m
[33mnot ok 136 - git rebase --apply --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage(B[m
ok 38 - commit --fixup into ISO-2022-JP from UTF-8(B[m
[32m# passed all 38 test(s)(B[m
[36m1..38(B[m
ok 5 - git cherry-pick: removed submodule leaves submodule directory and its contents in place(B[m
[33mnot ok 4 - git_revert: replace directory with submodule # TODO known breakage(B[m
ok 7 - apply stashed changes (including index)(B[m
ok 1602 - setup match file test for foo(B[m
*** t3904-stash-patch.sh ***
ok 1603 - wildmatch: no match 'foo' 'fo'(B[m
ok 16 - am (U/U)(B[m
ok 1604 - wildmatch (via ls-files): no match 'fo' 'foo'(B[m
ok 8 - unstashing in a subdirectory(B[m
ok 1605 - iwildmatch: no match 'foo' 'fo'(B[m
ok 55 - rebase -p --keep-empty keeps empty even if already in upstream(B[m
ok 9 - stash drop complains of extra options(B[m
ok 137 - git rebase --apply --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD(B[m
ok 51 - commit descriptions in insn sheet are optional(B[m
ok 1606 - iwildmatch (via ls-files): no match 'fo' 'foo'(B[m
[33m# still have 3 known breakage(s)(B[m
[32m# passed all remaining 48 test(s)(B[m
[36m1..51(B[m
ok 1607 - pathmatch: no match 'foo' 'fo'(B[m
[36m1..0 # SKIP skipping stash -p tests, perl not available(B[m
*** t3905-stash-include-untracked.sh ***
*** t3906-stash-submodule.sh ***
ok 17 - am (L/L)(B[m
ok 1608 - pathmatch (via ls-files): no match 'fo' 'foo'(B[m
[33mnot ok 138 - git rebase --merge --fork-point --onto B B with our and their changes is work with same HEAD # TODO known breakage(B[m
ok 1609 - ipathmatch: no match 'foo' 'fo'(B[m
ok 56 - rebase --rebase-merges --keep-empty keeps empty even if already in upstream(B[m
ok 1610 - ipathmatch (via ls-files): no match 'fo' 'foo'(B[m
ok 1611 - cleanup after previous file test(B[m
ok 18 - am (U/L)(B[m
ok 44 - rm of a populated submodule with different HEAD fails unless forced(B[m
ok 10 - drop top stash(B[m
ok 139 - git rebase --merge --no-ff --fork-point --onto B B with our and their changes is work with diff HEAD(B[m
ok 1612 - setup match file test for foo/bar(B[m
ok 1613 - wildmatch: match 'foo/bar' 'foo/bar'(B[m
ok 1614 - wildmatch (via ls-files): match 'foo/bar' 'foo/bar'(B[m
ok 1 - stash save --include-untracked some dirty working directory(B[m
ok 1615 - iwildmatch: match 'foo/bar' 'foo/bar'(B[m
[33mnot ok 140 - git rebase --apply --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage(B[m
ok 19 - am --no-utf8 (U/L)(B[m
ok 2 - stash save --include-untracked cleaned the untracked files(B[m
ok 1616 - iwildmatch (via ls-files): match 'foo/bar' 'foo/bar'(B[m
ok 57 - setup of linear history for test involving root(B[m
ok 1617 - pathmatch: match 'foo/bar' 'foo/bar'(B[m
ok 1618 - pathmatch (via ls-files): match 'foo/bar' 'foo/bar'(B[m
ok 1619 - ipathmatch: match 'foo/bar' 'foo/bar'(B[m
ok 3 - stash save --include-untracked stashed the untracked files(B[m
ok 20 - am (L/U)(B[m
ok 141 - git rebase --apply --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD(B[m
[32m# passed all 20 test(s)(B[m
[36m1..20(B[m
ok 4 - stash save --patch --include-untracked fails(B[m
ok 1620 - ipathmatch (via ls-files): match 'foo/bar' 'foo/bar'(B[m
*** t3907-stash-show-config.sh ***
ok 5 - stash save --patch --all fails(B[m
ok 1621 - cleanup after previous file test(B[m
ok 58 - rebase --apply --onto --root(B[m
[33mnot ok 142 - git rebase --merge --fork-point --onto B... B with our and their changes is work with same HEAD # TODO known breakage(B[m
ok 1622 - setup match file test for foo/bar(B[m
ok 11 - drop middle stash(B[m
ok 1623 - wildmatch: match 'foo/bar' 'foo/*'(B[m
ok 1624 - wildmatch (via ls-files): match 'foo/*' 'foo/bar'(B[m
ok 6 - stash pop after save --include-untracked leaves files untracked again(B[m
ok 1625 - iwildmatch: match 'foo/bar' 'foo/*'(B[m
ok 45 - rm --cached leaves work tree of populated submodules and .gitmodules alone(B[m
ok 59 - rebase -m --onto --root(B[m
ok 1 - setup(B[m
ok 143 - git rebase --merge --no-ff --fork-point --onto B... B with our and their changes is work with diff HEAD(B[m
ok 18 - git_rebase_interactive: replace directory with submodule(B[m
ok 1626 - iwildmatch (via ls-files): match 'foo/*' 'foo/bar'(B[m
ok 1627 - pathmatch: match 'foo/bar' 'foo/*'(B[m
ok 7 - stash save -u dirty index(B[m
ok 5 - git_revert: removed submodule leaves submodule directory and its contents in place(B[m
ok 1628 - pathmatch (via ls-files): match 'foo/*' 'foo/bar'(B[m
ok 6 - git cherry-pick: removed submodule leaves submodule containing a .git directory alone(B[m
ok 1629 - ipathmatch: match 'foo/bar' 'foo/*'(B[m
ok 144 - git rebase --apply --fork-point --onto master... master with our and their changes is noop with same HEAD(B[m
ok 2 - showStat unset showPatch unset(B[m
ok 1630 - ipathmatch (via ls-files): match 'foo/*' 'foo/bar'(B[m
ok 60 - rebase -i --onto --root(B[m
ok 8 - stash save --include-untracked dirty index got stashed(B[m
ok 1631 - cleanup after previous file test(B[m
ok 1632 - setup match file test for foo/bba/arr(B[m
ok 3 - showStat unset showPatch false(B[m
ok 12 - drop middle stash by index(B[m
ok 1633 - wildmatch: no match 'foo/bba/arr' 'foo/*'(B[m
ok 145 - git rebase --apply --no-ff --fork-point --onto master... master with our and their changes is work with diff HEAD(B[m
ok 9 - stash save --include-untracked -q is quiet(B[m
ok 1634 - wildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'(B[m
ok 1635 - iwildmatch: no match 'foo/bba/arr' 'foo/*'(B[m
ok 10 - stash save --include-untracked removed files(B[m
ok 1636 - iwildmatch (via ls-files): no match 'foo/*' 'foo/bba/arr'(B[m
ok 4 - showStat unset showPatch true(B[m
ok 146 - git rebase --merge --fork-point --onto master... master with our and their changes is noop with same HEAD(B[m
ok 13 - stash pop(B[m
ok 1637 - pathmatch: match 'foo/bba/arr' 'foo/*'(B[m
ok 1638 - pathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'(B[m
ok 11 - stash save --include-untracked removed files got stashed(B[m
ok 1639 - ipathmatch: match 'foo/bba/arr' 'foo/*'(B[m
ok 46 - rm --dry-run does not touch the submodule or .gitmodules(B[m
ok 5 - showStat false showPatch unset(B[m
ok 1640 - ipathmatch (via ls-files): match 'foo/*' 'foo/bba/arr'(B[m
ok 12 - stash save --include-untracked respects .gitignore(B[m
ok 147 - git rebase --merge --no-ff --fork-point --onto master... master with our and their changes is work with diff HEAD(B[m
ok 1641 - cleanup after previous file test(B[m
ok 13 - stash save -u can stash with only untracked files different(B[m
ok 1642 - setup match file test for foo/bba/arr(B[m
ok 6 - showStat false showPatch false(B[m
ok 1643 - wildmatch: match 'foo/bba/arr' 'foo/**'(B[m
ok 148 - git rebase --apply --fork-point --keep-base master with our and their changes is noop with same HEAD(B[m
ok 1644 - wildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'(B[m
ok 14 - stash save --all does not respect .gitignore(B[m
ok 1645 - iwildmatch: match 'foo/bba/arr' 'foo/**'(B[m
ok 1646 - iwildmatch (via ls-files): match 'foo/**' 'foo/bba/arr'(B[m
ok 15 - stash save --all is stash poppable(B[m
ok 7 - showStat false showPatch true(B[m
ok 1647 - pathmatch: match 'foo/bba/arr' 'foo/**'(B[m
ok 149 - git rebase --apply --no-ff --fork-point --keep-base master with our and their changes is work with diff HEAD(B[m
ok 1648 - pathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'(B[m
ok 14 - stash branch(B[m
ok 1649 - ipathmatch: match 'foo/bba/arr' 'foo/**'(B[m
ok 1650 - ipathmatch (via ls-files): match 'foo/**' 'foo/bba/arr'(B[m
ok 8 - showStat true showPatch unset(B[m
[33mnot ok 7 - git cherry-pick: replace submodule with a directory must fail # TODO known breakage(B[m
ok 15 - apply -q is quiet(B[m
ok 16 - stash push --include-untracked with pathspec(B[m
ok 1651 - cleanup after previous file test(B[m
ok 150 - git rebase --merge --fork-point --keep-base master with our and their changes is noop with same HEAD(B[m
ok 16 - save -q is quiet(B[m
ok 1652 - setup match file test for foo/bba/arr(B[m
ok 47 - rm does not complain when no .gitmodules file is found(B[m
ok 1653 - wildmatch: no match 'foo/bba/arr' 'foo*'(B[m
ok 9 - showStat true showPatch false(B[m
ok 1654 - wildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'(B[m
ok 17 - pop -q works and is quiet(B[m
ok 151 - git rebase --merge --no-ff --fork-point --keep-base master with our and their changes is work with diff HEAD(B[m
ok 1655 - iwildmatch: no match 'foo/bba/arr' 'foo*'(B[m
ok 17 - stash push with $IFS character(B[m
ok 19 - git_rebase_interactive: removed submodule leaves submodule directory and its contents in place(B[m
[33m# still have 4 known breakage(s)(B[m
[32m# passed all remaining 147 test(s)(B[m
[36m1..151(B[m
*** t3908-stash-in-worktree.sh ***
ok 1656 - iwildmatch (via ls-files): no match 'foo*' 'foo/bba/arr'(B[m
ok 1657 - pathmatch: match 'foo/bba/arr' 'foo*'(B[m
ok 6 - git_revert: removed submodule leaves submodule containing a .git directory alone(B[m
ok 1658 - pathmatch (via ls-files): match 'foo*' 'foo/bba/arr'(B[m
ok 10 - showStat true showPatch true(B[m
ok 23 - rebase -p --onto in merged history does not drop patches in onto(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 1659 - ipathmatch: match 'foo/bba/arr' 'foo*'(B[m
ok 18 - pop -q --index works and is quiet(B[m
*** t3909-stash-pathspec-file.sh ***
ok 1660 - ipathmatch (via ls-files): match 'foo*' 'foo/bba/arr'(B[m
ok 18 - stash previously ignored file(B[m
ok 19 - drop -q is quiet(B[m
ok 1661 - cleanup after previous file test(B[m
ok 24 - setup of non-linear-history for dropping whole side(B[m
ok 1662 - setup match file test for foo/bba/arr(B[m
ok 19 - stash -u -- <untracked> doesnt print error(B[m
ok 1663 - wildmatch: no match 'foo/bba/arr' 'foo**'(B[m
ok 20 - stash -k(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 1664 - wildmatch (via ls-files): match 'foo**' 'foo/bba/arr'(B[m
ok 1665 - iwildmatch: no match 'foo/bba/arr' 'foo**'(B[m
ok 20 - stash -u -- <untracked> leaves rest of working tree in place(B[m
ok 21 - stash --no-keep-index(B[m
ok 1666 - iwildmatch (via ls-files): match 'foo**' 'foo/bba/arr'(B[m
ok 1667 - pathmatch: match 'foo/bba/arr' 'foo**'(B[m
ok 2 - apply in subdirectory(B[m
ok 2 - simplest(B[m
ok 22 - dont assume push with non-option args(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 1668 - pathmatch (via ls-files): match 'foo**' 'foo/bba/arr'(B[m
*** t3910-mac-os-precompose.sh ***
ok 21 - stash -u -- <tracked> <untracked> clears changes in both(B[m
ok 1669 - ipathmatch: match 'foo/bba/arr' 'foo**'(B[m
ok 23 - stash --invalid-option(B[m
ok 1670 - ipathmatch (via ls-files): match 'foo**' 'foo/bba/arr'(B[m
ok 22 - stash --all -- <ignored> stashes ignored file(B[m
ok 3 - --pathspec-file-nul(B[m
ok 48 - rm will error out on a modified .gitmodules file unless staged(B[m
ok 1671 - cleanup after previous file test(B[m
ok 1672 - setup match file test for foo/bba/arr(B[m
[36m1..0 # SKIP filesystem does not corrupt utf-8(B[m
ok 23 - stash --all -- <tracked> <ignored> clears changes in both(B[m
*** t4000-diff-format.sh ***
ok 1673 - wildmatch: no match 'foo/bba/arr' 'foo/*arr'(B[m
ok 24 - stash an added file(B[m
ok 24 - stash -u -- <ignored> leaves ignored file alone(B[m
ok 4 - only touches what was listed(B[m
[33mnot ok 8 - git cherry-pick: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 1674 - wildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'(B[m
ok 1675 - iwildmatch: no match 'foo/bba/arr' 'foo/*arr'(B[m
ok 25 - stash -u -- <non-existent> shows no changes when there are none(B[m
ok 25 - stash --intent-to-add file(B[m
ok 1676 - iwildmatch (via ls-files): no match 'foo/*arr' 'foo/bba/arr'(B[m
ok 1677 - pathmatch: match 'foo/bba/arr' 'foo/*arr'(B[m
ok 26 - stash -u with globs(B[m
ok 5 - error conditions(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 1 - update-index --add two files with and without +x.(B[m
ok 1678 - pathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'(B[m
*** t4001-diff-rename.sh ***
*** t4002-diff-basic.sh ***
ok 1679 - ipathmatch: match 'foo/bba/arr' 'foo/*arr'(B[m
ok 2 - git diff-files -p after editing work tree.(B[m
ok 26 - stash rm then recreate(B[m
ok 1680 - ipathmatch (via ls-files): match 'foo/*arr' 'foo/bba/arr'(B[m
ok 3 - validate git diff-files -p output.(B[m
ok 1681 - cleanup after previous file test(B[m
ok 4 - git diff-files -s after editing work tree(B[m
ok 7 - git_revert: replace submodule with a directory must fail(B[m
ok 5 - git diff-files --no-patch as synonym for -s(B[m
ok 61 - rebase -p --onto --root(B[m
ok 1682 - setup match file test for foo/bba/arr(B[m
ok 1 - setup(B[m
ok 1683 - wildmatch: no match 'foo/bba/arr' 'foo/**arr'(B[m
ok 6 - git diff-files --no-patch --patch shows the patch(B[m
ok 27 - stash rm and ignore(B[m
ok 1 - adding test file NN and Z/NN(B[m
ok 2 - update-index --add a file.(B[m
ok 1684 - wildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'(B[m
ok 3 - write that tree.(B[m
ok 2 - adding test file ND and Z/ND(B[m
ok 7 - git diff-files --no-patch --patch-with-raw shows the patch and raw data(B[m
ok 1685 - iwildmatch: no match 'foo/bba/arr' 'foo/**arr'(B[m
ok 8 - git diff-files --patch --no-patch does not show the patch(B[m
ok 4 - renamed and edited the file.(B[m
ok 3 - adding test file NM and Z/NM(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 1686 - iwildmatch (via ls-files): no match 'foo/**arr' 'foo/bba/arr'(B[m
ok 5 - git diff-index -p -M after rename and editing.(B[m
*** t4003-diff-rename-1.sh ***
ok 62 - rebase --apply without --onto --root with disjoint history(B[m
ok 20 - git_rebase_interactive: removed submodule leaves submodule containing a .git directory alone(B[m
ok 1687 - pathmatch: match 'foo/bba/arr' 'foo/**arr'(B[m
ok 4 - adding test file DN and Z/DN(B[m
ok 6 - validate the output.(B[m
ok 49 - rm will not error out on .gitmodules file with zero stat data(B[m
ok 28 - stash rm and ignore (stage .gitignore)(B[m
ok 1688 - pathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'(B[m
ok 5 - adding test file DD and Z/DD(B[m
ok 7 - test diff.renames=true(B[m
ok 1689 - ipathmatch: match 'foo/bba/arr' 'foo/**arr'(B[m
ok 6 - adding test file DM and Z/DM(B[m
ok 8 - test diff.renames=false(B[m
ok 1690 - ipathmatch (via ls-files): match 'foo/**arr' 'foo/bba/arr'(B[m
ok 7 - adding test file MN and Z/MN(B[m
ok 63 - rebase -m without --onto --root with disjoint history(B[m
ok 9 - test diff.renames unset(B[m
ok 1691 - cleanup after previous file test(B[m
ok 8 - adding test file MD and Z/MD(B[m
ok 1 - prepare reference tree(B[m
ok 29 - stash file to symlink(B[m
ok 9 - adding test file MM and Z/MM(B[m
ok 1692 - setup match file test for foo/bba/arr(B[m
ok 2 - prepare work tree(B[m
ok 10 - adding test file SS(B[m
ok 1693 - wildmatch: no match 'foo/bba/arr' 'foo/*z'(B[m
ok 11 - adding test file TT(B[m
ok 1694 - wildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'(B[m
ok 10 - favour same basenames over different ones(B[m
ok 3 - validate output from rename/copy detection (#1)(B[m
ok 12 - prepare initial tree(B[m
ok 64 - rebase -i without --onto --root with disjoint history(B[m
ok 1695 - iwildmatch: no match 'foo/bba/arr' 'foo/*z'(B[m
ok 11 - test diff.renames=true for git status(B[m
ok 4 - prepare work tree again(B[m
ok 13 - change in branch A (removal)(B[m
[33mnot ok 9 - git cherry-pick: replace submodule with a file must fail # TODO known breakage(B[m
ok 1696 - iwildmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'(B[m
ok 30 - stash file to symlink (stage rm)(B[m
ok 12 - test diff.renames=false for git status(B[m
ok 14 - change in branch A (modification)(B[m
ok 1697 - pathmatch: no match 'foo/bba/arr' 'foo/*z'(B[m
ok 5 - validate output from rename/copy detection (#2)(B[m
ok 15 - change in branch A (modification)(B[m
ok 13 - favour same basenames even with minor differences(B[m
ok 6 - prepare work tree once again(B[m
ok 1698 - pathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'(B[m
ok 16 - change in branch A (modification)(B[m
ok 1699 - ipathmatch: no match 'foo/bba/arr' 'foo/*z'(B[m
ok 17 - change in branch A (modification)(B[m
ok 7 - validate output from rename/copy detection (#3)(B[m
ok 18 - change in branch A (modification)(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 1700 - ipathmatch (via ls-files): no match 'foo/*z' 'foo/bba/arr'(B[m
*** t4004-diff-rename-symlink.sh ***
ok 19 - change in branch A (modification)(B[m
ok 31 - stash file to symlink (full stage)(B[m
ok 14 - two files with same basename and same content(B[m
ok 1701 - cleanup after previous file test(B[m
ok 20 - change in branch A (addition)(B[m
ok 21 - change in branch A (addition)(B[m
ok 1702 - setup match file test for foo/bba/arr(B[m
ok 22 - change in branch A (addition)(B[m
ok 1703 - wildmatch: no match 'foo/bba/arr' 'foo/**z'(B[m
ok 23 - change in branch A (addition)(B[m
ok 32 - stash symlink to file(B[m
ok 24 - change in branch A (addition)(B[m
ok 1704 - wildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'(B[m
ok 50 - rm issues a warning when section is not found in .gitmodules(B[m
ok 33 - this must have re-created the symlink(B[m
ok 1705 - iwildmatch: no match 'foo/bba/arr' 'foo/**z'(B[m
[33mnot ok 1 - git_stash: added submodule creates empty directory # TODO known breakage(B[m
ok 25 - change in branch A (edit)(B[m
ok 1 - prepare reference tree(B[m
ok 15 - setup for many rename source candidates(B[m
ok 1706 - iwildmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'(B[m
ok 26 - change in branch A (change file to directory)(B[m
ok 34 - unstash must re-create the file(B[m
ok 1707 - pathmatch: no match 'foo/bba/arr' 'foo/**z'(B[m
ok 27 - recording branch A tree(B[m
ok 2 - prepare work tree(B[m
ok 1708 - pathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'(B[m
ok 3 - setup diff output(B[m
ok 28 - reading original tree and checking out(B[m
ok 1709 - ipathmatch: no match 'foo/bba/arr' 'foo/**z'(B[m
ok 8 - git_revert: replace submodule containing a .git directory with a directory must fail(B[m
ok 35 - stash symlink to file (stage rm)(B[m
ok 29 - change in branch B (removal)(B[m
ok 36 - this must have re-created the symlink(B[m
ok 4 - validate diff output(B[m
ok 16 - rename pretty print with nothing in common(B[m
ok 1710 - ipathmatch (via ls-files): no match 'foo/**z' 'foo/bba/arr'(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 30 - change in branch B (modification)(B[m
*** t4005-diff-rename-2.sh ***
ok 31 - change in branch B (modification)(B[m
ok 1711 - cleanup after previous file test(B[m
ok 37 - unstash must re-create the file(B[m
ok 32 - change in branch B (modification)(B[m
ok 33 - change in branch B (modification)(B[m
ok 1712 - setup match file test for foo/bar(B[m
ok 17 - rename pretty print with common prefix(B[m
ok 34 - change in branch B (modification)(B[m
ok 1713 - wildmatch: no match 'foo/bar' 'foo?bar'(B[m
ok 35 - change in branch B (modification)(B[m
ok 38 - stash symlink to file (full stage)(B[m
ok 1714 - wildmatch (via ls-files): no match 'foo?bar' 'foo/bar'(B[m
ok 36 - change in branch B (addition)(B[m
ok 21 - git_rebase_interactive: replace submodule with a directory must fail(B[m
ok 39 - this must have re-created the symlink(B[m
ok 1715 - iwildmatch: no match 'foo/bar' 'foo?bar'(B[m
ok 37 - change in branch B (addition)(B[m
ok 18 - rename pretty print with common suffix(B[m
ok 38 - change in branch B (addition)(B[m
ok 1716 - iwildmatch (via ls-files): no match 'foo?bar' 'foo/bar'(B[m
ok 40 - unstash must re-create the file(B[m
ok 39 - change in branch B (addition)(B[m
ok 1717 - pathmatch: match 'foo/bar' 'foo?bar'(B[m
ok 1 - setup reference tree(B[m
ok 40 - change in branch B (addition and modification)(B[m
ok 19 - rename pretty print with common prefix and suffix(B[m
ok 1718 - pathmatch (via ls-files): match 'foo?bar' 'foo/bar'(B[m
ok 1719 - ipathmatch: match 'foo/bar' 'foo?bar'(B[m
ok 41 - change in branch B (modification)(B[m
ok 2 - validate output from rename/copy detection (#1)(B[m
[33mnot ok 10 - git cherry-pick: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 42 - change in branch B (addition of a file to conflict with directory)(B[m
[33mnot ok 2 - git_stash: added submodule leaves existing empty directory alone # TODO known breakage(B[m
ok 1720 - ipathmatch (via ls-files): match 'foo?bar' 'foo/bar'(B[m
ok 43 - recording branch B tree(B[m
ok 20 - rename pretty print common prefix and suffix overlap(B[m
ok 3 - validate output from rename/copy detection (#2)(B[m
[33mnot ok 41 - stash directory to file # TODO known breakage(B[m
ok 1721 - cleanup after previous file test(B[m
ok 1722 - setup match file test for foo/bar(B[m
ok 1723 - wildmatch: no match 'foo/bar' 'foo[/]bar'(B[m
ok 4 - validate output from rename/copy detection (#3)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t4006-diff-mode.sh ***
ok 44 - keep contents of 3 trees for easy access(B[m
ok 21 - diff-tree -l0 defaults to a big rename limit, not zero(B[m
ok 1724 - wildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
[33mnot ok 25 - rebase -p drops merge commit when entire first-parent side is dropped # TODO known breakage(B[m
[33mnot ok 42 - stash file to directory # TODO known breakage(B[m
ok 1725 - iwildmatch: no match 'foo/bar' 'foo[/]bar'(B[m
ok 51 - rm of a populated submodule with modifications fails unless forced(B[m
*** t4007-rename-3.sh ***
ok 1726 - iwildmatch (via ls-files): no match 'foo[/]bar' 'foo/bar'(B[m
ok 1727 - pathmatch: match 'foo/bar' 'foo[/]bar'(B[m
ok 1728 - pathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'(B[m
ok 1729 - ipathmatch: match 'foo/bar' 'foo[/]bar'(B[m
ok 1 - setup(B[m
ok 1730 - ipathmatch (via ls-files): match 'foo[/]bar' 'foo/bar'(B[m
ok 2 - chmod(B[m
ok 1731 - cleanup after previous file test(B[m
ok 1 - prepare reference tree(B[m
ok 43 - giving too many ref arguments does not modify files(B[m
ok 1732 - setup match file test for foo/bar(B[m
ok 3 - prepare binary file(B[m
ok 2 - prepare work tree(B[m
ok 1733 - wildmatch: no match 'foo/bar' 'foo[^a-z]bar'(B[m
[33mnot ok 9 - git_revert: replace submodule with a file must fail # TODO known breakage(B[m
ok 3 - copy detection(B[m
ok 1734 - wildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 44 - drop: too many arguments errors out (does nothing)(B[m
ok 4 - --stat output after text chmod(B[m
ok 1735 - iwildmatch: no match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 4 - copy detection, cached(B[m
ok 45 - show: too many arguments errors out (does nothing)(B[m
ok 5 - --shortstat output after text chmod(B[m
[33mnot ok 3 - git_stash: replace tracked file with submodule creates empty directory # TODO known breakage(B[m
ok 1736 - iwildmatch (via ls-files): no match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 1737 - pathmatch: match 'foo/bar' 'foo[^a-z]bar'(B[m
ok 5 - copy, limited to a subtree(B[m
[33mnot ok 65 - rebase -p without --onto --root with disjoint history # TODO known breakage(B[m
ok 6 - --stat output after binary chmod(B[m
ok 6 - tweak work tree(B[m
ok 46 - stash create - no changes(B[m
ok 1738 - pathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 7 - --shortstat output after binary chmod(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 1739 - ipathmatch: match 'foo/bar' 'foo[^a-z]bar'(B[m
*** t4008-diff-break-rewrite.sh ***
ok 7 - rename detection(B[m
ok 1740 - ipathmatch (via ls-files): match 'foo[^a-z]bar' 'foo/bar'(B[m
ok 8 - rename, limited to a subtree(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 1741 - cleanup after previous file test(B[m
*** t4009-diff-rename-4.sh ***
ok 66 - rebase --apply --onto --root drops patch in onto(B[m
ok 1742 - setup match file test for ab/cXd/efXg/hi(B[m
ok 1743 - wildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'(B[m
ok 47 - stash branch - no stashes on stack, stash-like argument(B[m
ok 1744 - wildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'(B[m
ok 1745 - iwildmatch: no match 'ab/cXd/efXg/hi' '*Xg*i'(B[m
ok 22 - git_rebase_interactive: replace submodule containing a .git directory with a directory must fail(B[m
ok 1 - setup(B[m
ok 52 - rm of a populated submodule with untracked files fails unless forced(B[m
ok 67 - rebase -m --onto --root drops patch in onto(B[m
ok 1746 - iwildmatch (via ls-files): no match '*Xg*i' 'ab/cXd/efXg/hi'(B[m
ok 2 - change file1 with copy-edit of file0 and remove file0(B[m
ok 1 - prepare reference tree(B[m
ok 1747 - pathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'(B[m
ok 1748 - pathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'(B[m
ok 3 - run diff with -B (#1)(B[m
ok 2 - prepare work tree(B[m
ok 1749 - ipathmatch: match 'ab/cXd/efXg/hi' '*Xg*i'(B[m
ok 4 - run diff with -B and -M (#2)(B[m
ok 1750 - ipathmatch (via ls-files): match '*Xg*i' 'ab/cXd/efXg/hi'(B[m
ok 68 - rebase -i --onto --root drops patch in onto(B[m
ok 3 - validate output from rename/copy detection (#1)(B[m
ok 1751 - cleanup after previous file test(B[m
ok 4 - prepare work tree again(B[m
ok 45 - diff-tree of known trees.(B[m
ok 5 - swap file0 and file1(B[m
[33mnot ok 4 - git_stash: replace directory with submodule # TODO known breakage(B[m
ok 46 - diff-tree of known trees.(B[m
ok 11 - git cherry-pick: modified submodule does not update submodule work tree(B[m
ok 48 - stash branch - stashes on stack, stash-like argument(B[m
ok 1752 - setup match file test for a(B[m
ok 5 - validate output from rename/copy detection (#2)(B[m
ok 47 - diff-tree of known trees.(B[m
ok 1753 - wildmatch: no match 'a' '[A-Z]'(B[m
ok 6 - run diff with -B (#3)(B[m
ok 49 - stash branch complains with no arguments(B[m
ok 6 - prepare work tree once again(B[m
ok 48 - diff-tree of known trees.(B[m
ok 1754 - wildmatch (via ls-files): no match '[A-Z]' 'a'(B[m
ok 7 - run diff with -B and -M (#4)(B[m
ok 49 - diff-tree of known trees.(B[m
ok 1755 - iwildmatch: match 'a' '[A-Z]'(B[m
ok 7 - validate output from rename/copy detection (#3)(B[m
ok 50 - diff-tree of known trees.(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 1756 - iwildmatch (via ls-files): match '[A-Z]' 'a'(B[m
*** t4010-diff-pathspec.sh ***
ok 51 - diff-tree --stdin of known trees.(B[m
ok 1757 - pathmatch: no match 'a' '[A-Z]'(B[m
ok 8 - make file0 into something completely different(B[m
ok 52 - diff-tree --stdin of known trees.(B[m
ok 1758 - pathmatch (via ls-files): no match '[A-Z]' 'a'(B[m
ok 9 - run diff with -B (#5)(B[m
ok 1759 - ipathmatch: match 'a' '[A-Z]'(B[m
ok 53 - diff-cache O with A in cache(B[m
ok 50 - stash show format defaults to --stat(B[m
ok 1760 - ipathmatch (via ls-files): match '[A-Z]' 'a'(B[m
ok 10 - run diff with -B -M (#6)(B[m
ok 54 - diff-cache O with B in cache(B[m
[33mnot ok 10 - git_revert: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 1761 - cleanup after previous file test(B[m
ok 55 - diff-cache A with B in cache(B[m
ok 11 - run diff with -M (#7)(B[m
ok 1762 - setup match file test for A(B[m
ok 1763 - wildmatch: match 'A' '[A-Z]'(B[m
ok 1 - setup(B[m
ok 53 - setup submodule conflict(B[m
ok 1764 - wildmatch (via ls-files): match '[A-Z]' 'A'(B[m
ok 12 - file1 edited to look like file0 and file0 rename-edited to file2(B[m
ok 56 - diff-files with O in cache and A checked out(B[m
ok 1765 - iwildmatch: match 'A' '[A-Z]'(B[m
ok 2 - limit to path should show nothing(B[m
ok 51 - stash show - stashes on stack, stash-like argument(B[m
ok 13 - run diff with -B (#8)(B[m
ok 1766 - iwildmatch (via ls-files): match '[A-Z]' 'A'(B[m
ok 3 - limit to path1 should show path1/file1(B[m
ok 1767 - pathmatch: match 'A' '[A-Z]'(B[m
ok 57 - diff-files with O in cache and B checked out(B[m
ok 14 - run diff with -B -C (#9)(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 4 - limit to path1/ should show path1/file1(B[m
ok 1768 - pathmatch (via ls-files): match '[A-Z]' 'A'(B[m
*** t4011-diff-symlink.sh ***
ok 1769 - ipathmatch: match 'A' '[A-Z]'(B[m
ok 5 - "*file1" should show path1/file1(B[m
ok 1770 - ipathmatch (via ls-files): match '[A-Z]' 'A'(B[m
ok 58 - diff-files with A in cache and B checked out(B[m
ok 6 - limit to file0 should show file0(B[m
ok 1771 - cleanup after previous file test(B[m
ok 59 - diff-tree O A == diff-tree -R A O(B[m
ok 52 - stash show -p - stashes on stack, stash-like argument(B[m
ok 1772 - setup match file test for A(B[m
ok 7 - limit to file0/ should emit nothing.(B[m
[33mnot ok 23 - git_rebase_interactive: replace submodule with a file must fail # TODO known breakage(B[m
ok 60 - diff-tree -r O A == diff-tree -r -R A O(B[m
ok 1773 - wildmatch: no match 'A' '[a-z]'(B[m
ok 8 - diff-tree pathspec(B[m
ok 61 - diff-tree B A == diff-tree -R A B(B[m
ok 1774 - wildmatch (via ls-files): no match '[a-z]' 'A'(B[m
ok 9 - diff-tree with wildcard shows dir also matches(B[m
ok 1775 - iwildmatch: match 'A' '[a-z]'(B[m
ok 62 - diff-tree -r B A == diff-tree -r -R A B(B[m
ok 10 - diff-tree -r with wildcard(B[m
ok 53 - stash show - no stashes on stack, stash-like argument(B[m
ok 1776 - iwildmatch (via ls-files): match '[a-z]' 'A'(B[m
ok 11 - diff-tree with wildcard shows dir also matches(B[m
ok 63 - diff can read from stdin(B[m
ok 1777 - pathmatch: no match 'A' '[a-z]'(B[m
ok 1 - diff new symlink and file(B[m
[32m# passed all 63 test(s)(B[m
[36m1..63(B[m
ok 12 - diff-tree -r with wildcard from beginning(B[m
*** t4012-diff-binary.sh ***
ok 1778 - pathmatch (via ls-files): no match '[a-z]' 'A'(B[m
ok 13 - diff-tree -r with wildcard(B[m
[33mnot ok 5 - git_stash: removed submodule leaves submodule directory and its contents in place # TODO known breakage(B[m
ok 2 - diff unchanged symlink and file(B[m
ok 1779 - ipathmatch: match 'A' '[a-z]'(B[m
ok 1780 - ipathmatch (via ls-files): match '[a-z]' 'A'(B[m
ok 3 - diff removed symlink and file(B[m
ok 54 - stash show -p - no stashes on stack, stash-like argument(B[m
ok 1781 - cleanup after previous file test(B[m
ok 54 - rm removes work tree of unmodified conflicted submodule(B[m
ok 1782 - setup match file test for a(B[m
ok 4 - diff identical, but newly created symlink and file(B[m
ok 1783 - wildmatch: match 'a' '[a-z]'(B[m
ok 1 - prepare repository(B[m
ok 55 - stash show --patience shows diff(B[m
ok 14 - setup submodules(B[m
ok 1784 - wildmatch (via ls-files): match '[a-z]' 'a'(B[m
ok 1785 - iwildmatch: match 'a' '[a-z]'(B[m
ok 15 - diff-tree ignores trailing slash on submodule path(B[m
ok 2 - apply --stat output for binary file change(B[m
ok 5 - diff different symlink and file(B[m
ok 1786 - iwildmatch (via ls-files): match '[a-z]' 'a'(B[m
ok 3 - diff --shortstat output for binary file change(B[m
ok 1787 - pathmatch: match 'a' '[a-z]'(B[m
ok 6 - diff symlinks with non-existing targets(B[m
ok 16 - diff multiple wildcard pathspecs(B[m
ok 12 - git cherry-pick: modified submodule does not update submodule work tree to invalid commit(B[m
ok 4 - diff --shortstat output for binary file change only(B[m
ok 7 - setup symlinks with attributes(B[m
ok 1788 - pathmatch (via ls-files): match '[a-z]' 'a'(B[m
ok 26 - rebase -p drops merge commit when entire second-parent side is dropped(B[m
ok 1789 - ipathmatch: match 'a' '[a-z]'(B[m
ok 5 - apply --numstat notices binary file change(B[m
ok 17 - diff-cache ignores trailing slash on submodule path(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
*** t4013-diff-various.sh ***
ok 1790 - ipathmatch (via ls-files): match '[a-z]' 'a'(B[m
ok 6 - apply --numstat understands diff --binary format(B[m
ok 8 - symlinks do not respect userdiff config by path(B[m
ok 1791 - cleanup after previous file test(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 56 - drop: fail early if specified stash is not a stash ref(B[m
*** t4014-format-patch.sh ***
ok 7 - apply detecting corrupt patch correctly(B[m
ok 27 - setup of non-linear-history for empty commits(B[m
ok 1792 - setup match file test for a(B[m
ok 1793 - wildmatch: no match 'a' '[[:upper:]]'(B[m
ok 8 - apply detecting corrupt patch correctly(B[m
ok 1794 - wildmatch (via ls-files): no match '[[:upper:]]' 'a'(B[m
ok 1795 - iwildmatch: match 'a' '[[:upper:]]'(B[m
ok 9 - initial commit(B[m
ok 1796 - iwildmatch (via ls-files): match '[[:upper:]]' 'a'(B[m
ok 11 - git_revert: modified submodule does not update submodule work tree(B[m
ok 1797 - pathmatch: no match 'a' '[[:upper:]]'(B[m
ok 10 - diff-index with --binary(B[m
ok 1798 - pathmatch (via ls-files): no match '[[:upper:]]' 'a'(B[m
ok 1799 - ipathmatch: match 'a' '[[:upper:]]'(B[m
ok 57 - pop: fail early if specified stash is not a stash ref(B[m
ok 11 - apply binary patch(B[m
ok 1800 - ipathmatch (via ls-files): match '[[:upper:]]' 'a'(B[m
ok 1801 - cleanup after previous file test(B[m
ok 12 - diff --no-index with binary creation(B[m
[33mnot ok 24 - git_rebase_interactive: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 55 - rm of a conflicted populated submodule with different HEAD fails unless forced(B[m
ok 1802 - setup match file test for A(B[m
ok 1803 - wildmatch: match 'A' '[[:upper:]]'(B[m
ok 1804 - wildmatch (via ls-files): match '[[:upper:]]' 'A'(B[m
ok 1805 - iwildmatch: match 'A' '[[:upper:]]'(B[m
ok 69 - rebase -p --onto --root drops patch in onto(B[m
ok 1806 - iwildmatch (via ls-files): match '[[:upper:]]' 'A'(B[m
[33mnot ok 6 - git_stash: removed submodule leaves submodule containing a .git directory alone # TODO known breakage(B[m
ok 1807 - pathmatch: match 'A' '[[:upper:]]'(B[m
ok 13 - diff --stat with binary files and big change count(B[m
ok 1 - setup(B[m
ok 58 - ref with non-existent reflog(B[m
ok 1808 - pathmatch (via ls-files): match '[[:upper:]]' 'A'(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
*** t4015-diff-whitespace.sh ***
ok 1809 - ipathmatch: match 'A' '[[:upper:]]'(B[m
ok 2 - format-patch --ignore-if-in-upstream(B[m
ok 1810 - ipathmatch (via ls-files): match '[[:upper:]]' 'A'(B[m
ok 3 - format-patch --ignore-if-in-upstream(B[m
ok 70 - rebase --apply --onto --root with merge-base does not go to root(B[m
ok 1811 - cleanup after previous file test(B[m
ok 1 - setup(B[m
ok 4 - format-patch --ignore-if-in-upstream handles tags(B[m
ok 1812 - setup match file test for A(B[m
ok 1813 - wildmatch: no match 'A' '[[:lower:]]'(B[m
ok 2 - git diff-tree initial # magic is (not used)(B[m
ok 1814 - wildmatch (via ls-files): no match '[[:lower:]]' 'A'(B[m
ok 59 - invalid ref of the form stash@{n}, n >= N(B[m
ok 71 - rebase -m --onto --root with merge-base does not go to root(B[m
ok 1815 - iwildmatch: match 'A' '[[:lower:]]'(B[m
ok 3 - git diff-tree -r initial # magic is (not used)(B[m
ok 1816 - iwildmatch (via ls-files): match '[[:lower:]]' 'A'(B[m
ok 5 - format-patch doesn't consider merge commits(B[m
ok 1817 - pathmatch: no match 'A' '[[:lower:]]'(B[m
ok 1 - Ray Lehtiniemi's example(B[m
ok 13 - git cherry-pick: modified submodule does not update submodule work tree from invalid commit(B[m
ok 4 - git diff-tree -r --abbrev initial # magic is (not used)(B[m
ok 1818 - pathmatch (via ls-files): no match '[[:lower:]]' 'A'(B[m
ok 1819 - ipathmatch: match 'A' '[[:lower:]]'(B[m
ok 6 - format-patch result applies(B[m
ok 72 - rebase -i --onto --root with merge-base does not go to root(B[m
ok 5 - git diff-tree -r --abbrev=4 initial # magic is (not used)(B[m
ok 1820 - ipathmatch (via ls-files): match '[[:lower:]]' 'A'(B[m
ok 60 - invalid ref of the form "n", n >= N(B[m
ok 1821 - cleanup after previous file test(B[m
ok 6 - git diff-tree --root initial # magic is (not used)(B[m
ok 7 - format-patch --ignore-if-in-upstream result applies(B[m
ok 1822 - setup match file test for a(B[m
ok 8 - commit did not screw up the log message(B[m
ok 1823 - wildmatch: match 'a' '[[:lower:]]'(B[m
ok 9 - format-patch did not screw up the log message(B[m
ok 7 - git diff-tree --root --abbrev initial # magic is (not used)(B[m
ok 10 - replay did not screw up the log message(B[m
ok 1824 - wildmatch (via ls-files): match '[[:lower:]]' 'a'(B[m
ok 1825 - iwildmatch: match 'a' '[[:lower:]]'(B[m
ok 8 - git diff-tree --root --abbrev initial # magic is noellipses(B[m
ok 2 - another test, without options(B[m
ok 11 - extra headers(B[m
ok 1826 - iwildmatch (via ls-files): match '[[:lower:]]' 'a'(B[m
ok 56 - rm of a conflicted populated submodule with modifications fails unless forced(B[m
ok 1827 - pathmatch: match 'a' '[[:lower:]]'(B[m
ok 3 - ignore-blank-lines: only new lines(B[m
ok 9 - git diff-tree --root -r initial # magic is (not used)(B[m
ok 12 - extra headers without newlines(B[m
ok 1828 - pathmatch (via ls-files): match '[[:lower:]]' 'a'(B[m
ok 4 - ignore-blank-lines: only new lines with space(B[m
ok 1829 - ipathmatch: match 'a' '[[:lower:]]'(B[m
ok 10 - git diff-tree --root -r --abbrev initial # magic is (not used)(B[m
ok 13 - extra headers with multiple To:s(B[m
ok 1830 - ipathmatch (via ls-files): match '[[:lower:]]' 'a'(B[m
ok 5 - ignore-blank-lines: after change(B[m
ok 14 - git cherry-pick: added submodule doesn't remove untracked unignored file with same name(B[m
ok 1831 - cleanup after previous file test(B[m
ok 11 - git diff-tree --root -r --abbrev initial # magic is noellipses(B[m
ok 14 - additional command line cc (ascii)(B[m
ok 7 - git_stash: replace submodule with a directory must fail(B[m
ok 1832 - setup match file test for A(B[m
ok 6 - ignore-blank-lines: before change(B[m
[33mnot ok 15 - additional command line cc (rfc822) # TODO known breakage(B[m
ok 12 - git diff-tree --root -r --abbrev=4 initial # magic is (not used)(B[m
ok 1833 - wildmatch: no match 'A' '[B-Za]'(B[m
ok 61 - valid ref of the form "n", n < N(B[m
ok 12 - git_revert: modified submodule does not update submodule work tree to invalid commit(B[m
ok 1834 - wildmatch (via ls-files): no match '[B-Za]' 'A'(B[m
ok 16 - command line headers(B[m
ok 13 - git diff-tree --root -r --abbrev=4 initial # magic is noellipses(B[m
ok 1835 - iwildmatch: match 'A' '[B-Za]'(B[m
ok 7 - ignore-blank-lines: between changes(B[m
ok 17 - configuration headers and command line headers(B[m
ok 1836 - iwildmatch (via ls-files): match '[B-Za]' 'A'(B[m
ok 14 - git diff-tree -p initial # magic is (not used)(B[m
ok 1837 - pathmatch: no match 'A' '[B-Za]'(B[m
ok 8 - ignore-blank-lines: between changes (with interhunkctx)(B[m
ok 18 - command line To: header (ascii)(B[m
ok 62 - branch: do not drop the stash if the branch exists(B[m
ok 1838 - pathmatch (via ls-files): no match '[B-Za]' 'A'(B[m
ok 15 - git diff-tree --root -p initial # magic is (not used)(B[m
[33mnot ok 19 - command line To: header (rfc822) # TODO known breakage(B[m
ok 1839 - ipathmatch: match 'A' '[B-Za]'(B[m
ok 9 - ignore-blank-lines: scattered spaces(B[m
ok 25 - git_rebase_interactive: modified submodule does not update submodule work tree(B[m
ok 1840 - ipathmatch (via ls-files): match '[B-Za]' 'A'(B[m
[33mnot ok 20 - command line To: header (rfc2047) # TODO known breakage(B[m
ok 10 - ignore-blank-lines: spaces coalesce(B[m
ok 16 - git diff-tree --patch-with-stat initial # magic is (not used)(B[m
ok 1841 - cleanup after previous file test(B[m
ok 21 - configuration To: header (ascii)(B[m
ok 1842 - setup match file test for a(B[m
[33mnot ok 22 - configuration To: header (rfc822) # TODO known breakage(B[m
ok 17 - git diff-tree --root --patch-with-stat initial # magic is (not used)(B[m
ok 11 - ignore-blank-lines: mix changes and blank lines(B[m
ok 63 - branch: should not drop the stash if the apply fails(B[m
ok 1843 - wildmatch: match 'a' '[B-Za]'(B[m
ok 12 - check mixed spaces and tabs in indent(B[m
[33mnot ok 23 - configuration To: header (rfc2047) # TODO known breakage(B[m
ok 1844 - wildmatch (via ls-files): match '[B-Za]' 'a'(B[m
ok 18 - git diff-tree --patch-with-raw initial # magic is (not used)(B[m
ok 13 - check mixed tabs and spaces in indent(B[m
ok 1845 - iwildmatch: match 'a' '[B-Za]'(B[m
ok 24 - format.from=false(B[m
ok 14 - check with no whitespace errors(B[m
ok 1846 - iwildmatch (via ls-files): match '[B-Za]' 'a'(B[m
ok 19 - git diff-tree --root --patch-with-raw initial # magic is (not used)(B[m
ok 15 - check with trailing whitespace(B[m
ok 1847 - pathmatch: match 'a' '[B-Za]'(B[m
ok 25 - format.from=true(B[m
ok 16 - check with space before tab in indent(B[m
ok 64 - apply: show same status as git status (relative to ./)(B[m
ok 1848 - pathmatch (via ls-files): match '[B-Za]' 'a'(B[m
ok 20 - git diff-tree --pretty initial # magic is (not used)(B[m
ok 17 - --check and --exit-code are not exclusive(B[m
ok 26 - format.from with address(B[m
ok 1849 - ipathmatch: match 'a' '[B-Za]'(B[m
ok 18 - --check and --quiet are not exclusive(B[m
ok 57 - rm of a conflicted populated submodule with untracked files fails unless forced(B[m
ok 1850 - ipathmatch (via ls-files): match '[B-Za]' 'a'(B[m
ok 21 - git diff-tree --pretty --root initial # magic is (not used)(B[m
ok 27 - --no-from overrides format.from(B[m
ok 19 - check staged with no whitespace errors(B[m
ok 1851 - cleanup after previous file test(B[m
ok 28 - --from overrides format.from(B[m
ok 20 - check staged with trailing whitespace(B[m
ok 22 - git diff-tree --pretty -p initial # magic is (not used)(B[m
ok 15 - unrelated submodule/file conflict is ignored(B[m
ok 1852 - setup match file test for A(B[m
[33m# still have 5 known breakage(s)(B[m
[32m# passed all remaining 10 test(s)(B[m
[36m1..15(B[m
ok 21 - check staged with space before tab in indent(B[m
ok 1853 - wildmatch: no match 'A' '[B-a]'(B[m
ok 65 - stash where working directory contains "HEAD" file(B[m
ok 29 - --no-to overrides config.to(B[m
ok 23 - git diff-tree --pretty --stat initial # magic is (not used)(B[m
ok 66 - store called with invalid commit(B[m
ok 22 - check with no whitespace errors (diff-index)(B[m
ok 1854 - wildmatch (via ls-files): no match '[B-a]' 'A'(B[m
ok 1855 - iwildmatch: match 'A' '[B-a]'(B[m
*** t4016-diff-quote.sh ***
ok 23 - check with trailing whitespace (diff-index)(B[m
ok 24 - git diff-tree --pretty --summary initial # magic is (not used)(B[m
ok 30 - --no-to and --to replaces config.to(B[m
ok 1856 - iwildmatch (via ls-files): match '[B-a]' 'A'(B[m
ok 24 - check with space before tab in indent (diff-index)(B[m
ok 1857 - pathmatch: no match 'A' '[B-a]'(B[m
ok 25 - git diff-tree --pretty --stat --summary initial # magic is (not used)(B[m
ok 25 - check staged with no whitespace errors (diff-index)(B[m
ok 31 - --no-cc overrides config.cc(B[m
ok 1858 - pathmatch (via ls-files): no match '[B-a]' 'A'(B[m
ok 8 - git_stash: replace submodule containing a .git directory with a directory must fail(B[m
ok 26 - check staged with trailing whitespace (diff-index)(B[m
ok 1859 - ipathmatch: match 'A' '[B-a]'(B[m
ok 26 - git diff-tree --pretty --root -p initial # magic is (not used)(B[m
ok 32 - --no-add-header overrides config.headers(B[m
ok 27 - check staged with space before tab in indent (diff-index)(B[m
ok 1860 - ipathmatch (via ls-files): match '[B-a]' 'A'(B[m
ok 67 - store updates stash ref and reflog(B[m
ok 27 - git diff-tree --pretty --root --stat initial # magic is (not used)(B[m
ok 33 - multiple files(B[m
ok 28 - check with no whitespace errors (diff-tree)(B[m
ok 1861 - cleanup after previous file test(B[m
ok 28 - rebase -p re-creates empty internal merge commit(B[m
ok 1862 - setup match file test for a(B[m
ok 34 - reroll count(B[m
ok 29 - check with trailing whitespace (diff-tree)(B[m
ok 28 - git diff-tree --pretty --root --summary initial # magic is (not used)(B[m
ok 58 - rm of a conflicted populated submodule with a .git directory fails even when forced(B[m
ok 1863 - wildmatch: match 'a' '[B-a]'(B[m
ok 1 - setup(B[m
ok 2 - setup expected files(B[m
ok 30 - check with space before tab in indent (diff-tree)(B[m
ok 35 - reroll count (-v)(B[m
ok 1864 - wildmatch (via ls-files): match '[B-a]' 'a'(B[m
ok 29 - git diff-tree --pretty --root --summary -r initial # magic is (not used)(B[m
ok 3 - git diff --summary -M HEAD(B[m
ok 1865 - iwildmatch: match 'a' '[B-a]'(B[m
ok 68 - handle stash specification with spaces(B[m
ok 59 - rm of a conflicted unpopulated submodule succeeds(B[m
ok 36 - no threading(B[m
ok 4 - git diff --numstat -M HEAD(B[m
ok 1866 - iwildmatch (via ls-files): match '[B-a]' 'a'(B[m
ok 30 - git diff-tree --pretty --root --stat --summary initial # magic is (not used)(B[m
ok 1867 - pathmatch: match 'a' '[B-a]'(B[m
ok 13 - git_revert: modified submodule does not update submodule work tree from invalid commit(B[m
ok 37 - thread(B[m
ok 31 - check with ignored trailing whitespace attr (diff-tree)(B[m
ok 5 - git diff --stat -M HEAD(B[m
ok 1868 - pathmatch (via ls-files): match '[B-a]' 'a'(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 32 - check trailing whitespace (trailing-space: off)(B[m
ok 31 - git diff-tree --pretty --patch-with-stat initial # magic is (not used)(B[m
ok 69 - setup stash with index and worktree changes(B[m
ok 38 - thread in-reply-to(B[m
*** t4017-diff-retval.sh ***
ok 1869 - ipathmatch: match 'a' '[B-a]'(B[m
ok 33 - check trailing whitespace (trailing-space: on)(B[m
ok 39 - thread cover-letter(B[m
ok 1870 - ipathmatch (via ls-files): match '[B-a]' 'a'(B[m
ok 32 - git diff-tree --pretty --root --patch-with-stat initial # magic is (not used)(B[m
ok 70 - stash list implies --first-parent -m(B[m
ok 34 - check space before tab in indent (space-before-tab: off)(B[m
ok 1871 - cleanup after previous file test(B[m
ok 40 - thread cover-letter in-reply-to(B[m
ok 35 - check space before tab in indent (space-before-tab: on)(B[m
ok 33 - git diff-tree --pretty --patch-with-raw initial # magic is (not used)(B[m
ok 71 - stash list --cc shows combined diff(B[m
ok 1872 - setup match file test for z(B[m
ok 41 - thread explicit shallow(B[m
ok 36 - check spaces as indentation (indent-with-non-tab: off)(B[m
[33mnot ok 73 - rebase -p --onto --root with merge-base does not go to root # TODO known breakage(B[m
ok 1873 - wildmatch: no match 'z' '[Z-y]'(B[m
ok 37 - check spaces as indentation (indent-with-non-tab: on)(B[m
ok 42 - thread deep(B[m
ok 34 - git diff-tree --pretty --root --patch-with-raw initial # magic is (not used)(B[m
ok 1874 - wildmatch (via ls-files): no match '[Z-y]' 'z'(B[m
ok 38 - ditto, but tabwidth=9(B[m
ok 1875 - iwildmatch: match 'z' '[Z-y]'(B[m
ok 43 - thread deep in-reply-to(B[m
ok 72 - stash is not confused by partial renames(B[m
ok 39 - check tabs and spaces as indentation (indent-with-non-tab: on)(B[m
ok 35 - git diff-tree --pretty=oneline initial # magic is (not used)(B[m
ok 1876 - iwildmatch (via ls-files): match '[Z-y]' 'z'(B[m
ok 1 - setup(B[m
ok 44 - thread deep cover-letter(B[m
ok 1877 - pathmatch: no match 'z' '[Z-y]'(B[m
ok 40 - ditto, but tabwidth=10(B[m
ok 2 - git diff --quiet -w  HEAD^^ HEAD^(B[m
ok 74 - rebase --apply without --onto --root with disjoint history drops patch in onto(B[m
ok 36 - git diff-tree --pretty=oneline --root initial # magic is (not used)(B[m
ok 45 - thread deep cover-letter in-reply-to(B[m
ok 3 - git diff --quiet HEAD^^ HEAD^(B[m
ok 1878 - pathmatch (via ls-files): no match '[Z-y]' 'z'(B[m
ok 41 - ditto, but tabwidth=20(B[m
ok 73 - push -m shows right message(B[m
ok 1879 - ipathmatch: match 'z' '[Z-y]'(B[m
ok 4 - git diff --quiet -w  HEAD^ HEAD(B[m
ok 26 - git_rebase_interactive: modified submodule does not update submodule work tree to invalid commit(B[m
ok 42 - check tabs as indentation (tab-in-indent: off)(B[m
ok 5 - git diff-tree HEAD^ HEAD(B[m
ok 37 - git diff-tree --pretty=oneline -p initial # magic is (not used)(B[m
ok 46 - thread via config(B[m
ok 1880 - ipathmatch (via ls-files): match '[Z-y]' 'z'(B[m
ok 43 - check tabs as indentation (tab-in-indent: on)(B[m
ok 6 - git diff-tree HEAD^ HEAD -- a(B[m
ok 14 - git_revert: added submodule doesn't remove untracked unignored file with same name(B[m
[33m# still have 3 known breakage(s)(B[m
[32m# passed all remaining 11 test(s)(B[m
[36m1..14(B[m
ok 7 - git diff-tree HEAD^ HEAD -- b(B[m
ok 1881 - cleanup after previous file test(B[m
ok 74 - push -m also works without space(B[m
ok 60 - rm of a populated submodule with a .git directory migrates git dir(B[m
ok 44 - check tabs and spaces as indentation (tab-in-indent: on)(B[m
ok 38 - git diff-tree --pretty=oneline --root -p initial # magic is (not used)(B[m
ok 47 - thread deep via config(B[m
ok 8 - echo HEAD | git diff-tree --stdin(B[m
ok 75 - rebase -m without --onto --root with disjoint history drops patch in onto(B[m
ok 45 - ditto, but tabwidth=1 (must be irrelevant)(B[m
ok 1882 - setup match file test for Z(B[m
ok 9 - git diff-tree HEAD HEAD(B[m
*** t4018-diff-funcname.sh ***
ok 1883 - wildmatch: match 'Z' '[Z-y]'(B[m
ok 39 - git diff-tree --pretty=oneline --patch-with-stat initial # magic is (not used)(B[m
ok 10 - git diff-files(B[m
ok 46 - check tab-in-indent and indent-with-non-tab conflict(B[m
ok 48 - thread config + override(B[m
[33mnot ok 9 - git_stash: replace submodule with a file must fail # TODO known breakage(B[m
ok 11 - git diff-index --cached HEAD(B[m
ok 1884 - wildmatch (via ls-files): match '[Z-y]' 'Z'(B[m
ok 47 - check tab-in-indent excluded from wildcard whitespace attribute(B[m
ok 12 - git diff-index --cached HEAD^(B[m
ok 1885 - iwildmatch: match 'Z' '[Z-y]'(B[m
ok 40 - git diff-tree --pretty=oneline --root --patch-with-stat initial # magic is (not used)(B[m
ok 75 - store -m foo shows right message(B[m
ok 49 - thread config + --no-thread(B[m
ok 48 - line numbers in --check output are correct(B[m
ok 13 - git diff-index --cached HEAD^(B[m
ok 1886 - iwildmatch (via ls-files): match '[Z-y]' 'Z'(B[m
ok 76 - rebase -i without --onto --root with disjoint history drops patch in onto(B[m
ok 49 - checkdiff detects new trailing blank lines (1)(B[m
ok 1887 - pathmatch: match 'Z' '[Z-y]'(B[m
ok 41 - git diff-tree --pretty=oneline --patch-with-raw initial # magic is (not used)(B[m
ok 14 - git diff-tree -Stext HEAD^ HEAD -- b(B[m
ok 50 - checkdiff detects new trailing blank lines (2)(B[m
ok 15 - git diff-tree -Snot-found HEAD^ HEAD -- b(B[m
ok 1888 - pathmatch (via ls-files): match '[Z-y]' 'Z'(B[m
ok 16 - git diff-files(B[m
ok 1889 - ipathmatch: match 'Z' '[Z-y]'(B[m
ok 1 - setup(B[m
ok 42 - git diff-tree --pretty=oneline --root --patch-with-raw initial # magic is (not used)(B[m
ok 51 - checkdiff allows new blank lines(B[m
ok 76 - store -mfoo shows right message(B[m
ok 50 - excessive subject(B[m
ok 17 - git diff-index --cached HEAD(B[m
ok 1890 - ipathmatch (via ls-files): match '[Z-y]' 'Z'(B[m
[33m# still have 40 known breakage(s)(B[m
[32m# passed all remaining 1850 test(s)(B[m
[36m1..1890(B[m
ok 18 - --check --exit-code returns 0 for no difference(B[m
ok 2 - builtin ada pattern compiles(B[m
ok 51 - failure to write cover-letter aborts gracefully(B[m
ok 43 - git diff-tree --pretty side # magic is (not used)(B[m
*** t4019-diff-wserror.sh ***
ok 19 - --check --exit-code returns 1 for a clean difference(B[m
ok 52 - whitespace-only changes not reported(B[m
ok 3 - builtin ada wordRegex pattern compiles(B[m
ok 20 - --check --exit-code returns 3 for a dirty difference(B[m
ok 44 - git diff-tree --pretty -p side # magic is (not used)(B[m
ok 4 - builtin bibtex pattern compiles(B[m
ok 21 - --check with --no-pager returns 2 for dirty difference(B[m
ok 77 - store --message=foo shows right message(B[m
ok 52 - cover-letter inherits diff options(B[m
ok 22 - check should test not just the last line(B[m
ok 5 - builtin bibtex wordRegex pattern compiles(B[m
ok 45 - git diff-tree --pretty --patch-with-stat side # magic is (not used)(B[m
ok 53 - shortlog of cover-letter wraps overly-long onelines(B[m
ok 6 - builtin cpp pattern compiles(B[m
ok 7 - builtin cpp wordRegex pattern compiles(B[m
ok 54 - format-patch respects -U(B[m
ok 1 - setup(B[m
ok 46 - git diff-tree initial mode # magic is (not used)(B[m
ok 53 - whitespace-only changes reported across renames(B[m
ok 8 - builtin csharp pattern compiles(B[m
ok 55 - format-patch -p suppresses stat(B[m
ok 23 - check detects leftover conflict markers(B[m
ok 78 - store --message foo shows right message(B[m
ok 47 - git diff-tree --stat initial mode # magic is (not used)(B[m
ok 9 - builtin csharp wordRegex pattern compiles(B[m
ok 2 - default(B[m
ok 56 - format-patch from a subdirectory (1)(B[m
ok 10 - builtin css pattern compiles(B[m
ok 54 - rename empty(B[m
ok 48 - git diff-tree --summary initial mode # magic is (not used)(B[m
ok 57 - format-patch from a subdirectory (2)(B[m
ok 11 - builtin css wordRegex pattern compiles(B[m
ok 3 - default (attribute)(B[m
ok 79 - push -mfoo uses right message(B[m
ok 24 - check honors conflict marker length(B[m
ok 12 - builtin dts pattern compiles(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 58 - format-patch from a subdirectory (3)(B[m
ok 49 - git diff-tree master # magic is (not used)(B[m
*** t4020-diff-external.sh ***
ok 13 - builtin dts wordRegex pattern compiles(B[m
ok 59 - format-patch --in-reply-to(B[m
ok 4 - default, tabwidth=10 (attribute)(B[m
ok 80 - push --message foo is synonym for -mfoo(B[m
ok 50 - git diff-tree -p master # magic is (not used)(B[m
ok 60 - format-patch --signoff(B[m
ok 14 - builtin elixir pattern compiles(B[m
ok 55 - combined diff with autocrlf conversion(B[m
ok 15 - builtin elixir wordRegex pattern compiles(B[m
ok 5 - no check (attribute)(B[m
ok 61 - format-patch --notes --signoff(B[m
ok 51 - git diff-tree -p -m master # magic is (not used)(B[m
ok 16 - builtin fortran pattern compiles(B[m
ok 61 - setup subsubmodule(B[m
ok 81 - push --message=foo is synonym for -mfoo(B[m
ok 17 - builtin fortran wordRegex pattern compiles(B[m
ok 56 - setup diff colors(B[m
ok 6 - no check, tabwidth=10 (attribute), must be irrelevant(B[m
ok 52 - git diff-tree -c master # magic is (not used)(B[m
ok 18 - builtin fountain pattern compiles(B[m
ok 19 - builtin fountain wordRegex pattern compiles(B[m
ok 82 - push -m shows right message(B[m
ok 1 - setup(B[m
ok 53 - git diff-tree -c --abbrev master # magic is (not used)(B[m
ok 7 - without -trail(B[m
ok 20 - builtin golang pattern compiles(B[m
ok 2 - GIT_EXTERNAL_DIFF environment(B[m
[33mnot ok 10 - git_stash: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 21 - builtin golang wordRegex pattern compiles(B[m
ok 57 - diff that introduces a line with only tabs(B[m
ok 83 - create stores correct message(B[m
ok 54 - git diff-tree -c --abbrev master # magic is noellipses(B[m
ok 3 - GIT_EXTERNAL_DIFF environment should apply only to diff(B[m
ok 8 - without -trail (attribute)(B[m
ok 4 - GIT_EXTERNAL_DIFF environment and --no-ext-diff(B[m
ok 22 - builtin html pattern compiles(B[m
ok 29 - rebase -p re-creates empty merge commit(B[m
ok 62 - format-patch notes output control(B[m
ok 55 - git diff-tree --cc master # magic is (not used)(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 27 test(s)(B[m
[36m1..29(B[m
ok 23 - builtin html wordRegex pattern compiles(B[m
ok 84 - create with multiple arguments for the message(B[m
ok 9 - without -space(B[m
ok 24 - builtin java pattern compiles(B[m
*** t4021-format-patch-numbered.sh ***
ok 27 - git_rebase_interactive: modified submodule does not update submodule work tree from invalid commit(B[m
ok 56 - git diff-tree -c --stat master # magic is (not used)(B[m
ok 58 - diff that introduces and removes ws breakages(B[m
ok 5 - typechange diff(B[m
ok 25 - builtin java wordRegex pattern compiles(B[m
ok 62 - rm recursively removes work tree of unmodified submodules(B[m
ok 10 - without -space (attribute)(B[m
ok 26 - builtin matlab pattern compiles(B[m
ok 57 - git diff-tree --cc --stat master # magic is (not used)(B[m
ok 85 - create in a detached state(B[m
ok 27 - builtin matlab wordRegex pattern compiles(B[m
ok 6 - diff.external(B[m
ok 59 - ws-error-highlight test setup(B[m
ok 28 - builtin objc pattern compiles(B[m
ok 11 - with indent-non-tab only(B[m
ok 58 - git diff-tree -c --stat --summary master # magic is (not used)(B[m
ok 7 - diff.external should apply only to diff(B[m
ok 29 - builtin objc wordRegex pattern compiles(B[m
ok 30 - builtin pascal pattern compiles(B[m
ok 59 - git diff-tree --cc --stat --summary master # magic is (not used)(B[m
ok 12 - with indent-non-tab only (attribute)(B[m
ok 8 - diff.external and --no-ext-diff(B[m
ok 60 - test --ws-error-highlight option(B[m
ok 1 - setup(B[m
ok 86 - stash -- <pathspec> stashes and restores the file(B[m
ok 31 - builtin pascal wordRegex pattern compiles(B[m
ok 2 - single patch defaults to no numbers(B[m
ok 60 - git diff-tree -c --stat --summary side # magic is (not used)(B[m
ok 32 - builtin perl pattern compiles(B[m
ok 9 - diff attribute(B[m
ok 63 - format-patch with multiple notes refs(B[m
ok 13 - with indent-non-tab only, tabwidth=10(B[m
ok 3 - multiple patch defaults to numbered(B[m
ok 61 - test diff.wsErrorHighlight config(B[m
ok 10 - diff attribute should apply only to diff(B[m
ok 33 - builtin perl wordRegex pattern compiles(B[m
ok 4 - Use --numbered(B[m
ok 11 - diff attribute and --no-ext-diff(B[m
ok 61 - git diff-tree --cc --stat --summary side # magic is (not used)(B[m
ok 34 - builtin php pattern compiles(B[m
ok 87 - stash -- <pathspec> stashes in subdirectory(B[m
ok 14 - with indent-non-tab only, tabwidth=10 (attribute)(B[m
ok 5 - format.numbered = true(B[m
ok 35 - builtin php wordRegex pattern compiles(B[m
ok 62 - option overrides diff.wsErrorHighlight(B[m
ok 62 - git diff-tree --cc --shortstat master # magic is (not used)(B[m
ok 12 - diff attribute(B[m
ok 6 - format.numbered && single patch(B[m
ok 36 - builtin python pattern compiles(B[m
ok 13 - diff attribute should apply only to diff(B[m
ok 7 - format.numbered && --no-numbered(B[m
ok 14 - diff attribute and --no-ext-diff(B[m
ok 37 - builtin python wordRegex pattern compiles(B[m
ok 15 - with cr-at-eol(B[m
ok 63 - git diff-tree --cc --summary REVERSE # magic is (not used)(B[m
ok 8 - format.numbered && --keep-subject(B[m
ok 38 - builtin ruby pattern compiles(B[m
ok 88 - stash with multiple pathspec arguments(B[m
ok 15 - GIT_EXTERNAL_DIFF trumps diff.external(B[m
ok 64 - git diff-tree --cc --patch-with-stat master # magic is (not used)(B[m
ok 39 - builtin ruby wordRegex pattern compiles(B[m
ok 9 - format.numbered = auto(B[m
ok 16 - with cr-at-eol (attribute)(B[m
[33mnot ok 77 - rebase -p without --onto --root with disjoint history drops patch in onto # TODO known breakage(B[m
ok 10 - format.numbered = auto && single patch(B[m
ok 40 - builtin rust pattern compiles(B[m
ok 64 - format-patch with multiple notes refs in config(B[m
ok 63 - detect moved code, complete file(B[m
ok 17 - trailing empty lines (1)(B[m
ok 65 - git diff-tree --cc --patch-with-stat --summary master # magic is (not used)(B[m
ok 11 - format.numbered = auto && --no-numbered(B[m
ok 16 - attributes trump GIT_EXTERNAL_DIFF and diff.external(B[m
ok 18 - trailing empty lines (2)(B[m
ok 41 - builtin rust wordRegex pattern compiles(B[m
ok 28 - git_rebase_interactive: added submodule doesn't remove untracked unignored file with same name(B[m
ok 17 - no diff with -diff(B[m
ok 12 - --start-number && --numbered(B[m
ok 42 - builtin tex pattern compiles(B[m
ok 19 - checkdiff shows correct line number for trailing blank lines(B[m
ok 65 - options no longer allowed for format-patch(B[m
ok 89 - stash with file including $IFS character(B[m
ok 66 - git diff-tree --cc --patch-with-stat --summary side # magic is (not used)(B[m
ok 13 - single patch with cover-letter defaults to numbers(B[m
ok 43 - builtin tex wordRegex pattern compiles(B[m
ok 78 - rebase  --root on linear history is a no-op(B[m
[33mnot ok 11 - git_stash: modified submodule does not update submodule work tree # TODO known breakage(B[m
ok 18 - force diff with "diff"(B[m
ok 66 - format-patch --numstat should produce a patch(B[m
ok 14 - Use --no-numbered and --cover-letter single patch(B[m
ok 44 - builtin custom1 pattern compiles(B[m
ok 20 - do not color trailing cr in context(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 67 - git log master # magic is (not used)(B[m
ok 67 - format-patch -- <path>(B[m
*** t4022-diff-rewrite.sh ***
ok 45 - builtin custom1 wordRegex pattern compiles(B[m
ok 68 - format-patch --ignore-if-in-upstream HEAD(B[m
ok 21 - color new trailing blank lines(B[m
ok 19 - GIT_EXTERNAL_DIFF with more than one changed files(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 46 - builtin custom2 pattern compiles(B[m
*** t4023-diff-rename-typechange.sh ***
ok 69 - get git version(B[m
ok 68 - git log -p master # magic is (not used)(B[m
ok 79 - rebase -m --root on linear history is a no-op(B[m
ok 47 - builtin custom2 wordRegex pattern compiles(B[m
ok 70 - format-patch default signature(B[m
ok 20 - GIT_EXTERNAL_DIFF path counter/total(B[m
ok 90 - stash with pathspec matching multiple paths(B[m
ok 48 - builtin custom3 pattern compiles(B[m
ok 69 - git log --root master # magic is (not used)(B[m
ok 64 - detect malicious moved code, inside file(B[m
ok 71 - format-patch --signature(B[m
ok 49 - builtin custom3 wordRegex pattern compiles(B[m
ok 21 - GIT_EXTERNAL_DIFF generates pretty paths(B[m
ok 72 - format-patch with format.signature config(B[m
ok 91 - stash push -p with pathspec shows no changes only once(B[m
ok 80 - rebase -i --root on linear history is a no-op(B[m
ok 70 - git log --root -p master # magic is (not used)(B[m
ok 1 - setup(B[m
ok 50 - last regexp must not be negated(B[m
ok 73 - format-patch --signature overrides format.signature(B[m
ok 2 - detect rewrite(B[m
ok 22 - external diff with autocrlf = true(B[m
ok 71 - git log --patch-with-stat master # magic is (not used)(B[m
ok 65 - plain moved code, inside file(B[m
ok 3 - show deletion diff without -D(B[m
ok 92 - push <pathspec>: show no changes when there are none(B[m
ok 74 - format-patch --no-signature ignores format.signature(B[m
ok 93 - push: <pathspec> not in the repository errors out(B[m
ok 4 - suppress deletion diff with -D(B[m
ok 63 - rm of a populated nested submodule with different nested HEAD fails unless forced(B[m
ok 72 - git log --root --patch-with-stat master # magic is (not used)(B[m
ok 75 - format-patch --signature --cover-letter(B[m
ok 23 - diff --cached(B[m
ok 5 - show deletion diff with -B(B[m
ok 6 - suppress deletion diff with -B -D(B[m
ok 94 - push: -q is quiet with changes(B[m
ok 24 - clean up crlf leftovers(B[m
ok 76 - format.signature="" suppresses signatures(B[m
ok 73 - git log --root --patch-with-stat --summary master # magic is (not used)(B[m
ok 95 - push: -q is quiet with no changes(B[m
ok 7 - prepare a file that ends with an incomplete line(B[m
ok 8 - rewrite the middle 90% of sequence file and terminate with newline(B[m
ok 77 - format-patch --no-signature suppresses signatures(B[m
ok 96 - push: -q is quiet even if there is no initial commit(B[m
ok 74 - git log --root -c --patch-with-stat --summary master # magic is (not used)(B[m
ok 9 - confirm that sequence file is considered a rewrite(B[m
ok 78 - format-patch --signature="" suppresses signatures(B[m
ok 29 - rebase interactive ignores modified submodules(B[m
[33m# still have 4 known breakage(s)(B[m
[32m# passed all remaining 25 test(s)(B[m
[36m1..29(B[m
ok 10 - no newline at eof is on its own line without -B(B[m
ok 79 - prepare mail-signature input(B[m
ok 11 - no newline at eof is on its own line with -B(B[m
ok 75 - git log --root --cc --patch-with-stat --summary master # magic is (not used)(B[m
ok 97 - untracked files are left in place when -u is not given(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 66 - detect blocks of moved code(B[m
*** t4024-diff-optimize-common.sh ***
ok 80 - --signature-file=file works(B[m
*** t4025-hunk-header.sh ***
ok 76 - git log -p --first-parent master # magic is (not used)(B[m
ok 25 - submodule diff(B[m
[32m# passed all 25 test(s)(B[m
[36m1..25(B[m
ok 81 - format.signaturefile works(B[m
ok 1 - setup(B[m
*** t4026-color.sh ***
ok 77 - git log -m -p --first-parent master # magic is (not used)(B[m
ok 98 - stash without verb with pathspec(B[m
ok 2 - cross renames to be detected for regular files(B[m
ok 82 - --no-signature suppresses format.signaturefile (B[m
ok 51 - setup hunk header tests(B[m
ok 78 - git log -m -p master # magic is (not used)(B[m
ok 1 - setup(B[m
ok 3 - cross renames to be detected for typechange(B[m
[33mnot ok 12 - git_stash: modified submodule does not update submodule work tree to invalid commit # TODO known breakage(B[m
ok 2 - hunk header truncation with an overly long line(B[m
ok 52 - hunk header: README(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t4027-diff-submodule.sh ***
ok 79 - git log -SF master # magic is (not used)(B[m
ok 67 - detect permutations inside moved code -- dimmed-zebra(B[m
ok 83 - --signature-file overrides format.signaturefile(B[m
ok 4 - moves and renames(B[m
ok 1 - reset(B[m
ok 53 - hunk header: cpp-c++-function(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 2 - empty color is empty(B[m
*** t4028-format-patch-mime-headers.sh ***
ok 54 - hunk header: cpp-class-constructor(B[m
ok 1 - setup(B[m
ok 3 - attribute before color name(B[m
ok 99 - stash -k -- <pathspec> leaves unstaged files intact(B[m
ok 80 - git log -S F master # magic is (not used)(B[m
ok 84 - --signature overrides format.signaturefile(B[m
ok 4 - aixterm bright fg color(B[m
ok 55 - hunk header: cpp-class-constructor-mem-init(B[m
[34mok 85 # skip format-patch --stdout paginates (missing TTY)(B[m
[34mok 86 # skip format-patch --stdout pagination can be disabled (missing TTY)(B[m
ok 5 - aixterm bright bg color(B[m
ok 56 - hunk header: cpp-class-definition(B[m
ok 6 - color name before attribute(B[m
ok 81 - git log -SF -p master # magic is (not used)(B[m
ok 7 - attr fg bg(B[m
ok 2 - diff -U0(B[m
ok 57 - hunk header: cpp-class-definition-derived(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 87 - format-patch handles multi-line subjects(B[m
ok 8 - fg attr bg(B[m
*** t4029-diff-trailing-space.sh ***
ok 82 - git log -SF master --max-count=0 # magic is (not used)(B[m
ok 58 - hunk header: cpp-class-destructor(B[m
ok 9 - fg bg attr(B[m
ok 100 - stash -- <subdir> leaves untracked files in subdir intact(B[m
ok 10 - fg bg attr...(B[m
ok 59 - hunk header: cpp-function-returning-global-type(B[m
ok 11 - attr negation(B[m
ok 1 - create commit with utf-8 body(B[m
ok 88 - format-patch handles multi-line encoded subjects(B[m
ok 83 - git log -SF master --max-count=1 # magic is (not used)(B[m
ok 68 - cmd option assumes configured colored-moved(B[m
ok 60 - hunk header: cpp-function-returning-nested(B[m
ok 12 - "no-" variant of negation(B[m
ok 2 - patch has mime headers(B[m
ok 13 - long color specification(B[m
ok 61 - hunk header: cpp-function-returning-pointer(B[m
ok 14 - absurdly long color specification(B[m
ok 84 - git log -SF master --max-count=2 # magic is (not used)(B[m
ok 89 - format-patch wraps extremely long subject (ascii)(B[m
ok 3 - patch has mime and extra headers(B[m
ok 15 - 0-7 are aliases for basic ANSI color names(B[m
ok 62 - hunk header: cpp-function-returning-reference(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 69 - no effect from --color-moved with --word-diff(B[m
*** t4030-diff-textconv.sh ***
ok 16 - 8-15 are aliases for aixterm color names(B[m
ok 63 - hunk header: cpp-gnu-style-function(B[m
ok 101 - stash -- <subdir> works with binary files(B[m
ok 17 - 256 colors(B[m
ok 85 - git log -GF master # magic is (not used)(B[m
ok 90 - format-patch wraps extremely long subject (rfc2047)(B[m
ok 18 - 24-bit colors(B[m
ok 64 - hunk header: cpp-namespace-definition(B[m
[33mnot ok 13 - git_stash: modified submodule does not update submodule work tree from invalid commit # TODO known breakage(B[m
ok 19 - "normal" yields no color at all"(B[m
ok 65 - hunk header: cpp-operator-definition(B[m
ok 70 - set up whitespace tests(B[m
ok 86 - git log -GF -p master # magic is (not used)(B[m
ok 20 - -1 is a synonym for "normal"(B[m
ok 1 - setup(B[m
ok 21 - color too small(B[m
ok 64 - rm of a populated nested submodule with nested modifications fails unless forced(B[m
ok 102 - stash with user.name and user.email set works(B[m
ok 91 - format-patch quotes dot in from-headers(B[m
ok 66 - hunk header: cpp-skip-access-specifiers(B[m
ok 2 - git diff --raw HEAD(B[m
ok 22 - color too big(B[m
ok 1 - diff honors config option, diff.suppressBlankEmpty(B[m
ok 67 - hunk header: cpp-skip-comment-block(B[m
ok 23 - extra character after color number(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
ok 87 - git log -GF -p --pickaxe-all master # magic is (not used)(B[m
ok 3 - git diff-index --raw HEAD(B[m
ok 71 - move detection ignoring whitespace (B[m
*** t4031-diff-rewrite-binary.sh ***
ok 24 - extra character after color name(B[m
ok 4 - git diff-files --raw(B[m
ok 68 - hunk header: cpp-skip-labels(B[m
ok 92 - format-patch quotes double-quote in from-headers(B[m
ok 25 - extra character after attribute(B[m
ok 88 - git log --decorate --all # magic is (not used)(B[m
ok 1 - setup binary file with history(B[m
ok 69 - hunk header: cpp-struct-definition(B[m
ok 5 - git diff HEAD(B[m
ok 26 - unknown color slots are ignored (diff)(B[m
ok 2 - file is considered binary by porcelain(B[m
ok 70 - hunk header: cpp-struct-single-line(B[m
ok 72 - move detection ignoring whitespace changes(B[m
ok 27 - unknown color slots are ignored (branch)(B[m
ok 93 - format-patch uses rfc2047-encoded from-headers when necessary(B[m
ok 6 - git diff HEAD with dirty submodule (work tree)(B[m
ok 89 - git log --decorate=full --all # magic is (not used)(B[m
ok 71 - hunk header: cpp-template-function-definition(B[m
ok 3 - file is considered binary by plumbing(B[m
ok 28 - unknown color slots are ignored (status)(B[m
[32m# passed all 28 test(s)(B[m
[36m1..28(B[m
ok 4 - setup textconv filters(B[m
*** t4032-diff-inter-hunk-context.sh ***
ok 72 - hunk header: cpp-union-definition(B[m
ok 90 - git rev-list --parents HEAD # magic is (not used)(B[m
ok 1 - create binary file with changes(B[m
ok 7 - git diff HEAD with dirty submodule (index)(B[m
ok 94 - rfc2047-encoded from-headers leave no rfc822 specials(B[m
ok 103 - stash works when user.name and user.email are not set(B[m
ok 73 - hunk header: cpp-void-c-function(B[m
ok 2 - vanilla diff is binary(B[m
ok 73 - move detection ignoring whitespace at eol(B[m
ok 74 - hunk header: css-brace-in-col-1(B[m
ok 5 - diff produces text(B[m
ok 3 - rewrite diff is binary(B[m
ok 91 - git rev-list --children HEAD # magic is (not used)(B[m
ok 8 - git diff HEAD with dirty submodule (untracked)(B[m
ok 74 - clean up whitespace-test colors(B[m
ok 95 - format-patch wraps moderately long from-header (ascii)(B[m
ok 75 - hunk header: css-colon-eol(B[m
ok 4 - rewrite diff can show binary patch(B[m
ok 76 - hunk header: css-colon-selector(B[m
ok 92 - git whatchanged master # magic is (not used)(B[m
ok 6 - show commit produces text(B[m
ok 5 - rewrite diff --numstat shows binary changes(B[m
ok 104 - stash --keep-index with file deleted in index does not resurrect it on disk(B[m
ok 14 - git_stash: added submodule doesn't remove untracked unignored file with same name(B[m
ok 77 - hunk header: css-common(B[m
ok 96 - format-patch wraps extremely long from-header (ascii)(B[m
ok 7 - diff-tree produces binary(B[m
ok 75 - --color-moved block at end of diff output respects MIN_ALNUM_COUNT(B[m
ok 9 - git diff HEAD with dirty submodule (work tree, refs match)(B[m
ok 93 - git whatchanged master # magic is noellipses(B[m
ok 78 - hunk header: css-long-selector-list(B[m
ok 6 - diff --stat counts binary rewrite as 0 lines(B[m
ok 1 - diff -U0, 1 common line: count hunks (2)(B[m
ok 7 - setup textconv(B[m
ok 79 - hunk header: css-prop-sans-indent(B[m
ok 8 - log produces text(B[m
ok 2 - diff -U0, 1 common line: check output(B[m
ok 97 - format-patch wraps extremely long from-header (rfc822)(B[m
ok 94 - git whatchanged -p master # magic is (not used)(B[m
ok 9 - format-patch produces binary(B[m
ok 80 - hunk header: css-short-selector-list(B[m
ok 3 - diff -U0 --inter-hunk-context=0, 1 common line: count hunks (2)(B[m
ok 105 - stash apply should succeed with unmodified file(B[m
ok 76 - --color-moved respects MIN_ALNUM_COUNT(B[m
ok 8 - rewrite diff respects textconv(B[m
ok 81 - hunk header: css-trailing-space(B[m
ok 4 - diff -U0 --inter-hunk-context=0, 1 common line: check output(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 98 - format-patch wraps extremely long from-header (rfc2047)(B[m
ok 95 - git whatchanged --root master # magic is (not used)(B[m
*** t4033-diff-patience.sh ***
ok 82 - hunk header: custom1-pattern(B[m
ok 5 - diff -U0 --inter-hunk-context=1, 1 common line: count hunks (1)(B[m
ok 10 - status -v produces text(B[m
ok 6 - diff -U0 --inter-hunk-context=1, 1 common line: check output(B[m
ok 83 - hunk header: custom2-match-to-end-of-line(B[m
ok 96 - git whatchanged --root master # magic is noellipses(B[m
ok 11 - show blob produces binary(B[m
ok 99 - subject lines do not have 822 atom-quoting(B[m
ok 77 - --color-moved treats adjacent blocks as separate for MIN_ALNUM_COUNT(B[m
ok 7 - diff -U0 --inter-hunk-context=2, 1 common line: count hunks (1)(B[m
ok 84 - hunk header: custom3-alternation-in-pattern(B[m
ok 106 - stash handles skip-worktree entries nicely(B[m
ok 100 - subject prefixes have space prepended(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 104 test(s)(B[m
[36m1..106(B[m
ok 8 - diff -U0 --inter-hunk-context=2, 1 common line: check output(B[m
ok 12 - show --textconv blob produces text(B[m
ok 97 - git whatchanged --root -p master # magic is (not used)(B[m
ok 85 - hunk header: dts-labels(B[m
ok 101 - empty subject prefix does not have extra space(B[m
ok 9 - diff -U1, 1 common line: count hunks (1)(B[m
ok 10 - git diff HEAD with dirty submodule (work tree, refs match) [.gitmodules](B[m
ok 13 - show --no-textconv blob produces binary(B[m
ok 1 - --ignore-space-at-eol with a single appended character(B[m
ok 86 - hunk header: dts-node-unitless(B[m
*** t4034-diff-words.sh ***
ok 98 - git whatchanged --patch-with-stat master # magic is (not used)(B[m
ok 102 - --rfc(B[m
ok 87 - hunk header: dts-nodes(B[m
ok 103 - --from=ident notices bogus ident(B[m
ok 11 - git diff HEAD with dirty submodule (index, refs match)(B[m
ok 14 - grep-diff (-G) operates on textconv data (add)(B[m
ok 88 - hunk header: dts-nodes-boolean-prop(B[m
ok 10 - diff -U0, 2 common lines: count hunks (2)(B[m
ok 104 - --from=ident replaces author(B[m
ok 99 - git whatchanged --root --patch-with-stat master # magic is (not used)(B[m
ok 2 - patience diff(B[m
ok 89 - hunk header: dts-nodes-comment1(B[m
ok 11 - diff -U0 --inter-hunk-context=0, 2 common lines: count hunks (2)(B[m
ok 105 - --from uses committer ident(B[m
ok 3 - patience diff output is valid(B[m
ok 90 - hunk header: dts-nodes-comment2(B[m
ok 12 - diff -U0 --inter-hunk-context=1, 2 common lines: count hunks (2)(B[m
ok 100 - git whatchanged --root --patch-with-stat --summary master # magic is (not used)(B[m
ok 106 - --from omits redundant in-body header(B[m
ok 15 - grep-diff (-G) operates on textconv data (modification)(B[m
ok 15 - stash push with submodule.recurse=true preserves dirty submodule worktree(B[m
ok 12 - git diff HEAD with dirty submodule (untracked, refs match)(B[m
ok 91 - hunk header: dts-nodes-multiline-prop(B[m
ok 13 - diff -U0 --inter-hunk-context=2, 2 common lines: count hunks (1)(B[m
[33mnot ok 81 - rebase -p --root on linear history is a no-op # TODO known breakage(B[m
ok 92 - hunk header: dts-reference(B[m
ok 101 - git whatchanged --root -c --patch-with-stat --summary master # magic is (not used)(B[m
ok 14 - diff -U1, 2 common lines: count hunks (1)(B[m
ok 4 - completely different files(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t4035-diff-quiet.sh ***
ok 93 - hunk header: dts-root(B[m
ok 16 - pickaxe (-S) operates on textconv data (add)(B[m
ok 65 - rm of a populated nested submodule with nested untracked files fails unless forced(B[m
ok 1 - setup(B[m
ok 107 - in-body headers trigger content encoding(B[m
ok 2 - set up pre and post with runs of whitespace(B[m
ok 94 - hunk header: dts-root-comment(B[m
ok 102 - git whatchanged --root --cc --patch-with-stat --summary master # magic is (not used)(B[m
ok 95 - hunk header: elixir-do-not-pick-end(B[m
ok 15 - diff -U1, 3 common lines: count hunks (2)(B[m
ok 108 - signoff: commit with no body(B[m
ok 17 - pickaxe (-S) operates on textconv data (modification)(B[m
ok 96 - hunk header: elixir-ex-unit-test(B[m
ok 82 - rebase  -f --root on linear history causes re-write(B[m
ok 103 - git whatchanged -SF master # magic is (not used)(B[m
ok 13 - git diff HEAD with dirty submodule (untracked, refs match) [.gitmodules](B[m
ok 16 - diff -U1 --inter-hunk-context=0, 3 common lines: count hunks (2)(B[m
ok 97 - hunk header: elixir-function(B[m
ok 109 - signoff: commit with only subject(B[m
ok 17 - diff -U1 --inter-hunk-context=1, 3 common lines: count hunks (1)(B[m
ok 18 - diffstat does not run textconv(B[m
ok 104 - git whatchanged -SF master # magic is noellipses(B[m
ok 98 - hunk header: elixir-macro(B[m
ok 14 - git diff between submodule commits(B[m
ok 18 - diff -U1 --inter-hunk-context=2, 3 common lines: count hunks (1)(B[m
ok 110 - signoff: commit with only subject that does not end with NL(B[m
ok 99 - hunk header: elixir-module(B[m
ok 105 - git whatchanged -SF -p master # magic is (not used)(B[m
ok 100 - hunk header: elixir-module-func(B[m
ok 83 - rebase -m -f --root on linear history causes re-write(B[m
ok 111 - signoff: no existing signoffs(B[m
ok 101 - hunk header: elixir-nested-module(B[m
ok 3 - word diff with runs of whitespace(B[m
ok 1 - setup(B[m
ok 19 - textconv does not act on symlinks(B[m
ok 106 - git log --patch-with-stat master -- dir/ # magic is (not used)(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 102 - hunk header: elixir-private-function(B[m
ok 2 - git diff-tree HEAD^ HEAD(B[m
*** t4036-format-patch-signer-mime.sh ***
ok 112 - signoff: no existing signoffs and no trailing NL(B[m
ok 19 - diff -U3, 9 common lines: count hunks (2)(B[m
ok 78 - move detection with submodules(B[m
ok 3 - git diff-tree HEAD^ HEAD -- a(B[m
ok 15 - git diff between submodule commits [.gitmodules](B[m
ok 103 - hunk header: elixir-protocol(B[m
ok 107 - git whatchanged --patch-with-stat master -- dir/ # magic is (not used)(B[m
ok 20 - diff -U3 --inter-hunk-context=2, 9 common lines: count hunks (2)(B[m
ok 4 - git diff-tree HEAD^ HEAD -- b(B[m
ok 4 - --word-diff=porcelain(B[m
ok 16 - git diff (empty submodule dir)(B[m
ok 104 - hunk header: elixir-protocol-implementation(B[m
ok 84 - rebase -i -f --root on linear history causes re-write(B[m
ok 113 - signoff: some random signoff(B[m
ok 21 - diff -U3 --inter-hunk-context=3, 9 common lines: count hunks (1)(B[m
ok 5 - echo HEAD | git diff-tree --stdin(B[m
ok 108 - git log --patch-with-stat --summary master -- dir/ # magic is (not used)(B[m
ok 105 - hunk header: fountain-scene(B[m
ok 17 - conflicted submodule setup(B[m
ok 6 - git diff-tree HEAD HEAD(B[m
ok 22 - (diff.interHunkContext=0) diff -U0, 1 common line: count hunks (2)(B[m
ok 114 - signoff: misc conforming footer elements(B[m
ok 106 - hunk header: golang-complex-function(B[m
ok 79 - only move detection ignores white spaces(B[m
ok 18 - combined (empty submodule)(B[m
ok 7 - git diff-files(B[m
ok 16 - stash push and pop with submodule.recurse=true preserves dirty submodule worktree(B[m
ok 23 - (diff.interHunkContext=0) diff -U0, 1 common line: check output(B[m
ok 109 - git whatchanged --patch-with-stat --summary master -- dir/ # magic is (not used)(B[m
[33m# still have 11 known breakage(s)(B[m
[32m# passed all remaining 5 test(s)(B[m
[36m1..16(B[m
ok 107 - hunk header: golang-func(B[m
ok 8 - git diff-index --cached HEAD(B[m
ok 1 - setup(B[m
ok 115 - signoff: some random signoff-alike(B[m
ok 24 - (diff.interHunkContext=1) diff -U0, 1 common line: count hunks (1)(B[m
ok 108 - hunk header: golang-interface(B[m
ok 19 - combined (with submodule)(B[m
ok 9 - git diff-index --cached HEAD^(B[m
ok 110 - git show initial # magic is (not used)(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 2 - format normally(B[m
ok 5 - --word-diff=plain(B[m
ok 25 - (diff.interHunkContext=1) diff -U0, 1 common line: check output(B[m
*** t4037-diff-r-t-dirs.sh ***
ok 80 - compare whitespace delta across moved blocks(B[m
*** t4038-diff-combined.sh ***
ok 109 - hunk header: golang-long-func(B[m
ok 116 - signoff: not really a signoff(B[m
ok 10 - git diff-index --cached HEAD^(B[m
ok 3 - format with signoff without funny signer name(B[m
ok 111 - git show --root initial # magic is (not used)(B[m
ok 26 - (diff.interHunkContext=2) diff -U0, 1 common line: count hunks (1)(B[m
ok 110 - hunk header: golang-struct(B[m
ok 4 - format with non ASCII signer name(B[m
ok 11 - git diff-tree -Stext HEAD^ HEAD -- b(B[m
ok 27 - (diff.interHunkContext=2) diff -U0, 1 common line: check output(B[m
ok 117 - signoff: not really a signoff (2)(B[m
ok 111 - hunk header: java-class-member-function(B[m
ok 5 - attach and signoff do not duplicate mime headers(B[m
ok 6 - --word-diff=plain --color(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 112 - git show side # magic is (not used)(B[m
ok 12 - git diff-tree -Snot-found HEAD^ HEAD -- b(B[m
*** t4039-diff-assume-unchanged.sh ***
ok 112 - hunk header: matlab-class-definition(B[m
ok 28 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)(B[m
ok 81 - bogus settings in move detection erroring out(B[m
ok 13 - git diff-files(B[m
ok 118 - signoff: valid S-o-b paragraph in the middle(B[m
ok 113 - hunk header: matlab-function(B[m
ok 82 - compare whitespace delta incompatible with other space options(B[m
ok 113 - git show master # magic is (not used)(B[m
ok 29 - (diff.interHunkContext=0) diff -U0, 2 common lines: count hunks (2)(B[m
ok 14 - git diff-index --cached HEAD(B[m
ok 7 - word diff without context(B[m
ok 114 - hunk header: matlab-octave-section-1(B[m
ok 119 - signoff: the same signoff at the end(B[m
ok 30 - (diff.interHunkContext=1) diff -U0, 2 common lines: count hunks (2)(B[m
ok 15 - git diff, one file outside repo(B[m
ok 115 - hunk header: matlab-octave-section-2(B[m
ok 114 - git show -c master # magic is (not used)(B[m
ok 1 - setup(B[m
ok 83 - compare mixed whitespace delta across moved blocks(B[m
ok 66 - rm absorbs submodule's nested .git directory(B[m
ok 16 - git diff, both files outside repo(B[m
ok 116 - hunk header: matlab-section(B[m
ok 31 - (diff.interHunkContext=2) diff -U0, 2 common lines: count hunks (1)(B[m
ok 120 - signoff: the same signoff at the end, no trailing NL(B[m
ok 2 - verify(B[m
ok 8 - word diff with a regular expression(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 84 - combine --ignore-blank-lines with --function-context(B[m
ok 115 - git show -m master # magic is (not used)(B[m
ok 117 - hunk header: perl-skip-end-of-heredoc(B[m
ok 17 - git diff --ignore-space-at-eol, one file outside repo(B[m
*** t4040-whitespace-status.sh ***
ok 32 - (diff.interHunkContext=0) diff -U1, 3 common lines: count hunks (2)(B[m
ok 9 - set up a diff driver(B[m
ok 121 - signoff: the same signoff NOT at the end(B[m
ok 118 - hunk header: perl-skip-forward-decl(B[m
ok 85 - combine --ignore-blank-lines with --function-context 2(B[m
ok 18 - git diff --ignore-space-at-eol, both files outside repo(B[m
[32m# passed all 85 test(s)(B[m
[36m1..85(B[m
ok 1 - setup(B[m
ok 33 - (diff.interHunkContext=1) diff -U1, 3 common lines: count hunks (1)(B[m
ok 116 - git show --first-parent master # magic is (not used)(B[m
ok 119 - hunk header: perl-skip-sub-in-pod(B[m
*** t4041-diff-submodule-option.sh ***
ok 2 - diff-index does not examine assume-unchanged entries(B[m
ok 19 - git diff --ignore-all-space, one file outside repo(B[m
ok 122 - signoff: tolerate garbage in conforming footer(B[m
ok 34 - (diff.interHunkContext=2) diff -U1, 3 common lines: count hunks (1)(B[m
ok 120 - hunk header: perl-sub-definition(B[m
ok 3 - diff-files does not examine assume-unchanged entries(B[m
ok 10 - option overrides .gitattributes(B[m
ok 117 - git show --stat side # magic is (not used)(B[m
ok 20 - git diff --ignore-all-space, both files outside repo(B[m
ok 121 - hunk header: perl-sub-definition-kr-brace(B[m
ok 35 - (diff.interHunkContext=2) diff -U3, 9 common lines: count hunks (2)(B[m
ok 21 - git diff --quiet ignores stat-change only entries(B[m
ok 122 - hunk header: php-abstract-class(B[m
ok 118 - git show --stat --summary side # magic is (not used)(B[m
ok 4 - find-copies-harder is not confused by mode bits(B[m
ok 36 - (diff.interHunkContext=3) diff -U3, 9 common lines: count hunks (1)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 22 - git diff --quiet on a path that need conversion(B[m
ok 11 - use regex supplied by driver(B[m
ok 123 - hunk header: php-class(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
*** t4042-diff-textconv-caching.sh ***
ok 123 - signoff: respect trailer config(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 12 - set up diff.wordRegex option(B[m
*** t4043-diff-rename-binary.sh ***
ok 124 - hunk header: php-final-class(B[m
ok 119 - git show --patch-with-stat side # magic is (not used)(B[m
ok 37 - diff.interHunkContext invalid(B[m
ok 2 - diff-tree --exit-code(B[m
[32m# passed all 37 test(s)(B[m
[36m1..37(B[m
ok 124 - signoff: footer begins with non-signoff without @ sign(B[m
ok 125 - hunk header: php-function(B[m
*** t4044-diff-index-unique-abbrev.sh ***
ok 2 - check combined output (1)(B[m
ok 120 - git show --patch-with-raw side # magic is (not used)(B[m
ok 3 - diff-tree -b --exit-code(B[m
ok 126 - hunk header: php-interface(B[m
ok 13 - command-line overrides config(B[m
ok 67 - checking out a commit after submodule removal needs manual updates(B[m
ok 4 - diff-index --cached --exit-code(B[m
ok 127 - hunk header: php-method(B[m
ok 125 - format patch ignores color.ui(B[m
ok 3 - check combined output (2)(B[m
ok 121 - git show --patch-with-raw side # magic is noellipses(B[m
ok 128 - hunk header: php-trait(B[m
ok 68 - rm of d/f when d has become a non-directory(B[m
ok 5 - diff-index -b -p --cached --exit-code(B[m
ok 129 - hunk header: python-async-def(B[m
ok 14 - command-line overrides config: --word-diff-regex(B[m
ok 6 - diff-index --exit-code(B[m
ok 4 - diagnose truncated file(B[m
ok 1 - prepare repository(B[m
ok 1 - added submodule(B[m
ok 126 - cover letter with invalid --cover-from-description and config(B[m
ok 122 - git show --patch-with-stat --summary side # magic is (not used)(B[m
ok 130 - hunk header: python-class(B[m
ok 7 - diff-index -b -p --exit-code(B[m
ok 69 - rm of d/f when d has become a dangling symlink(B[m
ok 2 - move the files into a "sub" directory(B[m
ok 131 - hunk header: python-def(B[m
ok 8 - diff-files --exit-code(B[m
ok 123 - git format-patch --stdout initial..side # magic is (not used)(B[m
ok 15 - .gitattributes override config(B[m
ok 2 - added submodule, set diff.submodule(B[m
ok 132 - hunk header: python-indented-async-def(B[m
ok 1 - setup(B[m
ok 9 - diff-files -b -p --exit-code(B[m
ok 70 - rm of file when it has become a directory(B[m
ok 3 - git show -C -C report renames(B[m
ok 16 - setup: remove diff driver regex(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 127 - cover letter with format.coverFromDescription = default(B[m
*** t4045-diff-relative.sh ***
ok 133 - hunk header: python-indented-class(B[m
ok 124 - git format-patch --stdout initial..master^ # magic is (not used)(B[m
ok 10 - diff-files --diff-filter --quiet(B[m
ok 1 - setup(B[m
ok 134 - hunk header: python-indented-def(B[m
ok 3 - --submodule=short overrides diff.submodule(B[m
ok 135 - hunk header: rust-fn(B[m
ok 11 - diff-tree --diff-filter --quiet(B[m
ok 2 - diff does not produce ambiguous index line(B[m
ok 128 - cover letter with --cover-from-description default(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 17 - use configured regex(B[m
ok 2 - first textconv works(B[m
ok 125 - git format-patch --stdout initial..master # magic is (not used)(B[m
ok 71 - rm across a symlinked leading path (no index)(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t4046-diff-unmerged.sh ***
*** t4047-diff-dirstat.sh ***
ok 136 - hunk header: rust-impl(B[m
ok 4 - diff.submodule does not affect plumbing(B[m
ok 3 - cached textconv produces same output(B[m
ok 4 - cached textconv does not run helper(B[m
ok 137 - hunk header: rust-struct(B[m
ok 126 - git format-patch --stdout --no-numbered initial..master # magic is (not used)(B[m
[33mnot ok 72 - rm across a symlinked leading path (w/ index) # TODO known breakage(B[m
ok 138 - hunk header: rust-trait(B[m
ok 129 - cover letter with format.coverFromDescription = none(B[m
ok 73 - setup for testing rm messages(B[m
[32m# passed all 138 test(s)(B[m
[36m1..138(B[m
ok 127 - git format-patch --stdout --numbered initial..master # magic is (not used)(B[m
ok 1 - setup(B[m
ok 5 - modified submodule(forward)(B[m
ok 18 - test parsing words for newline(B[m
ok 74 - rm files with different staged content(B[m
*** t4048-diff-combined-binary.sh ***
ok 2 - -p --relative=subdir/(B[m
ok 75 - rm files with different staged content without hints(B[m
ok 6 - modified submodule(forward)(B[m
ok 130 - cover letter with --cover-from-description none(B[m
ok 128 - git format-patch --attach --stdout initial..side # magic is (not used)(B[m
ok 5 - changing textconv invalidates cache(B[m
ok 3 - -p --relative=subdir(B[m
ok 7 - modified submodule(forward) --submodule(B[m
ok 76 - rm file with local modification(B[m
ok 1 - setup(B[m
ok 129 - git format-patch --attach --stdout --suffix=.diff initial..side # magic is (not used)(B[m
ok 4 - -p --relative(B[m
ok 77 - rm file with local modification without hints(B[m
ok 2 - diff-files -0(B[m
ok 6 - switching diff driver produces correct results(B[m
ok 8 - modified submodule(forward) --submodule=short(B[m
ok 19 - test when words are only removed at the end(B[m
ok 3 - diff-files -1(B[m
ok 131 - cover letter with format.coverFromDescription = message(B[m
ok 5 - -p --relative=sub(B[m
ok 130 - git format-patch --attach --stdout initial..master^ # magic is (not used)(B[m
ok 7 - log notes cache and still use cache for -p(B[m
ok 78 - rm file with changes in the index(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 4 - diff-files -2(B[m
ok 6 - --numstat --relative=subdir/(B[m
*** t4049-diff-stat-count.sh ***
ok 79 - rm file with changes in the index without hints(B[m
ok 5 - diff-files -3(B[m
ok 9 - modified submodule(backward)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 7 - --numstat --relative=subdir(B[m
ok 131 - git format-patch --attach --stdout initial..master # magic is (not used)(B[m
ok 132 - cover letter with --cover-from-description message(B[m
*** t4050-diff-histogram.sh ***
ok 8 - --numstat --relative(B[m
ok 20 - --word-diff=none(B[m
ok 80 - rm files with two different errors(B[m
ok 21 - unset default driver(B[m
ok 132 - git format-patch --inline --stdout initial..side # magic is (not used)(B[m
ok 9 - --numstat --relative=sub(B[m
ok 81 - rm empty string should fail(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 80 test(s)(B[m
[36m1..81(B[m
ok 1 - setup binary merge conflict(B[m
ok 1 - setup(B[m
ok 133 - cover letter with format.coverFromDescription = subject(B[m
ok 10 - --stat --relative=subdir/(B[m
ok 10 - modified submodule(backward and forward)(B[m
ok 133 - git format-patch --inline --stdout initial..master^ # magic is (not used)(B[m
ok 2 - diff -m indicates binary-ness(B[m
*** t4051-diff-function-context.sh ***
ok 22 - diff driver 'ada'(B[m
ok 1 - setup(B[m
ok 11 - --stat --relative=subdir(B[m
ok 3 - diff -c indicates binary-ness(B[m
ok 2 - sanity check setup (--numstat)(B[m
ok 134 - git format-patch --inline --stdout --numbered-files initial..master # magic is (not used)(B[m
ok 12 - --stat --relative(B[m
ok 134 - cover letter with --cover-from-description subject(B[m
ok 4 - diff --cc indicates binary-ness(B[m
ok 11 - typechanged submodule(submodule->blob), --cached(B[m
ok 13 - --stat --relative=sub(B[m
ok 1 - histogram diff(B[m
ok 23 - diff driver 'bibtex'(B[m
ok 2 - mode-only change show as a 0-line change(B[m
ok 135 - git format-patch --inline --stdout initial..master # magic is (not used)(B[m
ok 12 - typechanged submodule(submodule->blob)(B[m
ok 14 - --raw --relative=subdir/(B[m
ok 3 - various ways to misspell --dirstat(B[m
ok 2 - histogram diff output is valid(B[m
ok 15 - --raw --relative=subdir(B[m
ok 135 - cover letter with format.coverFromDescription = auto (short subject line)(B[m
ok 3 - binary changes do not count in lines(B[m
ok 13 - typechanged submodule(submodule->blob)(B[m
ok 136 - git format-patch --inline --stdout --subject-prefix=TESTCASE initial..master # magic is (not used)(B[m
ok 24 - diff driver 'cpp'(B[m
ok 16 - --raw --relative(B[m
ok 4 - vanilla --dirstat(B[m
ok 3 - completely different files(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 17 - --raw --relative=sub(B[m
*** t4052-stat-output.sh ***
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 136 - cover letter with --cover-from-description auto (short subject line)(B[m
ok 137 - git config format.subjectprefix DIFFERENT_PREFIX # magic is (not used)(B[m
*** t4053-diff-no-index.sh ***
ok 4 - exclude unmerged entries from total file count(B[m
ok 5 - vanilla -X(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t4054-diff-bogus-tree.sh ***
ok 25 - diff driver 'csharp'(B[m
ok 138 - git format-patch --inline --stdout initial..master^^ # magic is (not used)(B[m
ok 6 - explicit defaults: --dirstat=changes,noncumulative,3(B[m
ok 14 - nonexistent commit(B[m
ok 5 - setup non-binary with binary attribute(B[m
ok 5 - setup for --cc --raw(B[m
ok 137 - cover letter with format.coverFromDescription = auto (long subject line)(B[m
ok 85 - rebase -p -f --root on linear history causes re-write(B[m
[33m# still have 7 known breakage(s)(B[m
[32m# passed all remaining 78 test(s)(B[m
[36m1..85(B[m
ok 139 - git format-patch --stdout --cover-letter -n initial..master^ # magic is (not used)(B[m
ok 26 - diff driver 'css'(B[m
ok 6 - diff -m respects binary attribute(B[m
ok 6 - check --cc --raw with four trees(B[m
ok 7 - explicit defaults: -Xchanges,noncumulative,3(B[m
ok 15 - typechanged submodule(blob->submodule)(B[m
*** t4055-diff-context.sh ***
ok 7 - diff -c respects binary attribute(B[m
ok 7 - check --cc --raw with forty trees(B[m
ok 1 - setup(B[m
ok 140 - git diff --abbrev initial..side # magic is (not used)(B[m
ok 1 - preparation(B[m
ok 1 - create bogus tree(B[m
ok 138 - cover letter with --cover-from-description auto (long subject line)(B[m
ok 8 - diff --cc respects binary attribute(B[m
ok 16 - submodule is up to date(B[m
ok 2 - git diff --no-index directories(B[m
ok 27 - diff driver 'dts'(B[m
ok 9 - setup textconv attribute(B[m
ok 2 - format-patch: small change with long name gives more space to the name(B[m
ok 141 - git diff -U initial..side # magic is (not used)(B[m
ok 2 - create tree with matching file(B[m
ok 3 - git diff --no-index relative path outside repo(B[m
ok 17 - submodule contains untracked content(B[m
ok 8 - later options override earlier options:(B[m
ok 3 - diff: small change with long name gives more space to the name(B[m
ok 4 - git diff --no-index with broken index(B[m
ok 3 - raw diff shows null sha1 (addition)(B[m
ok 18 - submodule contains untracked content (untracked ignored)(B[m
ok 5 - git diff outside repo with broken index(B[m
ok 10 - diff -m respects textconv attribute(B[m
ok 4 - raw diff shows null sha1 (removal)(B[m
ok 19 - submodule contains untracked content (dirty ignored)(B[m
ok 4 - show: small change with long name gives more space to the name(B[m
ok 142 - git diff -U1 initial..side # magic is (not used)(B[m
ok 28 - diff driver 'fortran'(B[m
ok 139 - cover letter with command-line --cover-from-description overrides config(B[m
ok 20 - submodule contains untracked content (all ignored)(B[m
ok 9 - non-defaults in config overridden by explicit defaults on command line(B[m
ok 5 - raw diff shows null sha1 (modification)(B[m
ok 5 - log: small change with long name gives more space to the name(B[m
ok 8 - setup combined ignore spaces(B[m
ok 6 - git diff --no-index executed outside repo gives correct error message(B[m
ok 6 - raw diff shows null sha1 (other direction)(B[m
ok 11 - diff -c respects textconv attribute(B[m
ok 143 - git diff -r initial..side # magic is (not used)(B[m
ok 21 - submodule contains untracked and modified content(B[m
ok 1 - setup(B[m
ok 140 - cover letter using branch description (1)(B[m
ok 7 - raw diff shows null sha1 (reverse)(B[m
ok 29 - diff driver 'html'(B[m
ok 6 - format-patch --stat=width: a long name is given more room when the bar is short(B[m
ok 9 - check combined output (no ignore space)(B[m
ok 1 - setup(B[m
ok 10 - --dirstat=0(B[m
ok 8 - raw diff shows null sha1 (index)(B[m
ok 22 - submodule contains untracked and modified content (untracked ignored)(B[m
ok 2 - the default number of context lines is 3(B[m
ok 144 - git diff --stat initial..side # magic is (not used)(B[m
ok 12 - diff --cc respects textconv attribute(B[m
ok 2 - changed function(B[m
ok 7 - format-patch --stat-width=width with long name(B[m
ok 9 - patch fails due to bogus sha1 (addition)(B[m
ok 23 - submodule contains untracked and modified content (dirty ignored)(B[m
ok 141 - cover letter using branch description (2)(B[m
ok 7 - diff D F and diff F D(B[m
ok 10 - patch fails due to bogus sha1 (removal)(B[m
ok 10 - check combined output (ignore space at eol)(B[m
ok 8 - format-patch --stat=...,name-width with long name(B[m
ok 24 - submodule contains untracked and modified content (all ignored)(B[m
ok 13 - diff-tree plumbing does not respect textconv(B[m
ok 3 - diff.context honored by "log"(B[m
ok 11 - -X0(B[m
ok 8 - turning a file into a directory(B[m
ok 11 - patch fails due to bogus sha1 (modification)(B[m
ok 145 - git diff -r --stat initial..side # magic is (not used)(B[m
ok 3 -  diff applies(B[m
ok 30 - diff driver 'java'(B[m
ok 9 - format-patch --stat-name-width with long name(B[m
ok 142 - cover letter using branch description (3)(B[m
ok 12 - patch fails due to bogus sha1 (other direction)(B[m
ok 4 -  context includes comment(B[m
ok 11 - check combined output (ignore space change)(B[m
ok 4 - The -U option overrides diff.context(B[m
ok 25 - submodule contains modified content(B[m
ok 9 - diff from repo subdir shows real paths (explicit)(B[m
ok 5 -  context includes begin(B[m
ok 13 - patch fails due to bogus sha1 (reverse)(B[m
ok 10 - diff --stat=width: a long name is given more room when the bar is short(B[m
ok 6 -  context includes end(B[m
ok 146 - git diff initial..side # magic is (not used)(B[m
ok 12 - diff.dirstat=0(B[m
ok 14 - patch fails due to bogus sha1 (index)(B[m
ok 10 - diff from repo subdir shows real paths (implicit)(B[m
ok 7 -  context does not include other functions(B[m
ok 5 - diff.context honored by "diff"(B[m
ok 12 - check combined output (ignore all spaces)(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 11 - diff --stat-width=width with long name(B[m
ok 14 - diff --cc respects textconv on worktree file(B[m
ok 143 - cover letter using branch description (4)(B[m
ok 8 -  context does not include preceding empty lines(B[m
*** t4056-diff-order.sh ***
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 31 - diff driver 'matlab'(B[m
ok 26 - submodule is modified(B[m
ok 9 -  context does not include trailing empty lines(B[m
ok 6 - plumbing not affected(B[m
*** t4057-diff-combined-paths.sh ***
ok 12 - diff --stat=...,name-width with long name(B[m
ok 147 - git diff --patch-with-stat initial..side # magic is (not used)(B[m
ok 11 - diff --no-index from repo subdir respects config (explicit)(B[m
ok 10 - changed includes(B[m
ok 13 - diff --stat-name-width with long name(B[m
ok 27 - modified submodule contains untracked content(B[m
ok 144 - cover letter using branch description (5)(B[m
ok 13 - --dirstat=0 --cumulative(B[m
ok 7 - non-integer config parsing(B[m
ok 148 - git diff --patch-with-raw initial..side # magic is (not used)(B[m
ok 14 - show --stat=width: a long name is given more room when the bar is short(B[m
ok 12 - diff --no-index from repo subdir respects config (implicit)(B[m
ok 11 -  diff applies(B[m
ok 28 - modified submodule contains untracked content (untracked ignored)(B[m
ok 32 - diff driver 'objc'(B[m
ok 8 - negative integer config parsing(B[m
ok 12 -  context includes begin(B[m
ok 15 - show --stat-width=width with long name(B[m
ok 13 - diff --no-index from repo subdir with absolute paths(B[m
ok 145 - cover letter using branch description (6)(B[m
ok 14 - --dirstat=0,cumulative(B[m
ok 13 -  context includes end(B[m
ok 29 - modified submodule contains untracked content (dirty ignored)(B[m
ok 149 - git diff --patch-with-raw initial..side # magic is noellipses(B[m
ok 14 -  context does not include other functions(B[m
ok 16 - show --stat=...,name-width with long name(B[m
ok 146 - cover letter with nothing(B[m
ok 14 - diff --no-index allows external diff(B[m
ok 9 - -U0 is valid, so is diff.context=0(B[m
ok 30 - modified submodule contains untracked content (all ignored)(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 15 -  context does not include trailing empty lines(B[m
ok 13 - combine diff coalesce simple(B[m
*** t4058-diff-duplicates.sh ***
*** t4059-diff-submodule-not-initialized.sh ***
ok 33 - diff driver 'pascal'(B[m
ok 17 - show --stat-name-width with long name(B[m
ok 16 - appended function(B[m
ok 15 - -X0,cumulative(B[m
ok 150 - git diff --patch-with-stat -r initial..side # magic is (not used)(B[m
ok 31 - modified submodule contains untracked and modified content(B[m
ok 18 - log --stat=width: a long name is given more room when the bar is short(B[m
ok 147 - cover letter auto(B[m
ok 1 - setup(B[m
ok 32 - modified submodule contains untracked and modified content (untracked ignored)(B[m
ok 19 - log --stat-width=width with long name(B[m
ok 151 - git diff --patch-with-raw -r initial..side # magic is (not used)(B[m
ok 17 -  diff applies(B[m
ok 16 - diff.dirstat=0,cumulative(B[m
ok 2 - no order (=tree object order)(B[m
ok 18 -  context includes begin(B[m
ok 33 - modified submodule contains untracked and modified content (dirty ignored)(B[m
ok 34 - diff driver 'perl'(B[m
ok 19 -  context includes end(B[m
ok 20 - log --stat=...,name-width with long name(B[m
ok 3 - missing orderfile(B[m
ok 34 - modified submodule contains untracked and modified content (all ignored)(B[m
ok 20 -  context does not include other functions(B[m
ok 152 - git diff --patch-with-raw -r initial..side # magic is noellipses(B[m
ok 21 - appended function part(B[m
ok 17 - diff.dirstat=0 & --dirstat=cumulative(B[m
ok 21 - log --stat-name-width with long name(B[m
ok 35 - modified submodule contains modified content(B[m
ok 148 - cover letter auto user override(B[m
ok 153 - git diff --name-status dir2 dir # magic is (not used)(B[m
ok 35 - diff driver 'php'(B[m
ok 4 - unreadable orderfile(B[m
ok 22 -  diff applies(B[m
ok 36 - deleted submodule(B[m
ok 22 - preparation for big change tests(B[m
ok 18 - --dirstat-by-file(B[m
ok 23 -  context includes begin(B[m
ok 149 - format-patch --zero-commit(B[m
ok 5 - orderfile using option from subdir with --output(B[m
ok 1 - trivial merge - combine-diff empty(B[m
ok 24 -  context includes end(B[m
ok 154 - git diff --no-index --name-status dir2 dir # magic is (not used)(B[m
ok 1 - create trees with duplicate entries(B[m
ok 25 -  context does not include other functions(B[m
ok 6 - orderfile using option (1)(B[m
ok 23 - format-patch --cover-letter ignores COLUMNS (big change)(B[m
ok 150 - From line has expected format(B[m
ok 26 -  context does not include preceding empty lines(B[m
ok 36 - diff driver 'python'(B[m
ok 2 - diff-tree between trees(B[m
ok 19 - --dirstat=files(B[m
ok 1 - setup - submodules(B[m
ok 14 - combine diff coalesce tricky(B[m
ok 27 - change with long common tail and no context(B[m
ok 155 - git diff --no-index --name-status -- dir2 dir # magic is (not used)(B[m
ok 3 - diff-tree with renames(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 24 - format-patch ignores COLUMNS (big change)(B[m
ok 151 - format-patch -o with no leading directories(B[m
*** t4060-diff-submodule-option-diff-format.sh ***
ok 7 - orderfile is fifo (1)(B[m
ok 37 - create second submodule(B[m
ok 20 - diff.dirstat=files(B[m
ok 25 - format-patch --graph ignores COLUMNS (big change)(B[m
ok 156 - git diff --no-index dir dir3 # magic is (not used)(B[m
ok 8 - orderfile using config (1)(B[m
ok 28 -  diff applies(B[m
ok 37 - diff driver 'ruby'(B[m
ok 38 - multiple submodules(B[m
ok 29 -  context includes begin(B[m
ok 26 - diff respects COLUMNS (big change)(B[m
ok 9 - cancelling configured orderfile (1)(B[m
ok 152 - format-patch -o with leading existing directories(B[m
ok 30 -  context includes end(B[m
ok 31 -  context does not include other functions(B[m
ok 2 - only one truly conflicting path(B[m
ok 27 - show respects COLUMNS (big change)(B[m
ok 157 - git diff master master^ side # magic is (not used)(B[m
ok 39 - path filter(B[m
ok 10 - orderfile using option (2)(B[m
ok 21 - --dirstat-by-file=10(B[m
ok 32 -  context does not include preceding empty lines(B[m
ok 28 - log respects COLUMNS (big change)(B[m
ok 153 - format-patch -o with leading non-existing directories(B[m
ok 33 - changed function plus appended function(B[m
ok 38 - diff driver 'tex'(B[m
ok 11 - orderfile is fifo (2)(B[m
ok 158 - git diff --line-prefix=abc master master^ side # magic is (not used)(B[m
ok 40 - given commit(B[m
ok 29 - log --graph respects COLUMNS (big change)(B[m
ok 22 - --dirstat=files,10(B[m
ok 12 - orderfile using config (2)(B[m
ok 13 - cancelling configured orderfile (2)(B[m
ok 41 - given commit --submodule(B[m
ok 34 -  diff applies(B[m
ok 159 - git diff --dirstat master~1 master~2 # magic is (not used)(B[m
[33mnot ok 15 - combine diff coalesce three parents # TODO known breakage(B[m
ok 30 - format-patch ignores not enough COLUMNS (big change)(B[m
ok 154 - format-patch format.outputDirectory option(B[m
ok 35 -  context includes begin(B[m
ok 23 - diff.dirstat=10,files(B[m
ok 31 - format-patch --graph ignores not enough COLUMNS (big change)(B[m
ok 36 -  context includes end(B[m
ok 3 - merge introduces new file(B[m
ok 42 - given commit --submodule=short(B[m
ok 160 - git diff --dirstat initial rearrange # magic is (not used)(B[m
ok 37 -  context does not include other functions(B[m
ok 32 - diff respects not enough COLUMNS (big change)(B[m
ok 2 - setup - git submodule add(B[m
ok 43 - setup .git file for sm2(B[m
ok 155 - format-patch -o overrides format.outputDirectory(B[m
ok 38 - changed two consecutive functions(B[m
ok 33 - show respects not enough COLUMNS (big change)(B[m
ok 1 - setup repository(B[m
ok 39 - word-diff with diff.sbe(B[m
ok 24 - --dirstat-by-file --cumulative(B[m
ok 3 - submodule directory removed(B[m
ok 44 - diff --submodule with .git file(B[m
ok 14 - setup for testing combine-diff order(B[m
ok 161 - git diff --dirstat-by-file initial rearrange # magic is (not used)(B[m
ok 34 - log respects not enough COLUMNS (big change)(B[m
ok 15 - combine-diff: no order (=tree object order)(B[m
ok 39 -  diff applies(B[m
ok 35 - log --graph respects not enough COLUMNS (big change)(B[m
ok 25 - --dirstat=files,cumulative(B[m
ok 40 -  context includes begin(B[m
ok 2 - added submodule(B[m
ok 16 - combine-diff: orderfile using option (1)(B[m
ok 162 - git diff --dirstat --cc master~1 master # magic is (not used)(B[m
ok 41 -  context includes end(B[m
ok 17 - combine-diff: orderfile using option (2)(B[m
ok 42 -  overlapping hunks are merged(B[m
ok 36 - format-patch ignores statGraphWidth config(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 4 - merge removed a file(B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t4061-diff-indent.sh ***
ok 16 - combine diff missing delete bug(B[m
ok 26 - diff.dirstat=cumulative,files(B[m
ok 40 - word-diff with no newline at EOF(B[m
*** t4062-diff-pickaxe.sh ***
ok 37 - format-patch --graph ignores statGraphWidth config(B[m
ok 163 - git diff --raw initial # magic is (not used)(B[m
*** t4063-diff-blobs.sh ***
ok 38 - diff respects statGraphWidth config(B[m
ok 3 - added submodule, set diff.submodule(B[m
ok 156 - format-patch --base(B[m
ok 164 - git diff --raw initial # magic is noellipses(B[m
ok 41 - setup history with two files(B[m
ok 39 - show respects statGraphWidth config(B[m
ok 27 - --dirstat=files,cumulative,10(B[m
ok 40 - log respects statGraphWidth config(B[m
ok 165 - git diff --raw --abbrev=4 initial # magic is (not used)(B[m
ok 4 - --submodule=short overrides diff.submodule(B[m
ok 157 - format-patch --base errors out when base commit is in revision list(B[m
ok 28 - diff.dirstat=10,cumulative,files(B[m
ok 41 - log --graph respects statGraphWidth config(B[m
ok 42 - wordRegex for the first file does not apply to the second(B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
*** t4064-diff-oidfind.sh ***
ok 166 - git diff --raw --abbrev=4 initial # magic is noellipses(B[m
ok 42 - format-patch --stat=width with big change(B[m
ok 17 - combine diff gets tree sorting right(B[m
ok 45 - diff --submodule with objects referenced by alternates(B[m
[32m# passed all 45 test(s)(B[m
[36m1..45(B[m
ok 5 - diff.submodule does not affect plumbing(B[m
ok 1 - setup(B[m
ok 29 - --dirstat=files,cumulative,16.7(B[m
ok 43 - format-patch --stat-width=width with big change(B[m
ok 1 - create some blobs(B[m
ok 167 - git diff --raw --no-abbrev initial # magic is (not used)(B[m
*** t4065-diff-anchored.sh ***
ok 44 - format-patch --stat-graph-width with big change(B[m
ok 2 - diff by sha1(B[m
ok 4 - setup - submodule multiple commits(B[m
ok 2 - -G matches(B[m
ok 1 - prepare(B[m
ok 3 - index of sha1 diff(B[m
ok 3 - -S --pickaxe-regex(B[m
ok 168 - git diff --no-index --raw dir2 dir # magic is (not used)(B[m
ok 30 - diff.dirstat=16.7,cumulative,files(B[m
ok 45 - format-patch --stat-width=width --graph with big change(B[m
ok 5 - submodule removed multiple commits(B[m
ok 4 - sha1 diff uses arguments as paths(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 2 - diff: ugly spaces(B[m
*** t4066-diff-emit-delay.sh ***
ok 5 - sha1 diff has no mode change(B[m
ok 46 - format-patch --stat-graph-width --graph with big change(B[m
ok 6 - modified submodule(forward)(B[m
ok 6 - diff by tree:path (run)(B[m
ok 169 - git diff --no-index --raw dir2 dir # magic is noellipses(B[m
ok 3 - diff: --no-indent-heuristic overrides config(B[m
ok 31 - diff.dirstat=16.70,cumulative,files(B[m
ok 47 - diff --stat=width with big change(B[m
ok 7 - index of tree:path diff(B[m
ok 6 - submodule not initialized in new clone(B[m
ok 8 - tree:path diff uses filenames as paths(B[m
ok 48 - diff --stat-width=width with big change(B[m
ok 4 - diff: nice spaces with --indent-heuristic(B[m
ok 9 - tree:path diff shows mode change(B[m
ok 1 - --anchored(B[m
ok 7 - modified submodule(forward)(B[m
ok 170 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is (not used)(B[m
ok 10 - diff by ranged tree:path(B[m
ok 49 - diff --stat-graph-width with big change(B[m
ok 32 - --dirstat=files,cumulative,27.2(B[m
ok 5 - diff: nice spaces with diff.indentHeuristic=true(B[m
ok 11 - index of ranged tree:path diff(B[m
ok 18 - setup for --combined-all-paths(B[m
ok 12 - ranged tree:path diff uses filenames as paths(B[m
ok 2 - --anchored multiple(B[m
ok 50 - show --stat=width with big change(B[m
ok 8 - modified submodule(forward) --submodule(B[m
ok 171 - git diff --no-index --raw --abbrev=4 dir2 dir # magic is noellipses(B[m
ok 1 - setup (B[m
ok 13 - ranged tree:path diff shows mode change(B[m
ok 6 - diff: --indent-heuristic with --patience(B[m
ok 19 - --combined-all-paths and --raw(B[m
ok 3 - --anchored with nonexistent line has no effect(B[m
ok 33 - --dirstat=files,cumulative,27.09(B[m
ok 51 - show --stat-width=width with big change(B[m
ok 14 - diff blob against file(B[m
ok 2 - find the greeting blob(B[m
ok 4 - --anchored with non-unique line has no effect(B[m
ok 15 - index of blob-file diff(B[m
ok 20 - --combined-all-paths and --cc(B[m
ok 52 - show --stat-graph-width with big change(B[m
ok 9 - modified submodule(forward) --submodule=short(B[m
ok 7 - diff: --indent-heuristic with --histogram(B[m
ok 172 - git diff --no-index --raw --no-abbrev dir2 dir # magic is (not used)(B[m
ok 158 - format-patch --base errors out when base commit is not ancestor of revision list(B[m
ok 16 - blob-file diff uses filename as paths(B[m
ok 3 - setup a tree(B[m
ok 53 - log --stat=width with big change(B[m
ok 5 - diff still produced with impossible multiple --anchored(B[m
ok 8 - diff: ugly functions(B[m
ok 34 - --dirstat=lines(B[m
ok 17 - blob-file diff shows mode change(B[m
ok 54 - log --stat-width=width with big change(B[m
ok 4 - find a tree(B[m
ok 173 - git diff-tree --pretty --root --stat --compact-summary initial # magic is (not used)(B[m
ok 9 - diff: nice functions with --indent-heuristic(B[m
ok 18 - blob-file diff prefers filename to sha1(B[m
ok 55 - log --stat-graph-width with big change(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 6 - later algorithm arguments override earlier ones(B[m
*** t4067-diff-partial-clone.sh ***
ok 35 - diff.dirstat=lines(B[m
ok 10 - modified submodule(backward)(B[m
ok 174 - git diff-tree --pretty -R --root --stat --compact-summary initial # magic is (not used)(B[m
ok 10 - blame: nice spaces with --indent-heuristic(B[m
ok 56 - log --stat-width=width --graph with big change(B[m
ok 1 - set up history with a merge(B[m
ok 57 - log --stat-graph-width --graph with big change(B[m
ok 7 - setup submodule moved(B[m
ok 11 - blame: nice spaces with diff.indentHeuristic=true(B[m
ok 175 - git diff-tree --stat --compact-summary initial mode # magic is (not used)(B[m
ok 159 - format-patch --base=auto(B[m
ok 36 - --dirstat=lines,0(B[m
ok 7 - --anchored works with other commands like "git show"(B[m
ok 12 - blame: ugly spaces with --no-indent-heuristic(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 58 - preparation for long filename tests(B[m
*** t4100-apply-stat.sh ***
ok 2 - log --cc -p --stat --color-moved(B[m
ok 176 - git diff-tree -R --stat --compact-summary initial mode # magic is (not used)(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 13 - blame: ugly spaces with diff.indentHeuristic=false(B[m
*** t4101-apply-nonl.sh ***
ok 59 - format-patch --stat=width with big change is more balanced(B[m
ok 11 - modified submodule(backward and forward)(B[m
ok 177 - log -S requires an argument(B[m
ok 37 - diff.dirstat=0,lines(B[m
ok 21 - setup for --combined-all-paths with funny names(B[m
ok 60 - format-patch --stat=width --graph with big change is balanced(B[m
ok 178 - diff --cached on unborn branch(B[m
ok 14 - blame: --no-indent-heuristic overrides config(B[m
ok 8 - submodule moved then removed(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 38 - --dirstat=future_param,lines,0 should fail loudly(B[m
ok 61 - diff --stat=width with big change is more balanced(B[m
ok 22 - --combined-all-paths and --raw and funny names(B[m
ok 179 - diff --cached -- file on unborn branch(B[m
ok 15 - blame: --indent-heuristic overrides config(B[m
*** t4102-apply-rename.sh ***
ok 62 - show --stat=width with big change is more balanced(B[m
ok 39 - --dirstat=dummy1,cumulative,2dummy should report both unrecognized parameters(B[m
ok 23 - --combined-all-paths and --raw -and -z and funny names(B[m
ok 12 - typechanged submodule(submodule->blob), --cached(B[m
ok 180 - diff --line-prefix with spaces(B[m
ok 16 - diff-tree: nice spaces with --indent-heuristic(B[m
ok 1 - rename(B[m
ok 63 - log --stat=width with big change is more balanced(B[m
ok 5 - setup a submodule(B[m
ok 24 - --combined-all-paths and --cc and funny names(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 23 test(s)(B[m
[36m1..24(B[m
ok 181 - diff-tree --stdin with log formatting(B[m
ok 2 - rename with recount(B[m
ok 17 - diff-tree: nice spaces with diff.indentHeuristic=true(B[m
ok 1 - apply diff between 0 and 1(B[m
[32m# passed all 181 test(s)(B[m
[36m1..181(B[m
ok 13 - typechanged submodule(submodule->blob)(B[m
ok 64 - log --stat=width --graph with big change is balanced(B[m
ok 6 - find a submodule(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t4103-apply-binary.sh ***
ok 3 - copy(B[m
ok 40 - diff.dirstat=future_param,0,lines should warn, but still work(B[m
ok 2 - apply diff between 0 and 2(B[m
*** t4104-apply-boundary.sh ***
ok 1 - git show batches blobs(B[m
*** t4105-apply-fuzz.sh ***
ok 18 - diff-tree: ugly spaces with --no-indent-heuristic(B[m
ok 4 - copy with recount(B[m
ok 65 - format-patch ignores COLUMNS (long filename)(B[m
ok 3 - apply diff between 0 and 3(B[m
ok 14 - typechanged submodule(submodule->blob)(B[m
ok 5 - rewrite(B[m
ok 19 - diff-tree: ugly spaces with diff.indentHeuristic=false(B[m
ok 66 - format-patch --graph ignores COLUMNS (long filename)(B[m
ok 1 - setup(B[m
ok 4 - apply diff between 1 and 0(B[m
ok 6 - rewrite with recount(B[m
ok 2 - apply(B[m
ok 41 - --shortstat --dirstat should output only one dirstat(B[m
ok 67 - diff respects COLUMNS (long filename)(B[m
[32m# passed all 41 test(s)(B[m
[36m1..41(B[m
ok 20 - diff-tree: --indent-heuristic overrides config(B[m
ok 7 - mode(B[m
ok 5 - apply diff between 1 and 2(B[m
*** t4106-apply-stdin.sh ***
ok 3 - validate(B[m
ok 8 - mode with recount(B[m
ok 68 - show respects COLUMNS (long filename)(B[m
ok 6 - apply diff between 1 and 3(B[m
ok 160 - format-patch errors out when history involves criss-cross(B[m
ok 21 - diff-tree: --no-indent-heuristic overrides config(B[m
ok 4 - apply reverse(B[m
ok 9 - non git (1)(B[m
ok 7 - apply diff between 2 and 0(B[m
ok 69 - log respects COLUMNS (long filename)(B[m
ok 10 - non git (1) with recount(B[m
ok 8 - apply diff between 2 and 1(B[m
ok 70 - log --graph respects COLUMNS (long filename)(B[m
ok 5 - apply copy(B[m
ok 1 - setup(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 15 - nonexistent commit(B[m
ok 11 - non git (2)(B[m
*** t4107-apply-ignore-whitespace.sh ***
ok 22 - diff-index: nice spaces with --indent-heuristic(B[m
ok 9 - apply diff between 2 and 3(B[m
ok 161 - format-patch format.useAutoBase option(B[m
ok 71 - format-patch ignores prefix greater than COLUMNS (big change)(B[m
ok 12 - non git (2) with recount(B[m
ok 2 - unmodified patch(B[m
ok 10 - apply diff between 3 and 0(B[m
ok 13 - non git (3)(B[m
ok 2 - diff batches blobs(B[m
ok 72 - format-patch --graph ignores prefix greater than COLUMNS (big change)(B[m
ok 3 - minus offset(B[m
ok 1 - setup(B[m
ok 11 - apply diff between 3 and 1(B[m
ok 16 - typechanged submodule(blob->submodule)(B[m
ok 14 - non git (3) with recount(B[m
ok 23 - diff-index: nice spaces with diff.indentHeuristic=true(B[m
ok 162 - format-patch --base overrides format.useAutoBase(B[m
ok 2 - git apply --numstat - < patch(B[m
ok 12 - apply diff between 3 and 2(B[m
ok 4 - plus offset(B[m
ok 73 - diff respects prefix greater than COLUMNS (big change)(B[m
ok 15 - incomplete (1)(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 3 - git apply --numstat - < patch patch(B[m
*** t4108-apply-threeway.sh ***
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 16 - incomplete (1) with recount(B[m
ok 163 - format-patch --no-base overrides format.useAutoBase(B[m
ok 17 - submodule is up to date(B[m
*** t4109-apply-multifrag.sh ***
ok 74 - show respects prefix greater than COLUMNS (big change)(B[m
ok 1 - setup(B[m
ok 5 - big offset(B[m
ok 17 - incomplete (2)(B[m
ok 24 - diff-index: ugly spaces with --no-indent-heuristic(B[m
ok 164 - format-patch --base with --attach(B[m
ok 75 - log respects prefix greater than COLUMNS (big change)(B[m
ok 1 - file creation(B[m
ok 6 - fuzz with no offset(B[m
ok 2 - apply add-a-patch with context(B[m
ok 18 - incomplete (2) with recount(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 2 - patch2 fails (retab)(B[m
ok 18 - submodule contains untracked content(B[m
ok 1 - setup(B[m
*** t4110-apply-scan.sh ***
ok 3 - patch2 applies with --ignore-whitespace(B[m
ok 76 - log --graph respects prefix greater than COLUMNS (big change)(B[m
ok 7 - fuzz with minus offset(B[m
ok 3 - apply add-z-patch with context(B[m
ok 19 - submodule contains untracked content (untracked ignored)(B[m
ok 4 - patch2 reverse applies with --ignore-space-change(B[m
ok 165 - format-patch --attach cover-letter only is non-multipart(B[m
ok 2 - stat binary diff -- should not fail.(B[m
ok 25 - diff-index: ugly spaces with diff.indentHeuristic=false(B[m
ok 20 - submodule contains untracked content (dirty ignored)(B[m
ok 8 - fuzz with plus offset(B[m
ok 5 - patch2 applies (apply.ignorewhitespace = change)(B[m
ok 4 - apply insert-a-patch with context(B[m
ok 21 - submodule contains untracked content (all ignored)(B[m
ok 3 - stat binary -p0 diff -- should not fail.(B[m
ok 77 - merge --stat respects COLUMNS (big change)(B[m
ok 9 - fuzz with big offset(B[m
ok 6 - patch3 fails (missing string at EOL)(B[m
ok 166 - format-patch --pretty=mboxrd(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 4 - stat binary diff (copy) -- should not fail.(B[m
ok 1 - git apply (1)(B[m
*** t4111-apply-subdir.sh ***
ok 7 - patch4 fails (missing EOL at EOF)(B[m
ok 5 - apply mod-a-patch with context(B[m
ok 26 - diff-index: --indent-heuristic overrides config(B[m
ok 78 - merge --stat respects COLUMNS (long filename)(B[m
ok 8 - patch5 fails (leading whitespace differences matter)(B[m
[32m# passed all 78 test(s)(B[m
[36m1..78(B[m
ok 22 - submodule contains untracked and modified content(B[m
ok 2 - git apply (2)(B[m
ok 5 - check binary diff -- should fail.(B[m
*** t4112-apply-renames.sh ***
ok 1 - git apply scan(B[m
ok 6 - apply mod-z-patch with context(B[m
ok 9 - re-create file (with --ignore-whitespace)(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
ok 3 - git apply (3)(B[m
ok 3 - diff skips same-OID blobs(B[m
ok 1 - setup(B[m
*** t4113-apply-ending.sh ***
ok 6 - check binary diff (copy) -- should fail.(B[m
ok 10 - patch5 fails (--no-ignore-whitespace)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 27 - diff-index: --no-indent-heuristic overrides config(B[m
*** t4114-apply-typechange.sh ***
ok 7 - apply del-a-patch with context(B[m
ok 23 - submodule contains untracked and modified content (untracked ignored)(B[m
ok 167 - interdiff: setup(B[m
ok 11 - apply --ignore-space-change --inaccurate-eof(B[m
ok 7 - check incomplete binary diff with replacement -- should fail.(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 24 - submodule contains untracked and modified content (dirty ignored)(B[m
*** t4115-apply-symlink.sh ***
ok 8 - apply del-z-patch with context(B[m
ok 25 - submodule contains untracked and modified content (all ignored)(B[m
ok 8 - check incomplete binary diff with replacement (copy) -- should fail.(B[m
ok 168 - interdiff: cover-letter(B[m
ok 2 - apply without --3way(B[m
ok 1 - setup(B[m
ok 2 - setup: subdir(B[m
ok 28 - diff-files: nice spaces with --indent-heuristic(B[m
ok 9 - apply add-a-patch without context(B[m
ok 169 - interdiff: reroll-count(B[m
ok 9 - check binary diff with replacement.(B[m
ok 26 - submodule contains modified content(B[m
ok 10 - check binary diff with replacement (copy).(B[m
ok 170 - interdiff: solo-patch(B[m
ok 10 - apply add-z-patch without context(B[m
ok 1 - setup(B[m
ok 1 - check rename/copy patch(B[m
[33m# still have 5 known breakage(s)(B[m
[32m# passed all remaining 165 test(s)(B[m
[36m1..170(B[m
ok 2 - apply at the end(B[m
ok 2 - apply rename/copy patch(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 29 - diff-files: nice spaces with diff.indentHeuristic=true(B[m
ok 11 - apply insert-a-patch without context(B[m
ok 11 - apply binary diff -- should fail.(B[m
*** t4116-apply-reverse.sh ***
ok 3 - apply at the beginning(B[m
*** t4117-apply-reject.sh ***
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 3 - apply from subdir of toplevel(B[m
*** t4118-apply-empty-context.sh ***
ok 27 - submodule is modified(B[m
ok 12 - apply mod-a-patch without context(B[m
ok 3 - apply with --3way(B[m
ok 12 - apply binary diff -- should fail.(B[m
ok 30 - diff-files: ugly spaces with --no-indent-heuristic(B[m
ok 13 - apply mod-z-patch without context(B[m
ok 28 - modified submodule contains untracked content(B[m
ok 13 - apply binary diff (copy) -- should fail.(B[m
ok 1 - setup(B[m
ok 14 - apply del-a-patch without context(B[m
ok 29 - modified submodule contains untracked content (untracked ignored)(B[m
ok 14 - apply binary diff (copy) -- should fail.(B[m
ok 4 - apply --cached from subdir of toplevel(B[m
ok 31 - diff-files: ugly spaces with diff.indentHeuristic=false(B[m
ok 15 - apply del-z-patch without context(B[m
ok 2 - apply symlink patch(B[m
ok 30 - modified submodule contains untracked content (dirty ignored)(B[m
ok 15 - apply binary diff with full-index(B[m
ok 1 - setup(B[m
ok 16 - apply non-git add-a-patch without context(B[m
ok 31 - modified submodule contains untracked content (all ignored)(B[m
ok 3 - apply --index symlink patch(B[m
ok 4 - apply with --3way with merge.conflictStyle = diff3(B[m
ok 1 - setup(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 32 - diff-files: --indent-heuristic overrides config(B[m
ok 2 - apply --numstat(B[m
ok 1 - setup(B[m
*** t4119-apply-config.sh ***
ok 16 - apply binary diff with full-index (copy)(B[m
ok 1 - setup repository and commits(B[m
ok 17 - apply non-git add-z-patch without context(B[m
ok 32 - modified submodule contains untracked and modified content(B[m
ok 2 - apply in forward(B[m
ok 3 - apply --apply(B[m
ok 17 - apply full-index binary diff in new repo(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 2 - apply --reject is incompatible with --3way(B[m
ok 2 - file renamed from foo to foo/baz(B[m
*** t4120-apply-popt.sh ***
ok 33 - diff-files: --no-indent-heuristic overrides config(B[m
ok 18 - apply non-git insert-a-patch without context(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 3 - apply in reverse(B[m
ok 3 - apply without --reject should fail(B[m
ok 33 - modified submodule contains untracked and modified content (untracked ignored)(B[m
*** t4121-apply-diffs.sh ***
ok 3 - file renamed from foo/baz to foo(B[m
ok 4 - apply without --reject should fail(B[m
ok 18 - apply binary diff without replacement.(B[m
ok 5 - apply with --3way with rerere enabled(B[m
ok 19 - apply non-git mod-a-patch without context(B[m
ok 34 - modified submodule contains untracked and modified content (dirty ignored)(B[m
ok 5 - apply with --reject should fail but update the file(B[m
ok 4 - directory becomes file(B[m
ok 1 - setup(B[m
ok 19 - apply binary diff without replacement (copy).(B[m
ok 35 - modified submodule contains untracked and modified content (all ignored)(B[m
ok 4 - setup separate repository lacking postimage(B[m
ok 6 - apply with --reject should fail but update the file(B[m
ok 20 - apply non-git mod-z-patch without context(B[m
ok 5 - file becomes directory(B[m
ok 4 - when fetching missing objects, diff skips GITLINKs(B[m
ok 5 - apply --index from subdir of toplevel(B[m
ok 7 - the same test with --verbose(B[m
ok 5 - apply in forward without postimage(B[m
ok 20 - apply binary diff.(B[m
ok 2 - apply --whitespace=strip(B[m
ok 21 - apply non-git del-a-patch without context(B[m
ok 6 - apply half-broken patch from subdir of toplevel(B[m
ok 36 - modified submodule contains modified content(B[m
ok 6 - file becomes symlink(B[m
ok 8 - apply cleanly with --verbose(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 1 - setup(B[m
ok 6 - apply in reverse without postimage(B[m
*** t4122-apply-symlink-inside.sh ***
ok 7 - apply from .git dir(B[m
ok 22 - apply non-git del-z-patch without context(B[m
ok 3 - apply --whitespace=strip from config(B[m
ok 37 - deleted submodule(B[m
ok 2 - apply git diff with -p2(B[m
ok 21 - apply binary diff (copy).(B[m
ok 7 - symlink becomes file(B[m
ok 6 - apply -3 with add/add conflict setup(B[m
ok 7 - reversing a whitespace introduction(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 8 - apply from subdir of .git dir(B[m
*** t4123-apply-shrink.sh ***
ok 1 - setup(B[m
ok 3 - apply with too large -p(B[m
ok 8 - binary file becomes symlink(B[m
ok 23 - two lines(B[m
ok 4 - apply --whitespace=strip in subdir(B[m
ok 22 - apply binary -p0 diff(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 2 - check if contextually independent diffs for the same file apply(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 4 - apply (-p2) traditional diff with funny filenames(B[m
ok 7 - apply -3 with add/add conflict(B[m
*** t4124-apply-ws-rule.sh ***
ok 24 - apply patch with 3 context lines matching at end(B[m
*** t4125-apply-ws-fuzz.sh ***
ok 9 - symlink becomes binary file(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 5 - apply --whitespace=strip from config in subdir(B[m
ok 5 - apply with too large -p and fancy filename(B[m
ok 38 - create second submodule(B[m
*** t4126-apply-empty.sh ***
ok 10 - symlink becomes directory(B[m
ok 9 - apply --cached from .git dir(B[m
ok 6 - apply (-p2) diff, mode change only(B[m
ok 5 - diff with rename detection batches blobs(B[m
ok 6 - same in subdir but with traditional patch input(B[m
ok 39 - multiple submodules(B[m
ok 8 - apply -3 with add/add conflict (dirty working tree)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 11 - directory becomes symlink(B[m
*** t4127-apply-same-fn.sh ***
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t4128-apply-root.sh ***
ok 7 - file mode was changed(B[m
*** t4129-apply-samemode.sh ***
ok 1 - setup(B[m
ok 2 - apply should fail gracefully(B[m
ok 40 - path filter(B[m
ok 7 - same but with traditional patch input of depth 1(B[m
ok 1 - setup(B[m
ok 8 - apply (-p2) diff, rename(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 1 - setup(B[m
*** t4130-apply-criss-cross-rename.sh ***
*** t4131-apply-fake-ancestor.sh ***
ok 2 - whitespace=nowarn, default rule(B[m
ok 10 - apply --cached from subdir of .git dir(B[m
ok 8 - same but with traditional patch input of depth 2(B[m
ok 2 - apply(B[m
ok 1 - setup(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 3 - whitespace=warn, default rule(B[m
ok 1 - setup(B[m
*** t4132-apply-removal.sh ***
ok 41 - given commit(B[m
ok 4 - whitespace=error-all, default rule(B[m
ok 42 - setup .git file for sm2(B[m
ok 2 - apply empty(B[m
ok 1 - setup(B[m
ok 9 - same but with traditional patch input of depth 1(B[m
ok 2 - nofix(B[m
ok 5 - whitespace=error-all, no rule(B[m
ok 1 - setup(B[m
ok 3 - check result(B[m
ok 43 - diff --submodule=diff with .git file(B[m
ok 3 - apply --index empty(B[m
ok 3 - withfix (forward)(B[m
ok 6 - whitespace=error-all, no rule (attribute)(B[m
ok 2 - apply --directory -p (1)(B[m
ok 10 - same but with traditional patch input of depth 2(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 4 - apply create(B[m
ok 2 - apply same filename with independent changes(B[m
ok 2 - criss-cross rename(B[m
ok 3 - apply --directory -p (2) (B[m
ok 4 - withfix (backward)(B[m
ok 11 - in subdir with traditional patch input(B[m
ok 4 - do not read from beyond symbolic link(B[m
ok 7 - spaces inserted by tab-in-indent(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 2 - same mode (no index)(B[m
ok 5 - apply --index create(B[m
ok 3 - diff -M -B(B[m
*** t4133-apply-filenames.sh ***
*** t4134-apply-submodule.sh ***
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t4135-apply-weird-filenames.sh ***
ok 1 - setup(B[m
ok 4 - apply --directory (new file)(B[m
ok 4 - apply(B[m
ok 8 - rule=-trailing,-space,-indent,-tab(B[m
ok 3 - apply same filename with overlapping changes(B[m
ok 3 - same mode (with index)(B[m
ok 2 - test addEast.patch(B[m
ok 5 - apply --directory -p (new file)(B[m
ok 1 - setup(B[m
ok 5 - criss-cross rename(B[m
ok 9 - rule=-trailing,-space,-indent,-tab,tabwidth=16(B[m
ok 3 - test addGMT.patch(B[m
ok 6 - diff -M -B(B[m
ok 5 - do not follow symbolic link (setup)(B[m
ok 4 - same mode (index only)(B[m
ok 6 - apply --directory (delete file)(B[m
ok 1 - setup(B[m
ok 2 - apply --build-fake-ancestor(B[m
ok 10 - rule=-trailing,-space,-indent,-tab (attributes)(B[m
ok 4 - test addWest.patch(B[m
ok 7 - apply(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 5 - mode update (no index)(B[m
ok 4 - apply same new filename after rename(B[m
ok 1 - setup(B[m
*** t4136-apply-check.sh ***
ok 7 - apply --directory (quoted filename)(B[m
ok 11 - rule=-trailing,-space,-indent,-tab,tabwidth=16 (attributes)(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 2 - apply diff with inconsistent filenames in headers(B[m
ok 5 - test createEast.patch(B[m
*** t4137-apply-submodule.sh ***
ok 6 - mode update (with index)(B[m
ok 3 - apply diff with new filename missing from headers(B[m
ok 3 - apply --build-fake-ancestor in a subdirectory(B[m
ok 2 - plain, git-style file creation patch(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t4138-apply-ws-expansion.sh ***
ok 6 - test createGMT.patch(B[m
ok 12 - rule=-trailing,-space,-indent,tab(B[m
ok 4 - apply diff with old filename missing from headers(B[m
ok 7 - mode update (index only)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t4139-apply-escape.sh ***
ok 5 - apply same old filename after rename -- should fail.(B[m
ok 3 - plain, traditional patch(B[m
ok 1 - setup(B[m
ok 7 - test createWest.patch(B[m
ok 6 - do not follow symbolic link (same input)(B[m
ok 13 - rule=-trailing,-space,-indent,tab,tabwidth=16(B[m
ok 8 - empty mode is rejected(B[m
ok 2 - removing a submodule also removes all leading subdirectories(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 1 - setup(B[m
ok 8 - test emptyEast.patch(B[m
ok 4 - plain, traditional file creation patch(B[m
*** t4150-am.sh ***
ok 2 - apply --check exits non-zero with unrecognized input(B[m
ok 9 - bogus mode is rejected(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 14 - rule=-trailing,-space,-indent,tab (attributes)(B[m
*** t4151-am-abort.sh ***
ok 9 - test emptyGMT.patch(B[m
ok 3 - apply exits non-zero with no-op patch(B[m
ok 1 - bump git repo one level down(B[m
ok 5 - with spaces, git-style file creation patch(B[m
ok 4 - `apply --recount` allows no-op patch(B[m
ok 44 - setup nested submodule(B[m
ok 10 - test emptyWest.patch(B[m
ok 15 - rule=-trailing,-space,-indent,tab,tabwidth=16 (attributes)(B[m
ok 5 - invalid combination: create and copy(B[m
ok 2 - cannot create file containing ..(B[m
ok 7 - do not follow symbolic link (existing)(B[m
ok 6 - apply A->B (rename), C->A (rename), A->A -- should pass.(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 6 - invalid combination: create and rename(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 3 - can create file containing .. with --unsafe-paths(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 6 - with spaces, traditional patch(B[m
*** t4152-am-subjects.sh ***
ok 45 - move nested submodule HEAD(B[m
*** t4153-am-resume-override-opts.sh ***
ok 11 - test removeEast.patch(B[m
*** t4200-rerere.sh ***
ok 1 - setup(B[m
ok 4 - cannot create file containing .. (index)(B[m
ok 16 - rule=-trailing,-space,indent,-tab(B[m
ok 1 - setup: messages(B[m
ok 12 - test removeGMT.patch(B[m
ok 2 - apply with ws expansion (t=$t)(B[m
ok 5 - cannot create file containing .. with --unsafe-paths (index)(B[m
ok 7 - with spaces, traditional file creation patch(B[m
ok 46 - diff --submodule=diff with moved nested submodule HEAD(B[m
ok 3 - apply with ws expansion (t=$t)(B[m
ok 6 - cannot delete file containing ..(B[m
ok 13 - test removeWest.patch(B[m
ok 17 - rule=-trailing,-space,indent,-tab,tabwidth=16(B[m
ok 4 - apply with ws expansion (t=$t)(B[m
ok 7 - can delete file containing .. with --unsafe-paths(B[m
ok 5 - apply with ws expansion (t=$t)(B[m
ok 14 - test removeWest2.patch(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 8 - cannot delete file containing .. (index)(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 8 - with tab, git-style file creation patch(B[m
*** t4201-shortlog.sh ***
*** t4202-log.sh ***
ok 47 - diff --submodule=diff recurses into nested submodules(B[m
ok 18 - rule=-trailing,-space,indent,-tab (attributes)(B[m
[32m# passed all 47 test(s)(B[m
[36m1..47(B[m
ok 1 - setup baseline commit(B[m
*** t4203-mailmap.sh ***
ok 9 - with tab, traditional patch(B[m
ok 9 - symlink escape via ..(B[m
ok 19 - rule=-trailing,-space,indent,-tab,tabwidth=16 (attributes)(B[m
ok 2 - create patches with short subject(B[m
ok 10 - symlink escape via .. (index)(B[m
ok 10 - with tab, traditional file creation patch(B[m
ok 20 - rule=-trailing,space,-indent,-tab(B[m
ok 1 - setup(B[m
ok 3 - create patches with long subject(B[m
ok 11 - symlink escape via absolute path(B[m
ok 21 - rule=-trailing,space,-indent,-tab,tabwidth=16(B[m
ok 11 - with backslash, git-style file creation patch(B[m
ok 2 - am stops at a patch that does not apply(B[m
ok 4 - create patches with multiline subject(B[m
ok 12 - symlink escape via absolute path (index)(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 1 - setup(B[m
*** t4204-patch-id.sh ***
ok 1 - setup(B[m
ok 12 - with backslash, traditional patch(B[m
ok 3 - am --skip continue after failed am(B[m
[34mok 2 # skip --3way overrides --no-3way (missing TTY)(B[m
ok 22 - rule=-trailing,space,-indent,-tab (attributes)(B[m
ok 2 - check-mailmap no arguments(B[m
ok 1 - setup(B[m
ok 5 - short subject preserved (format-patch | am)(B[m
ok 3 - check-mailmap arguments(B[m
ok 2 - nothing recorded without rerere(B[m
ok 1 - setup(B[m
ok 23 - rule=-trailing,space,-indent,-tab,tabwidth=16 (attributes)(B[m
ok 13 - with backslash, traditional file creation patch(B[m
ok 4 - am --abort goes back after failed am(B[m
ok 4 - check-mailmap --stdin(B[m
ok 2 - default output format(B[m
ok 6 - short subject preserved (format-patch -k | am)(B[m
ok 5 - check-mailmap --stdin arguments(B[m
ok 3 - --no-quiet overrides --quiet(B[m
ok 3 - activate rerere, old style (conflicting merge)(B[m
ok 24 - rule=-trailing,space,-indent,tab(B[m
ok 14 - with quote, git-style file creation patch(B[m
ok 6 - check-mailmap bogus contact(B[m
ok 3 - pretty format(B[m
ok 5 - am -3 stops at a patch that does not apply(B[m
ok 1 - setup(B[m
ok 7 - short subject preserved (format-patch -k | am -k)(B[m
ok 7 - No mailmap(B[m
ok 4 - --abbrev(B[m
ok 4 - rerere.enabled works, too(B[m
ok 2 - pretty(B[m
[33mnot ok 15 - with quote, traditional patch # TODO known breakage(B[m
ok 6 - am -3 --skip continue after failed am -3(B[m
ok 25 - rule=-trailing,space,-indent,tab,tabwidth=16(B[m
ok 8 - default .mailmap(B[m
ok 3 - pretty (tformat)(B[m
ok 5 - output from user-defined format is re-wrapped(B[m
ok 2 - setup(B[m
ok 8 - long subject preserved (format-patch | am)(B[m
ok 1 - setup(B[m
ok 4 - pretty (shortcut)(B[m
ok 9 - mailmap.file set(B[m
ok 5 - set up rr-cache(B[m
ok 4 - --signoff overrides --no-signoff(B[m
ok 6 - shortlog wrapping(B[m
[34mok 5 # skip --reject overrides --no-reject (missing TTY)(B[m
ok 16 - with quote, traditional file creation patch(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 26 - rule=-trailing,space,-indent,tab (attributes)(B[m
ok 6 - rr-cache looks sane(B[m
ok 7 - am --abort goes back after failed am -3(B[m
ok 2 - patch-id output is well-formed(B[m
ok 5 - format(B[m
*** t4205-log-pretty-formats.sh ***
ok 10 - mailmap.file override(B[m
ok 9 - long subject preserved (format-patch -k | am)(B[m
ok 7 - shortlog from non-git directory(B[m
ok 7 - rerere diff(B[m
ok 6 - format %w(11,1,2)(B[m
ok 17 - whitespace-damaged traditional patch(B[m
ok 27 - rule=-trailing,space,-indent,tab,tabwidth=16 (attributes)(B[m
ok 3 - patch-id detects equality(B[m
ok 11 - mailmap.file non-existent(B[m
ok 8 - rerere status(B[m
ok 7 - format %w(,1,2)(B[m
ok 8 - shortlog can read --format=raw output(B[m
ok 3 - am applies patch correctly(B[m
ok 10 - long subject preserved (format-patch -k | am -k)(B[m
ok 12 - name entry after email entry(B[m
ok 18 - traditional patch with colon in timezone(B[m
ok 4 - patch-id detects inequality(B[m
ok 9 - shortlog from non-git directory refuses extra arguments(B[m
ok 8 - am -3 --skip removes otherfile-4(B[m
ok 28 - rule=-trailing,space,indent,-tab(B[m
ok 13 - name entry after email entry, case-insensitive(B[m
ok 10 - shortlog should add newline when input line matches wraplen(B[m
ok 11 - multiline subject unwrapped (format-patch | am)(B[m
ok 8 - oneline(B[m
ok 14 - No mailmap files, but configured(B[m
ok 19 - traditional, whitespace-damaged, colon in timezone(B[m
ok 4 - am fails if index is dirty(B[m
ok 9 - first postimage wins(B[m
ok 29 - rule=-trailing,space,indent,-tab,tabwidth=16(B[m
ok 20 - apply handles a diff generated by Subversion(B[m
ok 9 - diff-filter=A(B[m
ok 5 - patch-id supports git-format-patch output(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 19 test(s)(B[m
[36m1..20(B[m
ok 10 - rerere updates postimage timestamp(B[m
*** t4206-log-follow-harder-copies.sh ***
ok 1 - set up basic repos(B[m
ok 12 - multiline subject unwrapped (format-patch -k | am)(B[m
ok 10 - diff-filter=M(B[m
ok 9 - am -3 --abort removes otherfile-4(B[m
ok 11 - rerere clear(B[m
ok 15 - setup mailmap blob tests(B[m
ok 11 - diff-filter=D(B[m
ok 30 - rule=-trailing,space,indent,-tab (attributes)(B[m
ok 2 - alias builtin format(B[m
ok 6 - whitespace is irrelevant in footer(B[m
ok 16 - mailmap.blob set(B[m
ok 12 - diff-filter=R(B[m
ok 13 - multiline subject preserved (format-patch -k | am -k)(B[m
ok 12 - leftover directory(B[m
ok 5 - am applies patch e-mail not in a mbox(B[m
ok 11 - shortlog encoding(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 13 - diff-filter=C(B[m
ok 17 - mailmap.blob overrides .mailmap(B[m
ok 3 - alias masking builtin format(B[m
*** t4207-log-decoration-colors.sh ***
ok 31 - rule=-trailing,space,indent,-tab,tabwidth=16 (attributes)(B[m
ok 14 - git log --follow(B[m
ok 12 - shortlog with revision pseudo options(B[m
ok 7 - file order is irrelevant with --stable(B[m
ok 10 - am --abort will keep the local commits intact(B[m
ok 13 - missing preimage(B[m
ok 18 - mailmap.file overrides mailmap.blob(B[m
ok 4 - alias user-defined format(B[m
ok 13 - shortlog with --output=<file>(B[m
ok 19 - mailmap.blob can be missing(B[m
ok 15 - git config log.follow works like --follow(B[m
ok 1 - add a file path0 and commit.(B[m
ok 32 - rule=trailing,-space,-indent,-tab(B[m
ok 14 - set up for garbage collection tests(B[m
ok 8 - file order is relevant with --unstable(B[m
ok 5 - alias user-defined tformat with %s (ISO8859-1 encoding)(B[m
ok 6 - am applies patch e-mail not in a mbox with CRLF(B[m
ok 16 - git config log.follow does not die with multiple paths(B[m
ok 15 - gc preserves young or recently used records(B[m
ok 2 - Change path0.(B[m
ok 6 - alias user-defined tformat with %s (utf-8 encoding)(B[m
ok 33 - rule=trailing,-space,-indent,-tab,tabwidth=16(B[m
ok 17 - git config log.follow does not die with no paths(B[m
ok 16 - old records rest in peace(B[m
ok 3 - copy path0 to path1.(B[m
ok 14 - shortlog --committer (internal)(B[m
ok 11 - am --abort will keep dirty index intact(B[m
ok 20 - mailmap.blob defaults to off in non-bare repo(B[m
ok 9 - default is unstable(B[m
ok 4 - find the copy path0 -> path1 harder(B[m
ok 15 - shortlog --committer (external)(B[m
ok 7 - alias user-defined tformat(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 18 - git config log.follow is overridden by --no-follow(B[m
ok 5 - validate the output.(B[m
*** t4208-log-magic-pathspec.sh ***
ok 34 - rule=trailing,-space,-indent,-tab (attributes)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 21 - mailmap.blob defaults to HEAD:.mailmap in bare repo(B[m
ok 8 - alias non-existent format(B[m
ok 7 - am applies patch e-mail with preceding whitespace(B[m
*** t4209-log-pickaxe.sh ***
ok 12 - am -3 stops on conflict on unborn branch(B[m
ok 22 - mailmap.blob can handle blobs without trailing newline(B[m
ok 10 - patchid.stable = true is stable(B[m
ok 23 - cleanup after mailmap.blob tests(B[m
ok 19 - git log --no-walk <commits> sorts by commit time(B[m
ok 35 - rule=trailing,-space,-indent,-tab,tabwidth=16 (attributes)(B[m
ok 9 - alias of an alias(B[m
ok 17 - rerere gc with custom expiry (5, 0)(B[m
ok 20 - git log --no-walk=sorted <commits> sorts by commit time(B[m
ok 24 - single-character name(B[m
ok 13 - am -3 --skip clears index on unborn branch(B[m
ok 25 - preserve canonical email case(B[m
ok 8 - am applies stgit patch(B[m
ok 11 - patchid.stable = false is unstable(B[m
ok 36 - rule=trailing,-space,-indent,tab(B[m
ok 10 - alias masking an alias(B[m
ok 21 - git log --line-prefix="=== " --no-walk <commits> sorts by commit time(B[m
ok 11 - alias loop(B[m
ok 14 - am -3 --abort removes otherfile-4 on unborn branch(B[m
ok 1 - setup(B[m
ok 37 - rule=trailing,-space,-indent,tab,tabwidth=16(B[m
ok 18 - rerere gc with custom expiry (5.days.ago, now)(B[m
ok 22 - git log --no-walk=unsorted <commits> leaves list of commits as given(B[m
ok 12 - NUL separation(B[m
ok 2 - "git log :/" should not be ambiguous(B[m
ok 12 - --unstable overrides patchid.stable = true(B[m
ok 9 - am --patch-format=stgit applies stgit patch(B[m
ok 23 - git show <commits> leaves list of commits as given(B[m
ok 13 - NUL termination(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 3 - "git log :/a" should be ambiguous (applied both rev and worktree)(B[m
ok 38 - rule=trailing,-space,-indent,tab (attributes)(B[m
ok 2 - log --grep (match)(B[m
ok 4 - "git log :/a -- " should not be ambiguous(B[m
ok 24 - setup case sensitivity tests(B[m
ok 2 - Commit Decorations Colored Correctly(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 3 - log --grep (nomatch)(B[m
ok 13 - --stable overrides patchid.stable = false(B[m
ok 25 - log --grep(B[m
ok 26 - Shortlog output (complex mapping)(B[m
ok 14 - NUL separation with --stat(B[m
*** t4210-log-i18n.sh ***
ok 39 - rule=trailing,-space,-indent,tab,tabwidth=16 (attributes)(B[m
ok 4 - log --grep --regexp-ignore-case (match)(B[m
ok 15 - am -3 --abort on unborn branch removes applied commits(B[m
ok 10 - am applies stgit series(B[m
ok 27 - Log output (complex mapping)(B[m
ok 5 - log --grep -i (match)(B[m
ok 5 - "git log :/detached -- " should find a commit only in HEAD(B[m
ok 19 - setup: file2 added differently in two branches(B[m
[33mnot ok 15 - NUL termination with --stat # TODO known breakage(B[m
ok 26 - log --invert-grep --grep(B[m
ok 14 - patch-id supports git-format-patch MIME output(B[m
ok 6 - log --grep --regexp-ignore-case (nomatch)(B[m
ok 28 - Log output (local-part email address)(B[m
ok 6 - "git log :/detached -- " should not find an orphaned commit(B[m
ok 40 - rule=trailing,-space,indent,-tab(B[m
ok 7 - log --grep -i (nomatch)(B[m
ok 29 - Log output with --use-mailmap(B[m
ok 8 - log --author (match)(B[m
ok 16 - NUL termination with --reflog --pretty=short(B[m
ok 27 - log --invert-grep --grep -i(B[m
ok 30 - Log output with log.mailmap(B[m
ok 11 - am applies hg patch(B[m
ok 16 - am --abort on unborn branch will keep local commits intact(B[m
ok 9 - log --author (nomatch)(B[m
ok 41 - rule=trailing,-space,indent,-tab,tabwidth=16(B[m
ok 7 - "git log :/detached -- " should find HEAD only of own worktree(B[m
ok 15 - patch-id respects config from subdir(B[m
ok 28 - log --grep option parsing(B[m
ok 31 - log.mailmap=false disables mailmap(B[m
ok 10 - log --author --regexp-ignore-case (match)(B[m
ok 17 - NUL termination with --reflog --pretty=medium(B[m
ok 8 - "git log -- :/a" should not be ambiguous(B[m
ok 29 - log -i --grep(B[m
ok 11 - log --author -i (match)(B[m
ok 32 - --no-use-mailmap disables mailmap(B[m
ok 20 - resolution was recorded properly(B[m
ok 9 - "git log :/in" should not be ambiguous(B[m
ok 42 - rule=trailing,-space,indent,-tab (attributes)(B[m
ok 1 - create commits in different encodings(B[m
ok 16 - patch-id handles no-nl-at-eof markers(B[m
ok 12 - log --author --regexp-ignore-case (nomatch)(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 33 - Grep author with --use-mailmap(B[m
ok 10 - "git log :" should be ambiguous(B[m
ok 12 - am --patch-format=hg applies hg patch(B[m
*** t4211-line-log.sh ***
ok 2 - log --grep searches in log output encoding (utf8)(B[m
ok 18 - NUL termination with --reflog --pretty=full(B[m
ok 30 - log --grep -i(B[m
ok 13 - log --author -i (nomatch)(B[m
ok 11 - git log -- :(B[m
ok 34 - Grep author with log.mailmap(B[m
ok 43 - rule=trailing,-space,indent,-tab,tabwidth=16 (attributes)(B[m
ok 31 - log -F -E --grep=<ere> uses ere(B[m
ok 14 - log -G (nomatch)(B[m
ok 21 - rerere.autoupdate(B[m
[34mok 32 # skip log -F -E --perl-regexp --grep=<pcre> uses PCRE (missing PCRE)(B[m
ok 3 - log --grep searches in log output encoding (latin1)(B[m
ok 35 - log.mailmap is true by default these days(B[m
ok 17 - am --skip leaves index stat info alone(B[m
ok 12 - git log HEAD -- :/(B[m
ok 15 - log -G (match)(B[m
ok 33 - log with grep.patternType configuration(B[m
ok 19 - NUL termination with --reflog --pretty=fuller(B[m
ok 4 - log --grep does not find non-reencoded values (utf8)(B[m
ok 36 - Only grep replaced author with --use-mailmap(B[m
ok 13 - "git log :^sub" is not ambiguous(B[m
ok 16 - log -G --regexp-ignore-case (nomatch)(B[m
ok 34 - log with grep.patternType configuration and command line(B[m
ok 5 - log --grep does not find non-reencoded values (latin1)(B[m
ok 44 - rule=trailing,space,-indent,-tab(B[m
[34mok 6 # skip -c grep.patternType=fixed log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 14 - "git log :^does-not-exist" does not match anything(B[m
ok 22 - merge --rerere-autoupdate(B[m
[34mok 7 # skip -c grep.patternType=fixed log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)(B[m
[34mok 8 # skip -c grep.patternType=fixed log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 37 - Blame output (complex mapping)(B[m
[34mok 9 # skip -c grep.patternType=basic log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 17 - log -G -i (nomatch)(B[m
[34mok 10 # skip -c grep.patternType=basic log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)(B[m
[34mok 11 # skip -c grep.patternType=basic log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 20 - NUL termination with --reflog --pretty=email(B[m
[34mok 12 # skip -c grep.patternType=extended log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 15 - "git log :!" behaves the same as :^(B[m
[34mok 13 # skip -c grep.patternType=extended log --grep does not find non-reencoded values (latin1 + locale) (missing GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,)(B[m
ok 13 - am with applypatch-msg hook(B[m
[34mok 14 # skip -c grep.patternType=extended log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,)(B[m
ok 18 - log -G --regexp-ignore-case (match)(B[m
[34mok 15 # skip -c grep.patternType=perl log --grep does not find non-reencoded values (latin1 + locale) (missing PCRE,GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,PCRE)(B[m
[34mok 16 # skip -c grep.patternType=perl log --grep does not find non-reencoded values (latin1 + locale) (missing PCRE,GETTEXT_LOCALE of !MINGW,GETTEXT_LOCALE,PCRE)(B[m
ok 16 - "git log :(exclude)sub" is not ambiguous(B[m
[34mok 17 # skip -c grep.patternType=perl log --grep does not die on invalid UTF-8 value (latin1 + locale + invalid needle) (missing PCRE,GETTEXT_LOCALE of !MINGW,!REGEX_ILLSEQ,GETTEXT_LOCALE,PCRE)(B[m
ok 45 - rule=trailing,space,-indent,-tab,tabwidth=16(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 19 - log -G -i (match)(B[m
ok 38 - commit --author honors mailmap(B[m
ok 17 - "git log :(exclude)sub --" must resolve as an object(B[m
*** t4212-log-corrupt.sh ***
[32m# passed all 38 test(s)(B[m
[36m1..38(B[m
ok 21 - NUL termination with --reflog --pretty=raw(B[m
ok 20 - log -G --textconv (missing textconv tool)(B[m
ok 18 - "git log :(unknown-magic) complains of bogus magic(B[m
ok 18 - am --abort leaves index stat info alone(B[m
*** t4213-log-tabexpand.sh ***
ok 23 - merge --no-rerere-autoupdate(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 46 - rule=trailing,space,-indent,-tab (attributes)(B[m
ok 21 - log -G --no-textconv (missing textconv tool)(B[m
*** t4214-log-graph-octopus.sh ***
ok 14 - am with failing applypatch-msg hook(B[m
ok 22 - log -S (nomatch)(B[m
ok 22 - NUL termination with --reflog --pretty=oneline(B[m
ok 47 - rule=trailing,space,-indent,-tab,tabwidth=16 (attributes)(B[m
ok 23 - log -S (match)(B[m
ok 24 - log -S --regexp-ignore-case (match)(B[m
ok 25 - log -S -i (match)(B[m
ok 19 - command line pathspec parsing for "git log"(B[m
ok 48 - rule=trailing,space,-indent,tab(B[m
ok 26 - log -S --regexp-ignore-case (nomatch)(B[m
ok 24 - set up an unresolved merge(B[m
ok 1 - setup(B[m
ok 1 - setup (import history)(B[m
ok 35 - log with various grep.patternType configurations & command-lines(B[m
ok 27 - log -S -i (nomatch)(B[m
ok 1 - setup(B[m
ok 15 - am with pre-applypatch hook(B[m
ok 2 - -L 4,12:a.c simple(B[m
ok 23 - setup more commits(B[m
ok 28 - log -S --pickaxe-regex (nomatch)(B[m
ok 49 - rule=trailing,space,-indent,tab,tabwidth=16(B[m
ok 3 - -L 4,+9:a.c simple(B[m
ok 29 - log -S --pickaxe-regex (match)(B[m
ok 24 - left alignment formatting(B[m
ok 36 - simple log --graph(B[m
ok 25 - explicit rerere(B[m
ok 2 - fsck notices broken commit(B[m
ok 4 - -L '/long f/,/^}/:a.c' simple(B[m
ok 30 - log -S --pickaxe-regex --regexp-ignore-case (match)(B[m
ok 50 - rule=trailing,space,-indent,tab (attributes)(B[m
ok 3 - git log with broken author email(B[m
ok 25 - left alignment formatting. i18n.logOutputEncoding(B[m
ok 37 - simple log --graph --line-prefix="123 "(B[m
ok 31 - log -S --pickaxe-regex -i (match)(B[m
ok 5 - -L :f:a.c simple(B[m
ok 4 - git log --format with broken author email(B[m
ok 16 - am with failing pre-applypatch hook(B[m
ok 26 - left alignment formatting at the nth column(B[m
ok 32 - log -S --pickaxe-regex --regexp-ignore-case (nomatch)(B[m
ok 26 - explicit rerere with autoupdate(B[m
ok 6 - -L '/main/,/^}/:a.c' simple(B[m
ok 51 - rule=trailing,space,-indent,tab,tabwidth=16 (attributes)(B[m
ok 33 - log -S --pickaxe-regex -i (nomatch)(B[m
ok 27 - left alignment formatting at the nth column(B[m
ok 7 - -L :main:a.c simple(B[m
ok 5 - unparsable dates produce sentinel value(B[m
ok 34 - log -S --textconv (missing textconv tool)(B[m
ok 8 - -L 1,+4:a.c simple(B[m
ok 28 - left alignment formatting at the nth column. i18n.logOutputEncoding(B[m
ok 35 - log -S --no-textconv (missing textconv tool)(B[m
ok 52 - rule=trailing,space,indent,-tab(B[m
ok 9 - -L 20:a.c simple(B[m
ok 29 - left alignment formatting with no padding(B[m
ok 6 - unparsable dates produce sentinel value (%ad)(B[m
ok 2 - expand/no-expand(B[m
ok 38 - set up merge history(B[m
ok 10 - -L '/long f/',/^}/:a.c -L /main/,/^}/:a.c simple(B[m
ok 30 - left alignment formatting with no padding. i18n.logOutputEncoding(B[m
ok 17 - am with post-applypatch hook(B[m
ok 11 - -L 24,+1:a.c simple(B[m
ok 53 - rule=trailing,space,indent,-tab,tabwidth=16(B[m
ok 39 - log --graph with merge(B[m
ok 7 - date parser recognizes integer overflow(B[m
ok 31 - left alignment formatting with trunc(B[m
ok 12 - -M -L '/long f/,/^}/:b.c' move-support(B[m
ok 40 - log --graph --line-prefix="| | | " with merge(B[m
ok 32 - left alignment formatting with trunc. i18n.logOutputEncoding(B[m
ok 8 - date parser recognizes time_t overflow(B[m
ok 13 - -M -L ':f:b.c' parallel-change(B[m
ok 54 - rule=trailing,space,indent,-tab (attributes)(B[m
ok 36 - setup log -[GS] binary & --text(B[m
ok 27 - explicit rerere --rerere-autoupdate overrides(B[m
ok 33 - left alignment formatting with ltrunc(B[m
ok 20 - tree_entry_interesting does not match past submodule boundaries(B[m
[32m# passed all 20 test(s)(B[m
[36m1..20(B[m
ok 14 - -L 4,12:a.c -L :main:a.c simple(B[m
ok 37 - log -G ignores binary files(B[m
*** t4215-log-skewed-merges.sh ***
ok 41 - log --graph with merge with log.graphColors(B[m
ok 34 - left alignment formatting with ltrunc. i18n.logOutputEncoding(B[m
ok 9 - absurdly far-in-future date(B[m
ok 15 - -L 4,18:a.c -L ^:main:a.c simple(B[m
ok 38 - log -G looks into binary files with -a(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 55 - rule=trailing,space,indent,-tab,tabwidth=16 (attributes)(B[m
*** t4252-am-options.sh ***
ok 42 - log --raw --graph -m with merge(B[m
ok 35 - left alignment formatting with mtrunc(B[m
ok 18 - am with failing post-applypatch hook(B[m
ok 16 - -L :main:a.c -L 4,18:a.c simple(B[m
ok 28 - rerere --no-no-rerere-autoupdate(B[m
ok 43 - diff-tree --graph(B[m
ok 56 - trailing whitespace & no newline at the end of file(B[m
ok 39 - log -G looks into binary files with textconv filter(B[m
ok 36 - left alignment formatting with mtrunc. i18n.logOutputEncoding(B[m
ok 17 - -L 4:a.c -L 8,12:a.c simple(B[m
ok 29 - rerere -h(B[m
ok 44 - log --graph with full output(B[m
ok 40 - log -S looks into binary files(B[m
ok 3 - expand/no-expand for --pretty(B[m
ok 18 - -L 8,12:a.c -L 4:a.c simple(B[m
ok 37 - right alignment formatting(B[m
[32m# passed all 40 test(s)(B[m
[36m1..40(B[m
*** t4253-am-keep-cr-dos.sh ***
ok 57 - blank at EOF with --whitespace=fix (1)(B[m
ok 38 - right alignment formatting. i18n.logOutputEncoding(B[m
ok 19 - am --scissors cuts the message at the scissors line(B[m
ok 19 - invalid args: -L(B[m
ok 39 - right alignment formatting at the nth column(B[m
ok 20 - invalid args: -L b.c(B[m
ok 21 - invalid args: -L 1:(B[m
ok 58 - blank at EOF with --whitespace=fix (2)(B[m
ok 40 - right alignment formatting at the nth column(B[m
ok 1 - setup(B[m
ok 22 - invalid args: -L 1:nonexistent(B[m
ok 41 - right alignment formatting at the nth column. i18n.logOutputEncoding(B[m
ok 23 - invalid args: -L 1:simple(B[m
ok 59 - blank at EOF with --whitespace=fix (3)(B[m
ok 20 - am --no-scissors overrides mailinfo.scissors(B[m
ok 21 - setup: new author and committer(B[m
ok 24 - invalid args: -L '/foo:b.c'(B[m
ok 42 - right alignment formatting at the nth column with --graph. i18n.logOutputEncoding(B[m
ok 2 - interrupted am --whitespace=fix(B[m
ok 25 - invalid args: -L 1000:b.c(B[m
ok 43 - right alignment formatting with no padding(B[m
ok 60 - blank at end of hunk, not at EOF with --whitespace=fix(B[m
ok 26 - invalid args: -L :b.c(B[m
ok 1 - set up merge history(B[m
ok 44 - right alignment formatting with no padding and with --graph(B[m
ok 1 - setup repository with dos files(B[m
ok 4 - expand/no-expand for --pretty=short(B[m
ok 27 - invalid args: -L :foo:b.c(B[m
ok 3 - interrupted am -C1(B[m
ok 45 - right alignment formatting with no padding. i18n.logOutputEncoding(B[m
ok 28 - -L X (X == nlines)(B[m
ok 61 - blank at EOF with --whitespace=warn(B[m
ok 2 - log --graph with tricky octopus merge, no color(B[m
ok 46 - center alignment formatting(B[m
ok 29 - -L X (X == nlines + 1)(B[m
ok 2 - am with dos files without --keep-cr(B[m
ok 47 - center alignment formatting. i18n.logOutputEncoding(B[m
ok 22 - am changes committer and keeps author(B[m
ok 4 - interrupted am -p2(B[m
ok 30 - -L X (X == nlines + 2)(B[m
ok 3 - log --graph with tricky octopus merge with colors(B[m
ok 62 - blank at EOF with --whitespace=error(B[m
ok 48 - center alignment formatting at the nth column(B[m
ok 31 - -L ,Y (Y == nlines)(B[m
ok 4 - log --graph with normal octopus merge, no color(B[m
ok 49 - center alignment formatting at the nth column(B[m
ok 3 - am with dos files with --keep-cr(B[m
ok 32 - -L ,Y (Y == nlines + 1)(B[m
ok 5 - interrupted am -C1 -p2(B[m
ok 63 - blank but not empty at EOF(B[m
ok 23 - am --signoff adds Signed-off-by: line(B[m
ok 50 - center alignment formatting at the nth column. i18n.logOutputEncoding(B[m
ok 5 - log --graph with normal octopus merge with colors(B[m
ok 33 - -L ,Y (Y == nlines + 2)(B[m
ok 24 - am stays in branch(B[m
ok 51 - center alignment formatting with no padding(B[m
ok 6 - log --graph with normal octopus merge and child, no color(B[m
ok 34 - -L with --first-parent and a merge(B[m
ok 4 - am with dos files config am.keepcr(B[m
ok 6 - interrupted am --directory="frotz nitfol"(B[m
ok 5 - expand/no-expand for --pretty=medium(B[m
ok 64 - applying beyond EOF requires one non-blank context line(B[m
ok 52 - center alignment formatting with no padding. i18n.logOutputEncoding(B[m
ok 35 - -L with --output(B[m
ok 1 - apply_index: added submodule creates empty directory(B[m
ok 25 - am --signoff does not add Signed-off-by: line if already there(B[m
ok 7 - log --graph with normal octopus and child merge with colors(B[m
ok 7 - apply to a funny path(B[m
ok 65 - tons of blanks at EOF should not apply(B[m
ok 53 - left/right alignment formatting with stealing(B[m
ok 8 - log --graph with tricky octopus merge and its child, no color(B[m
ok 5 - am with dos files config am.keepcr overridden by --no-keep-cr(B[m
ok 45 - set up more tangled history(B[m
ok 1 - log --graph with merge fusing with its left and right neighbors(B[m
ok 54 - left/right alignment formatting with stealing. i18n.logOutputEncoding(B[m
ok 46 - log --graph with merge(B[m
ok 26 - am --signoff adds Signed-off-by: if another author is preset(B[m
ok 8 - am --reject(B[m
ok 55 - strbuf_utf8_replace() not producing NUL(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 9 - log --graph with tricky octopus merge and its child with colors(B[m
ok 66 - missing blank line at end with --whitespace=fix(B[m
*** t4254-am-corrupt.sh ***
ok 56 - ISO and ISO-strict date formats display the same values(B[m
ok 36 - range_set_union(B[m
ok 10 - log --graph with crossover in octopus merge, no color(B[m
ok 57 - short date(B[m
ok 27 - am --signoff duplicates Signed-off-by: if it is not the last one(B[m
ok 37 - -s shows only line-log commits(B[m
ok 6 - am with dos files with --keep-cr continue(B[m
ok 58 - set up log decoration tests(B[m
ok 11 - log --graph with crossover in octopus merge with colors(B[m
ok 6 - expand/no-expand for --pretty=full(B[m
ok 67 - two missing blank lines at end with --whitespace=fix(B[m
ok 38 - -p shows the default patch output(B[m
ok 12 - log --graph with crossover in octopus merge and its child, no color(B[m
ok 39 - --raw is forbidden(B[m
ok 30 - multiple identical conflicts(B[m
ok 28 - am without --keep removes Re: and [PATCH] stuff(B[m
ok 1 - setup(B[m
ok 68 - missing blank line at end, insert before end, --whitespace=fix(B[m
ok 59 - log decoration properly follows tag chain(B[m
ok 2 - try to apply corrupted patch(B[m
ok 7 - am with unix files config am.keepcr overridden by --no-keep-cr(B[m
ok 13 - log --graph with crossover in octopus merge and its child with colors(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 60 - clean log decoration(B[m
*** t4255-am-submodule.sh ***
ok 3 - compare diagnostic; ensure file is still here(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 14 - log --graph with unrelated commit and octopus tip, no color(B[m
ok 29 - am --keep really keeps the subject(B[m
*** t4256-am-format-flowed.sh ***
ok 69 - shrink file with tons of missing blanks at end of file(B[m
ok 61 - set up trailer tests(B[m
ok 15 - log --graph with unrelated commit and octopus tip with colors(B[m
ok 31 - rerere with unexpected conflict markers does not crash(B[m
ok 62 - pretty format %(trailers) shows trailers(B[m
ok 70 - missing blanks at EOF must only match blank lines(B[m
ok 30 - am --keep-non-patch really keeps the non-patch part(B[m
ok 16 - log --graph with unrelated commit and octopus child, no color(B[m
ok 63 - %(trailers:only) shows only "key: value" trailers(B[m
ok 7 - expand/no-expand for --pretty=fuller(B[m
ok 64 - %(trailers:only=yes) shows only "key: value" trailers(B[m
ok 71 - missing blank line should match context line with spaces(B[m
ok 17 - log --graph with unrelated commit and octopus child with colors(B[m
ok 65 - %(trailers:only=no) shows all trailers(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 31 - setup am -3(B[m
ok 1 - setup(B[m
*** t4257-am-interactive.sh ***
ok 66 - %(trailers:only=no,only=true) shows only "key: value" trailers(B[m
ok 67 - %(trailers:unfold) unfolds trailers(B[m
ok 47 - log.decorate configuration(B[m
ok 72 - same, but with the --ignore-space-option(B[m
ok 2 - am with format=flowed(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 48 - decorate-refs with glob(B[m
ok 32 - am -3 falls back to 3-way merge(B[m
ok 68 - :only and :unfold work together(B[m
*** t4300-merge-tree.sh ***
ok 69 - pretty format %(trailers:key=foo) shows that trailer(B[m
ok 49 - decorate-refs without globs(B[m
ok 73 - same, but with CR-LF line endings && cr-at-eol set(B[m
ok 70 - pretty format %(trailers:key=foo) is case insensitive(B[m
ok 50 - multiple decorate-refs(B[m
ok 71 - pretty format %(trailers:key=foo:) trailing colon also works(B[m
ok 33 - am -3 -p0 can read --no-prefix patch(B[m
ok 40 - setup for checking fancy rename following(B[m
ok 51 - decorate-refs-exclude with glob(B[m
ok 74 - CR-LF line endings && add line && text=auto(B[m
ok 8 - expand/no-expand for --pretty=raw(B[m
ok 72 - pretty format %(trailers:key=foo) multiple keys(B[m
ok 52 - decorate-refs-exclude without globs(B[m
ok 41 - fancy rename following #1(B[m
ok 73 - %(trailers:key=nonexistent) becomes empty(B[m
ok 53 - multiple decorate-refs-exclude(B[m
ok 42 - fancy rename following #2(B[m
ok 75 - CR-LF line endings && change line && text=auto(B[m
ok 74 - %(trailers:key=foo) handles multiple lines even if folded(B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
ok 1 - setup(B[m
ok 54 - decorate-refs and decorate-refs-exclude(B[m
ok 32 - rerere with inner conflict markers(B[m
*** t5000-tar-tree.sh ***
ok 75 - %(trailers:key=foo,unfold) properly unfolds(B[m
ok 34 - am with config am.threeWay falls back to 3-way merge(B[m
ok 76 - LF in repo, CRLF in worktree && change line && text=auto(B[m
ok 55 - decorate-refs-exclude and simplify-by-decoration(B[m
ok 76 - pretty format %(trailers:key=foo,only=no) also includes nontrailer lines(B[m
ok 1 - set up patches to apply(B[m
ok 77 - whitespace=fix to expand(B[m
ok 77 - %(trailers:key) without value is error(B[m
ok 2 - log --graph with left-skewed merge(B[m
ok 2 - file add A, !B(B[m
ok 2 - apply_index: added submodule leaves existing empty directory alone(B[m
ok 78 - %(trailers:key=foo,valueonly) shows only value(B[m
ok 35 - am with config am.threeWay overridden by --no-3way(B[m
ok 2 - applying all patches generates conflict(B[m
ok 78 - whitespace check skipped for excluded paths(B[m
ok 79 - pretty format %(trailers:separator) changes separator(B[m
[32m# passed all 78 test(s)(B[m
[36m1..78(B[m
*** t5001-archive-attr.sh ***
ok 1 - setup(B[m
ok 56 - log.decorate config parsing(B[m
ok 33 - setup simple stage 1 handling(B[m
ok 3 - file add !A, B(B[m
[34mok 57 # skip log output on a TTY (missing TTY)(B[m
ok 9 - expand/no-expand for --pretty=email(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 3 - interactive am can apply a single patch(B[m
ok 36 - am can rename a file(B[m
*** t5002-archive-attr-pattern.sh ***
ok 80 - pretty format %(trailers) combining separator/key/valueonly(B[m
ok 58 - reflog is expected format(B[m
ok 34 - test simple stage 1 handling(B[m
[32m# passed all 34 test(s)(B[m
[36m1..34(B[m
ok 2 - populate workdir(B[m
ok 3 - add ignored file(B[m
ok 59 - whatchanged is expected format(B[m
ok 81 - trailer parsing not fooled by --- line(B[m
*** t5003-archive-zip.sh ***
ok 37 - am -3 can rename a file(B[m
ok 4 - file add A, B (same)(B[m
ok 4 - interactive am can resolve conflict(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 4 - add files to repository(B[m
*** t5004-archive-corner-cases.sh ***
ok 5 - setup export-subst(B[m
ok 6 - create bare clone(B[m
ok 38 - am -3 can rename a file after falling back to 3-way merge(B[m
ok 1 - setup(B[m
ok 7 - remove ignored file(B[m
ok 1 - populate workdir(B[m
ok 82 - set up %S tests(B[m
ok 8 - git archive(B[m
ok 2 - git archive(B[m
ok 3 -  archive/ignored does not exist(B[m
ok 4 -  archive/ignored-by-tree does not exist(B[m
ok 9 -  extract tar archive(B[m
ok 83 - log --format=%S paints branch names(B[m
ok 5 -  archive/ignored-by-tree.d does not exist(B[m
ok 5 - file add A, B (different)(B[m
ok 6 -  archive/ignored-by-tree.d/file does not exist(B[m
ok 1 - create commit with empty tree and fake empty tar(B[m
ok 2 - add symlink(B[m
ok 39 - am -3 -q is quiet(B[m
[34mok 10 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)(B[m
ok 7 -  archive/ignored-by-worktree exists(B[m
ok 8 -  archive/excluded-by-pathspec.d exists(B[m
ok 3 - log --graph with nested left-skewed merge(B[m
ok 60 - log.abbrevCommit configuration(B[m
ok 3 - prepare file list(B[m
ok 9 -  archive/excluded-by-pathspec.d/file exists(B[m
ok 84 - log --format=%S paints tag names(B[m
ok 11 -  validate filenames(B[m
ok 4 - add ignored file(B[m
ok 1 - setup(B[m
ok 12 -  validate file contents(B[m
ok 40 - am pauses on conflict(B[m
ok 10 - git archive with pathspec(B[m
ok 85 - log --format=%S paints symmetric ranges(B[m
ok 6 - file change A, !B(B[m
ok 11 -  archive-pathspec/ignored does not exist(B[m
ok 13 - git archive --prefix=prefix/(B[m
ok 2 - tar archive of commit with empty tree(B[m
ok 2 - git archive(B[m
ok 12 -  archive-pathspec/ignored-by-tree does not exist(B[m
ok 3 -  archive/ignored does not exist(B[m
ok 41 - am --show-current-patch(B[m
ok 13 -  archive-pathspec/ignored-by-tree.d does not exist(B[m
ok 4 -  archive/not-ignored-dir/ignored does not exist(B[m
ok 14 -  extract tar archive(B[m
ok 3 - tar archive of empty tree is empty(B[m
ok 86 - %S in git log --format works with other placeholders (part 1)(B[m
[34mok 15 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)(B[m
ok 14 -  archive-pathspec/ignored-by-tree.d/file does not exist(B[m
ok 5 -  archive/not-ignored-dir/ignored-only-if-dir exists(B[m
ok 5 - add files to repository(B[m
ok 42 - am --show-current-patch=raw(B[m
ok 15 -  archive-pathspec/ignored-by-worktree exists(B[m
ok 6 -  archive/not-ignored-dir/ exists(B[m
ok 16 -  archive-pathspec/excluded-by-pathspec.d does not exist(B[m
ok 7 -  archive/ignored-only-if-dir/ does not exist(B[m
ok 16 -  validate filenames(B[m
ok 87 - %S in git log --format works with other placeholders (part 2)(B[m
ok 17 -  archive-pathspec/excluded-by-pathspec.d/file does not exist(B[m
ok 43 - am --show-current-patch=diff(B[m
ok 8 -  archive/ignored-ony-if-dir/ignored-by-ignored-dir does not exist(B[m
ok 6 - setup export-subst and diff attributes(B[m
ok 17 -  validate file contents(B[m
ok 9 -  archive/ignored-without-slash/ does not exist(B[m
ok 10 -  archive/ignored-without-slash/foo does not exist(B[m
ok 44 - am accepts repeated --show-current-patch(B[m
ok 4 - tar archive of empty tree with prefix(B[m
ok 18 - git archive with wildcard pathspec(B[m
ok 7 - file change !A, B(B[m
ok 18 - git-archive --prefix=olde-(B[m
ok 88 - log --pretty=reference(B[m
ok 11 -  archive/wildcard-without-slash/ does not exist(B[m
ok 61 - show added path under "--follow -M"(B[m
ok 19 -  archive-pathspec-wildcard/ignored does not exist(B[m
ok 12 -  archive/wildcard-without-slash/foo does not exist(B[m
ok 20 -  archive-pathspec-wildcard/ignored-by-tree does not exist(B[m
ok 19 -  extract tar archive(B[m
ok 7 - create bare clone(B[m
[34mok 20 # skip  interpret pax headers (missing TAR_NEEDS_PAX_FALLBACK)(B[m
ok 13 -  archive/deep/and/slashless/ does not exist(B[m
ok 45 - am detects incompatible --show-current-patch(B[m
ok 21 -  archive-pathspec-wildcard/ignored-by-tree.d does not exist(B[m
ok 8 - remove ignored file(B[m
ok 22 -  archive-pathspec-wildcard/ignored-by-tree.d/file does not exist(B[m
ok 14 -  archive/deep/and/slashless/foo does not exist(B[m
ok 23 -  archive-pathspec-wildcard/ignored-by-worktree exists(B[m
ok 15 -  archive/deep/with/wildcard/ does not exist(B[m
ok 21 -  validate filenames(B[m
ok 16 -  archive/deep/with/wildcard/foo does not exist(B[m
ok 89 - log --pretty=reference with log.date is overridden by short date(B[m
ok 24 -  archive-pathspec-wildcard/excluded-by-pathspec.d does not exist(B[m
ok 17 -  archive/one-level-lower/ does not exist(B[m
ok 46 - am --skip works(B[m
ok 22 -  validate file contents(B[m
ok 25 -  archive-pathspec-wildcard/excluded-by-pathspec.d/file does not exist(B[m
ok 18 -  archive/one-level-lower/two-levels-lower/ignored-only-if-dir/ does not exist(B[m
ok 5 - zip archive of empty tree is empty(B[m
ok 19 -  archive/one-level-lower/two-levels-lower/ignored-ony-if-dir/ignored-by-ignored-dir does not exist(B[m
ok 90 - log --pretty=reference with explicit date overrides short date(B[m
ok 47 - am --abort removes a stray directory(B[m
ok 26 - git archive with worktree attributes(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 27 -  worktree/ignored does not exist(B[m
ok 8 - file change A, B (same)(B[m
ok 9 - git archive --format=zip(B[m
ok 28 -  worktree/ignored-by-tree exists(B[m
ok 23 - git archive on large files(B[m
*** t5100-mailinfo.sh ***
ok 29 -  worktree/ignored-by-worktree does not exist(B[m
ok 91 - log --pretty=reference is never unabbreviated(B[m
ok 24 - git archive in a bare repo(B[m
ok 6 - zip archive of empty tree with prefix(B[m
ok 25 - git archive vs. the same in a bare repo(B[m
ok 30 - git archive --worktree-attributes option(B[m
ok 10 -  extract ZIP archive(B[m
ok 92 - log --pretty=reference is never decorated(B[m
ok 7 - archive complains about pathspec on empty tree(B[m
ok 31 -  worktree2/ignored does not exist(B[m
ok 32 -  worktree2/ignored-by-tree exists(B[m
ok 26 - git archive with --output(B[m
ok 33 -  worktree2/ignored-by-worktree does not exist(B[m
ok 11 -  validate filenames(B[m
ok 48 - am refuses patches when paused(B[m
ok 93 - log --pretty=reference does not output reflog info(B[m
ok 8 - create a commit with an empty subtree(B[m
ok 62 - git log -c --follow(B[m
ok 12 -  validate file contents(B[m
ok 34 - git archive vs. bare(B[m
ok 27 - git archive --remote(B[m
ok 9 - archive empty subtree with no pathspec(B[m
ok 94 - log --pretty=reference is colored appropriately(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 93 test(s)(B[m
[36m1..94(B[m
ok 63 - log --graph with diff and stats(B[m
ok 13 -  extract ZIP archive with EOL conversion(B[m
ok 10 - archive empty subtree by direct pathspec(B[m
ok 35 - git archive with worktree attributes, bare(B[m
ok 36 -  bare-worktree/ignored does not exist(B[m
ok 1 - split sample box(B[m
*** t5150-request-pull.sh ***
ok 37 -  bare-worktree/ignored-by-tree exists(B[m
ok 14 -  validate that text files are converted(B[m
ok 9 - file change A, B (different)(B[m
ok 28 - git archive --remote with configured remote(B[m
ok 38 -  bare-worktree/ignored-by-worktree exists(B[m
ok 4 - log --graph with nested left-skewed merge following normal merge(B[m
ok 64 - log --line-prefix="*** " --graph with diff and stats(B[m
ok 2 - mailinfo 0001(B[m
ok 49 - am --resolved works(B[m
ok 15 -  validate that binary files are unchanged(B[m
ok 29 - validate file modification time(B[m
ok 39 - export-subst(B[m
[32m# passed all 39 test(s)(B[m
[36m1..39(B[m
ok 3 - mailinfo 0002(B[m
ok 16 -  validate that diff files are converted(B[m
ok 3 - apply_index: replace tracked file with submodule creates empty directory(B[m
ok 65 - log --graph with --name-status(B[m
*** t5200-update-server-info.sh ***
ok 30 - git get-tar-commit-id(B[m
ok 17 -  validate that -diff files are unchanged(B[m
ok 4 - mailinfo 0003(B[m
ok 66 - log --graph with --name-only(B[m
ok 31 - git archive with --output, override inferred format(B[m
ok 18 -  validate that custom diff is unchanged (B[m
[36m1..0 # SKIP skipping request-pull tests, perl not available(B[m
ok 5 - mailinfo 0004(B[m
ok 67 - dotdot is a parent directory(B[m
*** t5300-pack-object.sh ***
ok 50 - am --resolved fails if index has no changes(B[m
ok 6 - mailinfo 0005(B[m
ok 7 - mailinfo 0006(B[m
ok 19 - git archive --format=zip in a bare repo(B[m
ok 32 - git archive with --output and --remote creates .tgz(B[m
ok 20 - git archive --format=zip vs. the same in a bare repo(B[m
ok 68 - setup signed branch(B[m
ok 8 - mailinfo 0007(B[m
ok 33 - git archive --list outside of a git repo(B[m
ok 10 - file change A, B (mixed)(B[m
ok 1 - setup(B[m
ok 9 - mailinfo 0008(B[m
ok 2 - create info/refs(B[m
ok 51 - am --resolved fails if index has unmerged entries(B[m
ok 3 - modify and store mtime(B[m
ok 34 - git archive --remote outside of a git repo(B[m
ok 10 - mailinfo 0009(B[m
ok 21 - git archive --format=zip with --output(B[m
ok 4 - info/refs is not needlessly overwritten(B[m
ok 11 - mailinfo 0010(B[m
ok 69 - setup signed branch with subkey(B[m
ok 11 - file remove A, !B(B[m
ok 12 - mailinfo 0011(B[m
ok 5 - info/refs can be forced to update(B[m
ok 52 - am takes patches from a Pine mailbox(B[m
ok 22 - git archive with --output, inferring format (local)(B[m
ok 35 - clients cannot access unreachable commits(B[m
ok 13 - mailinfo 0012(B[m
ok 53 - am fails on mail without patch(B[m
ok 6 - info/refs updates when changes are made(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 14 - mailinfo 0013(B[m
*** t5301-sliding-window.sh ***
ok 5 - log --graph with nested right-skewed merge following left-skewed merge(B[m
ok 70 - setup signed branch x509(B[m
ok 54 - am fails on empty patch(B[m
ok 12 - file remove !A, B(B[m
ok 23 - git archive with --output, inferring format (remote)(B[m
ok 15 - mailinfo 0014(B[m
ok 71 - log x509 fingerprint(B[m
ok 36 - upload-archive can allow unreachable commits(B[m
ok 72 - log OpenPGP fingerprint(B[m
ok 16 - mailinfo 0015(B[m
ok 55 - am works from stdin in subdirectory(B[m
ok 37 - setup tar filters(B[m
ok 73 - log --graph --show-signature(B[m
ok 24 - git archive --format=zip with prefix(B[m
ok 13 - file remove A, B (same)(B[m
ok 38 - archive --list mentions user filter(B[m
ok 17 - mailinfo 0016(B[m
ok 25 -  extract ZIP archive(B[m
ok 74 - log --graph --show-signature x509(B[m
ok 18 - mailinfo 0017(B[m
ok 26 -  validate filenames(B[m
ok 39 - archive --list shows only enabled remote filters(B[m
ok 56 - am works from file (relative path given) in subdirectory(B[m
ok 27 -  validate file contents(B[m
ok 19 - mailinfo 0018(B[m
ok 28 -  extract ZIP archive with EOL conversion(B[m
ok 1 - setup(B[m
ok 40 - invoke tar filter by format(B[m
ok 29 -  validate that text files are converted(B[m
ok 20 - split box with rfc2047 samples(B[m
ok 57 - am works from file (absolute path given) in subdirectory(B[m
ok 1 - setup(B[m
ok 30 -  validate that binary files are unchanged(B[m
ok 21 - mailinfo rfc2047/0001(B[m
ok 31 -  validate that diff files are converted(B[m
ok 2 - verify-pack -v, defaults(B[m
ok 14 - file change A, remove B(B[m
ok 41 - invoke tar filter by extension(B[m
ok 6 - log --graph with right-skewed merge following a left-skewed one(B[m
ok 22 - mailinfo rfc2047/0002(B[m
ok 32 -  validate that -diff files are unchanged(B[m
ok 3 - verify-pack -v, packedGitWindowSize == 1 page(B[m
ok 42 - default output format remains tar(B[m
ok 33 -  validate that custom diff is unchanged (B[m
ok 75 - log --graph --show-signature for merged tag(B[m
ok 23 - mailinfo rfc2047/0003(B[m
ok 58 - am --committer-date-is-author-date(B[m
ok 43 - extension matching requires dot(B[m
ok 4 - verify-pack -v, packedGit{WindowSize,Limit} == 1 page(B[m
ok 24 - mailinfo rfc2047/0004(B[m
ok 34 - git archive -0 --format=zip on large files(B[m
ok 2 - pack without delta(B[m
ok 3 - pack-objects with bogus arguments(B[m
ok 35 -  extract ZIP archive(B[m
ok 25 - mailinfo rfc2047/0005(B[m
ok 44 - only enabled filters are available remotely(B[m
ok 4 - apply_index: replace directory with submodule(B[m
ok 59 - am without --committer-date-is-author-date(B[m
ok 36 -  validate filenames(B[m
ok 26 - mailinfo rfc2047/0006(B[m
ok 37 -  validate file contents(B[m
ok 45 - git archive --format=tgz(B[m
ok 5 - repack -a -d, packedGit{WindowSize,Limit} == 1 page(B[m
ok 15 - file remove A, change B(B[m
ok 27 - mailinfo rfc2047/0007(B[m
ok 38 -  extract ZIP archive with EOL conversion(B[m
ok 60 - am --ignore-date(B[m
ok 6 - verify-pack -v, defaults(B[m
ok 39 -  validate that text files are converted(B[m
ok 28 - mailinfo rfc2047/0008(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 46 - git archive --format=tar.gz(B[m
*** t5302-pack-index.sh ***
ok 40 -  validate that binary files are unchanged(B[m
ok 16 - tree add A, B (same)(B[m
ok 29 - mailinfo rfc2047/0009(B[m
ok 41 -  validate that diff files are converted(B[m
ok 47 - infer tgz from .tgz filename(B[m
ok 30 - mailinfo rfc2047/0010(B[m
ok 42 -  validate that -diff files are unchanged(B[m
ok 76 - log --graph --show-signature for merged tag in shallow clone(B[m
ok 61 - am into an unborn branch(B[m
ok 43 -  validate that custom diff is unchanged (B[m
ok 4 - unpack without delta(B[m
ok 31 - mailinfo rfc2047/0011(B[m
ok 48 - infer tgz from .tar.gz filename(B[m
ok 32 - respect NULs(B[m
ok 49 - extract tgz file(B[m
ok 5 - check unpack without delta(B[m
ok 62 - am newline in subject(B[m
ok 33 - Preserve NULs out of MIME encoded message(B[m
ok 17 - tree add A, B (different)(B[m
ok 44 - git archive --format=zip on large files(B[m
ok 34 - mailinfo on from header without name works(B[m
ok 50 - remote tar.gz is allowed by default(B[m
ok 45 -  extract ZIP archive(B[m
ok 63 - am -q is quiet(B[m
ok 35 - mailinfo finds headers after embedded From line(B[m
ok 46 -  validate filenames(B[m
ok 51 - remote tar.gz can be disabled(B[m
ok 47 -  validate file contents(B[m
ok 64 - am empty-file does not infloop(B[m
ok 52 - archive and :(glob)(B[m
ok 36 - mailinfo on message with quoted >From(B[m
ok 53 - catch non-matching pathspec(B[m
ok 48 -  extract ZIP archive with EOL conversion(B[m
ok 18 - tree unchanged A, removed B(B[m
ok 77 - log --graph --show-signature for merged tag x509(B[m
ok 49 -  validate that text files are converted(B[m
ok 6 - pack with REF_DELTA(B[m
ok 78 - --no-show-signature overrides --show-signature(B[m
ok 65 - am --message-id really adds the message id(B[m
ok 50 -  validate that binary files are unchanged(B[m
ok 51 -  validate that diff files are converted(B[m
ok 37 - mailinfo unescapes with --mboxrd(B[m
ok 54 - set up repository with huge blob(B[m
ok 52 -  validate that -diff files are unchanged(B[m
ok 38 - mailinfo handles rfc2822 quoted-string(B[m
ok 79 - log.showsignature=true behaves like --show-signature(B[m
ok 55 - generate tar with huge size(B[m
ok 53 -  validate that custom diff is unchanged (B[m
ok 19 - turn file to tree(B[m
[32m# passed all 53 test(s)(B[m
[36m1..53(B[m
ok 39 - mailinfo handles rfc2822 comment(B[m
ok 66 - am.messageid really adds the message id(B[m
ok 56 - system tar can read our huge size(B[m
ok 80 - --no-show-signature overrides log.showsignature=true(B[m
ok 7 - log --graph with octopus merge with column joining its penultimate parent(B[m
*** t5303-pack-corruption-resilience.sh ***
ok 40 - mailinfo with mailinfo.scissors config(B[m
ok 41 - mailinfo no options(B[m
ok 57 - set up repository with far-future commit(B[m
ok 81 - --show-signature overrides log.showsignature=false(B[m
ok 42 - mailinfo -k(B[m
ok 67 - am --message-id -s signs off after the message id(B[m
ok 5 - apply_index: removed submodule leaves submodule directory and its contents in place(B[m
ok 58 - generate tar with future mtime(B[m
ok 7 - unpack with REF_DELTA(B[m
ok 82 - log --graph --no-walk is forbidden(B[m
ok 43 - mailinfo -b no [PATCH](B[m
ok 44 - mailinfo -b leading [PATCH](B[m
ok 59 - system tar can read our future mtime(B[m
ok 45 - mailinfo -b double [PATCH](B[m
ok 8 - check unpack with REF_DELTA(B[m
[32m# passed all 59 test(s)(B[m
[36m1..59(B[m
[33mnot ok 46 - mailinfo -b trailing [PATCH] # TODO known breakage(B[m
ok 20 - turn tree to file(B[m
ok 83 - log diagnoses bogus HEAD(B[m
[32m# passed all 20 test(s)(B[m
[36m1..20(B[m
*** t5304-prune.sh ***
[33mnot ok 47 - mailinfo -b separated double [PATCH] # TODO known breakage(B[m
ok 84 - log does not default to HEAD when rev input is given(B[m
*** t5305-include-tag.sh ***
ok 48 - mailinfo handles unusual header whitespace(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 46 test(s)(B[m
[36m1..48(B[m
*** t5306-pack-nobase.sh ***
ok 1 - initial setup validation(B[m
ok 85 - set up --source tests(B[m
ok 9 - pack with OFS_DELTA(B[m
ok 1 - am: added submodule creates empty directory(B[m
ok 2 - create corruption in header of first object(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 86 - log --source paints branch names(B[m
ok 2 - pack without --include-tag(B[m
ok 1 - setup base(B[m
ok 3 - ... but having a loose copy allows for full recovery(B[m
ok 2 - prune stale packs(B[m
ok 68 - am -3 works with rerere(B[m
ok 3 - unpack objects(B[m
ok 8 - log --graph with multiple tips(B[m
ok 87 - log --source paints tag names(B[m
ok 4 - check unpacked result (have commit, no tag)(B[m
ok 9 - log --graph with multiple tips and colors(B[m
ok 4 - ... and loose copy of first delta allows for partial recovery(B[m
ok 5 - pack with --include-tag(B[m
ok 88 - log --source paints symmetric ranges(B[m
ok 2 - setup patch_clone(B[m
ok 10 - unpack with OFS_DELTA(B[m
ok 89 - --exclude-promisor-objects does not BUG-crash(B[m
ok 6 - unpack objects(B[m
ok 7 - check unpacked result (have commit, have tag)(B[m
ok 90 - log --end-of-options(B[m
ok 11 - check unpack with OFS_DELTA(B[m
[32m# passed all 90 test(s)(B[m
[36m1..90(B[m
ok 12 - compare delta flavors(B[m
ok 3 - prune --expire(B[m
*** t5307-pack-missing-commit.sh ***
ok 5 - create corruption in data of first object(B[m
ok 8 - create hidden inner tag(B[m
ok 69 - am -s unexpected trailer block(B[m
ok 3 - indirectly clone patch_clone(B[m
ok 9 - pack explicit outer tag(B[m
ok 6 - ... but having a loose copy allows for full recovery(B[m
ok 10 - unpack objects(B[m
ok 4 - clone of patch_clone is incomplete(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 11 - check unpacked result (have all objects)(B[m
*** t5308-pack-detect-duplicates.sh ***
ok 6 - apply_index: removed submodule leaves submodule containing a .git directory alone(B[m
ok 7 - ... and loose copy of second object allows for partial recovery(B[m
ok 70 - am --patch-format=mboxrd handles mboxrd(B[m
ok 12 - pack implied outer tag(B[m
ok 13 - use packed objects(B[m
ok 13 - unpack objects(B[m
ok 14 - check unpacked result (have all objects)(B[m
ok 71 - am works with multi-line in-body headers(B[m
ok 4 - gc: implicit prune --expire(B[m
ok 15 - single-branch clone can transfer tag(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 8 - create corruption in header of first delta(B[m
ok 72 - am --quit keeps HEAD where it is(B[m
ok 1 - setup(B[m
*** t5309-pack-delta-cycles.sh ***
ok 5 - gc: refuse to start with invalid gc.pruneExpire(B[m
ok 2 - check corruption(B[m
ok 9 - ... but having a loose copy allows for full recovery(B[m
ok 3 - rev-list notices corruption (1)(B[m
ok 14 - use packed deltified (REF_DELTA) objects(B[m
ok 4 - rev-list notices corruption (2)(B[m
ok 5 - pack-objects notices corruption(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t5310-pack-bitmaps.sh ***
ok 6 - gc: start with ok gc.pruneExpire(B[m
ok 10 - ... and then a repack "clears" the corruption(B[m
ok 7 - prune: prune nonsense parameters(B[m
ok 2 - am: added submodule leaves existing empty directory alone(B[m
ok 15 - use packed deltified (OFS_DELTA) objects(B[m
ok 8 - prune: prune unreachable heads(B[m
ok 11 - create corruption in data of first delta(B[m
ok 10 - log --graph with multiple tips(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 12 - ... but having a loose copy allows for full recovery(B[m
ok 9 - prune: do not prune detached HEAD with no reflog(B[m
ok 16 - survive missing objects/pack directory(B[m
*** t5311-pack-bitmaps-shallow.sh ***
ok 1 - pack with no duplicates(B[m
ok 10 - prune: prune former HEAD after checking out branch(B[m
ok 1 - setup repo with moderate-sized history(B[m
ok 13 - ... and then a repack "clears" the corruption(B[m
ok 7 - apply_index: replace submodule with a directory must fail(B[m
ok 2 - full repack creates bitmaps(B[m
ok 17 - verify pack(B[m
ok 3 - rev-list --test-bitmap verifies bitmaps(B[m
ok 11 - prune: do not prune heads listed as an argument(B[m
ok 4 - counting commits via bitmap (full bitmap)(B[m
ok 5 - counting partial commits via bitmap (full bitmap)(B[m
ok 14 - corruption in delta base reference of first delta (OBJ_REF_DELTA)(B[m
ok 6 - counting commits with limit (full bitmap)(B[m
ok 1 - setup shallow repo(B[m
ok 1 - index-pack works with a single delta (A->B)(B[m
ok 18 - verify pack -v(B[m
ok 7 - counting non-linear history (full bitmap)(B[m
ok 15 - ... but having a loose copy allows for full recovery(B[m
ok 2 - turn on bitmaps in the parent(B[m
ok 8 - counting commits with limiting (full bitmap)(B[m
ok 12 - gc --no-prune(B[m
ok 19 - verify-pack catches mismatched .idx and .pack files(B[m
ok 9 - counting objects via bitmap (full bitmap)(B[m
ok 3 - shallow fetch from bitmapped repo(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 20 - verify-pack catches a corrupted pack signature(B[m
*** t5312-prune-corruption.sh ***
ok 16 - ... and then a repack "clears" the corruption(B[m
ok 10 - enumerate commits (full bitmap)(B[m
ok 73 - am and .gitattibutes(B[m
ok 21 - verify-pack catches a corrupted pack version(B[m
[32m# passed all 73 test(s)(B[m
[36m1..73(B[m
ok 22 - verify-pack catches a corrupted type/size of the 1st packed object data(B[m
*** t5313-pack-bounds-checks.sh ***
ok 11 - enumerate --objects (full bitmap)(B[m
ok 12 - bitmap --objects handles non-commit objects (full bitmap)(B[m
ok 1 - disable reflogs(B[m
ok 23 - verify-pack catches a corrupted sum of the index file itself(B[m
ok 17 - corruption #0 in delta base reference of first delta (OBJ_OFS_DELTA)(B[m
ok 13 - gc respects gc.pruneExpire(B[m
ok 13 - clone from bitmapped repository(B[m
ok 2 - create history reachable only from a bogus-named ref(B[m
ok 18 - ... but having a loose copy allows for full recovery(B[m
ok 3 - pruning does not drop bogus object(B[m
ok 3 - am: replace tracked file with submodule creates empty directory(B[m
ok 14 - partial clone from bitmapped repository(B[m
ok 19 - ... and then a repack "clears" the corruption(B[m
ok 4 - put bogus object into pack(B[m
ok 1 - setup(B[m
ok 2 - index-pack works with a single delta (B->A)(B[m
ok 5 - destructive repack keeps packed object(B[m
ok 15 - setup further non-bitmapped commits(B[m
ok 6 - clean up bogus ref(B[m
ok 8 - apply_index: replace submodule containing a .git directory with a directory must fail(B[m
ok 16 - counting commits via bitmap (partial bitmap)(B[m
ok 17 - counting partial commits via bitmap (partial bitmap)(B[m
ok 2 - set up base packfile and variables(B[m
ok 14 - gc --prune=<date>(B[m
ok 18 - counting commits with limit (partial bitmap)(B[m
ok 20 - corruption #1 in delta base reference of first delta (OBJ_OFS_DELTA)(B[m
ok 7 - create history with missing tip commit(B[m
ok 19 - counting non-linear history (partial bitmap)(B[m
ok 8 - pruning with a corrupted tip does not drop history(B[m
ok 21 - ... but having a loose copy allows for full recovery(B[m
ok 24 - build pack index for an existing pack(B[m
ok 20 - counting commits with limiting (partial bitmap)(B[m
ok 3 - pack/index object count mismatch(B[m
ok 9 - pack-refs does not silently delete broken loose ref(B[m
ok 21 - counting objects via bitmap (partial bitmap)(B[m
ok 10 - create packed-refs file with broken ref(B[m
ok 22 - ... and then a repack "clears" the corruption(B[m
ok 11 - pack-refs does not silently delete broken packed ref(B[m
ok 22 - enumerate commits (partial bitmap)(B[m
ok 12 - pack-refs does not drop broken refs during deletion(B[m
ok 4 - matched bogus object count(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
*** t5314-pack-cycle-detection.sh ***
ok 23 - enumerate --objects (partial bitmap)(B[m
ok 3 - index-pack detects missing base objects(B[m
ok 15 - gc --prune=never(B[m
ok 24 - bitmap --objects handles non-commit objects (partial bitmap)(B[m
ok 5 - bogus object offset (v1)(B[m
ok 23 - ... and a redundant pack allows for full recovery too(B[m
ok 6 - bogus object offset (v2, no msb)(B[m
ok 25 - fetch (partial bitmap)(B[m
ok 7 - bogus offset into v2 extended table(B[m
ok 26 - incremental repack fails when bitmaps are requested(B[m
ok 24 - corruption of delta base reference pointing to wrong object(B[m
ok 1 - setup(B[m
ok 8 - bogus offset inside v2 extended table(B[m
ok 27 - incremental repack can disable bitmaps(B[m
ok 16 - gc respects gc.pruneExpire=never(B[m
ok 25 - ... but having a loose copy allows for full recovery(B[m
[33mnot ok 9 - apply_index: replace submodule with a file must fail # TODO known breakage(B[m
ok 2 - repack(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t5315-pack-objects-compression.sh ***
ok 9 - bogus OFS_DELTA in packfile(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 4 - am: replace directory with submodule(B[m
*** t5316-pack-delta-depth.sh ***
ok 26 - ... and then a repack "clears" the corruption(B[m
ok 28 - pack-objects respects --local (non-local loose)(B[m
ok 17 - prune --expire=never(B[m
ok 1 - setup(B[m
ok 4 - index-pack detects REF_DELTA cycles(B[m
ok 5 - failover to an object in another pack(B[m
ok 29 - pack-objects respects --honor-pack-keep (local non-bitmapped pack)(B[m
ok 2 - pack-objects with -c core.compression=0(B[m
ok 27 - corrupting header to have too small output buffer fails unpack(B[m
ok 28 - apply good minimal delta(B[m
ok 3 - pack-objects with -c core.compression=9(B[m
ok 29 - apply delta with too many literal bytes(B[m
ok 30 - apply delta with too many copied bytes(B[m
ok 30 - pack-objects respects --local (non-local pack)(B[m
ok 31 - apply delta with too few literal bytes(B[m
ok 4 - pack-objects with -c core.compression=0 -c pack.compression=0(B[m
ok 32 - apply delta with too few bytes in base(B[m
ok 18 - gc: prune old objects after local clone(B[m
ok 33 - apply delta with truncated copy parameters(B[m
ok 34 - apply delta with trailing garbage literal(B[m
ok 5 - pack-objects with -c core.compression=9 -c pack.compression=0(B[m
ok 35 - apply delta with trailing garbage copy(B[m
ok 31 - pack-objects respects --honor-pack-keep (local bitmapped pack)(B[m
ok 19 - garbage report in count-objects -v(B[m
ok 36 - apply delta with trailing garbage opcode(B[m
[32m# passed all 36 test(s)(B[m
[36m1..36(B[m
*** t5317-pack-objects-filter-objects.sh ***
ok 6 - pack-objects with -c core.compression=0 -c pack.compression=9(B[m
ok 25 - unpacking with --strict(B[m
ok 32 - pack-objects respects --local (non-local bitmapped pack)(B[m
ok 7 - pack-objects with -c core.compression=9 -c pack.compression=9(B[m
ok 8 - pack-objects with -c pack.compression=0(B[m
ok 20 - clean pack garbage with gc(B[m
ok 33 - pack-objects to file can use bitmap(B[m
ok 9 - pack-objects with -c pack.compression=9(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
*** t5318-commit-graph.sh ***
[33mnot ok 10 - apply_index: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 21 - prune .git/shallow(B[m
ok 11 - zip archive with many entries(B[m
ok 34 - full repack, reusing previous bitmaps(B[m
[34mok 12 # skip zip archive bigger than 4GB (missing EXPENSIVE of EXPENSIVE,UNZIP,UNZIP_ZIP64_SUPPORT)(B[m
ok 5 - am: removed submodule leaves submodule directory and its contents in place(B[m
ok 1 - setup r1(B[m
[34mok 13 # skip zip archive with files bigger than 4GB (missing EXPENSIVE of EXPENSIVE,LONG_IS_64BIT,UNZIP,UNZIP_ZIP64_SUPPORT,ZIPINFO)(B[m
ok 35 - fetch (full bitmap)(B[m
ok 22 - prune .git/shallow when there are no loose objects(B[m
ok 2 - verify blob count in normal packfile(B[m
ok 36 - create objects for missing-HAVE tests(B[m
ok 3 - verify blob:none packfile has no blobs(B[m
ok 14 - tar archive with long paths(B[m
ok 6 - failover to a duplicate object in the same pack(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t5319-multi-pack-index.sh ***
*** t5320-delta-islands.sh ***
ok 23 - prune: handle alternate object database(B[m
ok 37 - pack-objects respects --incremental(B[m
ok 1 - setup full repo(B[m
ok 4 - verify normal and blob:none packfiles have same commits/trees(B[m
ok 2 - verify graph with no graph file(B[m
ok 38 - pack with missing blob(B[m
ok 1 - create series of packs(B[m
ok 3 - write graph with no packs(B[m
ok 39 - pack with missing tree(B[m
ok 4 - exit with correct error on bad input to --stdin-packs(B[m
ok 24 - prune: handle index in multiple worktrees(B[m
ok 40 - pack with missing parent(B[m
ok 5 - get an error for missing tree object(B[m
[34mok 41 # skip we can read jgit bitmaps (missing JGIT)(B[m
[34mok 42 # skip jgit can read our bitmaps (missing JGIT)(B[m
ok 2 - packing produces a long delta(B[m
ok 6 - setup for tests of tree:0(B[m
ok 3 - --depth limits depth(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 7 - verify tree:0 packfile has no blobs or trees(B[m
*** t5321-pack-large-objects.sh ***
ok 1 - setup commits(B[m
ok 25 - prune: handle HEAD in multiple worktrees(B[m
ok 1 - setup(B[m
ok 8 - grab tree directly when using tree:0(B[m
ok 2 - vanilla repack deltas one against two(B[m
ok 5 - create commits and repack(B[m
ok 2 - write midx with no packs(B[m
ok 6 - exit with correct error on bad input to --stdin-commits(B[m
ok 3 - island repack with no island definition is vanilla(B[m
ok 9 - setup r2(B[m
ok 26 - prune: handle HEAD reflog in multiple worktrees(B[m
ok 4 - island repack with no matches is vanilla(B[m
ok 43 - splitting packs does not generate bogus bitmaps(B[m
ok 27 - prune: handle expire option correctly(B[m
ok 10 - verify blob count in normal packfile(B[m
ok 7 - check normal git operations: no graph(B[m
ok 5 - separate islands disallows delta(B[m
ok 11 - verify blob:limit=500 omits all blobs(B[m
ok 8 - write graph(B[m
ok 44 - set up reusable pack(B[m
ok 26 - index-pack with --strict(B[m
ok 6 - same island allows delta(B[m
ok 6 - am: removed submodule leaves submodule containing a .git directory alone(B[m
ok 28 - trivial prune with bitmaps enabled(B[m
ok 12 - verify blob:limit=1000(B[m
ok 45 - pack reuse respects --honor-pack-keep(B[m
[32m# passed all 28 test(s)(B[m
[36m1..28(B[m
ok 7 - coalesce same-named islands(B[m
*** t5322-pack-objects-sparse.sh ***
ok 11 - apply_index: modified submodule does not update submodule work tree(B[m
ok 46 - pack reuse respects --local(B[m
ok 9 - check normal git operations: graph exists(B[m
ok 13 - verify blob:limit=1001(B[m
ok 47 - pack reuse respects --incremental(B[m
ok 8 - island restrictions drop reused deltas(B[m
ok 14 - verify blob:limit=10001(B[m
ok 9 - island regexes are left-anchored(B[m
ok 3 - create objects(B[m
ok 48 - truncated bitmap fails gracefully(B[m
ok 10 - island regexes follow last-one-wins scheme(B[m
ok 27 - honor pack.packSizeLimit(B[m
ok 15 - verify blob:limit=1k(B[m
ok 1 - setup(B[m
ok 4 - write midx with one v1 pack(B[m
ok 2 - repack large deltas(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t5323-pack-redundant.sh ***
ok 28 - verify resulting packs(B[m
ok 16 - verify explicitly specifying oversized blob in input(B[m
ok 5 - write midx with one v2 pack(B[m
ok 1 - setup repo(B[m
ok 11 - setup shared history(B[m
ok 2 - non-sparse pack-objects(B[m
ok 17 - verify blob:limit=1m(B[m
ok 3 - sparse pack-objects(B[m
ok 12 - vanilla delta goes between branches(B[m
ok 49 - set up thin delta-reuse parent(B[m
ok 18 - verify normal and blob:limit packfiles have same commits/trees(B[m
ok 4 - duplicate a folder from f3 and commit to topic1(B[m
ok 6 - check normal git operations: one v2 pack(B[m
ok 13 - deltas allowed against superset islands(B[m
ok 5 - non-sparse pack-objects(B[m
ok 7 - corrupt idx not opened(B[m
ok 19 - setup r3(B[m
ok 10 - Add more commits(B[m
ok 14 - island core places core objects first(B[m
ok 6 - sparse pack-objects(B[m
ok 7 - am: replace submodule with a directory must fail(B[m
ok 11 - commit-graph write progress off for redirected stderr(B[m
ok 1 - setup master repo(B[m
ok 15 - unmatched island core is not fatal(B[m
ok 12 - commit-graph write force progress on for stderr(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 20 - verify blob count in normal packfile(B[m
*** t5324-split-commit-graph.sh ***
ok 7 - duplicate a folder from f1 into f3(B[m
ok 29 - tolerate packsizelimit smaller than biggest object(B[m
ok 13 - commit-graph write with the --no-progress option(B[m
ok 21 - verify sparse:path=pattern1 fails(B[m
ok 22 - verify sparse:path=pattern2 fails(B[m
ok 14 - commit-graph verify progress off for redirected stderr(B[m
ok 50 - fetch without bitmaps ignores delta against old base(B[m
ok 15 - commit-graph verify force progress on for stderr(B[m
ok 8 - non-sparse pack-objects(B[m
ok 2 - master: no redundant for pack 1, 2, 3(B[m
ok 16 - commit-graph verify with the --no-progress option(B[m
ok 30 - verify resulting packs(B[m
ok 31 - set up pack for non-repo tests(B[m
ok 9 - sparse pack-objects(B[m
ok 32 - index-pack --stdin complains of non-repo(B[m
ok 17 - write graph with merges(B[m
ok 23 - setup r4(B[m
ok 3 - master: one of pack-2/pack-3 is redundant(B[m
ok 10 - pack.useSparse enables algorithm(B[m
ok 33 - index-pack <pack> works in non-repo(B[m
ok 11 - pack.useSparse overridden(B[m
ok 24 - verify blob count in normal packfile(B[m
ok 4 - master: pack 2, 4, and 6 are redundant(B[m
ok 34 - index-pack --strict <pack> works in non-repo(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t5400-send-pack.sh ***
ok 51 - fetch with bitmaps can reuse old base(B[m
[34mok 35 # skip index-pack --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)(B[m
[34mok 36 # skip pack-objects --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)(B[m
[32m# passed all 51 test(s)(B[m
[36m1..51(B[m
ok 18 - check normal git operations: merge 1 vs 2(B[m
ok 12 - apply_index: modified submodule does not update submodule work tree to invalid commit(B[m
ok 8 - add more objects(B[m
ok 5 - master: pack-8 (subset of pack-1) is also redundant(B[m
*** t5401-update-hooks.sh ***
ok 1 - setup repo(B[m
ok 6 - master: clean loose objects(B[m
ok 25 - verify sparse:oid=OID(B[m
ok 37 - pack-objects in too-many-packs mode(B[m
ok 9 - write midx with two packs(B[m
ok 7 - master: remove redundant packs and pass fsck(B[m
ok 38 - setup: fake a SHA1 hash collision(B[m
ok 19 - check normal git operations: merge 1 vs 3(B[m
ok 8 - setup shared.git(B[m
ok 26 - verify sparse:oid=oid-ish(B[m
ok 39 - make sure index-pack detects the SHA1 collision(B[m
ok 9 - shared: all packs are redundant, but no output without --alt-odb(B[m
ok 40 - make sure index-pack detects the SHA1 collision (large blobs)(B[m
ok 27 - setup r1 - delete loose blobs(B[m
[32m# passed all 40 test(s)(B[m
[36m1..40(B[m
ok 10 - shared: show redundant packs in stderr for verbose mode(B[m
ok 2 - create commits and write commit-graph(B[m
ok 28 - verify pack-objects fails w/ missing objects(B[m
ok 29 - verify pack-objects fails w/ --missing=error(B[m
ok 20 - check normal git operations: merge 2 vs 3(B[m
ok 30 - verify pack-objects w/ --missing=allow-any(B[m
*** t5402-post-merge-hook.sh ***
ok 10 - check normal git operations: two packs(B[m
[32m# passed all 30 test(s)(B[m
[36m1..30(B[m
ok 1 - setup(B[m
ok 11 - shared: remove redundant packs, no packs left(B[m
ok 11 - write progress off for redirected stderr(B[m
*** t5403-post-checkout-hook.sh ***
ok 12 - write force progress on for stderr(B[m
ok 13 - write with the --no-progress option(B[m
ok 3 - check normal git operations: graph exists(B[m
ok 21 - Add one more commit(B[m
ok 8 - am: replace submodule containing a .git directory with a directory must fail(B[m
ok 2 - push(B[m
ok 12 - shared: create new objects and packs(B[m
ok 13 - shared: no redundant without --alt-odb(B[m
ok 3 - updated as expected(B[m
ok 4 - hooks ran(B[m
ok 5 - pre-receive hook input(B[m
ok 14 - shared: one pack is redundant with --alt-odb(B[m
ok 6 - update hook arguments(B[m
ok 7 - post-receive hook input(B[m
ok 8 - post-update hook arguments(B[m
ok 22 - check normal git operations: mixed mode, commit 8 vs merge 1(B[m
ok 15 - shared: ignore unique objects and all two packs are redundant(B[m
ok 9 - all hook stdin is /dev/null(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 10 - all *-receive hook args are empty(B[m
ok 11 - send-pack produced no output(B[m
*** t5404-tracking-branches.sh ***
ok 1 - setup(B[m
ok 12 - send-pack stderr contains hook messages(B[m
ok 2 - post-merge does not run for up-to-date (B[m
ok 3 - post-merge runs as expected (B[m
ok 1 - setup(B[m
ok 4 - post-merge from normal merge receives the right argument (B[m
ok 2 - post-checkout receives the right arguments with HEAD unchanged (B[m
ok 23 - check normal git operations: mixed mode, commit 8 vs merge 2(B[m
ok 5 - post-merge from squash merge runs as expected (B[m
ok 6 - post-merge from squash merge receives the right argument (B[m
ok 3 - post-checkout args are correct with git checkout -b (B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t5405-send-pack-rewind.sh ***
ok 24 - write graph with new commit(B[m
ok 4 - post-checkout receives the right args with HEAD changed (B[m
ok 5 - post-checkout receives the right args when not switching branches (B[m
ok 1 - setup(B[m
ok 6 - post-checkout is triggered on rebase(B[m
ok 13 - apply_index: modified submodule does not update submodule work tree from invalid commit(B[m
ok 25 - check normal git operations: full graph, commit 8 vs merge 1(B[m
ok 4 - add more commits, and write a new base graph(B[m
ok 7 - post-checkout is triggered on rebase with fast-forward(B[m
ok 2 - prepare pushable branches(B[m
ok 8 - post-checkout hook is triggered by clone(B[m
ok 1 - setup(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
*** t5406-remote-rejects.sh ***
ok 2 - non forced push should die not segfault(B[m
ok 26 - check normal git operations: full graph, commit 8 vs merge 2(B[m
ok 5 - fork and fail to base a chain on a commit-graph file(B[m
ok 3 - mixed-success push returns error(B[m
ok 3 - forced push should succeed(B[m
ok 4 - check tracking branches updated correctly after push(B[m
[33mnot ok 9 - am: replace submodule with a file must fail # TODO known breakage(B[m
ok 27 - write graph with nothing new(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t5407-post-rewrite-hook.sh ***
ok 5 - check tracking branches not updated for failed refs(B[m
ok 6 - deleted branches have their tracking branches removed(B[m
ok 6 - add three more commits, write a tip graph(B[m
ok 7 - already deleted tracking branches ignored(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 1 - setup(B[m
ok 14 - apply_index: added submodule doesn't remove untracked unignored file with same name(B[m
ok 28 - check normal git operations: cleared graph, commit 8 vs merge 1(B[m
*** t5408-send-pack-stdin.sh ***
ok 2 - push reports error(B[m
ok 3 - individual ref reports error(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 7 - check normal git operations: split commit-graph: merge 3 vs 2(B[m
*** t5409-colorize-remote-messages.sh ***
ok 29 - check normal git operations: cleared graph, commit 8 vs merge 2(B[m
ok 8 - add one commit, write a tip graph(B[m
ok 30 - build graph from latest pack with closure(B[m
ok 1 - setup(B[m
ok 1 - setup refs(B[m
ok 1 - setup(B[m
ok 9 - check normal git operations: three-layer commit-graph: commit 11 vs 6(B[m
ok 2 - git commit --amend(B[m
ok 31 - check normal git operations: graph from pack, commit 8 vs merge 1(B[m
ok 3 - git commit --amend --no-post-rewrite(B[m
ok 2 - keywords(B[m
ok 10 - add one commit, write a merged graph(B[m
ok 32 - check normal git operations: graph from pack, commit 8 vs merge 2(B[m
ok 2 - refs on cmdline(B[m
ok 3 - whole words at line start(B[m
[33mnot ok 10 - am: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 4 - git rebase --apply(B[m
ok 33 - build graph from commits with closure(B[m
ok 11 - check normal git operations: merged commit-graph: commit 12 vs 6(B[m
ok 4 - short line(B[m
ok 5 - case-insensitive(B[m
ok 3 - refs over stdin(B[m
ok 34 - check normal git operations: graph from commits, commit 8 vs merge 1(B[m
ok 6 - leading space(B[m
ok 5 - git rebase --apply --skip(B[m
ok 14 - add more packs(B[m
ok 7 - spaces only(B[m
ok 15 - apply_3way: added submodule creates empty directory(B[m
ok 4 - stdin lines are full refspecs(B[m
ok 12 - create fork and chain across alternate(B[m
ok 35 - check normal git operations: graph from commits, commit 8 vs merge 2(B[m
ok 8 - no coloring for redirected output(B[m
ok 36 - build graph from commits with append(B[m
ok 6 - git rebase --apply --skip the last one(B[m
ok 5 - stdin mixed with cmdline(B[m
ok 13 - check normal git operations: alternate: commit 13 vs 6(B[m
ok 9 - push with customized color(B[m
ok 15 - check normal git operations: mixed mode (two packs + extra)(B[m
ok 6 - cmdline refs written in order(B[m
ok 16 - write midx with twelve packs(B[m
ok 10 - error in customized color(B[m
ok 37 - check normal git operations: append graph, commit 8 vs merge 1(B[m
ok 7 - git rebase -m(B[m
ok 11 - fallback to color.ui(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 7 - --stdin refs come after cmdline(B[m
*** t5410-receive-pack-alternates.sh ***
ok 8 - refspecs and --mirror do not mix (cmdline)(B[m
ok 1 - setup(B[m
ok 38 - check normal git operations: append graph, commit 8 vs merge 2(B[m
ok 9 - refspecs and --mirror do not mix (stdin)(B[m
ok 8 - git rebase -m --skip(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 39 - build graph using --reachable(B[m
*** t5500-fetch-pack.sh ***
ok 17 - check normal git operations: twelve packs(B[m
ok 18 - verify multi-pack-index success(B[m
ok 19 - verify progress off for redirected stderr(B[m
ok 20 - verify force progress on for stderr(B[m
ok 21 - verify with the --no-progress option(B[m
ok 9 - git rebase with implicit use of merge backend(B[m
ok 40 - check normal git operations: append graph, commit 8 vs merge 1(B[m
ok 2 - pack-objects with index version 1(B[m
ok 22 - verify bad signature(B[m
ok 1 - setup(B[m
ok 11 - am: modified submodule does not update submodule work tree(B[m
ok 23 - verify bad version(B[m
ok 2 - with core.alternateRefsCommand(B[m
ok 24 - verify bad OID version(B[m
ok 14 - test merge stragety constants(B[m
ok 41 - check normal git operations: append graph, commit 8 vs merge 2(B[m
ok 25 - verify truncated chunk count(B[m
ok 10 - git rebase --skip with implicit use of merge backend(B[m
ok 3 - with core.alternateRefsPrefixes(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t5501-fetch-push-alternates.sh ***
ok 42 - setup bare repo(B[m
ok 26 - verify extended chunk count(B[m
ok 15 - remove commit-graph-chain file after flattening(B[m
ok 3 - pack-objects with index version 2(B[m
ok 4 - both packs should be identical(B[m
ok 5 - index v1 and index v2 should be different(B[m
ok 16 - apply_3way: added submodule leaves existing empty directory alone(B[m
ok 27 - verify missing required chunk(B[m
ok 6 - index-pack with index version 1(B[m
ok 28 - verify invalid chunk offset(B[m
ok 16 - verify hashes along chain, even in shallow(B[m
ok 43 - check normal git operations: bare repo, commit 8 vs merge 1(B[m
ok 29 - verify packnames out of order(B[m
ok 7 - index-pack with index version 2(B[m
ok 11 - git rebase -i (unchanged)(B[m
ok 8 - index-pack results should match pack-objects ones(B[m
ok 30 - verify packnames out of order(B[m
ok 9 - index-pack --verify on index version 1(B[m
ok 31 - verify oid fanout out of order(B[m
ok 17 - verify --shallow does not check base contents(B[m
ok 44 - check normal git operations: bare repo, commit 8 vs merge 2(B[m
ok 10 - index-pack --verify on index version 2(B[m
ok 32 - verify oid lookup out of order(B[m
ok 11 - pack-objects --index-version=2, is not accepted(B[m
ok 45 - write graph in bare repo(B[m
ok 33 - verify incorrect pack-int-id(B[m
ok 12 - git rebase -i (skip)(B[m
ok 1 - setup(B[m
ok 34 - verify incorrect offset(B[m
ok 18 - warn on base graph chunk incorrect(B[m
ok 46 - check normal git operations: bare repo with graph, commit 8 vs merge 1(B[m
ok 12 - index v2: force some 64-bit offsets with pack-objects(B[m
ok 35 - git-fsck incorrect offset(B[m
ok 19 - verify after commit-graph-chain corruption(B[m
ok 36 - repack progress off for redirected stderr(B[m
ok 2 - 1st pull(B[m
ok 37 - repack force progress on for stderr(B[m
ok 13 - index v2: verify a pack with some 64-bit offsets(B[m
ok 13 - git rebase -i (squash)(B[m
ok 14 - 64-bit offsets: should be different from previous index v2 results(B[m
ok 47 - check normal git operations: bare repo with graph, commit 8 vs merge 2(B[m
ok 38 - repack with the --no-progress option(B[m
ok 15 - index v2: force some 64-bit offsets with index-pack(B[m
ok 48 - perform fast-forward merge in full repo(B[m
ok 16 - 64-bit offsets: index-pack result should match pack-objects one(B[m
ok 39 - repack removes multi-pack-index(B[m
ok 20 - verify across alternates(B[m
ok 17 - index-pack --verify on 64-bit offset v2 (cheat)(B[m
ok 14 - git rebase -i (fixup without conflict)(B[m
ok 18 - index-pack --verify on 64-bit offset v2(B[m
ok 12 - am: modified submodule does not update submodule work tree to invalid commit(B[m
ok 17 - apply_3way: replace tracked file with submodule creates empty directory(B[m
ok 40 - check normal git operations: after repack(B[m
ok 49 - check that gc computes commit-graph(B[m
ok 19 - [index v1] 1) stream pack to repository(B[m
ok 41 - multi-pack-index and pack-bitmap(B[m
ok 15 - git rebase -i (double edit)(B[m
ok 21 - add octopus merge(B[m
ok 20 - [index v1] 2) create a stealth corruption in a delta base reference(B[m
ok 21 - [index v1] 3) corrupted delta happily returned wrong data(B[m
ok 42 - multi-pack-index and alternates(B[m
ok 22 - [index v1] 4) confirm that the pack is actually corrupted(B[m
ok 50 - replace-objects invalidates commit-graph(B[m
ok 23 - [index v1] 5) pack-objects happily reuses corrupted data(B[m
ok 24 - [index v1] 6) newly created pack is BAD !(B[m
ok 22 - check normal git operations: graph exists(B[m
ok 16 - git rebase -i (exec)(B[m
ok 25 - [index v2] 1) stream pack to repository(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 51 - commit grafts invalidate commit-graph(B[m
*** t5503-tagfollow.sh ***
ok 26 - [index v2] 2) create a stealth corruption in a delta base reference(B[m
ok 43 - check normal git operations: with alternate (local midx)(B[m
ok 27 - [index v2] 3) corrupted delta happily returned wrong data(B[m
ok 23 - split across alternate where alternate is not split(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
ok 28 - [index v2] 4) confirm that the pack is actually corrupted(B[m
ok 52 - replace-objects invalidates commit-graph(B[m
ok 29 - [index v2] 5) pack-objects refuses to reuse corrupted data(B[m
ok 44 - multi-pack-index in an alternate(B[m
ok 53 - git commit-graph verify(B[m
*** t5504-fetch-receive-strict.sh ***
ok 1 - setup(B[m
ok 2 - setup expect(B[m
ok 54 - detect permission problem(B[m
ok 3 - fetch A (new commit : 1 connection)(B[m
ok 13 - am: modified submodule does not update submodule work tree from invalid commit(B[m
ok 55 - detect too small(B[m
ok 4 - create tag T on A, create C on branch cat(B[m
ok 45 - check normal git operations: with alternate (remote midx)(B[m
ok 5 - setup expect(B[m
ok 18 - apply_3way: replace directory with submodule(B[m
ok 56 - detect bad signature(B[m
ok 6 - fetch C, T (new branch, tag : 1 connection)(B[m
ok 1 - setup and inject "corrupt or missing" object(B[m
ok 57 - detect bad version(B[m
ok 7 - create commits O, B, tag S on B(B[m
ok 8 - setup expect(B[m
ok 2 - fetch without strict(B[m
ok 58 - detect bad hash version(B[m
ok 14 - am: added submodule doesn't remove untracked unignored file with same name(B[m
ok 9 - fetch B, S (commit and tag : 1 connection)(B[m
ok 3 - fetch with !fetch.fsckobjects(B[m
ok 10 - setup expect(B[m
ok 59 - detect low chunk count(B[m
ok 4 - fetch with fetch.fsckobjects(B[m
ok 60 - detect missing OID fanout chunk(B[m
ok 5 - fetch with transfer.fsckobjects(B[m
ok 11 - new clone fetch master and tags(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 61 - detect missing OID lookup chunk(B[m
*** t5505-remote.sh ***
ok 6 - push without strict(B[m
ok 62 - detect missing commit data chunk(B[m
ok 19 - apply_3way: removed submodule leaves submodule directory and its contents in place(B[m
ok 7 - push with !receive.fsckobjects(B[m
ok 63 - detect incorrect fanout(B[m
ok 8 - push with receive.fsckobjects(B[m
ok 46 - force some 64-bit offsets with pack-objects(B[m
ok 64 - detect incorrect fanout final value(B[m
ok 47 - verify multi-pack-index with 64-bit offsets(B[m
ok 9 - push with transfer.fsckobjects(B[m
ok 1 - setup(B[m
ok 48 - verify incorrect 64-bit offset(B[m
ok 10 - repair the "corrupt or missing" object(B[m
ok 2 - add remote whose URL agrees with url.<...>.insteadOf(B[m
ok 65 - detect incorrect OID order(B[m
ok 11 - setup bogus commit(B[m
ok 12 - fsck with no skipList input(B[m
ok 13 - setup sorted and unsorted skipLists(B[m
ok 66 - detect OID not in object database(B[m
ok 14 - fsck with sorted skipList(B[m
ok 15 - fsck with unsorted skipList(B[m
ok 3 - remote information for the origin(B[m
ok 15 - am_3way: added submodule creates empty directory(B[m
ok 16 - fsck with invalid or bogus skipList input(B[m
ok 67 - detect incorrect tree OID(B[m
ok 17 - fsck with other accepted skipList input (comments & empty lines)(B[m
ok 18 - fsck no garbage output from comments & empty lines errors(B[m
ok 68 - detect incorrect parent int-id(B[m
ok 4 - add another remote(B[m
ok 19 - fsck with invalid abbreviated skipList input(B[m
ok 20 - fsck with exhaustive accepted skipList input (various types of comments etc.)(B[m
ok 69 - detect extra parent int-id(B[m
ok 5 - check remote-tracking(B[m
ok 6 - remote forces tracking branches(B[m
ok 20 - apply_3way: removed submodule leaves submodule containing a .git directory alone(B[m
ok 7 - remove remote(B[m
ok 70 - detect wrong parent(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 8 - remove remote(B[m
ok 71 - detect incorrect generation number(B[m
ok 2 - pushing into a repository with the same alternate(B[m
ok 9 - remove remote protects local branches(B[m
ok 72 - detect incorrect generation number(B[m
ok 3 - fetching from a repository with the same alternate(B[m
ok 21 - push with receive.fsck.skipList(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 10 - remove errors out early when deleting non-existent branch(B[m
*** t5506-remote-groups.sh ***
ok 2 - pack the source repository(B[m
ok 73 - detect incorrect commit date(B[m
ok 11 - remove remote with a branch without configured merge(B[m
ok 12 - rename errors out early when deleting non-existent branch(B[m
ok 74 - detect incorrect parent for octopus merge(B[m
ok 13 - add existing foreign_vcs remote(B[m
ok 1 - setup(B[m
ok 3 - pack the destination repository(B[m
ok 75 - detect invalid checksum hash(B[m
ok 49 - setup expire tests(B[m
ok 14 - add existing foreign_vcs remote(B[m
ok 16 - am_3way: added submodule leaves existing empty directory alone(B[m
ok 50 - expire does not remove any packs(B[m
ok 51 - expire progress off for redirected stderr(B[m
ok 22 - fetch with fetch.fsck.skipList(B[m
ok 52 - expire force progress on for stderr(B[m
ok 23 - fsck.<unknownmsg-id> dies(B[m
ok 21 - apply_3way: replace submodule with a directory must fail(B[m
ok 76 - detect incorrect chunk count(B[m
ok 53 - expire with the --no-progress option(B[m
ok 4 - refuse pushing rewound head without --force(B[m
ok 2 - no group updates all(B[m
ok 5 - push can be used to delete a ref(B[m
ok 54 - expire removes unreferenced packs(B[m
ok 77 - git fsck (checks commit-graph)(B[m
ok 3 - nonexistent group produces error(B[m
ok 6 - refuse deleting push with denyDeletes(B[m
ok 15 - show(B[m
ok 55 - repack with minimum size does not alter existing packs(B[m
ok 3 - post 1st pull setup(B[m
ok 7 - cannot override denyDeletes with git -c send-pack(B[m
ok 16 - show -n(B[m
ok 78 - setup non-the_repository tests(B[m
ok 24 - push with receive.fsck.missingEmail=warn(B[m
ok 56 - repack creates a new pack(B[m
ok 8 - override denyDeletes with git -c receive-pack(B[m
ok 79 - parse_commit_in_graph works for non-the_repository(B[m
ok 17 - prune(B[m
ok 57 - expire removes repacked packs(B[m
ok 4 - updating group updates all members (remote update)(B[m
ok 18 - set-head --delete(B[m
ok 9 - denyNonFastforwards trumps --force(B[m
ok 80 - get_commit_tree_in_graph works for non-the_repository(B[m
ok 19 - set-head --auto(B[m
ok 4 - 2nd pull(B[m
ok 20 - set-head --auto has no problem w/multiple HEADs(B[m
ok 81 - corrupt commit-graph write (broken parent)(B[m
ok 5 - updating group updates all members (fetch)(B[m
ok 58 - expire works when adding new packs(B[m
ok 21 - set-head explicit(B[m
ok 25 - fetch with fetch.fsck.missingEmail=warn(B[m
ok 10 - send-pack --all sends all branches(B[m
ok 82 - corrupt commit-graph write (missing tree)(B[m
[32m# passed all 82 test(s)(B[m
[36m1..82(B[m
*** t5507-remote-environment.sh ***
ok 30 - [index v2] 6) verify-pack detects CRC mismatch(B[m
ok 22 - prune --dry-run(B[m
ok 26 - receive.fsck.unterminatedHeader=warn triggers error(B[m
ok 59 - expire respects .keep files(B[m
ok 11 - push --all excludes remote-tracking hierarchy(B[m
ok 5 - 3rd pull(B[m
ok 31 - running index-pack in the object store(B[m
ok 6 - updating group does not update non-members (remote update)(B[m
ok 22 - apply_3way: replace submodule containing a .git directory with a directory must fail(B[m
ok 27 - fetch.fsck.unterminatedHeader=warn triggers error(B[m
ok 17 - am_3way: replace tracked file with submodule creates empty directory(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
*** t5509-fetch-push-namespaces.sh ***
ok 32 - index-pack --strict warns upon missing tagger in tag(B[m
ok 6 - single branch clone(B[m
ok 60 - repack --batch-size=0 repacks everything(B[m
ok 33 - index-pack --fsck-objects also warns upon missing tagger in tag(B[m
[32m# passed all 60 test(s)(B[m
[36m1..60(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 1 - set up "remote" push situation(B[m
ok 2 - set up fake ssh(B[m
ok 7 - single branch object count(B[m
*** t5510-fetch.sh ***
*** t5511-refspec.sh ***
ok 23 - add --mirror && prune(B[m
ok 3 - confirm default push fails(B[m
ok 8 - single given branch clone(B[m
ok 7 - updating group does not update non-members (fetch)(B[m
ok 4 - config does not travel over same-machine push(B[m
ok 1 - setup(B[m
ok 24 - add --mirror=fetch(B[m
ok 9 - clone shallow depth 1(B[m
ok 5 - config does not travel over ssh push(B[m
ok 1 - push  (invalid)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t5513-fetch-track.sh ***
ok 12 - receive-pack runs auto-gc in remote repo(B[m
ok 25 - fetch mirrors act as mirrors during fetch(B[m
ok 2 - push :(B[m
ok 8 - updating remote name updates that remote(B[m
ok 1 - setup(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 10 - clone shallow depth 1 with fsck(B[m
*** t5514-fetch-multiple.sh ***
ok 26 - fetch mirrors can prune(B[m
ok 3 - push :: (invalid)(B[m
ok 11 - clone shallow(B[m
ok 27 - fetch mirrors do not act as mirrors during push(B[m
ok 12 - clone shallow depth count(B[m
ok 4 - push +:(B[m
ok 28 - add fetch mirror with specific branches(B[m
ok 2 - clone and setup child repos(B[m
ok 13 - clone shallow object count(B[m
ok 1 - setup(B[m
ok 14 - clone shallow object count (part 2)(B[m
ok 5 - fetch (B[m
ok 15 - fsck in shallow repo(B[m
ok 29 - fetch mirror respects specific branches(B[m
ok 2 - fetch(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 13 - pushing explicit refspecs respects forcing(B[m
ok 3 - fetch test(B[m
*** t5515-fetch-merge-logic.sh ***
ok 6 - fetch :(B[m
ok 16 - simple fetch in shallow repo(B[m
ok 2 - pushing into a repository using a ref namespace(B[m
[33mnot ok 23 - apply_3way: replace submodule with a file must fail # TODO known breakage(B[m
ok 17 - no changes expected(B[m
ok 30 - add --mirror=push(B[m
ok 7 - fetch :: (invalid)(B[m
ok 18 - fetch same depth in shallow repo(B[m
ok 4 - fetch test for-merge(B[m
ok 3 - pulling from a repository using a ref namespace(B[m
ok 8 - push refs/heads/*:refs/remotes/frotz/*(B[m
ok 19 - no changes expected(B[m
ok 4 - mirroring a repository using a ref namespace(B[m
ok 31 - push mirrors act as mirrors during push(B[m
ok 1 - setup(B[m
ok 9 - push refs/heads/*:refs/remotes/frotz (invalid)(B[m
ok 5 - hide namespaced refs with transfer.hideRefs(B[m
ok 5 - fetch --prune on its own works as expected(B[m
ok 6 - check that transfer.hideRefs does not match unstripped refs(B[m
ok 14 - pushing wildcard refspecs respects forcing(B[m
ok 10 - push refs/heads:refs/remotes/frotz/* (invalid)(B[m
ok 32 - push mirrors do not act as mirrors during fetch(B[m
ok 20 - add two more(B[m
ok 7 - hide full refs with transfer.hideRefs(B[m
ok 18 - am_3way: replace directory with submodule(B[m
ok 33 - push mirrors do not allow you to specify refs(B[m
ok 6 - fetch --prune with a branch name keeps branches(B[m
ok 11 - push refs/heads/master:refs/remotes/frotz/xyzzy(B[m
ok 8 - try to update a hidden ref(B[m
ok 21 - pull in shallow repo(B[m
ok 12 - fetch refs/heads/*:refs/remotes/frotz/*(B[m
ok 2 - git fetch --all(B[m
ok 7 - fetch --prune with a namespace keeps other namespaces(B[m
ok 22 - clone shallow object count(B[m
ok 9 - try to update a ref that is not hidden(B[m
ok 15 - deny pushing to delete current branch(B[m
ok 13 - fetch refs/heads/*:refs/remotes/frotz (invalid)(B[m
ok 10 - try to update a hidden full ref(B[m
ok 14 - fetch refs/heads:refs/remotes/frotz/* (invalid)(B[m
ok 34 - add alt && prune(B[m
ok 23 - add two more (part 2)(B[m
ok 11 - set up ambiguous HEAD(B[m
ok 15 - fetch refs/heads/master:refs/remotes/frotz/xyzzy(B[m
ok 8 - fetch --prune handles overlapping refspecs(B[m
ok 12 - clone chooses correct HEAD (v0)(B[m
ok 24 - deepening pull in shallow repo(B[m
ok 16 - fetch refs/heads/master::refs/remotes/frotz/xyzzy (invalid)(B[m
ok 3 - git fetch --all should continue if a remote has errors(B[m
ok 25 - clone shallow object count(B[m
ok 4 - git fetch --all does not allow non-option arguments(B[m
ok 13 - clone chooses correct HEAD (v2)(B[m
ok 17 - fetch refs/heads/maste :refs/remotes/frotz/xyzzy (invalid)(B[m
ok 16 - receive-pack de-dupes .have lines(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 35 - add with reachable tags (default)(B[m
[33mnot ok 24 - apply_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 9 - fetch --prune --tags prunes branches but not tags(B[m
ok 26 - deepening fetch in shallow repo(B[m
*** t5516-fetch-push.sh ***
ok 18 - push master~1:refs/remotes/frotz/backup(B[m
ok 27 - clone shallow object count(B[m
ok 5 - git fetch --multiple (but only one remote)(B[m
ok 19 - fetch master~1:refs/remotes/frotz/backup (invalid)(B[m
ok 36 - add --tags(B[m
ok 28 - pull in shallow repo with missing merge base(B[m
ok 10 - fetch --prune --tags with branch does not prune other things(B[m
ok 14 - denyCurrentBranch and unborn branch with ref namespace(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 1 - setup(B[m
ok 20 - push HEAD~4:refs/remotes/frotz/new(B[m
*** t5517-push-mirror.sh ***
ok 21 - fetch HEAD~4:refs/remotes/frotz/new (invalid)(B[m
ok 1 - setup(B[m
ok 6 - git fetch --multiple (two remotes)(B[m
ok 19 - am_3way: removed submodule leaves submodule directory and its contents in place(B[m
ok 11 - fetch --prune --tags with refspec prunes based on refspec(B[m
ok 7 - git fetch --multiple (bad remote names)(B[m
ok 37 - add --no-tags(B[m
ok 22 - push HEAD(B[m
ok 38 - reject --no-no-tags(B[m
ok 29 - additional simple shallow deepenings(B[m
ok 2 - fetch without wildcard(B[m
ok 30 - clone shallow depth count(B[m
ok 23 - fetch HEAD(B[m
ok 24 - push refs/heads/ nitfol (invalid)(B[m
ok 39 - update(B[m
ok 31 - clone shallow object count(B[m
ok 12 - --refmap="" ignores configured refspec(B[m
ok 8 - git fetch --all (skipFetchAll)(B[m
ok 32 - fetch --no-shallow on full repo(B[m
ok 2 - br-config-explicit(B[m
ok 25 - fetch refs/heads/ nitfol (invalid)(B[m
ok 3 - fetch with wildcard(B[m
ok 33 - fetch --depth --no-shallow(B[m
ok 1 - push mirror creates new branches(B[m
ok 26 - push HEAD: (invalid)(B[m
ok 13 - --refmap="" and --prune(B[m
ok 27 - fetch HEAD:(B[m
ok 34 - turn shallow to complete repository(B[m
ok 4 - fetch with insteadOf(B[m
ok 28 - push refs/heads/ nitfol: (invalid)(B[m
ok 14 - fetch tags when there is no tags(B[m
ok 9 - git fetch --multiple (ignoring skipFetchAll)(B[m
ok 40 - update with arguments(B[m
ok 35 - clone shallow without --no-single-branch(B[m
ok 29 - fetch refs/heads/ nitfol: (invalid)(B[m
ok 3 - br-config-explicit config-explicit(B[m
ok 36 - clone shallow object count(B[m
ok 2 - push mirror updates existing branches(B[m
ok 5 - fetch with pushInsteadOf (should not rewrite)(B[m
ok 30 - push :refs/remotes/frotz/deleteme(B[m
ok 15 - fetch following tags(B[m
ok 37 - clone shallow with --branch(B[m
ok 10 - git fetch --all --no-tags(B[m
ok 41 - update --prune(B[m
ok 38 - clone shallow object count(B[m
ok 31 - fetch :refs/remotes/frotz/HEAD-to-me(B[m
ok 6 - push without wildcard(B[m
ok 32 - push :refs/remotes/frotz/delete me (invalid)(B[m
ok 25 - apply_3way: modified submodule does not update submodule work tree(B[m
ok 39 - clone shallow with detached HEAD(B[m
ok 4 - br-config-explicit-merge(B[m
ok 33 - fetch :refs/remotes/frotz/HEAD to me (invalid)(B[m
ok 11 - git fetch --all --tags(B[m
ok 7 - push with wildcard(B[m
ok 34 - fetch refs/heads/*/for-linus:refs/remotes/mine/*-blah(B[m
ok 20 - am_3way: removed submodule leaves submodule containing a .git directory alone(B[m
ok 16 - fetch uses remote ref names to describe new refs(B[m
ok 42 - update default(B[m
ok 35 - push refs/heads/*/for-linus:refs/remotes/mine/*-blah(B[m
ok 3 - push mirror force updates existing branches(B[m
ok 12 - parallel(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 40 - shallow clone pulling tags(B[m
ok 17 - fetch must not resolve short tag name(B[m
ok 8 - push with insteadOf(B[m
ok 36 - fetch refs/heads*/for-linus:refs/remotes/mine/*(B[m
*** t5518-fetch-exit-status.sh ***
ok 5 - br-config-explicit-merge config-explicit(B[m
ok 43 - update default (overridden, with funny whitespace)(B[m
ok 18 - fetch can now resolve short remote name(B[m
ok 37 - push refs/heads*/for-linus:refs/remotes/mine/*(B[m
ok 41 - shallow cloning single tag(B[m
ok 19 - create bundle 1(B[m
ok 38 - fetch refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)(B[m
ok 9 - push with pushInsteadOf(B[m
ok 20 - header of bundle looks right(B[m
ok 4 - push mirror removes branches(B[m
ok 21 - create bundle 2(B[m
ok 42 - clone shallow with packed refs(B[m
ok 39 - push refs/heads/*/*/for-linus:refs/remotes/mine/* (invalid)(B[m
ok 44 - update (with remotes.default defined)(B[m
ok 22 - unbundle 1(B[m
ok 1 - setup(B[m
ok 40 - fetch refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)(B[m
ok 2 - non-fast-forward fetch(B[m
ok 23 - bundle 1 has only 3 files (B[m
ok 45 - "remote show" does not show symbolic refs(B[m
ok 6 - br-config-explicit-octopus(B[m
ok 41 - push refs/heads/*g*/for-linus:refs/remotes/mine/* (invalid)(B[m
ok 46 - reject adding remote with an invalid name(B[m
ok 13 - pre-receive hook that forgets to read its input(B[m
ok 3 - forced update(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 24 - unbundle 2(B[m
ok 10 - push with pushInsteadOf and explicit pushurl (pushInsteadOf should not rewrite)(B[m
*** t5519-push-alternates.sh ***
ok 42 - fetch refs/heads/*/for-linus:refs/remotes/mine/*(B[m
ok 43 - push refs/heads/*/for-linus:refs/remotes/mine/*(B[m
ok 25 - bundle does not prerequisite objects(B[m
ok 47 - rename a remote(B[m
ok 26 - bundle should be able to create a full history(B[m
*** t5521-pull-options.sh ***
ok 44 - fetch refs/heads/Ä(B[m
ok 5 - push mirror adds, updates and removes branches together(B[m
ok 7 - br-config-explicit-octopus config-explicit(B[m
[33mnot ok 21 - am_3way: replace submodule with a directory must fail # TODO known breakage(B[m
ok 48 - rename a remote renames repo remote.pushDefault(B[m
ok 45 - fetch refs/heads/	tab (invalid)(B[m
ok 11 - push with matching heads(B[m
[32m# passed all 45 test(s)(B[m
[36m1..45(B[m
ok 43 - fetch in shallow repo unreachable shallow objects(B[m
*** t5522-pull-symlink.sh ***
ok 27 - fetch with a non-applying branch.<name>.merge(B[m
ok 49 - rename a remote renames repo remote.pushDefault but ignores global(B[m
ok 1 - setup(B[m
ok 28 - fetch from GIT URL with a non-applying branch.<name>.merge [1](B[m
ok 1 - setup(B[m
ok 6 - push mirror creates new tags(B[m
ok 26 - apply_3way: modified submodule does not update submodule work tree to invalid commit(B[m
ok 2 - git pull -q(B[m
ok 8 - br-config-glob(B[m
ok 50 - rename a remote renames repo remote.pushDefault but keeps global(B[m
ok 2 - alice works and pushes(B[m
ok 44 - fetch creating new shallow root(B[m
ok 12 - push with matching heads on the command line(B[m
ok 29 - fetch from GIT URL with a non-applying branch.<name>.merge [2](B[m
ok 1 - setup(B[m
ok 51 - rename does not update a non-default fetch refspec(B[m
ok 30 - fetch from GIT URL with a non-applying branch.<name>.merge [3](B[m
ok 3 - git pull -q --rebase(B[m
ok 2 - pulling from real subdir(B[m
ok 31 - quoting of a strangely named repo(B[m
ok 52 - rename a remote with name part of fetch spec(B[m
ok 3 - bob fetches from alice, works and pushes(B[m
ok 4 - clean-up in case the previous failed(B[m
ok 4 - git pull(B[m
ok 32 - bundle should record HEAD correctly(B[m
ok 7 - push mirror updates existing tags(B[m
ok 9 - br-config-glob config-glob(B[m
ok 33 - mark initial state of origin/master(B[m
ok 3 - pulling from symlinked subdir(B[m
ok 53 - rename a remote with name prefix of other remote(B[m
ok 13 - failed (non-fast-forward) push with matching heads(B[m
ok 5 - alice works and pushes again(B[m
ok 5 - git pull --rebase(B[m
ok 45 - setup tests for the --stdin parameter(B[m
ok 54 - rename succeeds with existing remote.<target>.prune(B[m
ok 4 - pushing from symlinked subdir(B[m
ok 34 - explicit fetch should update tracking(B[m
[32m# passed all 4 test(s)(B[m
ok 6 - git pull -v(B[m
[36m1..4(B[m
ok 6 - bob works and pushes(B[m
*** t5523-push-upstream.sh ***
ok 7 - git pull -v --rebase(B[m
[33mnot ok 22 - am_3way: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 55 - remove a remote(B[m
ok 35 - explicit pull should update tracking(B[m
ok 10 - br-config-glob-merge(B[m
ok 36 - explicit --refmap is allowed only with command-line refspec(B[m
ok 7 - alice works and pushes yet again(B[m
ok 46 - setup fetch refs from cmdline v[12](B[m
ok 8 - git pull -v -q(B[m
ok 1 - setup bare parent(B[m
ok 56 - remove a remote removes repo remote.pushDefault(B[m
ok 2 - setup local commit(B[m
ok 14 - push --force with matching heads(B[m
ok 8 - push mirror force updates existing tags(B[m
ok 9 - git pull -q -v(B[m
ok 47 - protocol.version= fetch refs from cmdline(B[m
ok 37 - explicit --refmap option overrides remote.*.fetch(B[m
ok 8 - bob works and pushes again(B[m
ok 10 - git pull --cleanup errors early on invalid argument(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 57 - remove a remote removes repo remote.pushDefault but ignores global(B[m
ok 3 - push -u master:master(B[m
*** t5524-pull-msg.sh ***
ok 48 - protocol.version=0 fetch refs from cmdline(B[m
ok 11 - br-config-glob-merge config-glob(B[m
ok 38 - explicitly empty --refmap option disables remote.*.fetch(B[m
ok 4 - push -u master:other(B[m
ok 58 - remove a remote removes repo remote.pushDefault but keeps global(B[m
ok 49 - protocol.version=1 fetch refs from cmdline(B[m
ok 5 - push -u --dry-run master:otherX(B[m
ok 27 - apply_3way: modified submodule does not update submodule work tree from invalid commit(B[m
ok 9 - push mirror removes tags(B[m
ok 39 - configured fetch updates tracking(B[m
ok 15 - push with matching heads and forced update(B[m
ok 11 - git pull --force(B[m
ok 50 - protocol.version=2 fetch refs from cmdline(B[m
ok 6 - push -u master2:master2(B[m
ok 59 - migrate a remote from named file in $GIT_DIR/remotes(B[m
ok 51 - fetch refs from stdin(B[m
ok 1 - setup(B[m
ok 40 - non-matching refspecs do not confuse tracking update(B[m
ok 7 - push -u master2:other2(B[m
ok 12 - br-config-glob-octopus(B[m
ok 41 - pushing nonexistent branch by mistake should not segv(B[m
ok 12 - git pull --all(B[m
ok 60 - migrate a remote from named file in $GIT_DIR/branches(B[m
ok 8 - push -u :master2(B[m
ok 52 - fetch mixed refs from cmdline and stdin(B[m
ok 2 - pull(B[m
ok 13 - git pull --dry-run(B[m
ok 16 - push with no ambiguity (1)(B[m
ok 61 - migrate a remote from named file in $GIT_DIR/branches (2)(B[m
ok 53 - test duplicate refs from stdin(B[m
[33mnot ok 23 - am_3way: replace submodule with a file must fail # TODO known breakage(B[m
ok 54 - set up tests of missing reference(B[m
ok 9 - push -u --all(B[m
ok 14 - git pull --all --dry-run(B[m
ok 28 - apply_3way: added submodule doesn't remove untracked unignored file with same name(B[m
ok 55 - test lonely missing ref(B[m
ok 3 - --log=1 limits shortlog length(B[m
ok 10 - push mirror adds, updates and removes tags together(B[m
[33m# still have 4 known breakage(s)(B[m
[32m# passed all remaining 24 test(s)(B[m
[36m1..28(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 13 - br-config-glob-octopus config-glob(B[m
*** t5525-fetch-tagopt.sh ***
ok 62 - remote prune to cause a dangling symref(B[m
ok 56 - test missing ref after existing(B[m
*** t5526-fetch-submodules.sh ***
ok 10 - push -u HEAD(B[m
ok 57 - test missing ref before existing(B[m
[34mok 11 # skip progress messages go to tty (missing TTY)(B[m
ok 63 - show empty remote(B[m
ok 17 - push with no ambiguity (2)(B[m
ok 64 - remote set-branches requires a remote(B[m
ok 42 - auto tag following fetches minimum(B[m
ok 58 - test --all, --depth, and explicit head(B[m
ok 43 - refuse to fetch into the current branch(B[m
ok 12 - progress messages do not go to non-tty(B[m
ok 59 - test --all, --depth, and explicit tag(B[m
ok 44 - fetch into the current branch with --update-head-ok(B[m
ok 11 - remote.foo.mirror adds and removes branches(B[m
ok 14 - br-remote-explicit(B[m
ok 13 - progress messages go to non-tty (forced)(B[m
[34mok 14 # skip push -q suppresses progress (missing TTY)(B[m
[34mok 15 # skip push --no-progress suppresses progress (missing TTY)(B[m
[34mok 16 # skip quiet push (missing TTY)(B[m
ok 45 - fetch --dry-run(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
*** t5527-fetch-odd-refs.sh ***
ok 15 - git pull --allow-unrelated-histories(B[m
ok 60 - test --all with tag to non-tip(B[m
ok 1 - setup(B[m
ok 65 - remote set-branches(B[m
ok 2 - fetch with tagopt=--no-tags does not get tag(B[m
ok 46 - should be able to fetch with duplicate refspecs(B[m
ok 18 - push with colon-less refspec, no ambiguity(B[m
ok 12 - remote.foo.mirror=no has no effect(B[m
ok 3 - fetch --tags with tagopt=--no-tags gets tag(B[m
ok 66 - remote set-branches with --mirror(B[m
ok 67 - new remote(B[m
ok 15 - br-remote-explicit remote-explicit(B[m
ok 1 - setup repo with odd suffix ref(B[m
ok 4 - fetch --no-tags with tagopt=--tags does not get tag(B[m
ok 16 - git pull does not add a sign-off line(B[m
ok 13 - push to mirrored repository with refspec fails(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 68 - get-url on new remote(B[m
ok 2 - suffix ref is ignored during fetch(B[m
*** t5528-push-default.sh ***
ok 5 - fetch with tagopt=--tags gets tag(B[m
[33mnot ok 24 - am_3way: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 61 - test --all wrt tag to non-commits(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 69 - remote set-url with locked config(B[m
*** t5529-push-errors.sh ***
ok 70 - remote set-url bar(B[m
ok 71 - remote set-url baz bar(B[m
ok 3 - try to create repo with absurdly long refname(B[m
ok 72 - remote set-url zot bar(B[m
ok 16 - br-remote-explicit-merge(B[m
ok 19 - push with weak ambiguity (1)(B[m
ok 17 - git pull --no-signoff does not add sign-off line(B[m
ok 73 - remote set-url --push zot baz(B[m
ok 1 - setup commits(B[m
ok 47 - LHS of refspec follows ref disambiguation rules(B[m
ok 74 - remote set-url --push zot(B[m
ok 2 - setup remote(B[m
ok 4 - fetch handles extremely long refname(B[m
ok 3 - setup fake receive-pack(B[m
ok 4 - detect missing branches early(B[m
ok 75 - get-url with different urls(B[m
ok 62 - shallow fetch with tags does not break the repository(B[m
ok 1 - setup bare remotes(B[m
ok 5 - push handles extremely long refname(B[m
ok 5 - detect missing sha1 expressions early(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 76 - remote set-url --push qux zot(B[m
ok 48 - fetch.writeCommitGraph(B[m
ok 6 - detect ambiguous refs early(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t5530-upload-pack-error.sh ***
*** t5531-deep-submodule-push.sh ***
ok 17 - br-remote-explicit-merge remote-explicit(B[m
ok 77 - remote set-url --push foo qu+x(B[m
ok 18 - git pull --signoff add a sign-off line(B[m
ok 78 - remote set-url --push --add aaa(B[m
ok 79 - get-url on multi push remote(B[m
ok 2 - "upstream" pushes to configured upstream(B[m
ok 63 - fetch-pack can fetch a raw sha1(B[m
ok 80 - remote set-url --push bar aaa(B[m
ok 20 - push with weak ambiguity (2)(B[m
ok 81 - remote set-url --push --delete bar(B[m
ok 1 - setup(B[m
ok 3 - "upstream" does not push on unconfigured remote(B[m
ok 82 - remote set-url --push --delete foo(B[m
ok 18 - br-remote-explicit-octopus(B[m
ok 19 - git pull --no-signoff flag cancels --signoff flag(B[m
ok 1 - setup(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 83 - remote set-url --add bbb(B[m
ok 64 - fetch-pack can fetch a raw sha1 that is advertised as a ref(B[m
ok 84 - get-url on multi fetch remote(B[m
ok 2 - push works with recorded gitlink(B[m
*** t5532-fetch-proxy.sh ***
ok 4 - "upstream" does not push on unconfigured branch(B[m
ok 1 - setup and corrupt repository(B[m
ok 85 - remote set-url --delete .*(B[m
ok 49 - fetch.writeCommitGraph with submodules(B[m
ok 2 - fsck fails(B[m
ok 50 - setup cmdline_setup variable for subsequent test(B[m
ok 86 - remote set-url --delete bbb(B[m
ok 3 - upload-pack fails due to error in pack-objects packing(B[m
ok 87 - remote set-url --delete baz(B[m
ok 3 - push if submodule has no remote(B[m
ok 2 - fetch --recurse-submodules recurses into submodules(B[m
ok 21 - push with ambiguity(B[m
ok 5 - "upstream" does not push when remotes do not match(B[m
ok 4 - corrupt repo differently(B[m
ok 88 - remote set-url --add ccc(B[m
ok 1 - setup remote repo(B[m
ok 19 - br-remote-explicit-octopus remote-explicit(B[m
ok 65 - fetch-pack can fetch a raw sha1 overlapping a named ref(B[m
ok 5 - fsck fails(B[m
ok 2 - setup proxy script(B[m
ok 89 - remote set-url --delete baz(B[m
ok 3 - setup local repo(B[m
ok 90 - extra args: setup(B[m
ok 25 - am_3way: modified submodule does not update submodule work tree(B[m
ok 6 - upload-pack fails due to error in rev-list(B[m
ok 91 - extra args: add nick url(B[m
ok 6 - push from/to new branch with upstream, matching and simple(B[m
ok 92 - extra args: rename origin newname(B[m
ok 7 - upload-pack fails due to bad want (no object)(B[m
ok 93 - extra args: remove origin(B[m
ok 4 - fetch through proxy works(B[m
ok 8 - upload-pack fails due to bad want (not tip)(B[m
ok 94 - extra args: set-head origin master(B[m
ok 5 - funny hostnames are rejected before running proxy(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 4 - push fails if submodule commit not on remote(B[m
ok 95 - extra args: get-url origin newurl(B[m
*** t5533-push-cas.sh ***
ok 51 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 9 - upload-pack fails due to error in pack-objects enumeration(B[m
ok 66 - fetch-pack cannot fetch a raw sha1 that is not advertised as a ref(B[m
ok 96 - extra args: set-url origin newurl oldurl(B[m
ok 3 - submodule.recurse option triggers recursive fetch(B[m
ok 10 - create empty repository(B[m
ok 97 - add remote matching the "insteadOf" URL(B[m
ok 67 - fetch-pack --diag-url ssh+git://host/repo(B[m
ok 20 - br-remote-glob(B[m
ok 11 - fetch fails(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 68 - fetch-pack --diag-url ssh+git://host/~repo(B[m
*** t5534-push-signed.sh ***
ok 22 - push with colon-less refspec (1)(B[m
ok 5 - push succeeds after commit was pushed to remote(B[m
ok 69 - fetch-pack --diag-url ssh+git://host:/repo(B[m
ok 70 - fetch-pack --diag-url ssh+git://host:/~repo(B[m
ok 7 - push ambiguously named branch with upstream, matching and simple(B[m
ok 71 - fetch-pack --diag-url ssh+git://user@host/repo(B[m
ok 1 - setup(B[m
ok 52 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 72 - fetch-pack --diag-url ssh+git://user@host/~repo(B[m
ok 4 - fetch --recurse-submodules -j2 has the same output behaviour(B[m
ok 73 - fetch-pack --diag-url ssh+git://user@host:/repo(B[m
ok 21 - br-remote-glob remote-glob(B[m
ok 8 - push from/to new branch with current creates remote branch(B[m
ok 74 - fetch-pack --diag-url ssh+git://user@host:/~repo(B[m
ok 98 - unqualified <dst> refspec DWIM and advice(B[m
ok 6 - push succeeds if submodule commit not on remote but using on-demand on command line(B[m
ok 75 - fetch-pack --diag-url ssh+git://user@[::1]/repo(B[m
ok 9 - push to existing branch, with no upstream configured(B[m
ok 5 - fetch alone only fetches superproject(B[m
ok 76 - fetch-pack --diag-url ssh+git://user@[::1]/~repo(B[m
ok 23 - push with colon-less refspec (2)(B[m
ok 77 - fetch-pack --diag-url ssh+git://user@[::1]:/repo(B[m
ok 2 - push to update (protected)(B[m
ok 6 - fetch --no-recurse-submodules only fetches superproject(B[m
ok 53 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 78 - fetch-pack --diag-url ssh+git://user@[::1]:/~repo(B[m
ok 22 - br-remote-glob-merge(B[m
ok 79 - fetch-pack --diag-url ssh+git://user@::1/repo(B[m
ok 99 - refs/remotes/* <src> refspec and unqualified <dst> DWIM and advice(B[m
[32m# passed all 99 test(s)(B[m
[36m1..99(B[m
ok 80 - fetch-pack --diag-url ssh+git://user@::1/~repo(B[m
ok 7 - using fetchRecurseSubmodules=true in .gitmodules recurses into submodules(B[m
ok 7 - push succeeds if submodule commit not on remote but using on-demand from config(B[m
ok 81 - fetch-pack --diag-url ssh+git://user@::1:/repo(B[m
ok 24 - push with colon-less refspec (3)(B[m
ok 82 - fetch-pack --diag-url ssh+git://user@::1:/~repo(B[m
ok 83 - fetch-pack --diag-url ssh+git://host:22/repo(B[m
ok 10 - push to existing branch, upstream configured with same name(B[m
ok 84 - fetch-pack --diag-url ssh+git://User@host:22/repo(B[m
*** t5535-fetch-push-symref.sh ***
ok 54 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 3 - push to update (protected, forced)(B[m
ok 8 - --no-recurse-submodules overrides .gitmodules config(B[m
ok 23 - br-remote-glob-merge remote-glob(B[m
ok 85 - fetch-pack --diag-url ssh+git://User@[::1]:22/repo(B[m
ok 25 - push with colon-less refspec (4)(B[m
ok 26 - am_3way: modified submodule does not update submodule work tree to invalid commit(B[m
ok 9 - using fetchRecurseSubmodules=false in .git/config overrides setting in .gitmodules(B[m
ok 86 - fetch-pack --diag-url git+ssh://host/repo(B[m
ok 87 - fetch-pack --diag-url git+ssh://host/~repo(B[m
ok 8 - push succeeds if submodule commit not on remote but using auto-on-demand via submodule.recurse config(B[m
ok 88 - fetch-pack --diag-url git+ssh://host:/repo(B[m
ok 89 - fetch-pack --diag-url git+ssh://host:/~repo(B[m
ok 26 - push head with non-existent, incomplete dest(B[m
ok 10 - --recurse-submodules overrides fetchRecurseSubmodules setting from .git/config(B[m
ok 90 - fetch-pack --diag-url git+ssh://user@host/repo(B[m
ok 55 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 24 - br-remote-glob-octopus(B[m
ok 91 - fetch-pack --diag-url git+ssh://user@host/~repo(B[m
ok 11 - push to existing branch, upstream configured with different name(B[m
ok 92 - fetch-pack --diag-url git+ssh://user@host:/repo(B[m
ok 11 - --quiet propagates to submodules(B[m
ok 1 - setup(B[m
ok 4 - push to update (protected, tracking)(B[m
ok 93 - fetch-pack --diag-url git+ssh://user@host:/~repo(B[m
ok 27 - push tag with non-existent, incomplete dest(B[m
ok 94 - fetch-pack --diag-url git+ssh://user@[::1]/repo(B[m
ok 95 - fetch-pack --diag-url git+ssh://user@[::1]/~repo(B[m
ok 12 - --quiet propagates to parallel submodules(B[m
ok 2 - push(B[m
ok 28 - push sha1 with non-existent, incomplete dest(B[m
ok 96 - fetch-pack --diag-url git+ssh://user@[::1]:/repo(B[m
ok 25 - br-remote-glob-octopus remote-glob(B[m
ok 12 - push.default = current success in central workflows(B[m
ok 56 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 97 - fetch-pack --diag-url git+ssh://user@[::1]:/~repo(B[m
ok 98 - fetch-pack --diag-url git+ssh://user@::1/repo(B[m
ok 29 - push ref expression with non-existent, incomplete dest(B[m
ok 3 - fetch(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 99 - fetch-pack --diag-url git+ssh://user@::1/~repo(B[m
*** t5536-fetch-conflicts.sh ***
ok 100 - fetch-pack --diag-url git+ssh://user@::1:/repo(B[m
ok 9 - push recurse-submodules on command line overrides config(B[m
ok 13 - push.default = upstream success in central workflows(B[m
ok 101 - fetch-pack --diag-url git+ssh://user@::1:/~repo(B[m
ok 13 - --dry-run propagates to submodules(B[m
ok 5 - push to update (protected, tracking, forced)(B[m
ok 26 - br-branches-default(B[m
ok 102 - fetch-pack --diag-url git+ssh://host:22/repo(B[m
ok 103 - fetch-pack --diag-url git+ssh://User@host:22/repo(B[m
ok 57 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
ok 30 - push with HEAD(B[m
ok 104 - fetch-pack --diag-url git+ssh://User@[::1]:22/repo(B[m
ok 1 - setup(B[m
ok 14 - Without --dry-run propagates to submodules(B[m
ok 14 - push.default = simple failure in central workflows(B[m
ok 105 - fetch-pack --diag-url git://host/repo(B[m
ok 27 - am_3way: modified submodule does not update submodule work tree from invalid commit(B[m
ok 106 - fetch-pack --diag-url git://host/~repo(B[m
ok 2 - fetch with no conflict(B[m
ok 27 - br-branches-default branches-default(B[m
ok 107 - fetch-pack --diag-url git://host:/repo(B[m
ok 108 - fetch-pack --diag-url git://host:/~repo(B[m
ok 6 - push to update (allowed)(B[m
ok 3 - fetch conflict: config vs. config(B[m
ok 15 - push.default = matching success in central workflows(B[m
ok 109 - fetch-pack --diag-url git://user@host/repo(B[m
ok 31 - push with HEAD nonexisting at remote(B[m
ok 110 - fetch-pack --diag-url git://user@host/~repo(B[m
ok 58 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
ok 15 - recurseSubmodules=true propagates into submodules(B[m
ok 111 - fetch-pack --diag-url git://user@host:/repo(B[m
ok 10 - push recurse-submodules last one wins on command line(B[m
ok 4 - fetch duplicate: config vs. config(B[m
ok 28 - br-branches-default-merge(B[m
ok 112 - fetch-pack --diag-url git://user@host:/~repo(B[m
ok 113 - fetch-pack --diag-url git://user@[::1]/repo(B[m
ok 5 - fetch conflict: arg overrides config(B[m
ok 114 - fetch-pack --diag-url git://user@[::1]/~repo(B[m
ok 16 - push.default = current success in triangular workflows(B[m
ok 28 - am_3way: added submodule doesn't remove untracked unignored file with same name(B[m
ok 115 - fetch-pack --diag-url git://user@[::1]:/repo(B[m
ok 7 - push to update (allowed, tracking)(B[m
ok 6 - fetch conflict: arg vs. arg(B[m
ok 116 - fetch-pack --diag-url git://user@[::1]:/~repo(B[m
ok 59 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
ok 29 - br-branches-default-merge branches-default(B[m
ok 16 - --recurse-submodules overrides config in submodule(B[m
ok 117 - fetch-pack --diag-url git://user@::1/repo(B[m
ok 11 - push succeeds if submodule commit not on remote using on-demand from cmdline overriding config(B[m
ok 17 - push.default = upstream failure in triangular workflows(B[m
ok 118 - fetch-pack --diag-url git://user@::1/~repo(B[m
ok 7 - fetch conflict: criss-cross args(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 119 - fetch-pack --diag-url git://user@::1:/repo(B[m
*** t5537-fetch-shallow.sh ***
ok 32 - push with +HEAD(B[m
ok 120 - fetch-pack --diag-url git://user@::1:/~repo(B[m
ok 121 - fetch-pack --diag-url git://host:22/repo(B[m
ok 17 - --no-recurse-submodules overrides config setting(B[m
ok 30 - br-branches-default-octopus(B[m
ok 122 - fetch-pack --diag-url git://User@host:22/repo(B[m
ok 18 - push.default = simple success in triangular workflows(B[m
ok 18 - Recursion doesn't happen when no new commits are fetched in the superproject(B[m
ok 8 - push to update (allowed even though no-ff)(B[m
ok 123 - fetch-pack --diag-url git://User@[::1]:22/repo(B[m
ok 60 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
ok 33 - push HEAD with non-existent, incomplete dest(B[m
ok 124 - fetch-pack --diag-url ssh://host/repo(B[m
ok 12 - push succeeds if submodule commit disabling recursion from cmdline overriding config(B[m
ok 125 - fetch-pack --diag-url ssh://host/~repo(B[m
ok 1 - setup(B[m
ok 126 - fetch-pack --diag-url ssh://host:/repo(B[m
ok 19 - Recursion stops when no new submodule commits are fetched(B[m
ok 31 - br-branches-default-octopus branches-default(B[m
ok 127 - fetch-pack --diag-url ssh://host:/~repo(B[m
ok 19 - push.default = matching success in triangular workflows(B[m
ok 2 - setup shallow clone(B[m
ok 9 - push to delete (protected)(B[m
ok 128 - fetch-pack --diag-url ssh://user@host/repo(B[m
ok 129 - fetch-pack --diag-url ssh://user@host/~repo(B[m
ok 61 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 3 - clone from shallow clone(B[m
ok 130 - fetch-pack --diag-url ssh://user@host:/repo(B[m
ok 29 - setup diff.submodule(B[m
ok 131 - fetch-pack --diag-url ssh://user@host:/~repo(B[m
ok 13 - push succeeds if submodule commit disabling recursion from cmdline (alternative form) overriding config(B[m
ok 32 - br-branches-one(B[m
ok 20 - Recursion doesn't happen when new superproject commits don't change any submodules(B[m
ok 132 - fetch-pack --diag-url ssh://user@[::1]/repo(B[m
ok 20 - default behavior allows "simple" push(B[m
ok 10 - push to delete (protected, forced)(B[m
ok 34 - push with config remote.*.push = HEAD(B[m
ok 4 - fetch from shallow clone(B[m
ok 133 - fetch-pack --diag-url ssh://user@[::1]/~repo(B[m
ok 134 - fetch-pack --diag-url ssh://user@[::1]:/repo(B[m
ok 14 - submodule entry pointing at a tag is error(B[m
ok 135 - fetch-pack --diag-url ssh://user@[::1]:/~repo(B[m
ok 21 - default behavior rejects non-simple push(B[m
ok 5 - fetch --depth from shallow clone(B[m
ok 62 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 136 - fetch-pack --diag-url ssh://user@::1/repo(B[m
ok 33 - br-branches-one branches-one(B[m
ok 137 - fetch-pack --diag-url ssh://user@::1/~repo(B[m
ok 11 - push to delete (allowed)(B[m
ok 138 - fetch-pack --diag-url ssh://user@::1:/repo(B[m
ok 6 - fetch --unshallow from shallow clone(B[m
ok 139 - fetch-pack --diag-url ssh://user@::1:/~repo(B[m
ok 15 - push fails if recurse submodules option passed as yes(B[m
ok 140 - fetch-pack --diag-url ssh://host:22/repo(B[m
ok 22 - default triangular behavior acts like "current"(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 141 - fetch-pack --diag-url ssh://User@host:22/repo(B[m
ok 34 - br-branches-one-merge(B[m
*** t5538-push-shallow.sh ***
ok 142 - fetch-pack --diag-url ssh://User@[::1]:22/repo(B[m
ok 7 - fetch something upstream has but hidden by clients shallow boundaries(B[m
ok 63 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 12 - cover everything with default force-with-lease (protected)(B[m
ok 21 - Recursion picks up config in submodule(B[m
ok 143 - fetch-pack --diag-url file://User@[::1]/repo(B[m
ok 30 - diff.submodule unset(B[m
[34mok 144 # skip fetch-pack --diag-url file://User@[::1]/repo (missing MINGW)(B[m
[34mok 145 # skip fetch-pack --diag-url file:///repo (missing MINGW)(B[m
ok 35 - push with remote.pushdefault(B[m
ok 146 - fetch-pack --diag-url file://User@[::1]/~repo(B[m
[34mok 147 # skip fetch-pack --diag-url file://User@[::1]/~repo (missing MINGW)(B[m
ok 16 - push fails when commit on multiple branches if one branch has no remote(B[m
ok 148 - fetch-pack --diag-url ./nohost:repo(B[m
ok 149 - fetch-pack --diag-url ./file:nohost/~repo(B[m
ok 8 - fetch that requires changes in .git/shallow is filtered(B[m
ok 150 - fetch-pack --diag-url ./nohost:12:repo(B[m
ok 35 - br-branches-one-merge branches-one(B[m
ok 151 - fetch-pack --diag-url ./file:nohost:12/~repo(B[m
ok 152 - fetch-pack --diag-url ./[::1]:repo(B[m
ok 17 - push succeeds if submodule has no remote and is on the first superproject commit(B[m
ok 153 - fetch-pack --diag-url ./file:[::1]/~repo(B[m
ok 64 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 13 - cover everything with default force-with-lease (allowed)(B[m
ok 154 - fetch-pack --diag-url ./[::1]:23:repo(B[m
ok 155 - fetch-pack --diag-url ./file:[::1]:23/~repo(B[m
ok 36 - push with config remote.*.pushurl(B[m
ok 9 - fetch --update-shallow(B[m
ok 156 - fetch-pack --diag-url ./[:repo(B[m
ok 157 - fetch-pack --diag-url ./file:[/~repo(B[m
ok 36 - br-branches-one-octopus(B[m
ok 158 - fetch-pack --diag-url ./[:aa:repo(B[m
ok 159 - fetch-pack --diag-url ./file:[:aa/~repo(B[m
ok 31 - diff.submodule unset with extra file(B[m
ok 22 - Recursion picks up all submodules when necessary(B[m
ok 160 - fetch-pack --diag-url host:repo(B[m
ok 1 - setup(B[m
ok 10 - shallow fetch from a read-only repo(B[m
ok 65 - name prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 161 - fetch-pack --diag-url host:/~repo(B[m
ok 18 - push unpushed submodules when not needed(B[m
ok 14 - new branch covered by force-with-lease(B[m
ok 162 - fetch-pack --diag-url [::1]:repo(B[m
ok 37 - br-branches-one-octopus branches-one(B[m
ok 163 - fetch-pack --diag-url [::1]:/~repo(B[m
ok 2 - push from shallow clone(B[m
ok 164 - fetch-pack --diag-url ssh+git://host/re:po(B[m
ok 165 - fetch-pack --diag-url ssh+git://host/~re:po(B[m
ok 19 - push unpushed submodules when not needed 2(B[m
ok 3 - push from shallow clone, with grafted roots(B[m
ok 166 - fetch-pack --diag-url ssh+git://host:/re:po(B[m
ok 23 - '--recurse-submodules=on-demand' doesn't recurse when no new commits are fetched in the superproject (and ignores config)(B[m
ok 167 - fetch-pack --diag-url ssh+git://host:/~re:po(B[m
ok 15 - new branch covered by force-with-lease (explicit)(B[m
ok 66 - link prune fetch.prune=false remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 38 - master(B[m
ok 168 - fetch-pack --diag-url ssh+git://user@host/re:po(B[m
ok 4 - add new shallow root with receive.updateshallow on(B[m
ok 169 - fetch-pack --diag-url ssh+git://user@host/~re:po(B[m
ok 170 - fetch-pack --diag-url ssh+git://user@host:/re:po(B[m
ok 171 - fetch-pack --diag-url ssh+git://user@host:/~re:po(B[m
ok 5 - push from shallow to shallow(B[m
ok 172 - fetch-pack --diag-url ssh+git://user@[::1]/re:po(B[m
ok 37 - push with config branch.*.pushremote(B[m
ok 32 - diff.submodule=log(B[m
ok 11 - .git/shallow is edited by repack(B[m
ok 20 - push unpushed submodules recursively(B[m
ok 39 - master config-explicit(B[m
ok 16 - new branch already exists(B[m
ok 173 - fetch-pack --diag-url ssh+git://user@[::1]/~re:po(B[m
[32m# passed all 11 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..11(B[m
ok 24 - '--recurse-submodules=on-demand' recurses as deep as necessary (and ignores config)(B[m
ok 174 - fetch-pack --diag-url ssh+git://user@[::1]:/re:po(B[m
ok 67 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
*** t5539-fetch-http-shallow.sh ***
ok 175 - fetch-pack --diag-url ssh+git://user@[::1]:/~re:po(B[m
ok 6 - push from full to shallow(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 176 - fetch-pack --diag-url ssh+git://user@::1/re:po(B[m
*** t5540-http-push-webdav.sh ***
ok 177 - fetch-pack --diag-url ssh+git://user@::1/~re:po(B[m
ok 21 - push unpushable submodule recursively fails(B[m
ok 178 - fetch-pack --diag-url ssh+git://user@::1:/re:po(B[m
ok 40 - master config-glob(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 25 - '--recurse-submodules=on-demand' stops when no new submodule commits are found in the superproject (and ignores config)(B[m
*** t5541-http-push-smart.sh ***
ok 179 - fetch-pack --diag-url ssh+git://user@::1:/~re:po(B[m
ok 180 - fetch-pack --diag-url ssh+git://host:22/re:po(B[m
ok 68 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 181 - fetch-pack --diag-url ssh+git://User@host:22/re:po(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
*** t5542-push-http-shallow.sh ***
ok 182 - fetch-pack --diag-url ssh+git://User@[::1]:22/re:po(B[m
ok 22 - push --dry-run does not recursively update submodules(B[m
ok 183 - fetch-pack --diag-url git+ssh://host/re:po(B[m
ok 33 - diff.submodule=log with extra file(B[m
[33m# still have 6 known breakage(s)(B[m
[32m# passed all remaining 27 test(s)(B[m
[36m1..33(B[m
ok 38 - branch.*.pushremote config order is irrelevant(B[m
ok 184 - fetch-pack --diag-url git+ssh://host/~re:po(B[m
ok 41 - master remote-explicit(B[m
ok 23 - push --dry-run does not recursively update submodules(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 185 - fetch-pack --diag-url git+ssh://host:/re:po(B[m
*** t5543-atomic-push.sh ***
*** t5544-pack-objects-hook.sh ***
ok 186 - fetch-pack --diag-url git+ssh://host:/~re:po(B[m
ok 17 - background updates of REMOTE can be mitigated with a non-updated REMOTE-push(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
*** t5545-push-options.sh ***
ok 187 - fetch-pack --diag-url git+ssh://user@host/re:po(B[m
ok 69 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 188 - fetch-pack --diag-url git+ssh://user@host/~re:po(B[m
ok 39 - push with dry-run(B[m
ok 24 - push only unpushed submodules recursively(B[m
ok 189 - fetch-pack --diag-url git+ssh://user@host:/re:po(B[m
ok 26 - 'fetch.recurseSubmodules=on-demand' overrides global config(B[m
ok 1 - create some history to fetch(B[m
ok 190 - fetch-pack --diag-url git+ssh://user@host:/~re:po(B[m
ok 42 - master remote-glob(B[m
ok 2 - create debugging hook script(B[m
ok 191 - fetch-pack --diag-url git+ssh://user@[::1]/re:po(B[m
ok 192 - fetch-pack --diag-url git+ssh://user@[::1]/~re:po(B[m
ok 3 - hook runs via global config(B[m
ok 193 - fetch-pack --diag-url git+ssh://user@[::1]:/re:po(B[m
ok 70 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 194 - fetch-pack --diag-url git+ssh://user@[::1]:/~re:po(B[m
ok 4 - hook outputs are sane(B[m
ok 1 - atomic push works for a single branch(B[m
ok 195 - fetch-pack --diag-url git+ssh://user@::1/re:po(B[m
ok 196 - fetch-pack --diag-url git+ssh://user@::1/~re:po(B[m
ok 40 - push updates local refs(B[m
ok 43 - master branches-default(B[m
ok 5 - hook runs from -c config(B[m
ok 197 - fetch-pack --diag-url git+ssh://user@::1:/re:po(B[m
ok 25 - push propagating the remotes name to a submodule(B[m
ok 1 - one push option works for a single branch(B[m
ok 198 - fetch-pack --diag-url git+ssh://user@::1:/~re:po(B[m
ok 6 - hook does not run from repo config(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 199 - fetch-pack --diag-url git+ssh://host:22/re:po(B[m
*** t5546-receive-limits.sh ***
ok 200 - fetch-pack --diag-url git+ssh://User@host:22/re:po(B[m
ok 27 - 'submodule.<sub>.fetchRecurseSubmodules=on-demand' overrides fetch.recurseSubmodules(B[m
ok 71 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 201 - fetch-pack --diag-url git+ssh://User@[::1]:22/re:po(B[m
ok 44 - master branches-one(B[m
ok 202 - fetch-pack --diag-url git://host/re:po(B[m
ok 203 - fetch-pack --diag-url git://host/~re:po(B[m
ok 1 - create known-size (1024 bytes) commit(B[m
ok 28 - don't fetch submodule when newly recorded commits are already present(B[m
ok 2 - atomic push works for two branches(B[m
ok 204 - fetch-pack --diag-url git://host:/re:po(B[m
ok 2 - prepare destination repository(B[m
ok 3 - set unpacklimit to 1(B[m
ok 2 - push option denied by remote(B[m
ok 205 - fetch-pack --diag-url git://host:/~re:po(B[m
ok 4 - setting receive.maxInputSize to 512 rejects push(B[m
ok 206 - fetch-pack --diag-url git://user@host/re:po(B[m
ok 45 - br-unconfig(B[m
ok 41 - push updates up-to-date local refs(B[m
ok 207 - fetch-pack --diag-url git://user@host/~re:po(B[m
ok 72 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 26 - push propagating refspec to a submodule(B[m
ok 5 - bumping limit to 4k allows push(B[m
ok 208 - fetch-pack --diag-url git://user@host:/re:po(B[m
ok 6 - prepare destination repository (again)(B[m
ok 209 - fetch-pack --diag-url git://user@host:/~re:po(B[m
ok 210 - fetch-pack --diag-url git://user@[::1]/re:po(B[m
ok 7 - lifting the limit allows push(B[m
ok 3 - atomic push works in combination with --mirror(B[m
ok 211 - fetch-pack --diag-url git://user@[::1]/~re:po(B[m
ok 8 - prepare destination repository(B[m
ok 46 - br-unconfig config-explicit(B[m
ok 9 - set unpacklimit to 10000(B[m
ok 42 - push preserves up-to-date packed refs(B[m
ok 212 - fetch-pack --diag-url git://user@[::1]:/re:po(B[m
ok 213 - fetch-pack --diag-url git://user@[::1]:/~re:po(B[m
ok 10 - setting receive.maxInputSize to 512 rejects push(B[m
ok 3 - two push options work(B[m
ok 73 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 214 - fetch-pack --diag-url git://user@::1/re:po(B[m
ok 27 - push propagating HEAD refspec to a submodule(B[m
ok 11 - bumping limit to 4k allows push(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 215 - fetch-pack --diag-url git://user@::1/~re:po(B[m
ok 12 - prepare destination repository (again)(B[m
ok 216 - fetch-pack --diag-url git://user@::1:/re:po(B[m
ok 29 - 'fetch.recurseSubmodules=on-demand' works also without .gitmodules entry(B[m
*** t5547-push-quarantine.sh ***
ok 217 - fetch-pack --diag-url git://user@::1:/~re:po(B[m
ok 13 - lifting the limit allows push(B[m
ok 47 - br-unconfig config-glob(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
*** t5550-http-fetch-dumb.sh ***
ok 218 - fetch-pack --diag-url git://host:22/re:po(B[m
ok 219 - fetch-pack --diag-url git://User@host:22/re:po(B[m
ok 43 - push does not update local refs on failure(B[m
ok 220 - fetch-pack --diag-url git://User@[::1]:22/re:po(B[m
ok 1 - create picky dest repo(B[m
ok 74 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 221 - fetch-pack --diag-url ssh://host/re:po(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
*** t5551-http-fetch-smart.sh ***
ok 30 - fetching submodules respects parallel settings(B[m
ok 222 - fetch-pack --diag-url ssh://host/~re:po(B[m
ok 223 - fetch-pack --diag-url ssh://host:/re:po(B[m
ok 48 - br-unconfig remote-explicit(B[m
ok 2 - accepted objects work(B[m
ok 224 - fetch-pack --diag-url ssh://host:/~re:po(B[m
ok 44 - allow deleting an invalid remote ref(B[m
ok 4 - atomic push works in combination with --force(B[m
ok 225 - fetch-pack --diag-url ssh://user@host/re:po(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 226 - fetch-pack --diag-url ssh://user@host/~re:po(B[m
*** t5552-skipping-fetch-negotiator.sh ***
ok 3 - rejected objects are not installed(B[m
ok 75 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 4 - rejected objects are removed(B[m
ok 227 - fetch-pack --diag-url ssh://user@host:/re:po(B[m
ok 228 - fetch-pack --diag-url ssh://user@host:/~re:po(B[m
ok 229 - fetch-pack --diag-url ssh://user@[::1]/re:po(B[m
ok 49 - br-unconfig remote-glob(B[m
ok 230 - fetch-pack --diag-url ssh://user@[::1]/~re:po(B[m
ok 5 - push to repo path with path separator (colon)(B[m
ok 231 - fetch-pack --diag-url ssh://user@[::1]:/re:po(B[m
ok 232 - fetch-pack --diag-url ssh://user@[::1]:/~re:po(B[m
ok 233 - fetch-pack --diag-url ssh://user@::1/re:po(B[m
ok 45 - pushing valid refs triggers post-receive and post-update hooks(B[m
ok 6 - updating a ref from quarantine is forbidden(B[m
ok 76 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 234 - fetch-pack --diag-url ssh://user@::1/~re:po(B[m
ok 4 - push options and submodules(B[m
ok 31 - fetching submodule into a broken repository(B[m
*** t5553-set-upstream.sh ***
ok 50 - br-unconfig branches-default(B[m
ok 235 - fetch-pack --diag-url ssh://user@::1:/re:po(B[m
ok 236 - fetch-pack --diag-url ssh://user@::1:/~re:po(B[m
ok 5 - atomic push fails if one branch fails(B[m
ok 237 - fetch-pack --diag-url ssh://host:22/re:po(B[m
ok 1 - setup bare parent fetch(B[m
ok 238 - fetch-pack --diag-url ssh://User@host:22/re:po(B[m
ok 239 - fetch-pack --diag-url ssh://User@[::1]:22/re:po(B[m
ok 46 - deleting dangling ref triggers hooks with correct args(B[m
ok 240 - fetch-pack --diag-url file://User@[::1]/re:po(B[m
[34mok 241 # skip fetch-pack --diag-url file://User@[::1]/re:po (missing MINGW)(B[m
ok 51 - br-unconfig branches-one(B[m
[34mok 242 # skip fetch-pack --diag-url file:///re:po (missing MINGW)(B[m
ok 77 - name prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 243 - fetch-pack --diag-url file://User@[::1]/~re:po(B[m
[34mok 244 # skip fetch-pack --diag-url file://User@[::1]/~re:po (missing MINGW)(B[m
ok 1 - commits with no parents are sent regardless of skip distance(B[m
ok 245 - fetch-pack --diag-url ./nohost:re:po(B[m
ok 5 - default push option(B[m
ok 246 - fetch-pack --diag-url ./file:nohost/~re:po(B[m
ok 2 - setup commit on master and other fetch(B[m
ok 247 - fetch-pack --diag-url ./nohost:12:re:po(B[m
ok 248 - fetch-pack --diag-url ./file:nohost:12/~re:po(B[m
ok 249 - fetch-pack --diag-url ./[::1]:re:po(B[m
ok 52 - master ../.git(B[m
ok 250 - fetch-pack --diag-url ./file:[::1]/~re:po(B[m
ok 3 - fetch --set-upstream does not set upstream w/o branch(B[m
ok 251 - fetch-pack --diag-url ./[::1]:23:re:po(B[m
ok 47 - deletion of a non-existent ref is not fed to post-receive and post-update hooks(B[m
ok 78 - link prune fetch.prune=unset remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 252 - fetch-pack --diag-url ./file:[::1]:23/~re:po(B[m
ok 6 - atomic push fails if one tag fails remotely(B[m
ok 253 - fetch-pack --diag-url ./[:re:po(B[m
ok 53 - master ../.git one(B[m
ok 254 - fetch-pack --diag-url ./file:[/~re:po(B[m
ok 4 - fetch --set-upstream upstream master sets branch master but not other(B[m
ok 255 - fetch-pack --diag-url ./[:aa:re:po(B[m
ok 256 - fetch-pack --diag-url ./file:[:aa/~re:po(B[m
ok 6 - two default push options(B[m
ok 257 - fetch-pack --diag-url host:re:po(B[m
ok 54 - master ../.git one two(B[m
ok 48 - deletion of a non-existent ref alone does trigger post-receive and post-update hooks(B[m
ok 5 - fetch --set-upstream upstream other sets branch other(B[m
ok 258 - fetch-pack --diag-url host:/~re:po(B[m
ok 1 - setup(B[m
ok 259 - fetch-pack --diag-url [::1]:re:po(B[m
ok 79 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 260 - fetch-pack --diag-url [::1]:/~re:po(B[m
ok 6 - fetch --set-upstream master:other does not set the branch other2(B[m
ok 32 - fetch new commits when submodule got renamed(B[m
ok 55 - master --tags ../.git(B[m
ok 261 - fetch-pack --diag-url ssh+git://host/re/po(B[m
ok 262 - fetch-pack --diag-url ssh+git://host/~re/po(B[m
ok 2 - unsigned push does not send push certificate(B[m
ok 263 - fetch-pack --diag-url ssh+git://host:/re/po(B[m
ok 7 - fetch --set-upstream http://nosuchdomain.example.com fails with invalid url(B[m
ok 264 - fetch-pack --diag-url ssh+git://host:/~re/po(B[m
ok 7 - atomic push obeys update hook preventing a branch to be pushed(B[m
ok 265 - fetch-pack --diag-url ssh+git://user@host/re/po(B[m
ok 7 - push option from command line overrides from-config push option(B[m
ok 56 - master ../.git tag tag-one tag tag-three(B[m
ok 80 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 266 - fetch-pack --diag-url ssh+git://user@host/~re/po(B[m
ok 3 - talking with a receiver without push certificate support(B[m
ok 8 - fetch --set-upstream with valid URL sets upstream to URL(B[m
ok 267 - fetch-pack --diag-url ssh+git://user@host:/re/po(B[m
ok 2 - when two skips collide, favor the larger one(B[m
ok 9 - setup bare parent pull(B[m
ok 268 - fetch-pack --diag-url ssh+git://user@host:/~re/po(B[m
ok 269 - fetch-pack --diag-url ssh+git://user@[::1]/re/po(B[m
ok 49 - mixed ref updates, deletes, invalid deletes trigger hooks with correct input(B[m
ok 4 - push --signed fails with a receiver without push certificate support(B[m
ok 270 - fetch-pack --diag-url ssh+git://user@[::1]/~re/po(B[m
ok 57 - master ../.git tag tag-one-tree tag tag-three-file(B[m
ok 271 - fetch-pack --diag-url ssh+git://user@[::1]:/re/po(B[m
ok 8 - atomic push is not advertised if configured(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
*** t5560-http-backend-noserver.sh ***
ok 272 - fetch-pack --diag-url ssh+git://user@[::1]:/~re/po(B[m
ok 5 - push --signed=1 is accepted(B[m
[34mok 6 # skip no certificate for a signed push with no update (missing GPG)(B[m
ok 81 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
[34mok 7 # skip signed push sends push certificate (missing GPG)(B[m
[34mok 8 # skip inconsistent push options in signed push not allowed (missing GPG)(B[m
[34mok 9 # skip fail without key and heed user.signingkey (missing GPG)(B[m
ok 10 - setup commit on master and other pull(B[m
[34mok 10 # skip fail without key and heed user.signingkey x509 (missing GPGSM)(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 273 - fetch-pack --diag-url ssh+git://user@::1/re/po(B[m
*** t5561-http-backend.sh ***
ok 50 - allow deleting a ref using --delete(B[m
ok 8 - empty value of push.pushOption in config clears the list(B[m
ok 274 - fetch-pack --diag-url ssh+git://user@::1/~re/po(B[m
ok 58 - master ../.git one tag tag-one tag tag-three-file(B[m
ok 275 - fetch-pack --diag-url ssh+git://user@::1:/re/po(B[m
ok 276 - fetch-pack --diag-url ssh+git://user@::1:/~re/po(B[m
ok 11 - pull --set-upstream upstream master sets branch master but not other(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 277 - fetch-pack --diag-url ssh+git://host:22/re/po(B[m
*** t5562-http-backend-content-length.sh ***
ok 278 - fetch-pack --diag-url ssh+git://User@host:22/re/po(B[m
ok 12 - pull --set-upstream master:other2 does not set the branch other2(B[m
ok 279 - fetch-pack --diag-url ssh+git://User@[::1]:22/re/po(B[m
ok 82 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 51 - allow deleting a tag using --delete(B[m
ok 59 - br-unconfig ../.git(B[m
ok 280 - fetch-pack --diag-url git+ssh://host/re/po(B[m
ok 3 - use ref advertisement to filter out commits(B[m
ok 1 - setup repository(B[m
ok 9 - invalid push option in config(B[m
ok 281 - fetch-pack --diag-url git+ssh://host/~re/po(B[m
ok 2 - direct refs/heads/master not found(B[m
ok 282 - fetch-pack --diag-url git+ssh://host:/re/po(B[m
ok 13 - pull --set-upstream upstream other sets branch master(B[m
ok 60 - br-unconfig ../.git one(B[m
ok 52 - push --delete without args aborts(B[m
ok 283 - fetch-pack --diag-url git+ssh://host:/~re/po(B[m
ok 284 - fetch-pack --diag-url git+ssh://user@host/re/po(B[m
ok 14 - pull --set-upstream upstream tag does not set the tag(B[m
ok 285 - fetch-pack --diag-url git+ssh://user@host/~re/po(B[m
ok 1 - setup(B[m
ok 83 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 286 - fetch-pack --diag-url git+ssh://user@host:/re/po(B[m
ok 61 - br-unconfig ../.git one two(B[m
ok 10 - push options keep quoted characters intact (direct)(B[m
ok 2 - setup, compression related(B[m
ok 3 - static file is ok(B[m
ok 53 - push --delete refuses src:dest refspecs(B[m
ok 287 - fetch-pack --diag-url git+ssh://user@host:/~re/po(B[m
[32m# passed all 10 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..10(B[m
ok 3 - fetch plain(B[m
*** t5570-git-daemon.sh ***
ok 288 - fetch-pack --diag-url git+ssh://user@[::1]/re/po(B[m
ok 4 - fetch plain truncated(B[m
ok 15 - pull --set-upstream http://nosuchdomain.example.com fails with invalid url(B[m
ok 289 - fetch-pack --diag-url git+ssh://user@[::1]/~re/po(B[m
ok 62 - br-unconfig --tags ../.git(B[m
ok 5 - fetch plain empty(B[m
ok 290 - fetch-pack --diag-url git+ssh://user@[::1]:/re/po(B[m
ok 291 - fetch-pack --diag-url git+ssh://user@[::1]:/~re/po(B[m
ok 6 - fetch gzipped(B[m
ok 4 - no export by default(B[m
ok 54 - warn on push to HEAD of non-bare repository(B[m
ok 292 - fetch-pack --diag-url git+ssh://user@::1/re/po(B[m
ok 7 - fetch gzipped truncated(B[m
ok 84 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 4 - handle clock skew(B[m
ok 1 - setup repository(B[m
ok 293 - fetch-pack --diag-url git+ssh://user@::1/~re/po(B[m
ok 8 - fetch gzipped empty(B[m
ok 16 - pull --set-upstream upstream HEAD sets branch HEAD(B[m
ok 294 - fetch-pack --diag-url git+ssh://user@::1:/re/po(B[m
ok 63 - br-unconfig ../.git tag tag-one tag tag-three(B[m
ok 2 - create git-accessible bare repository(B[m
ok 295 - fetch-pack --diag-url git+ssh://user@::1:/~re/po(B[m
ok 9 - push plain(B[m
ok 5 - export if git-daemon-export-ok(B[m
ok 296 - fetch-pack --diag-url git+ssh://host:22/re/po(B[m
ok 10 - push plain truncated(B[m
ok 55 - deny push to HEAD of non-bare repository(B[m
ok 297 - fetch-pack --diag-url git+ssh://User@host:22/re/po(B[m
ok 17 - pull --set-upstream upstream with more than one branch does nothing(B[m
ok 3 - clone git repository(B[m
ok 11 - push plain empty(B[m
ok 298 - fetch-pack --diag-url git+ssh://User@[::1]:22/re/po(B[m
ok 299 - fetch-pack --diag-url git://host/re/po(B[m
ok 64 - br-unconfig ../.git tag tag-one-tree tag tag-three-file(B[m
ok 85 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
ok 12 - push gzipped(B[m
ok 300 - fetch-pack --diag-url git://host/~re/po(B[m
ok 6 - static file if http.getanyfile true is ok(B[m
ok 301 - fetch-pack --diag-url git://host:/re/po(B[m
ok 13 - push gzipped truncated(B[m
ok 4 - fetch changes via git protocol(B[m
ok 18 - pull --set-upstream with valid URL sets upstream to URL(B[m
ok 302 - fetch-pack --diag-url git://host:/~re/po(B[m
ok 56 - allow push to HEAD of bare repository (bare)(B[m
ok 14 - push gzipped empty(B[m
ok 5 - no-op fetch -v stderr is as expected(B[m
ok 303 - fetch-pack --diag-url git://user@host/re/po(B[m
ok 15 - CONTENT_LENGTH overflow ssite_t(B[m
ok 304 - fetch-pack --diag-url git://user@host/~re/po(B[m
ok 65 - br-unconfig ../.git one tag tag-one tag tag-three-file(B[m
ok 6 - no-op fetch without "-v" is quiet(B[m
ok 16 - empty CONTENT_LENGTH(B[m
[32m# passed all 65 test(s)(B[m
[36m1..65(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
*** t5571-pre-push-hook.sh ***
*** t5572-pull-submodule.sh ***
ok 305 - fetch-pack --diag-url git://user@host:/re/po(B[m
ok 7 - static file if http.getanyfile false fails(B[m
ok 306 - fetch-pack --diag-url git://user@host:/~re/po(B[m
ok 86 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
ok 7 - remote detects correct HEAD(B[m
ok 19 - pull --set-upstream with valid URL and branch sets branch(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 307 - fetch-pack --diag-url git://user@[::1]/re/po(B[m
*** t5573-pull-verify-signatures.sh ***
ok 57 - allow push to HEAD of non-bare repository (config)(B[m
ok 8 - http.uploadpack default enabled(B[m
ok 308 - fetch-pack --diag-url git://user@[::1]/~re/po(B[m
ok 8 - prepare pack objects(B[m
ok 33 - fetch new submodule commits on-demand outside standard refspec(B[m
ok 309 - fetch-pack --diag-url git://user@[::1]:/re/po(B[m
ok 9 - http.uploadpack true(B[m
ok 9 - fetch notices corrupt pack(B[m
ok 310 - fetch-pack --diag-url git://user@[::1]:/~re/po(B[m
ok 58 - fetch with branches(B[m
ok 1 - setup(B[m
ok 10 - http.uploadpack false(B[m
ok 311 - fetch-pack --diag-url git://user@::1/re/po(B[m
ok 10 - fetch notices corrupt idx(B[m
ok 312 - fetch-pack --diag-url git://user@::1/~re/po(B[m
ok 11 - http.receivepack default disabled(B[m
ok 87 - name prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
ok 11 - clone non-existent(B[m
ok 313 - fetch-pack --diag-url git://user@::1:/re/po(B[m
ok 2 - push with failing hook(B[m
ok 12 - push disabled(B[m
ok 59 - fetch with branches containing #(B[m
ok 314 - fetch-pack --diag-url git://user@::1:/~re/po(B[m
ok 12 - http.receivepack true(B[m
ok 13 - read access denied(B[m
ok 3 - --no-verify bypasses hook(B[m
ok 315 - fetch-pack --diag-url git://host:22/re/po(B[m
ok 14 - not exported(B[m
ok 13 - http.receivepack false(B[m
ok 316 - fetch-pack --diag-url git://User@host:22/re/po(B[m
ok 4 - push with hook(B[m
ok 60 - push with branches(B[m
ok 317 - fetch-pack --diag-url git://User@[::1]:22/re/po(B[m
ok 15 - clone non-existent(B[m
ok 318 - fetch-pack --diag-url ssh://host/re/po(B[m
ok 16 - push disabled(B[m
ok 5 - add a branch(B[m
ok 319 - fetch-pack --diag-url ssh://host/~re/po(B[m
ok 17 - read access denied(B[m
ok 14 - http-backend blocks bad PATH_INFO(B[m
ok 88 - link prune fetch.prune=false remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 320 - fetch-pack --diag-url ssh://host:/re/po(B[m
ok 61 - push with branches containing #(B[m
ok 18 - not exported(B[m
*** t5580-unc-paths.sh ***
ok 6 - push to default(B[m
ok 321 - fetch-pack --diag-url ssh://host:/~re/po(B[m
ok 322 - fetch-pack --diag-url ssh://user@host/re/po(B[m
ok 7 - push non-branches(B[m
[36m1..0 # SKIP skipping Windows-only path tests(B[m
ok 323 - fetch-pack --diag-url ssh://user@host/~re/po(B[m
*** t5581-http-curl-verbose.sh ***
ok 8 - push delete(B[m
ok 19 - access repo via interpolated hostname(B[m
ok 324 - fetch-pack --diag-url ssh://user@host:/re/po(B[m
ok 325 - fetch-pack --diag-url ssh://user@host:/~re/po(B[m
ok 9 - push to URL(B[m
ok 326 - fetch-pack --diag-url ssh://user@[::1]/re/po(B[m
ok 20 - hostname cannot break out of directory(B[m
ok 89 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 327 - fetch-pack --diag-url ssh://user@[::1]/~re/po(B[m
*** t5600-clone-fail-cleanup.sh ***
ok 328 - fetch-pack --diag-url ssh://user@[::1]:/re/po(B[m
ok 62 - push into aliased refs (consistent)(B[m
ok 329 - fetch-pack --diag-url ssh://user@[::1]:/~re/po(B[m
ok 21 - hostname interpolation works after LF-stripping(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 330 - fetch-pack --diag-url ssh://user@::1/re/po(B[m
ok 1 - clone of non-existent source should fail(B[m
ok 2 - failed clone should not leave a directory(B[m
ok 34 - fetch new submodule commit on-demand in FETCH_HEAD(B[m
ok 3 - create a repo to clone(B[m
ok 331 - fetch-pack --diag-url ssh://user@::1/~re/po(B[m
*** t5601-clone.sh ***
ok 332 - fetch-pack --diag-url ssh://user@::1:/re/po(B[m
ok 4 - create objects in repo for later corruption(B[m
ok 5 - clone of non-existent (relative to $PWD) source should fail(B[m
ok 90 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 333 - fetch-pack --diag-url ssh://user@::1:/~re/po(B[m
ok 10 - set up many-ref tests(B[m
ok 6 - clone should work now that source exists(B[m
ok 7 - successful clone must leave the directory(B[m
ok 334 - fetch-pack --diag-url ssh://host:22/re/po(B[m
ok 335 - fetch-pack --diag-url ssh://User@host:22/re/po(B[m
ok 8 - failed clone --separate-git-dir should not leave any directories(B[m
ok 336 - fetch-pack --diag-url ssh://User@[::1]:22/re/po(B[m
ok 1 - setup(B[m
ok 2 - clone with excess parameters (1)(B[m
ok 9 - failed clone into empty leaves directory (vanilla)(B[m
ok 337 - fetch-pack --diag-url file://User@[::1]/re/po(B[m
[34mok 338 # skip fetch-pack --diag-url file://User@[::1]/re/po (missing MINGW)(B[m
ok 3 - clone with excess parameters (2)(B[m
[34mok 339 # skip fetch-pack --diag-url file:///re/po (missing MINGW)(B[m
ok 340 - fetch-pack --diag-url file://User@[::1]/~re/po(B[m
ok 63 - push into aliased refs (inconsistent)(B[m
[34mok 341 # skip fetch-pack --diag-url file://User@[::1]/~re/po (missing MINGW)(B[m
ok 10 - failed clone into empty leaves directory (bare)(B[m
ok 342 - fetch-pack --diag-url ./nohost:re/po(B[m
ok 4 - output from clone(B[m
ok 91 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 343 - fetch-pack --diag-url ./file:nohost/~re/po(B[m
ok 11 - failed clone into empty leaves directory (separate)(B[m
ok 344 - fetch-pack --diag-url ./nohost:12:re/po(B[m
ok 12 - failed clone into empty leaves directory (separate, git)(B[m
ok 345 - fetch-pack --diag-url ./file:nohost:12/~re/po(B[m
ok 5 - clone does not keep pack(B[m
ok 346 - fetch-pack --diag-url ./[::1]:re/po(B[m
ok 6 - clone checks out files(B[m
ok 347 - fetch-pack --diag-url ./file:[::1]/~re/po(B[m
ok 13 - failed clone into empty leaves directory (separate, wt)(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
*** t5602-clone-remote-exec.sh ***
ok 7 - clone respects GIT_WORK_TREE(B[m
ok 348 - fetch-pack --diag-url ./[::1]:23:re/po(B[m
ok 349 - fetch-pack --diag-url ./file:[::1]:23/~re/po(B[m
ok 350 - fetch-pack --diag-url ./[:re/po(B[m
ok 351 - fetch-pack --diag-url ./file:[/~re/po(B[m
ok 1 - setup(B[m
ok 92 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 352 - fetch-pack --diag-url ./[:aa:re/po(B[m
ok 8 - clone from hooks(B[m
ok 2 - clone calls git upload-pack unqualified with no -u option(B[m
ok 353 - fetch-pack --diag-url ./file:[:aa/~re/po(B[m
ok 9 - clone creates intermediate directories(B[m
ok 3 - clone calls specified git upload-pack with -u option(B[m
ok 354 - fetch-pack --diag-url host:re/po(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t5603-clone-dirname.sh ***
ok 10 - clone creates intermediate directories for bare repo(B[m
ok 355 - fetch-pack --diag-url host:/~re/po(B[m
ok 35 - fetch new submodule commits on-demand without .gitmodules entry(B[m
ok 356 - fetch-pack --diag-url [::1]:re/po(B[m
ok 11 - clone --mirror(B[m
ok 357 - fetch-pack --diag-url [::1]:/~re/po(B[m
[34mok 358 # skip fetch-pack --diag-url file://c:/repo (missing MINGW)(B[m
[34mok 359 # skip fetch-pack --diag-url c:repo (missing MINGW)(B[m
ok 1 - setup ssh wrapper(B[m
ok 2 - clone of host:foo goes to foo (non-bare)(B[m
ok 12 - clone --mirror with detached HEAD(B[m
ok 93 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 11 - sigpipe does not cause pre-push hook failure(B[m
ok 3 - clone of host:foo goes to foo.git (bare)(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 4 - clone of host:foo.git goes to foo (non-bare)(B[m
ok 13 - clone --bare with detached HEAD(B[m
ok 5 - clone of host:foo.git goes to foo.git (bare)(B[m
ok 14 - clone --bare names the local repository <name>.git(B[m
ok 360 - clone shallow since ...(B[m
ok 64 - force pushing required to update lightweight tag(B[m
ok 6 - clone of host:foo/.git goes to foo (non-bare)(B[m
ok 15 - clone --mirror does not repeat tags(B[m
ok 7 - clone of host:foo/.git goes to foo.git (bare)(B[m
ok 361 - fetch shallow since ...(B[m
ok 8 - clone of ssh://host/foo goes to foo (non-bare)(B[m
ok 16 - clone to destination with trailing /(B[m
ok 9 - clone of ssh://host/foo goes to foo.git (bare)(B[m
ok 94 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 10 - clone of ssh://host/foo.git goes to foo (non-bare)(B[m
ok 17 - clone to destination with extra trailing /(B[m
ok 36 - fetch new submodule commit intermittently referenced by superproject(B[m
ok 362 - clone shallow since selects no commits(B[m
[32m# passed all 36 test(s)(B[m
[36m1..36(B[m
ok 11 - clone of ssh://host/foo.git goes to foo.git (bare)(B[m
*** t5604-clone-reference.sh ***
ok 18 - clone to an existing empty directory(B[m
ok 12 - clone of ssh://host/foo/.git goes to foo (non-bare)(B[m
ok 19 - clone to an existing non-empty directory(B[m
ok 20 - clone to an existing path(B[m
ok 13 - clone of ssh://host/foo/.git goes to foo.git (bare)(B[m
ok 14 - clone of ssh://host/foo/ goes to foo (non-bare)(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
ok 15 - clone of ssh://host/foo/// goes to foo (non-bare)(B[m
*** t5605-clone-local.sh ***
ok 1 - preparing first repository(B[m
ok 16 - clone of ssh://host/foo/.git/ goes to foo (non-bare)(B[m
ok 95 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
*** t5606-clone-options.sh ***
ok 363 - shallow since with commit graph and already-seen commit(B[m
ok 21 - clone a void(B[m
ok 17 - clone of ssh://host/foo.git/ goes to foo (non-bare)(B[m
ok 18 - clone of ssh://host/foo.git/// goes to foo (non-bare)(B[m
ok 22 - clone respects global branch.autosetuprebase(B[m
ok 19 - clone of ssh://host/foo///.git/ goes to foo (non-bare)(B[m
ok 2 - preparing second repository(B[m
ok 3 - cloning with reference (-l -s)(B[m
ok 20 - clone of ssh://host/foo/.git/// goes to foo (non-bare)(B[m
ok 1 - setup(B[m
ok 23 - respect url-encoding of file://(B[m
ok 4 - existence of info/alternates(B[m
ok 21 - clone of host:foo/ goes to foo (non-bare)(B[m
ok 2 - clone -o(B[m
ok 24 - do not query-string-decode + in URLs(B[m
ok 1 - preparing origin repository(B[m
ok 22 - clone of host:foo/// goes to foo (non-bare)(B[m
ok 96 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 5 - pulling from reference(B[m
ok 364 - shallow clone exclude tag two(B[m
ok 25 - do not respect url-encoding of non-url path(B[m
ok 23 - clone of host:foo.git/ goes to foo (non-bare)(B[m
ok 6 - that reference gets used(B[m
ok 3 - redirected clone does not show progress(B[m
ok 24 - clone of host:foo/.git/ goes to foo (non-bare)(B[m
ok 2 - local clone without .git suffix(B[m
ok 65 - force pushing required to update annotated tag(B[m
ok 26 - clone separate gitdir(B[m
ok 27 - clone separate gitdir: output(B[m
ok 7 - cloning with reference (no -l -s)(B[m
ok 25 - clone of host:foo.git/// goes to foo (non-bare)(B[m
ok 8 - fetched no objects(B[m
ok 4 - redirected clone -v does show progress(B[m
ok 365 - fetch exclude tag one(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 9 - existence of info/alternates(B[m
ok 28 - clone from .git file(B[m
*** t5607-clone-bundle.sh ***
ok 26 - clone of host:foo///.git/ goes to foo (non-bare)(B[m
ok 3 - local clone with .git suffix(B[m
ok 29 - fetch from .git gitfile(B[m
ok 27 - clone of host:foo/.git/// goes to foo (non-bare)(B[m
ok 10 - pulling from reference(B[m
ok 28 - clone of ssh://host/ goes to host (non-bare)(B[m
ok 30 - fetch from gitfile parent(B[m
ok 11 - that reference gets used(B[m
ok 4 - local clone from x(B[m
ok 31 - clone separate gitdir where target already exists(B[m
ok 5 - local clone from x.git that does not exist(B[m
ok 97 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 29 - clone of ssh://host:1234/ goes to host (non-bare)(B[m
ok 6 - With -no-hardlinks, local will make a copy(B[m
ok 30 - clone of ssh://user@host/ goes to host (non-bare)(B[m
ok 12 - updating origin(B[m
ok 32 - clone --reference from original(B[m
ok 31 - clone of host:/ goes to host (non-bare)(B[m
ok 7 - Even without -l, local will make a hardlink(B[m
ok 32 - clone of ssh://user:password@host/ goes to host (non-bare)(B[m
ok 1 - setup(B[m
ok 33 - clone of ssh://user:password@host:1234/ goes to host (non-bare)(B[m
ok 8 - local clone of repo with nonexistent ref in HEAD(B[m
ok 13 - pulling changes from origin(B[m
ok 33 - clone with more than one --reference(B[m
ok 1 - git_pull: added submodule creates empty directory(B[m
ok 66 - fetch will not clobber an existing lightweight tag without --force(B[m
ok 34 - clone of ssh://user:passw@rd@host:1234/ goes to host (non-bare)(B[m
ok 14 - that alternate to origin gets used(B[m
ok 2 - "verify" needs a worktree(B[m
ok 9 - bundle clone without .bundle suffix(B[m
ok 35 - clone of user@host:/ goes to host (non-bare)(B[m
ok 366 - fetching deepen(B[m
ok 34 - clone from original with relative alternate(B[m
ok 98 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 36 - clone of user:password@host:/ goes to host (non-bare)(B[m
ok 15 - pulling changes from origin(B[m
ok 3 - annotated tags can be excluded by rev-list options(B[m
ok 35 - clone checking out a tag(B[m
ok 37 - clone of user:passw@rd@host:/ goes to host (non-bare)(B[m
ok 10 - bundle clone with .bundle suffix(B[m
ok 16 - check objects expected to exist locally(B[m
ok 36 - set up ssh wrapper(B[m
ok 4 - die if bundle file cannot be created(B[m
ok 38 - clone of ssh://host/foo@bar goes to foo@bar (non-bare)(B[m
[33mnot ok 5 - bundle --stdin # TODO known breakage(B[m
ok 17 - preparing alternate repository #1(B[m
ok 39 - clone of ssh://host/foo@bar.git goes to foo@bar (non-bare)(B[m
ok 11 - bundle clone from b4(B[m
ok 37 - clone myhost:src uses ssh(B[m
ok 12 - bundle clone from b4.bundle that does not exist(B[m
[33mnot ok 6 - bundle --stdin <rev-list options> # TODO known breakage(B[m
ok 40 - clone of ssh://user:password@host/foo@bar goes to foo@bar (non-bare)(B[m
ok 18 - cloning alternate repo #2 and adding changes to repo #1(B[m
ok 7 - empty bundle file is rejected(B[m
ok 41 - clone of ssh://user:passw@rd@host/foo@bar.git goes to foo@bar (non-bare)(B[m
ok 38 - clone local path foo:bar(B[m
ok 19 - cloning alternate repo #1, using #2 as reference(B[m
ok 13 - bundle clone with nonexistent HEAD(B[m
ok 42 - clone of host:/foo@bar goes to foo@bar (non-bare)(B[m
ok 20 - cloning with reference being subset of source (-l -s)(B[m
ok 99 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 39 - bracketed hostnames are still ssh(B[m
ok 43 - clone of host:/foo@bar.git goes to foo@bar (non-bare)(B[m
ok 21 - cloning with multiple references drops duplicates(B[m
ok 67 - fetch will not clobber an existing annotated tag without --force(B[m
ok 44 - clone of user:password@host:/foo@bar goes to foo@bar (non-bare)(B[m
ok 8 - ridiculously long subject in boundary(B[m
ok 22 - clone with reference from a tagged repository(B[m
ok 40 - OpenSSH variant passes -4(B[m
ok 45 - clone of user:passw@rd@host:/foo@bar.git goes to foo@bar (non-bare)(B[m
ok 14 - clone empty repository(B[m
ok 46 - clone of ssh://user:password@host/test:1234 goes to 1234 (non-bare)(B[m
ok 68 - push --porcelain(B[m
ok 9 - prerequisites with an empty commit message(B[m
ok 47 - clone of ssh://user:password@host/test:1234.git goes to 1234 (non-bare)(B[m
ok 23 - prepare branched repository(B[m
[32m# passed all 47 test(s)(B[m
[36m1..47(B[m
ok 41 - variant can be overridden(B[m
ok 15 - clone empty repository, and then push should not segfault.(B[m
ok 367 - use ref advertisement to prune "have" lines sent(B[m
ok 10 - failed bundle creation does not leave cruft(B[m
*** t5608-clone-2gb.sh ***
ok 16 - cloning non-existent directory fails(B[m
ok 69 - push --porcelain bad url(B[m
ok 17 - cloning non-git directory fails(B[m
ok 100 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 42 - variant=auto picks based on basename(B[m
ok 24 - fetch with incomplete alternates(B[m
ok 18 - cloning file:// does not hardlink(B[m
[36mSkipping expensive 2GB clone test; enable it with GIT_TEST_CLONE_2GB=t(B[m
[34mok 1 # skip setup (missing CLONE_2GB)(B[m
[34mok 2 # skip clone - bare (missing CLONE_2GB)(B[m
[34mok 3 # skip clone - with worktree, file:// protocol (missing CLONE_2GB)(B[m
ok 11 - fetch SHA-1 from bundle(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 9 test(s)(B[m
[36m1..11(B[m
ok 43 - simple does not support -4/-6(B[m
*** t5609-clone-branch.sh ***
*** t5610-clone-detached.sh ***
ok 25 - clone using repo with gitfile as a reference(B[m
ok 2 - index-pack will allow duplicate objects by default(B[m
ok 19 - cloning a local path with --no-local does not hardlink(B[m
ok 3 - create batch-check test vectors(B[m
ok 368 - filtering by size(B[m
ok 44 - simple does not support port(B[m
ok 20 - cloning locally respects "-u" for fetching refs(B[m
ok 26 - clone using repo pointed at by gitfile as reference(B[m
ok 4 - lookup in duplicated pack(B[m
[32m# passed all 20 test(s)(B[m
[36m1..20(B[m
ok 70 - push --porcelain rejected(B[m
*** t5611-clone-config.sh ***
ok 101 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 45 - uplink is treated as simple(B[m
ok 2 - git_pull: added submodule leaves existing empty directory alone(B[m
ok 1 - setup(B[m
ok 71 - push --porcelain --dry-run rejected(B[m
ok 1 - setup(B[m
ok 369 - filtering by size has no effect if support for it is not advertised(B[m
ok 2 - clone repo (detached HEAD points to branch)(B[m
ok 46 - OpenSSH-like uplink is treated as ssh(B[m
ok 2 - vanilla clone chooses HEAD(B[m
ok 1 - clone -c sets config in cloned repo(B[m
ok 3 - cloned HEAD matches(B[m
[33mnot ok 4 - cloned HEAD is detached # TODO known breakage(B[m
ok 2 - clone -c can set multi-keys(B[m
ok 3 - clone -b chooses specified branch(B[m
ok 4 - clone -b sets up tracking(B[m
ok 47 - plink is treated specially (as putty)(B[m
ok 3 - clone -c can set multi-keys, including some empty(B[m
ok 5 - clone -b does not munge remotes/origin/HEAD(B[m
ok 5 - clone repo (detached HEAD points to tag)(B[m
ok 27 - clone and dissociate from reference(B[m
ok 6 - cloned HEAD matches(B[m
ok 102 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 6 - clone -b with bogus branch(B[m
ok 4 - clone -c without a value is boolean true(B[m
ok 7 - cloned HEAD is detached(B[m
ok 7 - clone -b not allowed with empty repos(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 48 - plink.exe is treated specially (as putty)(B[m
*** t5612-clone-refspec.sh ***
ok 5 - clone -c config is available during clone(B[m
ok 8 - clone repo (detached HEAD points to history)(B[m
ok 370 - fetch with --filter=blob:limit=0(B[m
ok 9 - cloned HEAD matches(B[m
ok 10 - cloned HEAD is detached(B[m
[32m# passed all 370 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..370(B[m
ok 49 - tortoiseplink is like putty, with extra arguments(B[m
ok 6 - clone -c remote.origin.fetch=<refspec> works(B[m
ok 72 - push --prune(B[m
ok 7 - git -c remote.origin.fetch=<refspec> clone works(B[m
ok 11 - clone repo (orphan detached HEAD)(B[m
ok 12 - cloned HEAD matches(B[m
ok 103 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 50 - double quoted plink.exe in GIT_SSH_COMMAND(B[m
ok 13 - cloned HEAD is detached(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 12 test(s)(B[m
[36m1..13(B[m
ok 8 - clone -c remote.<remote>.fetch=<refspec> --origin=<name>(B[m
[34mok 9 # skip clone -c core.hideDotFiles (missing MINGW)(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
*** t5613-info-alternate.sh ***
*** t5614-clone-submodules-shallow.sh ***
ok 28 - clone, dissociate from partial reference and repack(B[m
ok 51 - single quoted plink.exe in GIT_SSH_COMMAND(B[m
ok 5 - index-pack can reject packs with duplicates(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t5615-alternate-env.sh ***
*** t5616-partial-clone.sh ***
ok 52 - GIT_SSH_VARIANT overrides plink detection(B[m
ok 104 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 29 - clone, dissociate from alternates(B[m
ok 1 - preparing first repository(B[m
ok 1 - create alternate repositories(B[m
ok 53 - ssh.variant overrides plink detection(B[m
ok 2 - objects inaccessible without alternates(B[m
ok 30 - setup repo with garbage in objects/*(B[m
ok 3 - access alternate via absolute path(B[m
ok 3 - git_pull: replace tracked file with submodule creates empty directory(B[m
ok 73 - push --prune refspec(B[m
ok 4 - access multiple alternates(B[m
ok 2 - preparing second repository(B[m
ok 54 - GIT_SSH_VARIANT overrides plink detection to plink(B[m
ok 5 - access alternate via relative path (bare)(B[m
ok 6 - access alternate via relative path (worktree)(B[m
ok 7 - access alternate via relative path (subdir)(B[m
ok 1 - setup(B[m
ok 1 - setup normal src repo(B[m
ok 8 - mix of quoted and unquoted alternates(B[m
ok 55 - GIT_SSH_VARIANT overrides plink to tortoiseplink(B[m
ok 105 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 9 - broken quoting falls back to interpreting raw(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 56 - clean failure on broken quoting(B[m
ok 3 - preparing third repository(B[m
*** t5617-clone-submodules-remote.sh ***
ok 2 - setup bare clone for server(B[m
ok 2 - by default all branches will be kept updated(B[m
ok 1 - setup(B[m
ok 31 - clone a repo with garbage in objects/*(B[m
ok 4 - count-objects shows the alternates(B[m
ok 57 - clone c:temp is ssl(B[m
[34mok 58 # skip clone c:temp is dos drive (missing MINGW)(B[m
ok 3 - by default no tags will be kept updated(B[m
ok 59 - clone host:rep(B[m
ok 3 - do partial clone 1(B[m
ok 60 - clone host:rep/home/project(B[m
ok 4 - clone with --no-tags(B[m
ok 4 - verify that .promisor file contains refs fetched(B[m
ok 61 - clone host:123(B[m
ok 5 - creating too deep nesting(B[m
ok 106 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 62 - clone [::1]:rep(B[m
ok 5 - verify checkout with dynamic object fetch(B[m
ok 63 - clone [::1]:rep/home/project(B[m
ok 6 - validity of seventh repository(B[m
ok 5 - --single-branch while HEAD pointing at master(B[m
ok 64 - clone [::1]:123(B[m
ok 32 - setup repo with manually symlinked or unknown files at objects/(B[m
ok 2 - nonshallow clone implies nonshallow submodule(B[m
ok 65 - clone host:/~repo(B[m
ok 7 - invalidity of eighth repository(B[m
ok 74 - push to update a ref hidden by transfer.hiderefs(B[m
ok 66 - clone [::1]:/~repo(B[m
ok 8 - breaking of loops(B[m
ok 1 - setup(B[m
ok 9 - that info/alternates is necessary(B[m
ok 67 - clone foo/bar:baz is not ssh(B[m
ok 6 - push new commits to server(B[m
ok 107 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 6 - --single-branch while HEAD pointing at master and --no-tags(B[m
ok 10 - that relative alternate is possible for current dir(B[m
ok 68 - clone [foo]bar/baz:qux is not ssh(B[m
ok 7 - partial fetch inherits filter settings(B[m
ok 11 - that relative alternate is recursive(B[m
ok 69 - clone [foo/bar]:baz is not ssh(B[m
ok 7 - --single-branch while HEAD pointing at side(B[m
ok 8 - verify diff causes dynamic object fetch(B[m
ok 70 - clone ssh://host.xz/home/user/repo(B[m
ok 12 - relative duplicates are eliminated(B[m
[34mok 13 # skip dup finding can be case-insensitive (missing CASE_INSENSITIVE_FS)(B[m
ok 8 - --single-branch with explicit --branch side(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 71 - clone ssh://host.xz/~repo(B[m
ok 4 - git_pull: replace directory with submodule(B[m
*** t5618-alternate-refs.sh ***
ok 72 - clone ssh://host.xz:/home/user/repo(B[m
ok 9 - --single-branch with explicit --branch with tag fetches updated tag(B[m
ok 108 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset; branch:pruned tag:kept(B[m
ok 3 - shallow clone with shallow submodule(B[m
ok 73 - clone ssh://host.xz:/~repo(B[m
ok 9 - verify blame causes dynamic object fetch(B[m
ok 74 - clone ssh://host.xz:22/home/user/repo(B[m
ok 10 - --single-branch with explicit --branch with tag fetches updated tag despite --no-tags(B[m
ok 2 - clone with --no-remote-submodules(B[m
ok 33 - clone repo with symlinked or unknown files at objects/(B[m
[32m# passed all 33 test(s)(B[m
[36m1..33(B[m
ok 75 - clone ssh://host.xz:22/~repo(B[m
ok 1 - set up local refs(B[m
ok 11 - --single-branch with --mirror(B[m
ok 76 - clone ssh://::1/home/user/repo(B[m
ok 2 - set up shared clone(B[m
ok 77 - clone ssh://[::1]/home/user/repo(B[m
ok 12 - --single-branch with explicit --branch and --mirror(B[m
ok 3 - rev-list --alternate-refs(B[m
*** t5700-protocol-v1.sh ***
ok 109 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 10 - push new commits to server for file.2.txt(B[m
ok 4 - rev-list --not --alternate-refs(B[m
ok 78 - clone ssh://[::1]:/home/user/repo(B[m
ok 13 - --single-branch with detached(B[m
ok 75 - push to update a ref hidden by receive.hiderefs(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 5 - limiting with alternateRefsPrefixes(B[m
ok 79 - clone ssh://user@::1/home/user/repo(B[m
ok 11 - override inherited filter-spec using --no-filter(B[m
ok 6 - log --source shows .alternate marker(B[m
ok 4 - shallow clone does not imply shallow submodule(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 80 - clone ssh://user@[::1]/home/user/repo(B[m
*** t5701-git-serve.sh ***
*** t5702-protocol-v2.sh ***
ok 81 - clone ssh://user@[::1]:/home/user/repo(B[m
ok 3 - clone with --remote-submodules(B[m
ok 1 - create repo to be served by git-daemon(B[m
ok 82 - clone ssh://[user@::1]/home/user/repo(B[m
ok 110 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune; branch:pruned tag:kept(B[m
ok 2 - clone with git:// using protocol v1(B[m
ok 1 - test capability advertisement(B[m
ok 83 - clone ssh://[user@::1]:/home/user/repo(B[m
ok 2 - stateless-rpc flag does not list capabilities(B[m
ok 1 - create repo to be served by git-daemon(B[m
ok 12 - push new commits to server for file.3.txt(B[m
ok 84 - clone ssh://::1/~repo(B[m
ok 3 - request invalid capability(B[m
ok 4 - request with no command(B[m
ok 85 - clone ssh://[::1]/~repo(B[m
ok 2 - list refs with git:// using protocol v2(B[m
ok 3 - fetch with git:// using protocol v1(B[m
ok 5 - git_pull: removed submodule leaves submodule directory and its contents in place(B[m
ok 5 - request invalid command(B[m
ok 86 - clone ssh://user@::1/~repo(B[m
ok 3 - ref advertisement is filtered with ls-remote using protocol v2(B[m
ok 5 - shallow clone with non shallow submodule(B[m
ok 13 - manual prefetch of missing objects(B[m
ok 4 - pull with git:// using protocol v1(B[m
ok 87 - clone ssh://user@[::1]/~repo(B[m
ok 111 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 6 - setup some refs and tags(B[m
ok 4 - check the default is --no-remote-submodules(B[m
ok 4 - clone with git:// using protocol v2(B[m
ok 88 - clone ssh://[user@::1]/~repo(B[m
ok 76 - fetch exact SHA1(B[m
ok 89 - clone ssh://[::1]:22/home/user/repo(B[m
ok 5 - push with git:// using protocol v1(B[m
ok 7 - basics of ls-refs(B[m
ok 90 - clone ssh://user@[::1]:22/home/user/repo(B[m
ok 5 - fetch with git:// using protocol v2(B[m
ok 14 - partial clone with transfer.fsckobjects=1 uses index-pack --fsck-objects(B[m
ok 6 - create repo to be served by file:// transport(B[m
ok 8 - basic ref-prefixes(B[m
ok 91 - clone ssh://[user@::1]:22/home/user/repo(B[m
ok 92 - clone ssh://[::1]:22/~repo(B[m
ok 9 - refs/heads prefix(B[m
ok 112 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --no-prune; branch:kept tag:kept(B[m
ok 7 - clone with file:// using protocol v1(B[m
ok 6 - fetch by hash without tag following with protocol v2 does not list refs(B[m
ok 93 - clone ssh://user@[::1]:22/~repo(B[m
ok 10 - peel parameter(B[m
ok 6 - non shallow clone with shallow submodule(B[m
ok 94 - clone ssh://[user@::1]:22/~repo(B[m
ok 7 - pull with git:// using protocol v2(B[m
ok 5 - clone with --single-branch(B[m
ok 8 - fetch with file:// using protocol v1(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t5703-upload-pack-ref-in-want.sh ***
ok 11 - symrefs parameter(B[m
ok 95 - clone from a repository with two identical branches(B[m
ok 12 - sending server-options(B[m
[34mok 1 # skip create repositories with signed commits (missing GPG)(B[m
[34mok 2 # skip pull unsigned commit with --verify-signatures (missing GPG)(B[m
[34mok 3 # skip pull commit with bad signature with --verify-signatures (missing GPG)(B[m
[34mok 4 # skip pull commit with untrusted signature with --verify-signatures (missing GPG)(B[m
[34mok 5 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=ultimate (missing GPG)(B[m
ok 9 - pull with file:// using protocol v1(B[m
[34mok 6 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=marginal (missing GPG)(B[m
[34mok 7 # skip pull commit with untrusted signature with --verify-signatures and minTrustLevel=undefined (missing GPG)(B[m
[34mok 8 # skip pull signed commit with --verify-signatures (missing GPG)(B[m
[34mok 9 # skip pull commit with bad signature without verification (missing GPG)(B[m
ok 77 - fetch exact SHA1 in protocol v2(B[m
[34mok 10 # skip pull commit with bad signature with --no-verify-signatures (missing GPG)(B[m
ok 13 - unexpected lines are not allowed in fetch request(B[m
[34mok 11 # skip pull unsigned commit into unborn branch (missing GPG)(B[m
ok 8 - push with git:// and a config of v2 does not request v2(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
[34mok 12 # skip pull commit into unborn branch with bad signature and --verify-signatures (missing GPG)(B[m
[34mok 13 # skip pull commit into unborn branch with untrusted signature and --verify-signatures (missing GPG)(B[m
[34mok 14 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=ultimate (missing GPG)(B[m
[34mok 15 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=marginal (missing GPG)(B[m
*** t5801-remote-helpers.sh ***
ok 113 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
[34mok 16 # skip pull commit into unborn branch with untrusted signature and --verify-signatures and minTrustLevel=undefined (missing GPG)(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
*** t5802-connect-helper.sh ***
ok 96 - shallow clone locally(B[m
ok 9 - create repo to be served by file:// transport(B[m
ok 10 - push with file:// using protocol v1(B[m
ok 11 - setup ssh wrapper(B[m
ok 97 - GIT_TRACE_PACKFILE produces a usable pack(B[m
ok 10 - list refs with file:// using protocol v2(B[m
ok 6 - git_pull: removed submodule leaves submodule containing a .git directory alone(B[m
ok 12 - create repo to be served by ssh:// transport(B[m
ok 11 - ref advertisement is filtered with ls-remote using protocol v2(B[m
ok 78 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=true(B[m
ok 98 - clone on case-insensitive fs(B[m
ok 1 - setup(B[m
ok 7 - clone follows shallow recommendation(B[m
ok 12 - server-options are sent when using ls-remote(B[m
[34mok 99 # skip colliding file detection (missing CASE_INSENSITIVE_FS)(B[m
ok 114 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/*; branch:kept tag:pruned(B[m
ok 13 - clone with ssh:// using protocol v1(B[m
ok 13 - warn if using server-option with ls-remote with legacy protocol(B[m
ok 2 - clone(B[m
ok 14 - clone with file:// using protocol v2(B[m
ok 1 - setup repository(B[m
ok 14 - fetch with ssh:// using protocol v1(B[m
ok 3 - update following tag(B[m
ok 2 - config controls ref-in-want advertisement(B[m
ok 3 - invalid want-ref line(B[m
ok 15 - pull with ssh:// using protocol v1(B[m
ok 115 - name prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
ok 15 - fetch with file:// using protocol v2(B[m
ok 100 - partial clone(B[m
ok 4 - update backfilled tag(B[m
ok 8 - get unshallow recommended shallow submodule(B[m
ok 79 - deny fetch unreachable SHA1, allowtipsha1inwant=true(B[m
ok 4 - basic want-ref(B[m
ok 16 - push with ssh:// using protocol v1(B[m
ok 16 - ref advertisement is filtered during fetch using protocol v2(B[m
ok 5 - update backfilled tag without primary transfer(B[m
[32m# passed all 16 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..16(B[m
ok 6 - set up fake git-daemon(B[m
*** t5810-proto-disable-local.sh ***
ok 5 - multiple want-ref lines(B[m
ok 116 - link prune fetch.prune=true remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=unset --prune origin refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:pruned(B[m
ok 7 - ext command can connect to git daemon (no vhost)(B[m
ok 17 - server-options are sent when fetching(B[m
ok 101 - partial clone with -o(B[m
ok 80 - shallow fetch reachable SHA1 (but not a ref), allowtipsha1inwant=false(B[m
ok 7 - git_pull: replace submodule with a directory must fail(B[m
ok 8 - ext command can connect to git daemon (vhost)(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 18 - warn if using server-option with fetch with legacy protocol(B[m
*** t5811-proto-disable-git.sh ***
ok 1 - setup repository to clone(B[m
ok 6 - mix want and want-ref(B[m
ok 19 - server-options are sent when cloning(B[m
ok 102 - partial clone: warn if server does not support object filtering(B[m
ok 2 - clone file:// (enabled)(B[m
ok 20 - warn if using server-option with clone with legacy protocol(B[m
ok 9 - clone follows non shallow recommendation(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 3 - fetch file:// (enabled)(B[m
*** t5812-proto-disable-http.sh ***
ok 117 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept(B[m
ok 4 - push file:// (enabled)(B[m
ok 7 - want-ref with ref we already have commit for(B[m
ok 5 - push file:// (disabled)(B[m
ok 6 - fetch file:// (disabled)(B[m
ok 7 - clone file:// (disabled)(B[m
ok 21 - upload-pack respects config using protocol v2(B[m
ok 1 - create git-accessible repo(B[m
[36m1..0 # SKIP no web server found at '/usr/sbin/apache2'(B[m
*** t5813-proto-disable-ssh.sh ***
ok 8 - clone file:// (env var has precedence)(B[m
ok 2 - clone git:// (enabled)(B[m
ok 103 - batch missing blob request during checkout(B[m
ok 81 - deny fetch unreachable SHA1, allowtipsha1inwant=false(B[m
ok 9 - clone file:// (enabled with config)(B[m
ok 3 - fetch git:// (enabled)(B[m
ok 22 - setup filter tests(B[m
ok 10 - fetch file:// (enabled)(B[m
ok 1 - setup ssh wrapper(B[m
ok 118 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune-tags; branch:kept tag:kept(B[m
ok 4 - push git:// (enabled)(B[m
ok 11 - push file:// (enabled)(B[m
ok 5 - push git:// (disabled)(B[m
ok 12 - push file:// (disabled)(B[m
ok 6 - fetch git:// (disabled)(B[m
ok 13 - fetch file:// (disabled)(B[m
ok 7 - clone git:// (disabled)(B[m
ok 14 - clone file:// (disabled)(B[m
ok 2 - setup repository to clone(B[m
ok 8 - clone git:// (env var has precedence)(B[m
ok 23 - partial clone(B[m
ok 15 - clone file:// (enabled)(B[m
ok 3 - clone host:path (enabled)(B[m
ok 9 - clone git:// (enabled with config)(B[m
ok 16 - fetch file:// (enabled)(B[m
ok 24 - dynamically fetch missing object(B[m
ok 10 - fetch git:// (enabled)(B[m
ok 17 - push file:// (enabled)(B[m
ok 25 - when dynamically fetching missing object, do not list refs(B[m
ok 4 - fetch host:path (enabled)(B[m
ok 18 - push file:// (disabled)(B[m
ok 8 - setup repos for fetching with ref-in-want tests(B[m
ok 11 - push git:// (enabled)(B[m
ok 119 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 19 - fetch file:// (disabled)(B[m
ok 12 - push git:// (disabled)(B[m
ok 82 - fetch follows tags by default(B[m
ok 13 - fetch git:// (disabled)(B[m
ok 5 - push host:path (enabled)(B[m
ok 20 - clone file:// (disabled)(B[m
ok 5 - do not send "have" with ancestors of commits that server ACKed(B[m
ok 6 - push host:path (disabled)(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 14 - clone git:// (disabled)(B[m
ok 8 - git_pull: replace submodule containing a .git directory with a directory must fail(B[m
ok 7 - fetch host:path (disabled)(B[m
ok 8 - clone host:path (disabled)(B[m
ok 21 - clone file:// (enabled)(B[m
ok 9 - fetching with exact OID(B[m
ok 15 - clone git:// (enabled)(B[m
ok 26 - partial fetch(B[m
ok 104 - batch missing blob request does not inadvertently try to fetch gitlinks(B[m
ok 9 - clone host:path (env var has precedence)(B[m
*** t5814-proto-disable-ext.sh ***
ok 83 - peeled advertisements are not considered ref tips(B[m
ok 16 - fetch git:// (enabled)(B[m
[32m# passed all 104 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..104(B[m
ok 22 - fetch file:// (enabled)(B[m
ok 17 - push git:// (enabled)(B[m
ok 27 - do not advertise filter if not configured to do so(B[m
ok 10 - clone host:path (enabled with config)(B[m
ok 18 - push git:// (disabled)(B[m
ok 23 - push file:// (enabled)(B[m
ok 10 - fetching multiple refs(B[m
ok 19 - fetch git:// (disabled)(B[m
ok 120 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:kept tag:kept(B[m
ok 20 - clone git:// (disabled)(B[m
ok 24 - push file:// (disabled)(B[m
ok 11 - fetch host:path (enabled)(B[m
ok 1 - setup ext wrapper(B[m
ok 12 - push host:path (enabled)(B[m
ok 28 - partial clone warns if filter is not advertised(B[m
ok 25 - fetch file:// (disabled)(B[m
ok 13 - push host:path (disabled)(B[m
ok 14 - fetch host:path (disabled)(B[m
ok 21 - clone git:// (enabled)(B[m
ok 26 - clone file:// (disabled)(B[m
ok 11 - fetching ref and exact OID(B[m
ok 15 - clone host:path (disabled)(B[m
ok 2 - setup repository to clone(B[m
ok 27 - clone path (enabled)(B[m
ok 29 - even with handcrafted request, filter does not work if not advertised(B[m
ok 22 - fetch git:// (enabled)(B[m
ok 12 - fetching with wildcard that does not match any refs(B[m
*** t5815-submodule-protos.sh ***
ok 16 - clone host:path (enabled)(B[m
ok 28 - fetch path (enabled)(B[m
ok 3 - clone remote-helper (enabled)(B[m
ok 23 - push git:// (enabled)(B[m
ok 29 - push path (enabled)(B[m
ok 30 - default refspec is used to filter ref when fetchcing(B[m
ok 17 - fetch host:path (enabled)(B[m
ok 30 - push path (disabled)(B[m
ok 24 - push git:// (disabled)(B[m
ok 84 - pushing a specific ref applies remote.$name.push as refmap(B[m
ok 4 - fetch remote-helper (enabled)(B[m
ok 121 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept(B[m
ok 31 - fetch path (disabled)(B[m
ok 18 - push host:path (enabled)(B[m
ok 25 - fetch git:// (disabled)(B[m
ok 1 - setup ext wrapper(B[m
ok 13 - fetching with wildcard that matches multiple refs(B[m
ok 32 - clone path (disabled)(B[m
ok 19 - push host:path (disabled)(B[m
ok 2 - setup ssh wrapper(B[m
ok 5 - push remote-helper (enabled)(B[m
ok 20 - fetch host:path (disabled)(B[m
ok 6 - push remote-helper (disabled)(B[m
ok 26 - clone git:// (disabled)(B[m
ok 33 - clone path (env var has precedence)(B[m
[32m# passed all 13 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..13(B[m
ok 21 - clone host:path (disabled)(B[m
ok 7 - fetch remote-helper (disabled)(B[m
[32m# passed all 26 test(s)(B[m
[36m1..26(B[m
*** t5900-repo-selection.sh ***
*** t6000-rev-list-misc.sh ***
ok 34 - clone path (enabled with config)(B[m
ok 8 - clone remote-helper (disabled)(B[m
ok 35 - fetch path (enabled)(B[m
ok 9 - clone remote-helper (env var has precedence)(B[m
ok 22 - clone host:path (enabled)(B[m
ok 36 - push path (enabled)(B[m
[33mnot ok 9 - git_pull: replace submodule with a file must fail # TODO known breakage(B[m
ok 37 - push path (disabled)(B[m
ok 38 - fetch path (disabled)(B[m
ok 15 - use fsck before and after manually fetching a missing subtree(B[m
ok 10 - clone remote-helper (enabled with config)(B[m
ok 23 - fetch host:path (enabled)(B[m
ok 39 - clone path (disabled)(B[m
ok 122 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true; branch:kept tag:kept(B[m
ok 1 - setup(B[m
ok 11 - fetch remote-helper (enabled)(B[m
ok 2 - rev-list --objects heeds pathspecs(B[m
ok 24 - push host:path (enabled)(B[m
ok 40 - clone path (enabled)(B[m
ok 85 - with no remote.$name.push, it is not used as refmap(B[m
ok 12 - push remote-helper (enabled)(B[m
ok 13 - push remote-helper (disabled)(B[m
ok 25 - push host:path (disabled)(B[m
ok 41 - fetch path (enabled)(B[m
ok 14 - fetch remote-helper (disabled)(B[m
ok 3 - rev-list --objects with pathspecs and deeper paths(B[m
ok 42 - push path (enabled)(B[m
ok 26 - fetch host:path (disabled)(B[m
ok 15 - clone remote-helper (disabled)(B[m
ok 43 - push path (disabled)(B[m
ok 1 - find .git dir in worktree(B[m
ok 44 - fetch path (disabled)(B[m
ok 27 - clone host:path (disabled)(B[m
ok 45 - clone path (disabled)(B[m
ok 16 - clone remote-helper (enabled)(B[m
ok 4 - rev-list --objects with pathspecs and copied files(B[m
ok 31 - fetch supports various ways of have lines(B[m
ok 5 - rev-list --objects --no-object-names has no space/names(B[m
ok 28 - clone ssh:// (enabled)(B[m
ok 17 - fetch remote-helper (enabled)(B[m
ok 46 - clone path (enabled)(B[m
ok 123 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned(B[m
ok 6 - rev-list --objects --no-object-names works with cat-file(B[m
ok 18 - push remote-helper (enabled)(B[m
ok 29 - fetch ssh:// (enabled)(B[m
ok 19 - push remote-helper (disabled)(B[m
ok 7 - --no-object-names and --object-names are last-one-wins(B[m
ok 47 - fetch path (enabled)(B[m
ok 2 - automagically add .git suffix(B[m
ok 3 - setup repository with submodules(B[m
ok 20 - fetch remote-helper (disabled)(B[m
ok 30 - push ssh:// (enabled)(B[m
ok 31 - push ssh:// (disabled)(B[m
ok 21 - clone remote-helper (disabled)(B[m
ok 48 - push path (enabled)(B[m
ok 8 - rev-list A..B and rev-list ^A B are the same(B[m
ok 32 - fetch ssh:// (disabled)(B[m
ok 9 - propagate uninteresting flag down correctly(B[m
ok 32 - fetch supports include-tag and tag following(B[m
ok 33 - clone ssh:// (disabled)(B[m
ok 49 - push path (disabled)(B[m
ok 16 - implicitly construct combine: filter with repeated flags(B[m
ok 10 - symleft flag bit is propagated down from tag(B[m
ok 86 - with no remote.$name.push, upstream mapping is used(B[m
ok 22 - clone remote-helper (enabled)(B[m
ok 50 - fetch path (disabled)(B[m
ok 34 - clone ssh:// (env var has precedence)(B[m
ok 51 - clone path (disabled)(B[m
ok 11 - rev-list can show index objects(B[m
ok 3 - automagically add .git suffix to worktree(B[m
ok 23 - fetch remote-helper (enabled)(B[m
ok 35 - clone ssh:// (enabled with config)(B[m
ok 124 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags; branch:pruned tag:pruned(B[m
ok 12 - rev-list can negate index objects(B[m
ok 13 - --bisect and --first-parent can not be combined(B[m
ok 4 - clone with recurse-submodules fails(B[m
ok 24 - push remote-helper (enabled)(B[m
ok 36 - fetch ssh:// (enabled)(B[m
ok 52 - setup repo with dash(B[m
ok 14 - --header shows a NUL after each commit(B[m
ok 37 - push ssh:// (enabled)(B[m
ok 53 - repo names starting with dash are rejected(B[m
ok 25 - push remote-helper (disabled)(B[m
ok 38 - push ssh:// (disabled)(B[m
ok 15 - rev-list --end-of-options(B[m
ok 39 - fetch ssh:// (disabled)(B[m
ok 26 - fetch remote-helper (disabled)(B[m
ok 54 - full paths still work(B[m
[32m# passed all 54 test(s)(B[m
[36m1..54(B[m
ok 16 - rev-list --count(B[m
ok 40 - clone ssh:// (disabled)(B[m
ok 17 - partial clone fetches blobs pointed to by refs even if normally filtered out(B[m
*** t6001-rev-list-graft.sh ***
[33mnot ok 10 - git_pull: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 27 - clone remote-helper (disabled)(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 17 - rev-list --count --objects(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 5 - setup individual updates(B[m
*** t6002-rev-list-bisect.sh ***
*** t6003-rev-list-topo-order.sh ***
ok 41 - clone ssh:// (enabled)(B[m
ok 33 - upload-pack respects client shallows(B[m
ok 4 - prefer worktree foo over bare foo.git(B[m
ok 87 - push does not follow tags by default(B[m
ok 42 - fetch ssh:// (enabled)(B[m
ok 125 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned(B[m
ok 43 - push ssh:// (enabled)(B[m
ok 44 - push ssh:// (disabled)(B[m
ok 45 - fetch ssh:// (disabled)(B[m
ok 46 - clone ssh:// (disabled)(B[m
ok 18 - fetch what is specified on CLI even if already promised(B[m
ok 6 - update of ssh allowed(B[m
ok 5 - prefer bare foo over bare foo.git(B[m
ok 47 - clone ssh:// (enabled)(B[m
ok 1 - setup(B[m
ok 2 - without grafts(B[m
ok 3 - with grafts(B[m
ok 48 - fetch ssh:// (enabled)(B[m
ok 34 - ensure that multiple fetches in same process from a shallow repo works(B[m
ok 19 - setup src repo for sparse filter(B[m
ok 126 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned(B[m
ok 4 - without grafts, with pathlimit(B[m
ok 5 - with grafts, with pathlimit(B[m
ok 49 - push ssh:// (enabled)(B[m
ok 7 - update of ext not allowed(B[m
ok 6 - without grafts(B[m
ok 50 - push ssh:// (disabled)(B[m
ok 88 - push --follow-tags only pushes relevant tags(B[m
ok 7 - with grafts(B[m
ok 20 - partial clone with sparse filter succeeds(B[m
ok 51 - fetch ssh:// (disabled)(B[m
ok 8 - without grafts, with pathlimit(B[m
ok 6 - disambiguate with full foo.git(B[m
ok 9 - with grafts, with pathlimit(B[m
ok 52 - clone ssh:// (disabled)(B[m
ok 10 - without grafts(B[m
ok 21 - partial clone with unresolvable sparse filter fails cleanly(B[m
ok 11 - with grafts(B[m
ok 53 - clone git+ssh:// (enabled)(B[m
ok 12 - without grafts, with pathlimit(B[m
ok 13 - with grafts, with pathlimit(B[m
ok 127 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned(B[m
ok 54 - fetch git+ssh:// (enabled)(B[m
ok 8 - user can override whitelist(B[m
ok 89 - push --no-thin must produce non-thin pack(B[m
ok 55 - push git+ssh:// (enabled)(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 7 - we are not fooled by non-git foo directory(B[m
ok 56 - push git+ssh:// (disabled)(B[m
ok 14 - show advice that grafts are deprecated(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
*** t6004-rev-list-path-optim.sh ***
ok 57 - fetch git+ssh:// (disabled)(B[m
*** t6005-rev-list-count.sh ***
ok 35 - deepen-relative(B[m
ok 58 - clone git+ssh:// (disabled)(B[m
ok 90 - pushing a tag pushes the tagged object(B[m
[32m# passed all 35 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..35(B[m
ok 59 - clone git+ssh:// (env var has precedence)(B[m
*** t6006-rev-list-format.sh ***
ok 60 - clone git+ssh:// (enabled with config)(B[m
ok 1 - setup(B[m
ok 128 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true; branch:pruned tag:pruned(B[m
ok 61 - fetch git+ssh:// (enabled)(B[m
ok 8 - prefer inner .git over outer bare(B[m
ok 2 - path-optimization(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 11 - git_pull: modified submodule does not update submodule work tree(B[m
ok 62 - push git+ssh:// (enabled)(B[m
*** t6007-rev-list-cherry-pick-file.sh ***
ok 91 - push into bare respects core.logallrefupdates(B[m
ok 63 - push git+ssh:// (disabled)(B[m
ok 64 - fetch git+ssh:// (disabled)(B[m
ok 1 - setup(B[m
ok 2 - no options(B[m
ok 65 - clone git+ssh:// (disabled)(B[m
ok 3 - --max-count(B[m
ok 66 - clone git+ssh:// (enabled)(B[m
ok 4 - --max-count all forms(B[m
ok 92 - fetch into bare respects core.logallrefupdates(B[m
ok 67 - fetch git+ssh:// (enabled)(B[m
ok 68 - push git+ssh:// (enabled)(B[m
ok 5 - --skip(B[m
ok 129 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned(B[m
ok 3 - further setup(B[m
ok 69 - push git+ssh:// (disabled)(B[m
ok 70 - fetch git+ssh:// (disabled)(B[m
ok 4 - path optimization 2(B[m
ok 71 - clone git+ssh:// (disabled)(B[m
ok 5 - pathspec with leading path(B[m
ok 1 - setup(B[m
ok 6 - --skip --max-count(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t6008-rev-list-submodule.sh ***
ok 6 - pathspec with glob (1)(B[m
ok 2 - format percent(B[m
ok 3 - format hash(B[m
ok 1 - setup(B[m
ok 7 - pathspec with glob (2)(B[m
ok 72 - clone git+ssh:// (enabled)(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
*** t6009-rev-list-parent.sh ***
ok 4 - format tree(B[m
ok 2 - --left-right(B[m
ok 5 - format parents(B[m
ok 3 - --count(B[m
ok 73 - fetch git+ssh:// (enabled)(B[m
ok 4 - --cherry-pick foo comes up empty(B[m
ok 6 - format author(B[m
ok 7 - format committer(B[m
ok 5 - --cherry-pick bar does not come up empty(B[m
ok 74 - push git+ssh:// (enabled)(B[m
ok 130 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset; branch:pruned tag:pruned(B[m
ok 8 - format encoding(B[m
ok 6 - bar does not come up empty(B[m
ok 9 - format subject(B[m
ok 75 - push git+ssh:// (disabled)(B[m
ok 7 - --cherry-pick bar does not come up empty (II)(B[m
ok 10 - format subject-truncated(B[m
ok 76 - fetch git+ssh:// (disabled)(B[m
ok 11 - format body(B[m
ok 8 - name-rev multiple --refs combine inclusive(B[m
ok 12 - format raw-body(B[m
ok 77 - clone git+ssh:// (disabled)(B[m
ok 9 - name-rev --refs excludes non-matched patterns(B[m
ok 13 - basic colors(B[m
ok 78 - hostnames starting with dash are rejected(B[m
ok 14 - %S is not a placeholder for rev-list yet(B[m
ok 1 - setup(B[m
ok 2 - one is ancestor of others and should not be shown(B[m
ok 10 - name-rev --exclude excludes matched patterns(B[m
ok 15 - advanced colors(B[m
ok 16 - %Cred does not enable color by default(B[m
ok 79 - setup repo with dash(B[m
ok 11 - name-rev --no-refs clears the refs list(B[m
ok 17 - %Cred enables colors for color.diff(B[m
ok 80 - repo names starting with dash are rejected(B[m
ok 12 - --cherry-mark(B[m
ok 131 - name prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned(B[m
ok 18 - %Cred enables colors for color.ui(B[m
ok 1 - setup(B[m
ok 2 - Ilari's test(B[m
ok 19 - %Cred respects --color(B[m
ok 13 - --cherry-mark --left-right(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 81 - full paths still work(B[m
ok 20 - %Cred respects --no-color(B[m
[32m# passed all 81 test(s)(B[m
[36m1..81(B[m
*** t6010-merge-base.sh ***
[34mok 21 # skip %Cred respects --color=auto (stdout is tty) (missing TTY)(B[m
*** t6011-rev-list-with-bad-commit.sh ***
ok 14 - --cherry-pick --right-only(B[m
ok 22 - %Cred respects --color=auto (stdout not tty)(B[m
ok 15 - --cherry-pick --left-only(B[m
ok 23 - %C(...) does not enable color by default(B[m
ok 24 - %C(...) enables colors for color.diff(B[m
ok 16 - --cherry(B[m
ok 1 - bisection diff --bisect l0 ^root <= 0(B[m
ok 25 - %C(...) enables colors for color.ui(B[m
ok 1 - setup(B[m
ok 17 - --cherry --count(B[m
ok 12 - git_pull: modified submodule does not update submodule work tree to invalid commit(B[m
ok 26 - %C(...) respects --color(B[m
ok 18 - --cherry-mark --count(B[m
ok 2 - bisection diff --bisect l1 ^root <= 0(B[m
ok 27 - %C(...) respects --no-color(B[m
[34mok 28 # skip %C(...) respects --color=auto (stdout is tty) (missing TTY)(B[m
ok 19 - --cherry-mark --left-right --count(B[m
ok 29 - %C(...) respects --color=auto (stdout not tty)(B[m
ok 3 - bisection diff --bisect l2 ^root <= 0(B[m
ok 30 - %C(auto,...) does not enable color by default(B[m
ok 132 - link prune fetch.prune=false remote.origin.prune=true fetch.pruneTags=false remote.origin.pruneTags=true; branch:pruned tag:pruned(B[m
ok 31 - %C(auto,...) enables colors for color.diff(B[m
ok 4 - bisection diff --bisect a0 ^root <= 0(B[m
ok 22 - fetch lazy-fetches only to resolve deltas(B[m
ok 20 - --cherry-pick with independent, but identical branches(B[m
ok 32 - %C(auto,...) enables colors for color.ui(B[m
ok 21 - --count --left-right(B[m
ok 2 - set up G and H(B[m
ok 5 - bisection diff --bisect a1 ^root <= 0(B[m
ok 33 - %C(auto,...) respects --color(B[m
ok 1 - setup(B[m
ok 34 - %C(auto,...) respects --no-color(B[m
[34mok 35 # skip %C(auto,...) respects --color=auto (stdout is tty) (missing TTY)(B[m
ok 2 - verify number of revisions(B[m
ok 6 - bisection diff --bisect a2 ^root <= 0(B[m
ok 36 - %C(auto,...) respects --color=auto (stdout not tty)(B[m
ok 3 - corrupt second commit object(B[m
ok 37 - %C(always,...) enables color even without tty(B[m
ok 3 - merge-base G H(B[m
ok 4 - rev-list should fail(B[m
ok 7 - bisection diff --bisect a3 ^root <= 0(B[m
ok 5 - git repack _MUST_ fail(B[m
ok 38 - %C(auto) respects --color(B[m
ok 6 - first commit is still available(B[m
ok 22 - --cherry-pick avoids looking at full diffs(B[m
ok 8 - bisection diff --bisect b1 ^root <= 0(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 39 - %C(auto) respects --no-color(B[m
*** t6012-rev-list-simplify.sh ***
*** t6013-rev-list-reverse-parents.sh ***
ok 9 - bisection diff --bisect b2 ^root <= 0(B[m
ok 133 - name prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept(B[m
ok 40 - rev-list %C(auto,...) respects --color(B[m
ok 93 - receive.denyCurrentBranch = updateInstead(B[m
ok 4 - merge-base/show-branch --independent(B[m
ok 3 - setup roots, merges and octopuses(B[m
ok 10 - bisection diff --bisect b3 ^root <= 0(B[m
ok 1 - rev-list has correct number of entries(B[m
ok 41 - setup complex body(B[m
ok 4 - rev-list roots(B[m
ok 42 - format complex-encoding(B[m
ok 2 - simple topo order(B[m
ok 11 - bisection diff --bisect c1 ^root <= 0(B[m
ok 43 - format complex-subject(B[m
ok 5 - rev-list no merges(B[m
ok 3 - simple date order(B[m
ok 12 - bisection diff --bisect c2 ^root <= 0(B[m
ok 44 - format complex-subject-trunc(B[m
ok 6 - rev-list no octopuses(B[m
ok 45 - format complex-subject-mtrunc(B[m
ok 4 - simple author-date order(B[m
ok 13 - bisection diff --bisect c3 ^root <= 0(B[m
ok 7 - rev-list no roots(B[m
ok 46 - format complex-subject-ltrunc(B[m
ok 5 - two diamonds topo order (g6)(B[m
ok 47 - prepare expected messages (for test %b)(B[m
ok 14 - bisection diff --bisect E ^F <= 0(B[m
ok 48 - format complex-body(B[m
ok 6 - multiple heads(B[m
ok 1 - set up --reverse example(B[m
ok 8 - rev-list merges(B[m
ok 134 - link prune fetch.prune=true remote.origin.prune=false fetch.pruneTags=true remote.origin.pruneTags=false; branch:kept tag:kept(B[m
ok 15 - bisection diff --bisect e1 ^F <= 0(B[m
ok 49 - format complex-subject-commitencoding-unset(B[m
ok 7 - multiple heads, prune at a1(B[m
ok 2 - --reverse --parents --full-history combines correctly(B[m
ok 9 - rev-list octopus(B[m
ok 50 - format complex-subject-commitencoding-unset-trunc(B[m
ok 8 - multiple heads, prune at l1(B[m
ok 16 - bisection diff --bisect e2 ^F <= 0(B[m
ok 3 - --boundary does too(B[m
ok 10 - rev-list ordinary commits(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 51 - format complex-subject-commitencoding-unset-mtrunc(B[m
*** t6014-rev-list-all.sh ***
ok 5 - unsynchronized clocks(B[m
ok 9 - cross-epoch, head at l5, prune at l1(B[m
ok 52 - format complex-subject-commitencoding-unset-ltrunc(B[m
ok 17 - bisection diff --bisect e3 ^F <= 0(B[m
ok 53 - format complex-body-commitencoding-unset(B[m
ok 10 - duplicated head arguments(B[m
ok 11 - rev-list --merges --no-merges yields empty set(B[m
ok 18 - bisection diff --bisect e4 ^F <= 0(B[m
ok 54 - %x00 shows NUL(B[m
ok 11 - prune near topo(B[m
ok 55 - %ad respects --date=(B[m
ok 19 - bisection diff --bisect e5 ^F <= 0(B[m
ok 12 - head has no parent(B[m
ok 56 - empty email(B[m
ok 57 - del LF before empty (1)(B[m
ok 13 - two nodes - one head, one base(B[m
ok 13 - git_pull: modified submodule does not update submodule work tree from invalid commit(B[m
ok 20 - bisection diff --bisect e6 ^F <= 0(B[m
ok 135 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
ok 58 - del LF before empty (2)(B[m
ok 14 - three nodes one head, one internal, one base(B[m
ok 59 - add LF before non-empty (1)(B[m
ok 1 - setup(B[m
ok 21 - bisection diff --bisect e7 ^F <= 0(B[m
ok 12 - rev-list override and infinities(B[m
ok 2 - rev-list --all lists detached HEAD(B[m
ok 1 - setup(B[m
ok 15 - linear prune l2 ^root(B[m
ok 60 - add LF before non-empty (2)(B[m
ok 6 - --independent with unsynchronized clocks(B[m
ok 22 - bisection diff --bisect f1 ^F <= 0(B[m
ok 61 - add SP before non-empty (1)(B[m
ok 2 - log --full-history --topo-order(B[m
ok 16 - linear prune l2 ^l0(B[m
ok 62 - add SP before non-empty (2)(B[m
ok 3 - log --full-history(B[m
ok 17 - linear prune l2 ^l1(B[m
ok 23 - bisection diff --bisect f2 ^F <= 0(B[m
ok 4 - log --full-history --date-order(B[m
ok 94 - updateInstead with push-to-checkout hook(B[m
ok 18 - linear prune l5 ^a4(B[m
ok 63 - --abbrev(B[m
ok 5 - log --full-history --author-date-order(B[m
ok 3 - repack does not lose detached HEAD(B[m
ok 24 - bisection diff --bisect f3 ^F <= 0(B[m
ok 64 - %H is not affected by --abbrev-commit(B[m
ok 4 - rev-list --graph --no-walk is forbidden(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 19 - linear prune l5 ^l3(B[m
ok 6 - log --full-history -- file(B[m
*** t6016-rev-list-graph-simplify-history.sh ***
ok 65 - %h is not affected by --abbrev-commit(B[m
ok 25 - bisection diff --bisect f4 ^F <= 0(B[m
ok 7 - log --full-history --topo-order -- file(B[m
ok 20 - linear prune l5 ^l4(B[m
ok 136 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
ok 66 - "%h %gD: %gs" is same as git-reflog(B[m
ok 8 - log --full-history --date-order -- file(B[m
ok 26 - bisection diff --bisect E ^F <= 0(B[m
ok 21 - max-count 10 - topo order(B[m
ok 67 - "%h %gD: %gs" is same as git-reflog (with date)(B[m
ok 9 - log --full-history --author-date-order -- file(B[m
ok 22 - max-count 10 - non topo order(B[m
ok 68 - "%h %gD: %gs" is same as git-reflog (with --abbrev)(B[m
ok 27 - bisection diff --bisect V ^U <= 1(B[m
ok 10 - log --simplify-merges -- file(B[m
ok 69 - %gd shortens ref name(B[m
ok 11 - log --simplify-merges --topo-order -- file(B[m
ok 23 - --max-age=c3, no --topo-order(B[m
ok 70 - reflog identity(B[m
ok 28 - bisection diff --bisect V ^U ^u1 ^u2 ^u3 <= 0(B[m
ok 12 - log --simplify-merges --date-order -- file(B[m
ok 24 - one specified head reachable from another a4, c3, --topo-order(B[m
ok 14 - git_pull: added submodule doesn't remove untracked unignored file with same name(B[m
ok 13 - log --simplify-merges --author-date-order -- file(B[m
ok 29 - bisection diff --bisect u1 ^U <= 0(B[m
ok 25 - one specified head reachable from another c3, a4, --topo-order(B[m
ok 71 - oneline with empty message(B[m
ok 14 - log -- file(B[m
ok 95 - denyCurrentBranch and worktrees(B[m
ok 26 - one specified head reachable from another a4, c3, no --topo-order(B[m
ok 30 - bisection diff --bisect u2 ^U <= 0(B[m
ok 15 - log --topo-order -- file(B[m
[32m# passed all 95 test(s)(B[m
[36m1..95(B[m
ok 72 - single-character name is parsed correctly(B[m
ok 137 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
ok 16 - log --date-order -- file(B[m
ok 73 - unused %G placeholders are passed through(B[m
ok 27 - one specified head reachable from another c3, a4, no --topo-order(B[m
[32m# passed all 73 test(s)(B[m
[36m1..73(B[m
ok 31 - bisection diff --bisect u3 ^U <= 0(B[m
*** t6017-rev-list-stdin.sh ***
ok 17 - log --author-date-order -- file(B[m
ok 28 - graph with c3 and a4 parents of head(B[m
*** t6018-rev-list-glob.sh ***
ok 32 - bisection diff --bisect u4 ^U <= 0(B[m
ok 18 - log --first-parent -- another-file(B[m
ok 29 - graph with a4 and c3 parents of head(B[m
ok 19 - log --first-parent --topo-order -- another-file(B[m
ok 30 - head ^head --topo-order(B[m
ok 33 - bisection diff --bisect u5 ^U <= 0(B[m
ok 20 - log --full-history E -- lost(B[m
ok 31 - head ^head no --topo-order(B[m
ok 7 - merge-base for octopus-step (setup)(B[m
ok 34 - --bisect l5 ^root(B[m
ok 21 - full history simplification without parent(B[m
ok 32 - simple topo order (l5r1)(B[m
ok 35 - --bisect l5 ^root ^c3(B[m
ok 22 - --full-diff is not affected by --parents(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 33 - simple topo order (r1l5)(B[m
ok 8 - merge-base A B C(B[m
*** t6019-rev-list-ancestry-path.sh ***
ok 36 - --bisect l5 ^root ^c3 ^b4(B[m
ok 34 - don't print things unreachable from one branch(B[m
ok 138 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
ok 23 - fetch lazy-fetches only to resolve deltas, protocol v2(B[m
ok 37 - --bisect l3 ^root ^c3 ^b4(B[m
ok 35 - --topo-order a4 l3(B[m
[32m# passed all 35 test(s)(B[m
[36m1..35(B[m
ok 38 - --bisect l5 ^b3 ^a3 ^b4 ^a4(B[m
*** t6020-merge-df.sh ***
ok 39 - --bisect l4 ^a2 ^a3 ^b ^a4(B[m
ok 40 - --bisect l3 ^a2 ^a3 ^b ^a4(B[m
ok 41 - --bisect a4 ^a2 ^a3 ^b4(B[m
ok 42 - --bisect a4 ^a2 ^a3 ^b4 ^c2(B[m
ok 43 - --bisect a4 ^a2 ^a3 ^b4 ^c2 ^c3(B[m
ok 1 - setup repository(B[m
ok 139 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
ok 9 - criss-cross merge-base for octopus-step(B[m
ok 44 - --bisect a4 ^a2 ^a3 ^b4(B[m
ok 1 - prepare repository(B[m
ok 45 - --bisect c3 ^a2 ^a3 ^b4 ^c2(B[m
ok 2 - Merge with d/f conflicts(B[m
[33mnot ok 24 - verify fetch succeeds when asking for new tags # TODO known breakage(B[m
ok 1 - setup(B[m
ok 2 - cloning from local repo(B[m
ok 2 - rev-parse --glob=refs/heads/subspace/*(B[m
ok 3 - create new commit on remote(B[m
ok 46 - set up fake --bisect refs(B[m
ok 1 - set up rev-list --graph test(B[m
ok 3 - rev-parse --glob=heads/subspace/*(B[m
ok 47 - rev-list --bisect can default to good/bad refs(B[m
ok 2 - --graph --all(B[m
ok 4 - rev-parse --glob=refs/heads/subspace/(B[m
ok 48 - rev-parse --bisect can default to good/bad refs(B[m
[32m# passed all 48 test(s)(B[m
[36m1..48(B[m
ok 5 - rev-parse --glob=heads/subspace/(B[m
ok 3 - --graph --simplify-by-decoration(B[m
ok 4 - pulling from local repo(B[m
*** t6021-merge-criss-cross.sh ***
ok 3 - F/D conflict(B[m
ok 6 - rev-parse --glob=heads/subspace(B[m
ok 15 - git_pull_ff: added submodule creates empty directory(B[m
ok 4 - setup: get rid of decorations on B(B[m
[33mnot ok 7 - rev-parse accepts --glob as detached option # TODO known breakage(B[m
ok 13 - dodecapus(B[m
ok 5 - --graph --simplify-by-decoration prune branch B(B[m
ok 140 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin +refs/heads/*:refs/remotes/origin/*; branch:pruned tag:kept(B[m
[33mnot ok 8 - rev-parse is not confused by option-like glob # TODO known breakage(B[m
ok 6 - --graph --full-history -- bar.txt(B[m
ok 5 - pushing to local repo(B[m
ok 9 - rev-parse --branches=subspace/*(B[m
ok 1 - setup(B[m
ok 7 - --graph --full-history --simplify-merges -- bar.txt(B[m
ok 10 - using reflog to find the fork point(B[m
ok 2 - rev-list D..M(B[m
ok 10 - rev-parse --branches=subspace/(B[m
ok 8 - --graph -- bar.txt(B[m
ok 4 - setup modify/delete + directory/file conflict(B[m
ok 11 - --fork-point works with empty reflog(B[m
ok 3 - rev-list --ancestry-path D..M(B[m
ok 11 - rev-parse --branches=subspace(B[m
ok 9 - --graph --sparse -- bar.txt(B[m
ok 4 - rev-list D..M -- M.t(B[m
ok 25 - verify fetch downloads only one pack when updating refs(B[m
ok 12 - rev-parse --glob=heads/subspace/* --glob=heads/other/*(B[m
ok 10 - --graph ^C4(B[m
ok 5 - rev-list --ancestry-path D..M -- M.t(B[m
ok 5 - modify/delete + directory/file conflict(B[m
ok 13 - rev-parse --glob=heads/someref/* master(B[m
ok 11 - --graph ^C3(B[m
ok 6 - rev-list F...I(B[m
ok 6 - fetch new branch(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 24 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..25(B[m
ok 7 - rev-list --ancestry-path F...I(B[m
ok 12 - --graph --boundary ^C3(B[m
ok 14 - rev-parse --glob=heads/*(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 8 - rev-list G..M -- G.t(B[m
*** t6022-merge-rename.sh ***
ok 15 - rev-parse --tags=foo(B[m
ok 141 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept(B[m
ok 1 - prepare repository(B[m
ok 6 - modify/delete + directory/file conflict; other way(B[m
ok 9 - rev-list --ancestry-path G..M -- G.t(B[m
ok 16 - rev-parse --remotes=foo(B[m
*** t6023-merge-file.sh ***
ok 2 - Criss-cross merge(B[m
ok 10 - rev-list --ancestry-path --simplify-merges G^..M -- G.t(B[m
ok 7 - fetch multiple branches(B[m
ok 3 - Criss-cross merge result(B[m
ok 17 - rev-parse --exclude with --branches(B[m
ok 14 - ancestors with the same commit time(B[m
ok 18 - rev-parse --exclude with --all(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
*** t6024-recursive-merge.sh ***
ok 19 - rev-parse accumulates multiple --exclude(B[m
ok 20 - rev-parse --branches clears --exclude(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 8 - push when remote has extra refs(B[m
ok 21 - rev-parse --tags clears --exclude(B[m
ok 2 - merge with no changes(B[m
ok 2 - check rev-list master(B[m
ok 4 - Criss-cross merge fails (-s resolve)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 3 - merge without conflict(B[m
ok 22 - rev-parse --all clears --exclude(B[m
*** t6025-merge-symlinks.sh ***
ok 7 - Simple merge in repo with interesting pathnames(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 4 - works in subdirectory(B[m
ok 23 - rev-parse --exclude=glob with --branches=glob(B[m
*** t6026-merge-attr.sh ***
ok 3 - check log --stat master(B[m
ok 142 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune-tags; branch:kept tag:kept(B[m
ok 5 - merge without conflict (--quiet)(B[m
ok 11 - setup criss-cross(B[m
ok 24 - rev-parse --exclude=glob with --tags=glob(B[m
[33mnot ok 6 - merge without conflict (missing LF at EOF) # TODO known breakage(B[m
ok 12 - criss-cross: rev-list --ancestry-path cb..bc(B[m
ok 9 - push new branch by name(B[m
ok 12 - merge-base --octopus --all for complex tree(B[m
ok 4 - check rev-list side-1 ^side-4(B[m
[33mnot ok 7 - merge result added missing LF # TODO known breakage(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 13 - criss-cross: rev-list --ancestry-path --all ^cb(B[m
ok 25 - rev-parse --exclude=glob with --remotes=glob(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 8 - merge without conflict (missing LF at EOF, away from change in the other file)(B[m
*** t6027-merge-binary.sh ***
*** t6028-merge-up-to-date.sh ***
ok 9 - merge does not add LF away of change(B[m
ok 26 - rev-parse --exclude=ref with --branches=glob(B[m
ok 5 - check log --stat side-1 ^side-4(B[m
ok 10 - merge with conflicts(B[m
ok 10 - push new branch with old:new refspec(B[m
ok 27 - rev-parse --exclude=ref with --tags=glob(B[m
ok 11 - expected conflict markers(B[m
ok 6 - check rev-list side-1 ^side-7 --(B[m
ok 28 - rev-parse --exclude=ref with --remotes=glob(B[m
ok 12 - merge conflicting with --ours(B[m
ok 13 - merge conflicting with --theirs(B[m
ok 29 - rev-list --exclude=glob with --branches=glob(B[m
ok 7 - check log --stat side-1 ^side-7 --(B[m
ok 11 - push new branch with HEAD:new refspec(B[m
ok 14 - merge conflicting with --union(B[m
ok 30 - rev-list --exclude=glob with --tags=glob(B[m
ok 15 - merge with conflicts, using -L(B[m
ok 1 - setup(B[m
ok 8 - check rev-list side-1 ^side-7 -- file-1(B[m
ok 143 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:pruned tag:pruned(B[m
ok 1 - setup(B[m
ok 31 - rev-list --exclude=glob with --remotes=glob(B[m
ok 16 - expected conflict markers, with -L(B[m
ok 17 - conflict in removed tail(B[m
ok 2 - merge master into b-symlink, which has a different symbolic link(B[m
ok 12 - push delete branch(B[m
ok 32 - rev-list --exclude=ref with --branches=glob(B[m
ok 9 - check log --stat side-1 ^side-7 -- file-1(B[m
ok 3 - the merge result must be a file(B[m
ok 1 - setup(B[m
ok 18 - expected conflict markers(B[m
ok 33 - rev-list --exclude=ref with --tags=glob(B[m
ok 1 - setup(B[m
ok 2 - merge(B[m
ok 19 - binary files cannot be merged(B[m
ok 1 - setup tests(B[m
ok 4 - merge master into b-file, which has a file instead of a symbolic link(B[m
ok 10 - check rev-list side-1 ^side-7 -- file-2(B[m
ok 16 - git_pull_ff: added submodule leaves existing empty directory alone(B[m
ok 5 - the merge result must be a file(B[m
ok 34 - rev-list --exclude=ref with --remotes=glob(B[m
ok 2 - combined merge conflicts(B[m
ok 3 - check merge result in index(B[m
ok 20 - MERGE_ZEALOUS simplifies non-conflicts(B[m
ok 2 - pull renaming branch into unrenaming one(B[m
ok 1 - setup(B[m
ok 2 - merge -s recursive up-to-date(B[m
ok 3 - result contains a conflict(B[m
ok 35 - rev-list --glob=refs/heads/subspace/*(B[m
ok 11 - check log --stat side-1 ^side-7 -- file-2(B[m
ok 6 - merge b-file, which has a file instead of a symbolic link, into master(B[m
ok 21 - ZEALOUS_ALNUM(B[m
ok 4 - check merge result in working tree(B[m
ok 7 - the merge result must be a file(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 36 - rev-list --glob refs/heads/subspace/*(B[m
*** t6029-merge-subtree.sh ***
ok 22 - "diff3 -m" style output (1)(B[m
ok 3 - merge -s recursive fast-forward(B[m
ok 4 - virtual trees were processed(B[m
ok 12 - check rev-list side-3 ^side-4 -- file-3(B[m
ok 5 - retry the merge with longer context(B[m
ok 37 - rev-list not confused by option-like --glob arg(B[m
ok 23 - "diff3 -m" style output (2)(B[m
ok 4 - merge -s ours up-to-date(B[m
ok 13 - check log --stat side-3 ^side-4 -- file-3(B[m
ok 24 - marker size(B[m
ok 38 - rev-list --glob=heads/subspace/*(B[m
ok 3 - pull renaming branch into another renaming one(B[m
ok 13 - forced push(B[m
ok 25 - conflict at EOF without LF resolved by --ours(B[m
ok 144 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned(B[m
ok 39 - rev-list --glob=refs/heads/subspace/(B[m
ok 14 - check rev-list side-3 ^side-2(B[m
ok 26 - conflict at EOF without LF resolved by --theirs(B[m
ok 5 - refuse to merge binary files(B[m
ok 2 - resolve(B[m
ok 5 - merge -s ours fast-forward(B[m
ok 40 - rev-list --glob=heads/subspace/(B[m
ok 27 - conflict at EOF without LF resolved by --union(B[m
ok 15 - check log --stat side-3 ^side-2(B[m
ok 41 - rev-list --glob=heads/subspace(B[m
ok 6 - merge -s subtree up-to-date(B[m
ok 3 - recursive(B[m
ok 28 - conflict sections match existing line endings(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 6 - custom merge backend(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 26 test(s)(B[m
[36m1..28(B[m
*** t6030-bisect-porcelain.sh ***
ok 16 - check rev-list side-3 ^side-2 -- file-1(B[m
ok 42 - rev-list --branches=subspace/*(B[m
ok 4 - pull unrenaming branch into renaming one(B[m
*** t6031-merge-filemode.sh ***
ok 14 - cloning without refspec(B[m
ok 1 - setup(B[m
ok 7 - merge fast-forward octopus(B[m
ok 43 - rev-list --branches=subspace/(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 17 - check log --stat side-3 ^side-2 -- file-1(B[m
*** t6032-merge-large-rename.sh ***
ok 2 - subtree available and works like recursive(B[m
ok 44 - rev-list --branches=subspace(B[m
ok 18 - not only --stdin(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 45 - rev-list --branches(B[m
*** t6033-merge-crlf.sh ***
ok 6 - mark rename/delete as unmerged(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 3 - setup branch sub(B[m
ok 46 - rev-list --glob=heads/someref/* master(B[m
*** t6034-merge-rename-nocruft.sh ***
ok 145 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:pruned tag:pruned(B[m
ok 15 - pulling without refspecs(B[m
ok 5 - pull conflicting renames(B[m
ok 7 - custom merge backend(B[m
ok 47 - rev-list --glob=heads/subspace/* --glob=heads/other/*(B[m
ok 4 - setup branch main(B[m
ok 48 - rev-list --glob=heads/*(B[m
ok 1 - setup (initial)(B[m
ok 16 - pushing without refspecs(B[m
ok 1 - set up mode change in one branch(B[m
ok 6 - interference with untracked working tree file(B[m
ok 49 - rev-list --tags=foo(B[m
ok 1 - set up basic repo with 1 file (hello) and 4 commits(B[m
ok 5 - update branch sub(B[m
ok 50 - rev-list --tags(B[m
ok 2 - resolve single mode change (recursive, a1)(B[m
ok 6 - update branch main(B[m
ok 51 - rev-list --remotes=foo(B[m
ok 8 - up-to-date merge without common ancestor(B[m
ok 3 - verify executable bit on file (recursive, a1)(B[m
ok 17 - pulling without marks(B[m
ok 7 - interference with untracked working tree file(B[m
ok 52 - rev-list --exclude with --branches(B[m
ok 4 - resolve single mode change (recursive, b1)(B[m
ok 1 - setup(B[m
ok 5 - verify executable bit on file (recursive, b1)(B[m
ok 53 - rev-list --exclude with --all(B[m
ok 146 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset --prune --prune-tags origin; branch:kept tag:pruned(B[m
ok 7 - setup(B[m
ok 9 - custom merge does not lock index(B[m
ok 54 - rev-list accumulates multiple --exclude(B[m
ok 6 - resolve single mode change (resolve, a1)(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 2 - Check "ours" is CRLF(B[m
ok 7 - verify executable bit on file (resolve, a1)(B[m
ok 2 - rename (5, ok)(B[m
ok 55 - rev-list should succeed with empty output on empty stdin(B[m
*** t6035-merge-dir-to-symlink.sh ***
[33mnot ok 18 - pushing without marks # TODO known breakage(B[m
ok 3 - set diff.renamelimit to 4(B[m
ok 56 - rev-list should succeed with empty output with all refs excluded(B[m
ok 8 - interference with untracked working tree file(B[m
ok 3 - Check that conflict file is CRLF(B[m
ok 8 - resolve single mode change (resolve, b1)(B[m
ok 1 - setup(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 9 - verify executable bit on file (resolve, b1)(B[m
*** t6036-recursive-corner-cases.sh ***
ok 57 - rev-list should succeed with empty output with empty --all(B[m
ok 58 - rev-list should succeed with empty output with empty glob(B[m
ok 8 - initial merge(B[m
ok 2 - merge white into red (A->B,M->N)(B[m
ok 19 - push all with existing object(B[m
ok 9 - updated working tree file should prevent the merge(B[m
ok 2 - bisect starts with only one bad(B[m
ok 3 - merge blue into white (A->B, mod A, A untracked)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t6037-merge-ours-theirs.sh ***
ok 10 - set up mode change in both branches(B[m
ok 17 - git_pull_ff: replace tracked file with submodule creates empty directory(B[m
ok 20 - push ref with existing object(B[m
[34mok 21 # skip push signed tag (missing GPG)(B[m
[34mok 22 # skip push signed tag with signed-tags capability (missing GPG)(B[m
ok 147 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:pruned tag:pruned(B[m
ok 1 - create a commit where dir a/b changed to symlink(B[m
ok 9 - merge update(B[m
ok 4 - rename (4, ok)(B[m
ok 11 - detect conflict on double mode change (recursive)(B[m
ok 12 - verify executable bit on file (recursive)(B[m
ok 10 - updated working tree file should prevent the merge(B[m
ok 59 - shortlog accepts --glob/--tags/--remotes(B[m
ok 2 - checkout does not clobber untracked symlink(B[m
[33mnot ok 60 - shortlog accepts --glob as detached option # TODO known breakage(B[m
ok 10 - initial ambiguous subtree(B[m
[33mnot ok 61 - shortlog --glob is not confused by option-like argument # TODO known breakage(B[m
ok 23 - push update refs(B[m
[33m# still have 4 known breakage(s)(B[m
[32m# passed all remaining 57 test(s)(B[m
[36m1..61(B[m
ok 3 - a/b-2/c/d is kept when clobbering symlink b(B[m
*** t6038-merge-text-auto.sh ***
ok 1 - setup(B[m
ok 1 - setup basic criss-cross + rename with no modifications(B[m
ok 4 - checkout should not have deleted a/b-2/c/d(B[m
ok 13 - detect conflict on double mode change (resolve)(B[m
ok 11 - interference with untracked working tree file(B[m
ok 11 - merge using explicit(B[m
ok 14 - verify executable bit on file (resolve)(B[m
ok 2 - plain recursive - should conflict(B[m
ok 5 - rename (5, fail)(B[m
ok 5 - setup for merge test(B[m
ok 6 - set merge.renamelimit to 5(B[m
ok 24 - push update refs disabled by no-private-update(B[m
ok 15 - set up delete/modechange scenario(B[m
ok 3 - bisect does not start with only one good(B[m
ok 148 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset --prune origin; branch:kept tag:pruned(B[m
ok 3 - recursive favouring theirs(B[m
ok 2 - merge simple rename+criss-cross with no modifications(B[m
ok 12 - merge2 using explicit(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 16 - detect delete/modechange conflict (recursive, b1)(B[m
*** t6039-merge-ignorecase.sh ***
ok 4 - recursive favouring ours(B[m
ok 12 - merge of identical changes in a renamed file(B[m
ok 17 - detect delete/modechange conflict (recursive, deletion)(B[m
ok 25 - push update refs failure(B[m
ok 6 - Handle D/F conflict, do not lose a/b-2/c/d in merge (resolve)(B[m
ok 7 - a/b was resolved as symlink(B[m
ok 26 - proper failure checks for fetching(B[m
ok 5 - binary file with -Xours/-Xtheirs(B[m
[36m1..0 # SKIP skipping case insensitive tests - case sensitive file system(B[m
ok 8 - Handle D/F conflict, do not lose a/b-2/c/d in merge (recursive)(B[m
*** t6040-tracking-info.sh ***
ok 9 - a/b was resolved as symlink(B[m
ok 7 - rename (5, ok)(B[m
ok 18 - detect delete/modechange conflict (resolve, b1)(B[m
ok 3 - setup criss-cross + rename merges with basic modification(B[m
ok 1 - setup(B[m
ok 149 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:pruned tag:pruned(B[m
ok 2 - set up fuzz_conflict() helper(B[m
ok 27 - proper failure checks for pushing(B[m
ok 3 - Merge after setting text=auto(B[m
ok 19 - detect delete/modechange conflict (resolve, deletion)(B[m
ok 10 - Handle F/D conflict, do not lose a/b-2/c/d in merge (resolve)(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 11 - a/b was resolved as symlink(B[m
ok 4 - merge criss-cross + rename merges with basic modification(B[m
ok 13 - setup for rename + d/f conflicts(B[m
*** t6041-bisect-submodule.sh ***
ok 12 - Handle F/D conflict, do not lose a/b-2/c/d in merge (recursive)(B[m
ok 13 - a/b was resolved as symlink(B[m
ok 14 - Rename+D/F conflict; renamed file merges + dir not in way(B[m
ok 4 - Merge addition of text=auto eol=LF(B[m
ok 8 - rename (6, fail)(B[m
ok 4 - bisect start with one bad and good(B[m
ok 6 - pull passes -X to underlying merge(B[m
ok 150 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=true --prune origin; branch:kept tag:pruned(B[m
ok 28 - push messages(B[m
ok 5 - Merge addition of text=auto eol=CRLF(B[m
ok 15 - Rename+D/F conflict; renamed file merges but dir in way(B[m
[33mnot ok 14 - do not lose untracked in merge (resolve) # TODO known breakage(B[m
ok 18 - git_pull_ff: replace directory with submodule(B[m
ok 15 - do not lose untracked in merge (recursive)(B[m
ok 6 - Detect CRLF/LF conflict after setting text=auto(B[m
ok 5 - setup differently handled merges of rename/add conflict(B[m
ok 16 - Same as previous, but merged other way(B[m
ok 29 - fetch HEAD(B[m
ok 16 - do not lose modifications in merge (resolve)(B[m
ok 7 - Detect LF/CRLF conflict from addition of text=auto(B[m
ok 1 - setup(B[m
ok 17 - do not lose modifications in merge (recursive)(B[m
ok 7 - symlink with -Xours/-Xtheirs(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 17 - Rename+D/F conflict; renamed file cannot merge, dir not in way(B[m
ok 2 - branch -v(B[m
*** t6042-merge-rename-corner-cases.sh ***
[33mnot ok 8 - checkout -m after setting text=auto # TODO known breakage(B[m
ok 151 - name prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned(B[m
ok 3 - branch -vv(B[m
ok 30 - fetch url(B[m
ok 18 - setup a merge where dir a/b-2 changed to symlink(B[m
ok 4 - checkout (diverged from upstream)(B[m
ok 6 - git detects differently handled merges conflict(B[m
[33mnot ok 9 - checkout -m addition of text=auto # TODO known breakage(B[m
ok 5 - checkout with local tracked branch(B[m
ok 18 - Rename+D/F conflict; renamed file cannot merge and dir in the way(B[m
ok 6 - checkout (upstream is gone)(B[m
[33mnot ok 10 - cherry-pick patch from after text=auto was added # TODO known breakage(B[m
ok 7 - checkout (up-to-date with upstream)(B[m
ok 31 - fetch tag(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 30 test(s)(B[m
[36m1..31(B[m
ok 8 - status (diverged from upstream)(B[m
ok 9 - setup large simple rename(B[m
ok 19 - Same as previous, but merged other way(B[m
ok 19 - merge should not have D/F conflicts (resolve)(B[m
*** t6043-merge-rename-directories.sh ***
ok 20 - a/b-2 was resolved as symlink(B[m
ok 9 - status (upstream is gone)(B[m
ok 11 - Test delete/normalize conflict(B[m
[33m# still have 3 known breakage(s)(B[m
[32m# passed all remaining 8 test(s)(B[m
[36m1..11(B[m
ok 10 - status (up-to-date with upstream)(B[m
*** t6044-merge-unrelated-index-changes.sh ***
ok 1 - Does git preserve Gollum's precious artifact?(B[m
ok 21 - merge should not have D/F conflicts (recursive)(B[m
ok 152 - link prune fetch.prune=true remote.origin.prune=unset fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned(B[m
ok 22 - a/b-2 was resolved as symlink(B[m
ok 11 - status -s -b (diverged from upstream)(B[m
ok 7 - git detects differently handled merges conflict, swapped(B[m
ok 10 - massive simple rename does not spam added files(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 12 - status -s -b --no-ahead-behind (diverged from upstream)(B[m
ok 23 - merge should not have F/D conflicts (recursive)(B[m
ok 20 - setup both rename source and destination involved in D/F conflict(B[m
ok 24 - a/b-2 was resolved as symlink(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 23 test(s)(B[m
[36m1..24(B[m
*** t6045-merge-rename-delete.sh ***
*** t6046-merge-skip-unneeded-updates.sh ***
ok 13 - status.aheadbehind=false status -s -b (diverged from upstream)(B[m
ok 14 - status --long --branch(B[m
ok 21 - both rename source and destination involved in D/F conflict(B[m
[33mnot ok 2 - rename/modify/add-source conflict resolvable # TODO known breakage(B[m
ok 15 - status --long --branch(B[m
ok 16 - status --long --branch --no-ahead-behind(B[m
ok 19 - git_pull_ff: removed submodule leaves submodule directory and its contents in place(B[m
ok 153 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:pruned tag:pruned(B[m
ok 17 - status.aheadbehind=false status --long --branch(B[m
ok 8 - setup criss-cross + modify/delete resolved differently(B[m
ok 18 - status -s -b (upstream is gone)(B[m
ok 1 - 1a: Simple directory rename detection(B[m
ok 22 - setup pair rename to parent of other (D/F conflicts)(B[m
[33mnot ok 3 - conflict caused if rename not detected # TODO known breakage(B[m
ok 1 - rename/delete(B[m
ok 19 - status -s -b (up-to-date with upstream)(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
*** t6047-diff3-conflict-markers.sh ***
ok 1 - setup trivial merges(B[m
ok 9 - git detects conflict merging criss-cross+modify/delete(B[m
ok 20 - fail to track lightweight tags(B[m
ok 23 - pair rename to parent of other (D/F conflicts) w/ untracked dir(B[m
ok 21 - fail to track annotated tags(B[m
ok 2 - ff update(B[m
ok 1 - 1a-L: Modify(A)/Modify(B), change on B subset of A(B[m
ok 10 - git detects conflict merging criss-cross+modify/delete, reverse direction(B[m
ok 5 - bisect fails if given any junk instead of revs(B[m
ok 24 - pair rename to parent of other (D/F conflicts) w/ clean start(B[m
ok 3 - ff update, important file modified(B[m
ok 154 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=true remote.origin.pruneTags=unset origin; branch:kept tag:pruned(B[m
[33mnot ok 4 - missed conflict if rename not detected # TODO known breakage(B[m
ok 22 - --set-upstream-to does not change branch(B[m
ok 2 - 1b: Merge a directory with another(B[m
ok 1 - setup no merge base(B[m
ok 4 - resolve, trivial(B[m
ok 6 - bisect reset: back in the master branch(B[m
ok 2 - check no merge base(B[m
ok 23 - --set-upstream-to @{-1}(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
*** t6050-replace.sh ***
ok 25 - setup rename of one file to two, with directories in the way(B[m
ok 5 - resolve, non-trivial(B[m
[33mnot ok 5 - detect rename/add-source and preserve all data # TODO known breakage(B[m
ok 6 - recursive(B[m
ok 2 - 1a-R: Modify(A)/Modify(B), change on B subset of A(B[m
ok 26 - check handling of differently renamed file with D/F conflicts(B[m
ok 155 - name prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:pruned tag:pruned(B[m
ok 7 - recursive, when merge branch matches merge base(B[m
[33mnot ok 6 - detect rename/add-source and preserve all data, merge other way # TODO known breakage(B[m
ok 3 - setup unique merge base(B[m
ok 3 - 1c: Transitive renaming(B[m
ok 4 - check unique merge base(B[m
ok 8 - merge-recursive, when index==head but head!=HEAD(B[m
ok 9 - recursive, when file has staged changes not matching HEAD nor what a merge would give(B[m
ok 27 - setup rename one file to two; directories moving out of the way(B[m
ok 10 - recursive, when file has staged changes matching what a merge would give(B[m
ok 3 - 2a-L: Modify/rename, merge into modify side(B[m
ok 7 - bisect reset: back in another branch(B[m
ok 28 - check handling of differently renamed file with D/F conflicts(B[m
ok 20 - git_pull_ff: removed submodule leaves submodule containing a .git directory alone(B[m
ok 156 - link prune fetch.prune=unset remote.origin.prune=true fetch.pruneTags=unset remote.origin.pruneTags=true origin; branch:kept tag:pruned(B[m
ok 11 - setup differently handled merges of directory/file conflict(B[m
ok 157 - remove remote.origin.fetch "one"(B[m
ok 8 - bisect reset when not bisecting(B[m
ok 7 - rename/directory conflict + clean content merge(B[m
ok 11 - octopus, unrelated file touched(B[m
ok 12 - merge of D1 & E1 fails but has appropriate contents(B[m
ok 29 - setup avoid unnecessary update, normal rename(B[m
ok 4 - 1d: Directory renames cause a rename/rename(2to1) conflict(B[m
ok 5 - setup multiple merge bases(B[m
ok 12 - octopus, related file removed(B[m
ok 30 - avoid unnecessary update, normal rename(B[m
ok 6 - check multiple merge bases(B[m
ok 4 - 2a-R: Modify/rename, merge into rename side(B[m
ok 13 - merge of E1 & D1 fails but has appropriate contents(B[m
ok 158 - name prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned(B[m
ok 13 - octopus, related file modified(B[m
ok 31 - setup to test avoiding unnecessary update, with D/F conflict(B[m
ok 14 - ours(B[m
ok 14 - merge of D1 & E2 fails but has appropriate contents(B[m
ok 7 - rebase --merge describes parent of commit being picked(B[m
ok 8 - rename/directory conflict + content merge conflict(B[m
ok 5 - 1e: Renamed directory, with all files being renamed too(B[m
ok 15 - subtree(B[m
ok 32 - avoid unnecessary update, with D/F conflict(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
*** t6060-merge-index.sh ***
ok 8 - rebase --apply describes fake ancestor base(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 15 - merge of E2 & D1 fails but has appropriate contents(B[m
*** t6100-rev-list-in-order.sh ***
ok 5 - 2b-L: Rename+Mod(A)/Mod(B), B mods subset of A(B[m
ok 159 - link prune fetch.prune=unset remote.origin.prune=unset fetch.pruneTags=unset remote.origin.pruneTags=unset origin --prune --prune-tags; branch:kept tag:pruned(B[m
ok 9 - bisect reset removes packed refs(B[m
ok 33 - setup avoid unnecessary update, dir->(file,nothing)(B[m
ok 16 - merge of D1 & E3 succeeds(B[m
ok 9 - disappearing dir in rename/directory conflict handled(B[m
ok 1 - setup diverging branches(B[m
ok 34 - avoid unnecessary update, dir->(file,nothing)(B[m
ok 21 - git_pull_ff: replace submodule with a directory must fail(B[m
ok 2 - read-tree does not resolve content merge(B[m
ok 6 - 1f: Split a directory into two other directories(B[m
ok 17 - merge of D1 & E4 notifies user a and a2 are related(B[m
ok 1 - setup a commit history with trees, blobs(B[m
ok 160 - all boundary commits are excluded(B[m
ok 6 - 2b-R: Rename+Mod(A)/Mod(B), B mods subset of A(B[m
[33mnot ok 18 - merge of D2 & E4 merges a2s & reports conflict for a/file # TODO known breakage(B[m
ok 2 - rev-list --in-commit-order(B[m
ok 35 - setup avoid unnecessary update, modify/delete(B[m
ok 3 - git merge-index git-merge-one-file resolves(B[m
ok 3 - rev-list lists blobs and trees after commits(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 36 - avoid unnecessary update, modify/delete(B[m
*** t6101-rev-parse-parents.sh ***
ok 4 - setup bare merge(B[m
ok 161 - fetch --prune prints the remotes url(B[m
ok 5 - merge-one-file fails without a work tree(B[m
ok 10 - handle rename-with-content-merge vs. add(B[m
ok 7 - 2a: Directory split into two on one side, with equal numbers of paths(B[m
ok 37 - setup avoid unnecessary update, rename/add-dest(B[m
ok 7 - 2c: Modify b & add c VS rename b->c(B[m
ok 162 - branchname D/F conflict resolved by --prune(B[m
ok 19 - setup rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify(B[m
ok 38 - avoid unnecessary update, rename/add-dest(B[m
ok 6 - merge-one-file respects GIT_WORK_TREE(B[m
ok 10 - bisect reset removes bisect state after --no-checkout(B[m
ok 20 - handle rename/rename(1to2)/modify followed by what looks like rename/rename(2to1)/modify(B[m
ok 163 - fetching a one-level ref works(B[m
ok 39 - setup merge of rename + small change(B[m
ok 7 - merge-one-file respects core.worktree(B[m
ok 40 - merge rename + small change(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 11 - handle rename-with-content-merge vs. add, merge other way(B[m
ok 8 - 3a-L: bq_1->foo/bq_2 on A, foo/->bar/ on B(B[m
ok 8 - 2b: Directory split into two on one side, with equal numbers of paths(B[m
*** t6102-rev-list-unexpected-objects.sh ***
ok 22 - git_pull_ff: replace submodule containing a .git directory with a directory must fail(B[m
ok 41 - setup for use of extended merge markers(B[m
ok 1 - setup well-formed objects(B[m
ok 21 - setup criss-cross + rename/rename/add-source + modify/modify(B[m
ok 2 - setup unexpected non-blob entry(B[m
ok 42 - merge master into rename has correct extended markers(B[m
[33mnot ok 3 - traverse unexpected non-blob entry (lone) # TODO known breakage(B[m
ok 164 - fetching with auto-gc does not lock up(B[m
[33mnot ok 22 - detect rename/rename/add-source for virtual merge-base # TODO known breakage(B[m
ok 4 - traverse unexpected non-blob entry (seen)(B[m
ok 43 - merge rename into master has correct extended markers(B[m
ok 5 - setup unexpected non-tree entry(B[m
ok 9 - 3a: Avoid implicit rename if involved as source on other side(B[m
ok 9 - 3a-R: bq_1->foo/bq_2 on A, foo/->bar/ on B(B[m
ok 6 - traverse unexpected non-tree entry (lone)(B[m
ok 7 - traverse unexpected non-tree entry (seen)(B[m
ok 8 - setup unexpected non-commit parent(B[m
ok 12 - handle rename/rename (2to1) conflict correctly(B[m
ok 11 - bisect start: back in good branch(B[m
ok 9 - traverse unexpected non-commit parent (lone)(B[m
ok 10 - traverse unexpected non-commit parent (seen)(B[m
ok 165 - fetch aligned output(B[m
ok 44 - setup spurious "refusing to lose untracked" message(B[m
ok 11 - setup unexpected non-tree root(B[m
ok 1 - git_bisect: added submodule creates empty directory(B[m
ok 12 - traverse unexpected non-tree root (lone)(B[m
ok 45 - no spurious "refusing to lose untracked" message(B[m
ok 13 - traverse unexpected non-tree root (seen)(B[m
ok 14 - setup unexpected non-commit tag(B[m
ok 12 - bisect start: no ".git/BISECT_START" created if junk rev(B[m
ok 23 - setup criss-cross+rename/rename/add-dest + simple modify(B[m
ok 15 - traverse unexpected non-commit tag (lone)(B[m
ok 16 - traverse unexpected non-commit tag (seen)(B[m
ok 10 - 3b-L: bq_1->foo/bq_2 on A, foo/->bar/ on B(B[m
ok 166 - fetch compact output(B[m
ok 46 - do not follow renames for empty files(B[m
[32m# passed all 46 test(s)(B[m
[36m1..46(B[m
ok 13 - merge has correct working tree contents(B[m
*** t6110-rev-list-sparse.sh ***
ok 17 - setup unexpected non-tree tag(B[m
ok 18 - traverse unexpected non-tree tag (lone)(B[m
ok 10 - 3b: Avoid implicit rename if involved as source on current side(B[m
ok 24 - virtual merge base handles rename/rename(1to2)/add-dest(B[m
ok 19 - traverse unexpected non-tree tag (seen)(B[m
ok 20 - setup unexpected non-blob tag(B[m
[33mnot ok 21 - traverse unexpected non-blob tag (lone) # TODO known breakage(B[m
ok 22 - traverse unexpected non-blob tag (seen)(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 20 test(s)(B[m
[36m1..22(B[m
*** t6111-rev-list-treesame.sh ***
[33mnot ok 14 - detect conflict with rename/rename(1to2)/add-source merge # TODO known breakage(B[m
[33mnot ok 23 - git_pull_ff: replace submodule with a file must fail # TODO known breakage(B[m
ok 167 - --no-show-forced-updates(B[m
ok 13 - bisect start: existing ".git/BISECT_START" not modified if junk rev(B[m
ok 11 - 3b-R: bq_1->foo/bq_2 on A, foo/->bar/ on B(B[m
ok 25 - setup symlink modify/modify(B[m
ok 11 - 4a: Directory split, with original directory still present(B[m
ok 1 - setup(B[m
ok 2 - rev-list --first-parent --boundary(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
[33mnot ok 26 - check symlink modify/modify # TODO known breakage(B[m
[33mnot ok 15 - rename/rename/add-source still tracks new a file # TODO known breakage(B[m
*** t6112-rev-list-filters-objects.sh ***
[33mnot ok 12 - 4a: Change on A, change on B subset of A, dirty mods present # TODO known breakage(B[m
ok 14 - bisect start: no ".git/BISECT_START" if mistaken rev(B[m
ok 27 - setup symlink add/add(B[m
ok 12 - 5a: Merge directories, other side adds files to original and target(B[m
ok 1 - setup r1(B[m
[33mnot ok 28 - check symlink add/add # TODO known breakage(B[m
ok 168 - --negotiation-tip limits "have" lines sent(B[m
ok 16 - rename/rename/add-dest merge still knows about conflicting file versions(B[m
ok 2 - verify blob:none omits all 5 blobs(B[m
ok 3 - specify blob explicitly prevents filtering(B[m
ok 13 - 4b: Rename+Mod(A)/Mod(B), change on B subset of A, dirty mods present(B[m
ok 15 - bisect start: no ".git/BISECT_START" if checkout error(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 12 test(s)(B[m
[36m1..13(B[m
ok 1 - setup(B[m
ok 2 - start is valid(B[m
ok 4 - verify emitted+omitted == all(B[m
ok 3 - start^0(B[m
*** t6113-rev-list-bitmap-filters.sh ***
ok 4 - start^1 not valid(B[m
ok 5 - setup r2(B[m
ok 1 - setup(B[m
ok 5 - second^1 = second^(B[m
[33mnot ok 17 - rad-check: rename/add/delete conflict # TODO known breakage(B[m
ok 2 - log (B[m
ok 6 - final^1^1^1(B[m
[33mnot ok 24 - git_pull_ff: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 6 - verify blob:limit=500 omits all blobs(B[m
ok 7 - final^1^1^1 = final^^^(B[m
ok 13 - 5b: Rename/delete in order to get add/add/add conflict(B[m
ok 3 - log (B[m
ok 4 - log --topo-order(B[m
ok 8 - final^1^2(B[m
ok 7 - verify emitted+omitted == all(B[m
ok 5 - log -- file(B[m
ok 9 - final^1^2 != final^1^1(B[m
ok 10 - final^1^3 not valid(B[m
ok 6 - log --parents -- file(B[m
ok 8 - verify blob:limit=1000(B[m
ok 11 - --verify start2^1(B[m
ok 7 - log --full-history -- file(B[m
ok 12 - --verify start2^0(B[m
ok 8 - log --full-history --parents -- file(B[m
ok 2 - git_bisect: added submodule leaves existing empty directory alone(B[m
ok 13 - final^1^@ = final^1^1 final^1^2(B[m
ok 9 - verify blob:limit=1001(B[m
ok 29 - setup submodule modify/modify(B[m
ok 169 - --negotiation-tip understands globs(B[m
ok 9 - log --simplify-merges -- file(B[m
ok 14 - symbolic final^1^@ = final^1^1 final^1^2(B[m
[33mnot ok 18 - rrdd-check: rename/rename(2to1)/delete/delete conflict # TODO known breakage(B[m
[33mnot ok 30 - check submodule modify/modify # TODO known breakage(B[m
ok 10 - log --first-parent(B[m
ok 10 - verify blob:limit=1k(B[m
ok 1 - set up bitmapped repo(B[m
ok 15 - final^1^! = final^1 ^final^1^1 ^final^1^2(B[m
ok 11 - log --first-parent -- file(B[m
ok 11 - verify blob:limit=1m(B[m
ok 16 - symbolic final^1^! = final^1 ^final^1^1 ^final^1^2(B[m
ok 2 - filters fallback to non-bitmap traversal(B[m
ok 12 - log F..M(B[m
ok 17 - large graft octopus(B[m
ok 13 - log F..M --topo-order(B[m
ok 16 - bisect skip: successful result(B[m
ok 3 - blob:none filter(B[m
ok 14 - log F..M -- file(B[m
ok 12 - setup r3(B[m
ok 18 - repack for next test(B[m
ok 13 - verify sparse:path=pattern1 fails(B[m
ok 15 - log --parents F..M -- file(B[m
ok 4 - blob:none filter with specified blob(B[m
ok 14 - verify sparse:path=pattern2 fails(B[m
ok 19 - short SHA-1 works(B[m
ok 16 - log F..M --full-history -- file(B[m
ok 14 - 5c: Transitive rename would cause rename/rename/rename/add/add/add(B[m
ok 15 - setup r3 part 2(B[m
ok 5 - blob:limit filter(B[m
ok 17 - log F..M --full-history --parents -- file(B[m
ok 18 - log F..M --simplify-merges -- file(B[m
ok 16 - verify sparse:oid=OID omits top-level files(B[m
ok 6 - blob:limit filter with specified blob(B[m
ok 19 - log F..M --ancestry-path(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
[33mnot ok 19 - mod6-check: chains of rename/rename(1to2) and rename/rename(2to1) # TODO known breakage(B[m
*** t6120-describe.sh ***
ok 20 - log F..M --ancestry-path -- file(B[m
ok 17 - verify sparse:oid=oid-ish omits top-level files(B[m
ok 21 - log F..M --ancestry-path --parents -- file(B[m
ok 20 - setup for rev^- tests(B[m
ok 22 - log F..M --ancestry-path --simplify-merges -- file(B[m
ok 21 - rev-list --count merge^- = merge^..merge(B[m
ok 23 - log F..M --first-parent(B[m
ok 31 - setup submodule add/add(B[m
ok 18 - rev-list W/ --missing=print and --missing=allow-any for trees(B[m
ok 22 - rev-parse merge^- = merge^..merge(B[m
ok 170 - --negotiation-tip understands abbreviated SHA-1(B[m
ok 24 - log F..M --first-parent -- file(B[m
ok 23 - rev-parse merge^-1 = merge^..merge(B[m
[33mnot ok 32 - check submodule add/add # TODO known breakage(B[m
[32m# passed all 170 test(s)(B[m
[33m# SKIP no web server found at '/usr/sbin/apache2'(B[m
[36m1..170(B[m
ok 25 - log E..M --ancestry-path(B[m
ok 24 - rev-parse merge^-2 = merge^2..merge(B[m
ok 26 - log E..M --ancestry-path -- file(B[m
ok 19 - verify tree:0 includes trees in "filtered" output(B[m
ok 15 - 5d: Directory/file/file conflict due to directory rename(B[m
ok 25 - symbolic merge^-1 = merge^1..merge(B[m
ok 27 - log E..M --ancestry-path --parents -- file(B[m
ok 26 - rev-parse merge^-0 (invalid parent)(B[m
ok 20 - verify skipping tree iteration when not collecting omits(B[m
ok 17 - bisect skip: cannot tell between 3 commits(B[m
ok 27 - rev-parse merge^-3 (invalid parent)(B[m
ok 28 - log E..M --ancestry-path --simplify-merges -- file(B[m
ok 28 - rev-parse merge^-^ (garbage after ^-)(B[m
ok 29 - log G..M(B[m
ok 29 - rev-parse merge^-1x (garbage after ^-1)(B[m
ok 21 - verify tree:1 includes root trees(B[m
ok 30 - log G..M --topo-order(B[m
ok 30 - rev-list merge^- = merge^..merge(B[m
ok 31 - log G..M -- file(B[m
ok 31 - rev-list merge^-1 = merge^1..merge(B[m
ok 32 - log G..M --parents -- file(B[m
ok 32 - rev-list merge^-2 = merge^2..merge(B[m
ok 25 - git_pull_ff: modified submodule does not update submodule work tree(B[m
ok 22 - verify tree:2 includes root trees and immediate children(B[m
ok 33 - log G..M --full-history -- file(B[m
ok 33 - rev-list merge^-0 (invalid parent)(B[m
ok 20 - check simple rename/rename conflict(B[m
ok 34 - rev-list merge^-3 (invalid parent)(B[m
ok 34 - log G..M --full-history --parents -- file(B[m
*** t6130-pathspec-noglob.sh ***
ok 35 - rev-list merge^-^ (garbage after ^-)(B[m
ok 36 - rev-list merge^-1x (garbage after ^-1)(B[m
ok 35 - log G..M --simplify-merges -- file(B[m
ok 33 - setup conflicting entry types (submodule vs symlink)(B[m
ok 37 - rev-parse $garbage^@ does not segfault(B[m
ok 36 - log G..M --ancestry-path(B[m
ok 38 - rev-parse $garbage...$garbage does not segfault(B[m
[32m# passed all 38 test(s)(B[m
ok 1 - setup(B[m
[36m1..38(B[m
ok 16 - 6a: Tricky rename/delete(B[m
[33mnot ok 34 - check conflicting entry types (submodule vs symlink) # TODO known breakage(B[m
ok 37 - log G..M --ancestry-path -- file(B[m
*** t6131-pathspec-icase.sh ***
ok 2 - describe HEAD(B[m
ok 23 - verify tree:3 includes everything expected(B[m
ok 3 - describe HEAD^(B[m
ok 38 - log G..M --ancestry-path --parents -- file(B[m
ok 4 - describe HEAD^^(B[m
ok 39 - log G..M --ancestry-path --simplify-merges -- file(B[m
ok 5 - describe HEAD^^2(B[m
ok 40 - log B..F(B[m
ok 6 - describe HEAD^^2^(B[m
ok 24 - combine:... for a simple combination(B[m
ok 7 - describe HEAD^^^(B[m
ok 41 - log B..F -- file(B[m
ok 8 - describe --tags HEAD(B[m
ok 42 - log B..F --parents -- file(B[m
ok 9 - describe --tags HEAD^(B[m
ok 25 - combine:... with URL encoding(B[m
ok 18 - bisect skip: cannot tell between 2 commits(B[m
ok 10 - describe --tags HEAD^^(B[m
ok 43 - log B..F --full-history -- file(B[m
ok 1 - create commits with glob characters(B[m
ok 11 - describe --tags HEAD^^2(B[m
ok 26 - combine:... while URL-encoding things that should not be(B[m
ok 44 - log B..F --full-history --parents -- file(B[m
ok 2 - vanilla pathspec matches literally(B[m
ok 12 - describe --tags HEAD^^2^(B[m
ok 27 - combine: with nothing after the :(B[m
ok 13 - describe --tags HEAD^^^(B[m
ok 3 - star pathspec globs(B[m
ok 45 - log B..F --simplify-merges -- file(B[m
ok 35 - setup conflicting modes for regular file(B[m
ok 28 - parse error in first sub-filter in combine:(B[m
ok 14 - describe --all HEAD(B[m
ok 4 - star pathspec globs(B[m
ok 17 - 6b: Same rename done on both sides(B[m
ok 46 - log B..F --ancestry-path(B[m
ok 15 - describe --all HEAD^(B[m
[33mnot ok 36 - check conflicting modes for regular file # TODO known breakage(B[m
ok 5 - bracket pathspec globs and matches literal brackets(B[m
ok 29 - combine:... with non-encoded reserved chars(B[m
ok 16 - describe --all HEAD^^^(B[m
ok 47 - log B..F --ancestry-path -- file(B[m
ok 21 - check simple rename/add conflict(B[m
ok 6 - bracket pathspec globs and matches literal brackets(B[m
ok 17 - describe --long HEAD^^2^(B[m
ok 30 - validate err msg for "combine:<valid-filter>+"(B[m
ok 48 - log B..F --ancestry-path --parents -- file(B[m
ok 18 - describe --long HEAD^^2(B[m
ok 7 - no-glob option matches literally (vanilla)(B[m
ok 49 - log B..F --ancestry-path --simplify-merges -- file(B[m
ok 19 - describe --tags(B[m
ok 8 - no-glob option matches literally (vanilla)(B[m
ok 20 - describe --first-parent --tags(B[m
ok 3 - git_bisect: replace tracked file with submodule creates empty directory(B[m
ok 9 - no-glob option matches literally (star)(B[m
ok 50 - log B..F --first-parent(B[m
ok 31 - combine:... with edge-case hex digits: Ff Aa 0 9(B[m
ok 10 - no-glob option matches literally (star)(B[m
ok 51 - log B..F --first-parent -- file(B[m
ok 21 - describe --contains defaults to HEAD without commit-ish(B[m
ok 11 - no-glob option matches literally (bracket)(B[m
ok 32 - add sparse pattern blobs whose paths have reserved chars(B[m
ok 52 - log E F ^B -- file(B[m
ok 22 - describe --all A^0(B[m
ok 12 - no-glob option matches literally (bracket)(B[m
ok 23 - no warning was displayed for A(B[m
ok 24 - rename tag A to Q locally(B[m
ok 53 - log E...F -- file(B[m
ok 13 - no-glob option disables :(literal)(B[m
ok 25 - describe HEAD(B[m
ok 14 - no-glob environment variable works(B[m
ok 54 - log C..F(B[m
ok 26 - warning was displayed for Q(B[m
ok 55 - log C..F -- file(B[m
ok 18 - 6c: Rename only done on same side(B[m
ok 27 - rename tag Q back to A(B[m
ok 15 - blame takes global pathspec flags(B[m
ok 28 - pack tag refs(B[m
ok 56 - log C..F --parents -- file(B[m
ok 29 - describe HEAD(B[m
ok 57 - log C..F --full-history -- file(B[m
ok 1 - create commits with glob characters(B[m
ok 16 - setup xxx/bar(B[m
ok 33 - combine:... with more than two sub-filters(B[m
ok 2 - tree_entry_interesting matches bar(B[m
ok 58 - log C..F --full-history --parents -- file(B[m
ok 17 - **/ works with :(glob)(B[m
ok 30 - describe works from outside repo using --git-dir(B[m
ok 3 - tree_entry_interesting matches :(icase)bar(B[m
ok 59 - log C..F --simplify-merges -- file(B[m
ok 18 - **/ does not work with --noglob-pathspecs(B[m
ok 31 - describe --dirty(B[m
ok 37 - setup nested conflicts(B[m
ok 34 - setup r4(B[m
ok 4 - tree_entry_interesting matches :(icase)bar with prefix(B[m
ok 19 - **/ works with :(glob) and --noglob-pathspecs(B[m
ok 60 - log C..F --ancestry-path(B[m
ok 32 - describe --dirty with --work-tree(B[m
ok 33 - set-up dirty work tree(B[m
ok 5 - tree_entry_interesting matches :(icase)bar with empty prefix(B[m
ok 20 - **/ works with --glob-pathspecs(B[m
ok 61 - log C..F --ancestry-path -- file(B[m
ok 22 - check simple add/rename conflict(B[m
ok 34 - describe --dirty(B[m
ok 21 - **/ does not work with :(literal) and --glob-pathspecs(B[m
ok 6 - match_pathspec matches :(icase)bar(B[m
ok 35 - test tree:# filter provisional omit for blob and tree(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 62 - log C..F --ancestry-path --parents -- file(B[m
ok 35 - describe --dirty with --work-tree (dirty)(B[m
*** t6132-pathspec-exclude.sh ***
ok 7 - match_pathspec matches :(icase)bar with prefix(B[m
ok 36 - verify skipping tree iteration when collecting omits(B[m
ok 36 - describe --dirty=.mod(B[m
ok 63 - log C..F --ancestry-path --simplify-merges -- file(B[m
ok 8 - match_pathspec matches :(icase)bar with empty prefix(B[m
ok 37 - describe --dirty=.mod with --work-tree (dirty)(B[m
ok 64 - log C..F --first-parent(B[m
ok 19 - 6d: We do not always want transitive renaming(B[m
ok 38 - describe --dirty HEAD(B[m
ok 9 - "git diff" can take magic :(icase) pathspec(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 37 - setup r5(B[m
ok 65 - log C..F --first-parent -- file(B[m
*** t6133-pathspec-rev-dwim.sh ***
[32m# passed all 65 test(s)(B[m
[36m1..65(B[m
ok 26 - git_pull_ff: modified submodule does not update submodule work tree to invalid commit(B[m
*** t6134-pathspec-in-submodule.sh ***
ok 38 - verify collecting omits in combined: filter(B[m
ok 19 - bisect skip: with commit both bad and skipped(B[m
ok 39 - set-up matching pattern tests(B[m
ok 40 - describe --match=test-*(B[m
ok 41 - describe --tags --match=test1-*(B[m
ok 38 - check nested conflicts(B[m
ok 42 - describe --tags --match=test2-*(B[m
ok 39 - tree:<depth> where we iterate over tree at two levels(B[m
ok 43 - describe --long --tags --match=test2-* HEAD^(B[m
ok 40 - tree:<depth> which filters out blob but given as arg(B[m
ok 1 - setup(B[m
ok 44 - describe --long --tags --match=test1-* --match=test2-* HEAD^(B[m
ok 45 - describe --long --tags --match=test1-* --no-match --match=test2-* HEAD^(B[m
ok 2 - non-rev wildcard dwims to pathspec(B[m
ok 46 - describe --long --tags --match=test1-* --match=test3-* HEAD(B[m
ok 47 - describe --long --tags --match=test3-* --match=test1-* HEAD(B[m
ok 3 - tree:path with metacharacters dwims to rev(B[m
ok 20 - 6e: Add/add from one side(B[m
ok 41 - rev-list W/ --missing=print(B[m
ok 23 - check simple add/add conflict(B[m
ok 1 - setup(B[m
ok 4 - ^{foo} with metacharacters dwims to rev(B[m
ok 42 - rev-list W/O --missing fails(B[m
ok 43 - rev-list W/ missing=allow-any(B[m
ok 48 - set-up branches(B[m
ok 2 - exclude only pathspec uses default implicit pathspec(B[m
ok 5 - @{foo} with metacharacters dwims to rev(B[m
ok 49 - describe --all --match=branch_* --exclude=branch_C HEAD(B[m
ok 3 - t_e_i() exclude sub(B[m
ok 50 - describe --all --match=origin/remote_branch_* --exclude=origin/remote_branch_C HEAD(B[m
ok 6 - :/*.t from a subdir dwims to a pathspec(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 51 - describe --all test-annotated~1(B[m
ok 4 - t_e_i() exclude sub/sub/file(B[m
*** t6135-pathspec-with-attrs.sh ***
ok 52 - --match does not work for other types(B[m
ok 5 - t_e_i() exclude sub using mnemonic(B[m
ok 53 - --exclude does not work for other types(B[m
ok 44 - expand blob limit in protocol(B[m
[32m# passed all 44 test(s)(B[m
[36m1..44(B[m
ok 6 - t_e_i() exclude :(icase)SUB(B[m
ok 7 - t_e_i() exclude sub2 from sub(B[m
ok 54 - name-rev with exact tags(B[m
*** t6136-pathspec-in-bare.sh ***
ok 8 - t_e_i() exclude sub/*file(B[m
ok 9 - t_e_i() exclude :(glob)sub/*/file(B[m
ok 10 - m_p_d() exclude sub(B[m
ok 39 - setup virtual merge base with nested conflicts(B[m
ok 11 - m_p_d() exclude sub/sub/file(B[m
ok 12 - m_p_d() exclude sub using mnemonic(B[m
ok 21 - 7a: rename-dir vs. rename-dir (NOT split evenly) PLUS add-other-file(B[m
ok 13 - m_p_d() exclude :(icase)SUB(B[m
ok 1 - setup a bare and non-bare repository(B[m
ok 14 - m_p_d() exclude sub2 from sub(B[m
ok 15 - m_p_d() exclude sub/*file(B[m
ok 55 - name-rev --all(B[m
ok 16 - m_p_d() exclude :(glob)sub/*/file(B[m
ok 20 - "git bisect run" simple case(B[m
ok 2 - log and ls-files in a bare repository(B[m
ok 24 - check nested conflicts from rename/rename(2to1)(B[m
[33m# still have 10 known breakage(s)(B[m
[32m# passed all remaining 14 test(s)(B[m
[36m1..24(B[m
ok 1 - setup a submodule(B[m
ok 17 - multiple exclusions(B[m
ok 3 - log and ls-files in .git directory(B[m
ok 2 - error message for path inside submodule(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 1 - setup a tree(B[m
ok 40 - check virtual merge base with nested conflicts(B[m
*** t6200-fmt-merge-msg.sh ***
[33m# still have 8 known breakage(s)(B[m
[32m# passed all remaining 32 test(s)(B[m
[36m1..40(B[m
ok 2 - pathspec with no attr(B[m
ok 3 - error message for path inside submodule from within submodule(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 3 - pathspec with labels and non existent .gitattributes(B[m
ok 18 - t_e_i() exclude case #8(B[m
*** t6300-for-each-ref.sh ***
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 4 - pathspec with labels and non existent .gitattributes (2)(B[m
*** t6301-for-each-ref-errors.sh ***
ok 4 - git_bisect: replace directory with submodule(B[m
ok 5 - setup .gitattributes(B[m
*** t6302-for-each-ref-filter.sh ***
ok 6 - check specific set attr(B[m
*** t6500-gc.sh ***
ok 27 - git_pull_ff: modified submodule does not update submodule work tree from invalid commit(B[m
ok 7 - check specific set attr (2)(B[m
ok 56 - name-rev --stdin(B[m
ok 8 - check specific unset attr(B[m
ok 22 - 7b: rename/rename(2to1), but only due to transitive rename(B[m
ok 9 - check specific unset attr (2)(B[m
ok 57 - describe --contains with the exact tags(B[m
ok 1 - setup(B[m
ok 10 - check specific value attr(B[m
ok 1 - setup(B[m
ok 58 - describe --contains and --match(B[m
ok 2 - Broken refs are reported correctly(B[m
ok 11 - check specific value attr (2)(B[m
ok 21 - "git bisect run" with more complex "git bisect start"(B[m
ok 59 - describe --exclude(B[m
ok 12 - check unspecified attr(B[m
ok 3 - NULL_SHA1 refs are reported correctly(B[m
ok 13 - check unspecified attr (2)(B[m
ok 2 - gc empty repository(B[m
ok 60 - describe --contains and --no-match(B[m
ok 4 - Missing objects are reported correctly(B[m
ok 14 - check multiple unspecified attr(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t6501-freshen-objects.sh ***
ok 15 - check label with more labels but excluded path(B[m
ok 3 - gc does not leave behind pid file(B[m
ok 16 - check label excluding other labels(B[m
ok 4 - gc --gobbledegook(B[m
ok 17 - fail on multiple attr specifiers in one pathspec item(B[m
ok 23 - 7c: rename/rename(1to...2or3); transitive rename may add complexity(B[m
ok 18 - fail if attr magic is used places not implemented(B[m
ok 5 - gc -h with invalid configuration(B[m
ok 19 - abort on giving invalid label on the command line(B[m
ok 1 - setup(B[m
ok 1 - make repo completely empty (loose)(B[m
ok 20 - abort on asking for wrong magic(B[m
ok 2 - disable reflogs (loose)(B[m
ok 21 - check attribute list(B[m
ok 28 - git_pull_ff: added submodule doesn't remove untracked unignored file with same name(B[m
ok 3 - setup basic history (loose)(B[m
ok 22 - backslash cannot be the last character(B[m
ok 2 - message for merging local branch(B[m
ok 23 - backslash cannot be used as a value(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
*** t6600-test-reach.sh ***
ok 4 - create and abandon some objects (loose)(B[m
ok 3 - message for merging external branch(B[m
ok 5 - simulate time passing (loose)(B[m
ok 6 - start writing new commit with old blob (loose)(B[m
ok 6 - gc is not aborted due to a stale symref(B[m
ok 61 - setup and absorb a submodule(B[m
ok 24 - 7d: transitive rename involved in rename/delete; how is it reported?(B[m
ok 62 - describe chokes on severely broken submodules(B[m
ok 22 - bisect skip: add line and then a new test(B[m
ok 7 - simultaneous gc (loose)(B[m
ok 63 - describe ignoring a broken submodule(B[m
ok 4 - [merge] summary/log configuration(B[m
ok 8 - finish writing out commit (loose)(B[m
ok 64 - describe with --work-tree ignoring a broken submodule(B[m
ok 9 - repository passes fsck (loose)(B[m
ok 5 - setup FETCH_HEAD(B[m
ok 10 - abandon objects again (loose)(B[m
ok 65 - describe a blob at a directly tagged commit(B[m
ok 6 - merge.log=3 limits shortlog length(B[m
ok 7 - merge.log=5 shows all 5 commits(B[m
ok 11 - start writing new commit with same tree (loose)(B[m
ok 8 - --log=5 with custom comment character(B[m
ok 9 - merge.log=0 disables shortlog(B[m
ok 66 - describe a blob with its first introduction(B[m
ok 10 - --log=3 limits shortlog length(B[m
ok 67 - describe directly tagged blob(B[m
ok 11 - --log=5 shows all 5 commits(B[m
ok 23 - bisect skip and bisect replay(B[m
ok 12 - simultaneous gc (loose)(B[m
ok 12 - --no-log disables shortlog(B[m
ok 68 - describe tag object(B[m
ok 13 - --log=0 disables shortlog(B[m
ok 13 - finish writing out commit (loose)(B[m
ok 25 - 7e: transitive rename in rename/delete AND dirs in the way(B[m
ok 14 - make repo completely empty (repack)(B[m
ok 15 - disable reflogs (repack)(B[m
ok 1 - set up buggy branch(B[m
ok 16 - setup basic history (repack)(B[m
ok 5 - git_bisect: removed submodule leaves submodule directory and its contents in place(B[m
ok 2 - replace the author(B[m
ok 14 - fmt-merge-msg -m(B[m
ok 7 - gc --keep-largest-pack(B[m
ok 15 - setup: expected shortlog for two branches(B[m
ok 3 - test --no-replace-objects option(B[m
ok 17 - create and abandon some objects (repack)(B[m
ok 4 - test GIT_NO_REPLACE_OBJECTS env variable(B[m
ok 18 - simulate time passing (repack)(B[m
ok 5 - test core.usereplacerefs config option(B[m
ok 19 - start writing new commit with old blob (repack)(B[m
ok 6 - tag replaced commit(B[m
ok 26 - 8a: Dual-directory rename, one into the others way(B[m
ok 29 - git_pull_ff_only: added submodule creates empty directory(B[m
ok 7 - "git fsck" works(B[m
ok 20 - simultaneous gc (repack)(B[m
ok 21 - finish writing out commit (repack)(B[m
ok 22 - repository passes fsck (repack)(B[m
ok 24 - bisect run & skip: cannot tell between 2(B[m
ok 23 - abandon objects again (repack)(B[m
ok 24 - start writing new commit with same tree (repack)(B[m
ok 16 - shortlog for two branches(B[m
ok 27 - 8b: Dual-directory rename, one into the others way, with conflicting filenames(B[m
ok 8 - repack, clone and fetch work(B[m
ok 8 - auto gc with too many loose objects does not attempt to create bitmaps(B[m
ok 17 - merge-msg -F(B[m
ok 25 - simultaneous gc (repack)(B[m
ok 26 - finish writing out commit (repack)(B[m
ok 9 - "git replace" listing and deleting(B[m
ok 9 - gc --no-quiet(B[m
[34mok 10 # skip with TTY: gc --no-quiet (missing TTY)(B[m
ok 18 - merge-msg -F in subdirectory(B[m
ok 10 - "git replace" replacing(B[m
ok 27 - do not complain about existing broken links (commit)(B[m
ok 11 - gc --quiet(B[m
ok 11 - "git replace" resolves sha1(B[m
ok 19 - merge-msg with nothing to merge(B[m
ok 28 - 8c: modify/delete or rename+modify/delete(B[m
ok 69 - name-rev works in a deep repo(B[m
ok 28 - do not complain about existing broken links (tree)(B[m
ok 12 - gc.reflogExpire{Unreachable,}=never skips "expire" via "gc"(B[m
ok 20 - merge-msg tag(B[m
ok 12 - create parallel branch without the bug(B[m
ok 70 - describe works in a deep repo(B[m
ok 29 - do not complain about existing broken links (tag)(B[m
ok 21 - merge-msg two tags(B[m
[32m# passed all 29 test(s)(B[m
[36m1..29(B[m
*** t7001-mv.sh ***
ok 13 - one of gc.reflogExpire{Unreachable,}=never does not skip "expire" via "gc"(B[m
ok 71 - describe --all A(B[m
ok 25 - bisect run & skip: find first bad(B[m
ok 72 - describe --all c(B[m
ok 13 - push to cloned repo(B[m
ok 73 - describe --all --match=branch_* branch_A(B[m
ok 29 - 8d: rename/delete...or not?(B[m
ok 30 - git_pull_ff_only: added submodule leaves existing empty directory alone(B[m
ok 74 - describe complains about tree object(B[m
ok 75 - describe complains about missing object(B[m
ok 22 - merge-msg tag and branch(B[m
ok 1 - prepare reference tree(B[m
ok 2 - moving the file out of subdirectory(B[m
ok 14 - push branch with replacement(B[m
ok 23 - merge-msg lots of commits(B[m
ok 3 - commiting the change(B[m
ok 76 - name-rev a rev shortly after epoch(B[m
ok 4 - checking the commit(B[m
ok 6 - git_bisect: removed submodule leaves submodule containing a .git directory alone(B[m
ok 5 - moving the file back into subdirectory(B[m
ok 6 - commiting the change(B[m
ok 7 - checking the commit(B[m
ok 8 - mv --dry-run does not move file(B[m
ok 9 - checking -k on non-existing file(B[m
ok 14 - background auto gc does not run if gc.log is present and recent but does if it is old(B[m
ok 15 - fetch branch with replacement(B[m
ok 10 - checking -k on untracked file(B[m
ok 24 - merge-msg with "merging" an annotated tag(B[m
ok 11 - checking -k on multiple untracked files(B[m
ok 30 - 8e: Both sides rename, one side adds to original directory(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 12 - checking -f on untracked file with existing target(B[m
*** t7003-filter-branch.sh ***
ok 13 - moving to absent target with trailing slash(B[m
ok 77 - name-rev covers all conditions while looking at parents(B[m
ok 14 - clean up(B[m
ok 15 - background auto gc respects lock for all operations(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 15 - moving to existing untracked target with trailing slash(B[m
*** t7004-tag.sh ***
ok 16 - moving to existing tracked target with trailing slash(B[m
ok 26 - bisect skip only one range(B[m
ok 17 - clean up(B[m
ok 18 - adding another file(B[m
ok 19 - moving whole subdirectory(B[m
ok 20 - commiting the change(B[m
ok 21 - checking the commit(B[m
ok 78 - describe commits with disjoint bases(B[m
ok 22 - succeed when source is a prefix of destination(B[m
ok 23 - moving whole subdirectory into subdirectory(B[m
ok 31 - 9a: Inner renamed directory within outer renamed directory(B[m
ok 24 - commiting the change(B[m
ok 1 - listing all tags in an empty tree should succeed(B[m
ok 25 - checking the commit(B[m
ok 2 - listing all tags in an empty tree should output nothing(B[m
ok 26 - do not move directory over existing directory(B[m
ok 27 - move into "."(B[m
ok 3 - sort tags, ignore case(B[m
ok 7 - git_bisect: replace submodule with a directory must fail(B[m
ok 28 - Michael Cassar's test case(B[m
ok 4 - looking for a tag in an empty tree should fail(B[m
ok 79 - describe commits with disjoint bases 2(B[m
[32m# passed all 79 test(s)(B[m
[36m1..79(B[m
ok 5 - creating a tag in an empty tree should fail(B[m
ok 31 - git_pull_ff_only: replace tracked file with submodule creates empty directory(B[m
ok 16 - bisect and replacements(B[m
ok 6 - creating a tag for HEAD in an empty tree should fail(B[m
*** t7005-editor.sh ***
ok 7 - creating a tag for an unknown revision should fail(B[m
ok 29 - Sergey Vlasov's test case(B[m
ok 27 - bisect skip many ranges(B[m
ok 17 - index-pack and replacements(B[m
ok 30 - absolute pathname(B[m
ok 8 - creating a tag using default HEAD should succeed(B[m
ok 32 - 9b: Transitive rename with content merge(B[m
ok 18 - not just commits(B[m
ok 1 - determine default editor(B[m
ok 19 - replaced and replacement objects must be of the same type(B[m
ok 31 - absolute pathname outside should fail(B[m
ok 9 - creating a tag with --create-reflog should create reflog(B[m
ok 20 - -f option bypasses the type check(B[m
ok 21 - git cat-file --batch works on replace objects(B[m
ok 10 - annotated tag with --create-reflog has correct message(B[m
ok 32 - git mv to move multiple sources into a directory(B[m
ok 22 - test --format bogus(B[m
ok 2 - setup(B[m
ok 11 - --create-reflog does not create reflog on failure(B[m
ok 3 - dumb should error out when falling back on vi(B[m
ok 23 - test --format short(B[m
ok 4 - dumb should prefer EDITOR to VISUAL(B[m
ok 28 - bisect starting with a detached HEAD(B[m
ok 12 - option core.logAllRefUpdates=always creates reflog(B[m
ok 33 - git mv should not change sha1 of moved cache entry(B[m
ok 13 - listing all tags if one exists should succeed(B[m
ok 24 - test --format medium(B[m
ok 5 - Using vi(B[m
ok 25 - test --format long(B[m
ok 14 - Multiple -l or --list options are equivalent to one -l option(B[m
ok 26 - setup fake editors(B[m
ok 15 - listing all tags if one exists should output that tag(B[m
ok 6 - Using EDITOR(B[m
ok 34 - git mv should overwrite symlink to a file(B[m
ok 33 - 9c: Doubly transitive rename?(B[m
ok 16 - listing a tag using a matching pattern should succeed(B[m
ok 17 - listing a tag with --ignore-case(B[m
ok 18 - listing a tag using a matching pattern should output that tag(B[m
ok 7 - Using VISUAL(B[m
ok 19 - listing tags using a non-matching pattern should succeed(B[m
ok 20 - listing tags using a non-matching pattern should output nothing(B[m
ok 35 - git mv should overwrite file with a symlink(B[m
ok 21 - trying to create a tag with the name of one existing should fail(B[m
ok 36 - check moved symlink(B[m
ok 27 - --edit with and without already replaced object(B[m
ok 8 - Using core_editor(B[m
ok 29 - bisect errors out if bad and good are mistaken(B[m
ok 22 - trying to create a tag with a non-valid name should fail(B[m
ok 9 - Using GIT_EDITOR(B[m
ok 23 - creating a tag using HEAD directly should succeed(B[m
ok 28 - --edit and change nothing or command failed(B[m
ok 10 - Using vi (override)(B[m
ok 24 - --force can create a tag with the name of one existing(B[m
ok 8 - git_bisect: replace submodule containing a .git directory with a directory must fail(B[m
ok 25 - --force is moot with a non-existing tag name(B[m
ok 11 - Using EDITOR (override)(B[m
ok 29 - replace ref cleanup(B[m
ok 26 - trying to delete an unknown tag should fail(B[m
ok 12 - Using VISUAL (override)(B[m
ok 34 - 9d: N-way transitive rename?(B[m
ok 27 - trying to delete tags without params should succeed and do nothing(B[m
ok 13 - Using core_editor (override)(B[m
ok 28 - deleting two existing tags in one command should succeed(B[m
ok 32 - git_pull_ff_only: replace directory with submodule(B[m
ok 14 - Using GIT_EDITOR (override)(B[m
ok 30 - --graft with and without already replaced object(B[m
ok 29 - creating a tag with the name of another deleted one should succeed(B[m
ok 15 - editor with a space(B[m
ok 30 - trying to delete two tags, existing and not, should fail in the 2nd(B[m
ok 31 - trying to delete an already deleted tag should fail(B[m
ok 16 - core.editor with a space(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
*** t7006-pager.sh ***
ok 31 - --graft using a tag as the new parent(B[m
ok 37 - setup submodule(B[m
ok 38 - git mv cannot move a submodule in a file(B[m
ok 32 - listing all tags should print them ordered(B[m
ok 30 - bisect does not create a "bisect" branch(B[m
ok 33 - listing tags with substring as pattern must print those matching(B[m
ok 1 - determine default pager(B[m
ok 34 - listing tags with a suffix as pattern must print those matching(B[m
ok 35 - listing tags with a prefix as pattern must print those matching(B[m
ok 35 - 9e: N-to-1 whammo(B[m
ok 32 - --graft using a tag as the replaced object(B[m
[34mok 33 # skip set up a signed commit (missing GPG)(B[m
ok 39 - git mv moves a submodule with a .git directory and no .gitmodules(B[m
ok 2 - setup(B[m
[34mok 34 # skip --graft with a signed commit (missing GPG)(B[m
[34mok 35 # skip set up a merge commit with a mergetag (missing GPG)(B[m
[34mok 36 # skip --graft on a commit with a mergetag (missing GPG)(B[m
ok 36 - listing tags using a name as pattern must print that one matching(B[m
[34mok 3 # skip some commands use a pager (missing TTY)(B[m
[34mok 4 # skip pager runs from subdir (missing TTY)(B[m
[34mok 5 # skip LESS and LV envvars are set for pagination (missing TTY)(B[m
[34mok 6 # skip LESS and LV envvars set by git-sh-setup (missing TTY of !MINGW,TTY)(B[m
[34mok 7 # skip some commands do not use a pager (missing TTY)(B[m
ok 37 - listing tags using a name as pattern must print that one matching(B[m
ok 8 - no pager when stdout is a pipe(B[m
ok 38 - listing tags with ? in the pattern should print those matching(B[m
ok 9 - no pager when stdout is a regular file(B[m
ok 39 - listing tags using v.* should print nothing because none have v.(B[m
[34mok 10 # skip git --paginate rev-list uses a pager (missing TTY)(B[m
ok 11 - no pager even with --paginate when stdout is a pipe(B[m
ok 40 - listing tags using v* should print only those having v(B[m
[34mok 12 # skip no pager with --no-pager (missing TTY)(B[m
[34mok 13 # skip configuration can disable pager (missing TTY)(B[m
[34mok 14 # skip configuration can enable pager (from subdir) (missing TTY)(B[m
ok 31 - side branch creation(B[m
[34mok 15 # skip git tag -l defaults to paging (missing TTY)(B[m
[34mok 16 # skip git tag -l respects pager.tag (missing TTY)(B[m
ok 41 - tag -l can accept multiple patterns(B[m
[34mok 17 # skip git tag -l respects --no-pager (missing TTY)(B[m
[34mok 18 # skip git tag with no args defaults to paging (missing TTY)(B[m
[34mok 19 # skip git tag with no args respects pager.tag (missing TTY)(B[m
[34mok 20 # skip git tag --contains defaults to paging (missing TTY)(B[m
[34mok 21 # skip git tag --contains respects pager.tag (missing TTY)(B[m
ok 42 - tag -l <pattern> -l <pattern> works, as our buggy documentation previously suggested(B[m
[34mok 22 # skip git tag -a defaults to not paging (missing TTY)(B[m
[34mok 23 # skip git tag -a ignores pager.tag (missing TTY)(B[m
[34mok 24 # skip git tag -a respects --paginate (missing TTY)(B[m
[34mok 25 # skip git tag as alias ignores pager.tag with -a (missing TTY)(B[m
[34mok 26 # skip git tag as alias respects pager.tag with -l (missing TTY)(B[m
[34mok 27 # skip git branch defaults to paging (missing TTY)(B[m
[34mok 28 # skip git branch respects pager.branch (missing TTY)(B[m
[34mok 29 # skip git branch respects --no-pager (missing TTY)(B[m
ok 43 - listing tags in column(B[m
[34mok 30 # skip git branch --edit-description ignores pager.branch (missing TTY)(B[m
[34mok 31 # skip git branch --set-upstream-to ignores pager.branch (missing TTY)(B[m
[34mok 32 # skip git config ignores pager.config when setting (missing TTY)(B[m
[34mok 33 # skip git config --edit ignores pager.config (missing TTY)(B[m
[34mok 34 # skip git config --get ignores pager.config (missing TTY)(B[m
[34mok 35 # skip git config --get-urlmatch defaults to paging (missing TTY)(B[m
[34mok 36 # skip git config --get-all respects pager.config (missing TTY)(B[m
[34mok 37 # skip git config --list defaults to paging (missing TTY)(B[m
ok 36 - 9f: Renamed directory that only contained immediate subdirs(B[m
ok 37 - --convert-graft-file(B[m
ok 44 - listing tags in column with column.*(B[m
[32m# passed all 37 test(s)(B[m
[36m1..37(B[m
ok 38 - tests can detect color(B[m
[33mnot ok 37 - 9g: Renamed directory that only contained immediate subdirs, immediate subdirs renamed # TODO known breakage(B[m
ok 45 - listing tag with -n --column should fail(B[m
*** t7007-show.sh ***
ok 39 - no color when stdout is a regular file(B[m
[34mok 40 # skip color when writing to a pager (missing TTY)(B[m
[34mok 41 # skip colors are suppressed by color.pager (missing TTY)(B[m
ok 46 - listing tags -n in column with column.ui ignored(B[m
ok 40 - git mv moves a submodule with a .git directory and .gitmodules(B[m
ok 42 - color when writing to a file intended for a pager(B[m
ok 47 - a non-annotated tag created without parameters should point to HEAD(B[m
[34mok 43 # skip colors are sent to pager for external commands (missing TTY)(B[m
ok 48 - trying to verify an unknown tag should fail(B[m
ok 44 - setup: some aliases(B[m
ok 33 - git_pull_ff_only: removed submodule leaves submodule directory and its contents in place(B[m
[34mok 45 # skip git log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 46 # skip git log - PAGER overrides default pager (missing TTY)(B[m
ok 49 - trying to verify a non-annotated and non-signed tag should fail(B[m
[34mok 47 # skip git log - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 48 # skip git log - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 49 # skip git log - GIT_PAGER overrides core.pager (missing TTY)(B[m
ok 50 - trying to verify many non-annotated or unknown tags, should fail(B[m
[34mok 50 # skip git -p log - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 51 # skip git -p log - PAGER overrides default pager (missing TTY)(B[m
[34mok 52 # skip git -p log - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
ok 1 - setup(B[m
[34mok 53 # skip git -p log - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 54 # skip git -p log - GIT_PAGER overrides core.pager (missing TTY)(B[m
ok 32 - good merge base when good and bad are siblings(B[m
[34mok 55 # skip git aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 56 # skip git aliasedlog - PAGER overrides default pager (missing TTY)(B[m
ok 2 - showing a tag that point at a missing object(B[m
[34mok 57 # skip git aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 58 # skip git aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 59 # skip git aliasedlog - GIT_PAGER overrides core.pager (missing TTY)(B[m
[34mok 60 # skip git -p aliasedlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
ok 51 - creating an annotated tag with -m message should succeed(B[m
[34mok 61 # skip git -p aliasedlog - PAGER overrides default pager (missing TTY)(B[m
[34mok 62 # skip git -p aliasedlog - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 63 # skip git -p aliasedlog - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 64 # skip git -p aliasedlog - GIT_PAGER overrides core.pager (missing TTY)(B[m
ok 52 - set up editor(B[m
[34mok 65 # skip git -p true - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 66 # skip git -p true - PAGER overrides default pager (missing TTY)(B[m
[34mok 67 # skip git -p true - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 68 # skip git -p true - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 69 # skip git -p true - GIT_PAGER overrides core.pager (missing TTY)(B[m
[34mok 70 # skip git -p request-pull - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 71 # skip git -p request-pull - PAGER overrides default pager (missing TTY)(B[m
[34mok 72 # skip git -p request-pull - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 73 # skip git -p request-pull - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 74 # skip git -p request-pull - GIT_PAGER overrides core.pager (missing TTY)(B[m
ok 53 - creating an annotated tag with -m message --edit should succeed(B[m
[34mok 75 # skip git -p - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
ok 38 - 9h: Avoid dir rename on merely modified path(B[m
[34mok 76 # skip git -p - PAGER overrides default pager (missing TTY)(B[m
[34mok 77 # skip git -p - repository-local core.pager setting is not used (missing TTY)(B[m
[34mok 78 # skip git -p - GIT_PAGER overrides core.pager (missing TTY)(B[m
[34mok 79 # skip core.pager in repo config works and retains cwd (missing TTY)(B[m
[34mok 80 # skip core.pager is found via alias in subdirectory (missing TTY)(B[m
[34mok 81 # skip no pager for 'git -p nonsense' (missing TTY)(B[m
[34mok 82 # skip git shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 83 # skip git shortlog - PAGER overrides default pager (missing TTY)(B[m
[34mok 84 # skip git shortlog - repository-local core.pager setting overrides PAGER (missing TTY)(B[m
[34mok 85 # skip git shortlog - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
ok 54 - creating an annotated tag with -F messagefile should succeed(B[m
[34mok 86 # skip git shortlog - GIT_PAGER overrides core.pager (missing TTY)(B[m
ok 87 - setup: configure shortlog not to paginate(B[m
[34mok 88 # skip no pager for 'git shortlog' (missing TTY)(B[m
[34mok 89 # skip git shortlog - core.pager is not used from subdirectory (missing TTY)(B[m
ok 55 - set up editor(B[m
[34mok 90 # skip git -p shortlog - default pager is used by default (missing TTY of SIMPLEPAGER,TTY)(B[m
[34mok 91 # skip git -p shortlog - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 92 # skip git -p apply </dev/null - core.pager overrides PAGER from subdirectory (missing TTY)(B[m
[34mok 93 # skip command-specific pager (missing TTY)(B[m
[34mok 94 # skip command-specific pager overrides core.pager (missing TTY)(B[m
[34mok 95 # skip command-specific pager overridden by environment (missing TTY)(B[m
ok 96 - setup external command(B[m
ok 56 - creating an annotated tag with -F messagefile --edit should succeed(B[m
[34mok 97 # skip command-specific pager works for external commands (missing TTY)(B[m
[34mok 98 # skip sub-commands of externals use their own pager (missing TTY)(B[m
[33mnot ok 9 - git_bisect: replace submodule with a file must fail # TODO known breakage(B[m
[34mok 99 # skip external command pagers override sub-commands (missing TTY)(B[m
ok 41 - git mv moves a submodule with gitfile(B[m
ok 57 - creating an annotated tag with -F - should succeed(B[m
ok 100 - command with underscores does not complain(B[m
[34mok 101 # skip git tag with auto-columns  (missing TTY)(B[m
ok 3 - set up a bit of history(B[m
[32m# passed all 101 test(s)(B[m
[36m1..101(B[m
*** t7008-filter-branch-null-sha1.sh ***
ok 58 - trying to create a tag with a non-existing -F file should fail(B[m
ok 4 - showing two commits(B[m
ok 33 - skipped merge base when good and bad are siblings(B[m
ok 39 - 10a: Overwrite untracked with normal rename/delete(B[m
ok 59 - trying to create tags giving both -m or -F options should fail(B[m
ok 5 - showing a range walks (linear)(B[m
ok 60 - creating a tag with an empty -m message should succeed(B[m
ok 6 - showing a range walks (Y shape, ^ first)(B[m
ok 61 - creating a tag with an empty -F messagefile should succeed(B[m
ok 7 - showing a range walks (Y shape, ^ last)(B[m
ok 62 - extra blanks in the message for an annotated tag should be removed(B[m
ok 1 - setup: base commits(B[m
ok 63 - creating a tag with blank -m message with spaces should succeed(B[m
ok 8 - showing with -N walks(B[m
ok 2 - setup: a commit with a bogus null sha1 in the tree(B[m
ok 64 - creating a tag with blank -F messagefile with spaces should succeed(B[m
ok 9 - showing annotated tag(B[m
ok 3 - setup: bring HEAD and index in sync(B[m
ok 42 - mv does not complain when no .gitmodules file is found(B[m
ok 65 - creating a tag with -F file of spaces and no newline should succeed(B[m
ok 10 - showing annotated tag plus commit(B[m
ok 1 - setup(B[m
ok 34 - bad merge base when good and bad are siblings(B[m
ok 66 - creating a tag using a -F messagefile with #comments should succeed(B[m
ok 40 - 10b: Overwrite untracked with dir rename + delete(B[m
ok 11 - showing range(B[m
ok 67 - creating a tag with a #comment in the -m message should succeed(B[m
ok 2 - ref_newer:miss(B[m
ok 12 - -s suppresses diff(B[m
ok 13 - --quiet suppresses diff(B[m
ok 68 - creating a tag with #comments in the -F messagefile should succeed(B[m
ok 34 - git_pull_ff_only: removed submodule leaves submodule containing a .git directory alone(B[m
ok 14 - show --graph is forbidden(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 35 - many merge bases creation(B[m
ok 3 - ref_newer:hit(B[m
ok 69 - creating a tag with a file of #comment and no newline should succeed(B[m
*** t7010-setup.sh ***
ok 4 - in_merge_bases:hit(B[m
ok 1 - setup(B[m
ok 5 - in_merge_bases:miss(B[m
ok 2 - git add (absolute)(B[m
ok 70 - listing the one-line message of a non-signed tag should succeed(B[m
ok 3 - git add (funny relative)(B[m
ok 71 - The -n 100 invocation means -n --list 100, not -n100(B[m
ok 43 - mv will error out on a modified .gitmodules file unless staged(B[m
ok 6 - is_descendant_of:hit(B[m
ok 41 - 10c1: Overwrite untracked with dir rename/rename(1to2)(B[m
ok 4 - git rm (absolute)(B[m
ok 4 - noop filter-branch complains(B[m
ok 7 - is_descendant_of:miss(B[m
ok 5 - git rm (funny relative)(B[m
ok 6 - git ls-files (absolute)(B[m
ok 36 - good merge bases when good and bad are siblings(B[m
ok 72 - listing the zero-lines message of a non-signed tag should succeed(B[m
ok 7 - git ls-files (relative #1)(B[m
ok 8 - get_merge_bases_many(B[m
ok 8 - git ls-files (relative #2)(B[m
ok 9 - git ls-files (relative #3)(B[m
ok 9 - reduce_heads(B[m
ok 10 - commit using absolute path names(B[m
ok 10 - can_all_from_reach:hit(B[m
ok 11 - log using absolute path names(B[m
ok 42 - 10c2: Overwrite untracked with dir rename/rename(1to2), other direction(B[m
ok 73 - listing many message lines of a non-signed tag should succeed(B[m
ok 12 - blame using absolute path names(B[m
ok 44 - mv issues a warning when section is not found in .gitmodules(B[m
ok 11 - can_all_from_reach:miss(B[m
ok 13 - setup deeper work tree(B[m
ok 74 - annotations for blobs are empty(B[m
ok 14 - add a directory outside the work tree(B[m
ok 5 - filter commands are still checked(B[m
ok 15 - add a file outside the work tree, nasty case 1(B[m
ok 75 - trying to verify an annotated non-signed tag should fail(B[m
ok 12 - can_all_from_reach_with_flag: tags case(B[m
ok 16 - add a file outside the work tree, nasty case 2(B[m
ok 76 - trying to verify a file-annotated non-signed tag should fail(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
[33mnot ok 10 - git_bisect: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 35 - git_pull_ff_only: replace submodule with a directory must fail(B[m
*** t7011-skip-worktree-reading.sh ***
ok 77 - trying to verify two annotated non-signed tags should fail(B[m
ok 78 - creating a signed tag with -m message should succeed(B[m
ok 13 - commit_contains:hit(B[m
ok 37 - optimized merge base checks(B[m
ok 79 - sign with a given key id(B[m
ok 80 - sign with an unknown id (1)(B[m
ok 81 - sign with an unknown id (2)(B[m
ok 45 - mv --dry-run does not touch the submodule or .gitmodules(B[m
ok 1 - setup(B[m
ok 43 - 10d: Delete untracked with dir rename/rename(2to1)(B[m
ok 14 - commit_contains:miss(B[m
ok 82 - -u implies signed tag(B[m
[33mnot ok 44 - 10e: Does git complain about untracked file that is not really in the way? # TODO known breakage(B[m
ok 2 - update-index(B[m
ok 83 - creating a signed tag with -F messagefile should succeed(B[m
ok 15 - rev-list: basic topo-order(B[m
ok 3 - update-index(B[m
ok 84 - creating a signed tag with -F - should succeed(B[m
ok 16 - rev-list: first-parent topo-order(B[m
ok 4 - update-index --remove(B[m
ok 85 - -s implies annotated tag(B[m
ok 17 - rev-list: range topo-order(B[m
ok 5 - update-index --remove(B[m
ok 6 - removing the broken entry works(B[m
ok 38 - "parallel" side branch creation(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 86 - git tag -s implied if configured with tag.forcesignannotated(B[m
*** t7012-skip-worktree-writing.sh ***
ok 6 - ls-files --deleted(B[m
ok 45 - 11a: Avoid losing dirty contents with simple rename(B[m
ok 18 - rev-list: range topo-order(B[m
ok 46 - checking out a commit before submodule moved needs manual updates(B[m
ok 87 - lightweight with no message when configured with tag.forcesignannotated(B[m
ok 7 - ls-files --deleted(B[m
ok 19 - rev-list: first-parent range topo-order(B[m
ok 88 - git tag -a disable configured tag.forcesignannotated(B[m
ok 8 - ls-files --modified(B[m
ok 47 - mv -k does not accidentally destroy submodules(B[m
ok 9 - ls-files --modified(B[m
ok 1 - setup(B[m
ok 20 - rev-list: ancestry-path topo-order(B[m
ok 89 - git tag --sign enable GPG sign(B[m
ok 48 - moving a submodule in nested directories(B[m
ok 2 - read-tree updates worktree, absent case(B[m
ok 10 - grep with skip-worktree file(B[m
ok 90 - git tag configured tag.gpgsign enables GPG sign(B[m
ok 21 - rev-list: symmetric difference topo-order(B[m
ok 11 - diff-index does not examine skip-worktree absent entries(B[m
ok 39 - restricting bisection on one dir(B[m
ok 36 - git_pull_ff_only: replace submodule containing a .git directory with a directory must fail(B[m
ok 3 - read-tree updates worktree, dirty case(B[m
ok 91 - git tag --no-sign configured tag.gpgsign skip GPG sign(B[m
ok 4 - read-tree removes worktree, absent case(B[m
ok 12 - diff-index does not examine skip-worktree dirty entries(B[m
ok 22 - get_reachable_subset:all(B[m
ok 92 - trying to create a signed tag with non-existing -F file should fail(B[m
ok 46 - 11b: Avoid losing dirty file involved in directory rename(B[m
ok 13 - diff-files does not examine skip-worktree absent entries(B[m
ok 5 - read-tree removes worktree, dirty case(B[m
ok 93 - verifying a signed tag should succeed(B[m
ok 94 - verifying two signed tags in one command should succeed(B[m
ok 14 - diff-files does not examine skip-worktree dirty entries(B[m
ok 23 - get_reachable_subset:some(B[m
ok 6 - index setup(B[m
ok 15 - git-rm succeeds on skip-worktree absent entries(B[m
ok 24 - get_reachable_subset:none(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
ok 95 - verifying many signed and non-signed tags should fail(B[m
ok 7 - git-add ignores worktree content(B[m
ok 16 - commit on skip-worktree absent entries(B[m
ok 96 - verifying a forged tag should fail(B[m
*** t7030-verify-tag.sh ***
ok 8 - git-add ignores worktree content(B[m
ok 97 - verifying a proper tag with --format pass and format accordingly(B[m
ok 17 - commit on skip-worktree dirty entries(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
*** t7060-wtstatus.sh ***
ok 98 - verifying a forged tag with --format should fail silently(B[m
ok 47 - 11c: Avoid losing not-uptodate with rename + D/F conflict(B[m
ok 9 - git-rm fails if worktree is dirty(B[m
ok 99 - creating a signed tag with an empty -m message should succeed(B[m
ok 10 - git-clean, absent case(B[m
ok 100 - creating a signed tag with an empty -F messagefile should succeed(B[m
ok 11 - git-clean, dirty case(B[m
ok 1 - setup(B[m
ok 101 - extra blanks in the message for a signed tag should be removed(B[m
ok 2 - basic atom: head refname(B[m
ok 1 - setup(B[m
ok 3 - basic atom: head refname:(B[m
ok 11 - git_bisect: modified submodule does not update submodule work tree(B[m
ok 12 - --ignore-skip-worktree-entries leaves worktree alone(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 102 - creating a signed tag with a blank -m message should succeed(B[m
*** t7061-wtstatus-ignore.sh ***
ok 4 - basic atom: head refname:short(B[m
ok 2 - A/A conflict(B[m
ok 5 - basic atom: head refname:lstrip=1(B[m
ok 3 - Report path with conflict(B[m
[33mnot ok 37 - git_pull_ff_only: replace submodule with a file must fail # TODO known breakage(B[m
ok 4 - Report new path with conflict(B[m
ok 6 - basic atom: head refname:lstrip=2(B[m
ok 103 - creating a signed tag with blank -F file with spaces should succeed(B[m
ok 48 - 11d: Avoid losing not-uptodate with rename + D/F conflict(B[m
ok 1 - setup some history and refs(B[m
ok 40 - restricting bisection on one dir and a file(B[m
ok 7 - basic atom: head refname:lstrip=-1(B[m
ok 2 - filtering with --points-at(B[m
ok 8 - basic atom: head refname:lstrip=-2(B[m
ok 104 - creating a signed tag with spaces and no newline should succeed(B[m
ok 3 - check signed tags with --points-at(B[m
ok 1 - status untracked directory with --ignored(B[m
ok 9 - basic atom: head refname:rstrip=1(B[m
ok 4 - filtering with --merged(B[m
ok 2 - same with gitignore starting with BOM(B[m
ok 10 - basic atom: head refname:rstrip=2(B[m
ok 105 - signed tag with embedded PGP message(B[m
ok 5 - filtering with --no-merged(B[m
ok 3 - status untracked directory with --ignored -u(B[m
ok 11 - basic atom: head refname:rstrip=-1(B[m
ok 6 - filtering with --contains(B[m
ok 12 - basic atom: head refname:rstrip=-2(B[m
ok 4 - status of untracked directory with --ignored works with or without prefix(B[m
ok 7 - filtering with --no-contains(B[m
ok 106 - creating a signed tag with a -F file with #comments should succeed(B[m
ok 13 - basic atom: head refname:strip=1(B[m
ok 5 - status prefixed untracked sub-directory with --ignored -u(B[m
ok 5 - M/D conflict does not segfault(B[m
ok 8 - filtering with --contains and --no-contains(B[m
ok 14 - basic atom: head refname:strip=2(B[m
ok 9 - %(color) must fail(B[m
ok 6 - status ignored directory with --ignore(B[m
ok 15 - basic atom: head refname:strip=-1(B[m
ok 107 - creating a signed tag with #commented -m message should succeed(B[m
ok 10 - left alignment is default(B[m
ok 7 - status ignored directory with --ignore -u(B[m
ok 16 - basic atom: head refname:strip=-2(B[m
ok 11 - middle alignment(B[m
ok 8 - status empty untracked directory with --ignore(B[m
ok 17 - basic atom: head upstream(B[m
ok 6 - rename & unmerged setup(B[m
ok 12 - right alignment(B[m
ok 108 - creating a signed tag with #commented -F messagefile should succeed(B[m
ok 9 - status empty untracked directory with --ignore -u(B[m
ok 18 - basic atom: head upstream:short(B[m
ok 7 - rename & unmerged status(B[m
ok 13 - align:middle,42(B[m
ok 49 - 11e: Avoid deleting not-uptodate with dir rename/rename(1to2)/add(B[m
ok 10 - status untracked directory with ignored files with --ignore(B[m
ok 14 - align:42,middle(B[m
ok 8 - git diff-index --cached shows 2 added + 1 unmerged(B[m
ok 19 - basic atom: head upstream:lstrip=2(B[m
ok 11 - status untracked directory with ignored files with --ignore -u(B[m
ok 109 - creating a signed tag with a #comment and no newline should succeed(B[m
ok 15 - align:position=middle,42(B[m
ok 9 - git diff-index --cached -M shows 2 added + 1 unmerged(B[m
ok 20 - basic atom: head upstream:lstrip=-2(B[m
ok 41 - skipping away from skipped commit(B[m
ok 16 - align:42,position=middle(B[m
ok 10 - git diff-index --cached -C shows 2 copies + 1 unmerged(B[m
ok 21 - basic atom: head upstream:rstrip=2(B[m
ok 17 - align:middle,width=42(B[m
ok 12 - status ignored tracked directory with --ignore(B[m
ok 22 - basic atom: head upstream:rstrip=-2(B[m
ok 18 - align:width=42,middle(B[m
ok 13 - status ignored tracked directory with --ignore -u(B[m
ok 23 - basic atom: head upstream:strip=2(B[m
ok 19 - align:position=middle,width=42(B[m
ok 14 - status ignored tracked directory and ignored file with --ignore(B[m
ok 24 - basic atom: head upstream:strip=-2(B[m
ok 20 - align:width=42,position=middle(B[m
ok 49 - moving nested submodules(B[m
[32m# passed all 49 test(s)(B[m
[36m1..49(B[m
ok 42 - erroring out when using bad path parameters(B[m
ok 25 - basic atom: head push(B[m
ok 15 - status ignored tracked directory and ignored file with --ignore -u(B[m
ok 21 - align:32,width=42,middle(B[m
ok 110 - listing the one-line message of a signed tag should succeed(B[m
ok 22 - align:width=30,42,middle(B[m
ok 26 - basic atom: head push:short(B[m
ok 16 - status ignored tracked directory and uncommitted file with --ignore(B[m
ok 23 - align:width=42,position=right,middle(B[m
*** t7062-wtstatus-ignorecase.sh ***
ok 27 - basic atom: head push:lstrip=1(B[m
ok 17 - status ignored tracked directory and uncommitted file with --ignore -u(B[m
ok 24 - align:42,right,position=middle(B[m
ok 28 - basic atom: head push:lstrip=-1(B[m
ok 18 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore(B[m
ok 25 - alignment with format quote(B[m
ok 29 - basic atom: head push:rstrip=1(B[m
ok 19 - status ignored tracked directory with uncommitted file in untracked subdir with --ignore -u(B[m
ok 26 - nested alignment with quote formatting(B[m
ok 30 - basic atom: head push:rstrip=-1(B[m
ok 50 - 11f: Avoid deleting not-uptodate with dir rename/rename(2to1)(B[m
ok 27 - check `%(contents:lines=1)`(B[m
ok 31 - basic atom: head push:strip=1(B[m
ok 111 - listing the zero-lines message of a signed tag should succeed(B[m
ok 20 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore(B[m
[33mnot ok 38 - git_pull_ff_only: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 11 - status when conflicts with add and rm advice (deleted by them)(B[m
ok 28 - check `%(contents:lines=0)`(B[m
ok 32 - basic atom: head push:strip=-1(B[m
ok 21 - status ignored tracked directory with uncommitted file in tracked subdir with --ignore -u(B[m
ok 1 - status with hash collisions(B[m
ok 29 - check `%(contents:lines=99999)`(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
ok 33 - basic atom: head objecttype(B[m
*** t7063-status-untracked-cache.sh ***
ok 30 - `%(contents:lines=-1)` should fail(B[m
ok 34 - basic atom: head objectsize(B[m
ok 35 - basic atom: head objectsize:disk(B[m
ok 22 - status ignores submodule in excluded directory(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
ok 36 - basic atom: head deltabase(B[m
*** t7064-wtstatus-pv2.sh ***
ok 12 - prepare for conflicts(B[m
ok 37 - basic atom: head objectname(B[m
ok 31 - setup for version sort(B[m
ok 13 - status when conflicts with add and rm advice (both deleted)(B[m
ok 38 - basic atom: head objectname:short(B[m
ok 32 - version sort(B[m
ok 51 - 12a: Moving one directory hierarchy into another(B[m
ok 33 - version sort (shortened)(B[m
ok 39 - basic atom: head objectname:short=1(B[m
ok 112 - listing many message lines of a signed tag should succeed(B[m
ok 1 - setup(B[m
ok 34 - reverse version sort(B[m
ok 40 - basic atom: head objectname:short=10(B[m
ok 2 - before initial commit, nothing added, only untracked(B[m
ok 14 - status when conflicts with only rm advice (both deleted)(B[m
ok 41 - basic atom: head tree(B[m
ok 113 - creating a signed tag pointing to a tree should succeed(B[m
ok 42 - basic atom: head parent(B[m
ok 15 - status --branch with detached HEAD(B[m
ok 3 - before initial commit, things added(B[m
ok 43 - basic atom: head numparent(B[m
ok 43 - test bisection on bare repo - --no-checkout specified(B[m
ok 35 - improper usage of %(if), %(then), %(else) and %(end) atoms(B[m
ok 114 - creating a signed tag pointing to a blob should succeed(B[m
ok 4 - before initial commit, things added (-z)(B[m
ok 16 - status --porcelain=v1 --branch with detached HEAD(B[m
ok 44 - basic atom: head object(B[m
ok 36 - check %(if)...%(then)...%(end) atoms(B[m
ok 17 - status --porcelain=bogus(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
ok 45 - basic atom: head type(B[m
ok 115 - creating a signed tag pointing to another tag should succeed(B[m
ok 37 - check %(if)...%(then)...%(else)...%(end) atoms(B[m
[34mok 116 # skip creating a signed tag with rfc1991 (missing RFC1991 of GPG,RFC1991)(B[m
*** t7101-reset-empty-subdirs.sh ***
[34mok 117 # skip reediting a signed tag body omits signature (missing RFC1991 of GPG,RFC1991)(B[m
ok 5 - make first commit, comfirm HEAD oid and branch(B[m
[34mok 118 # skip verifying rfc1991 signature (missing RFC1991 of GPG,RFC1991)(B[m
ok 46 - basic atom: head *objectname(B[m
[34mok 119 # skip list tag with rfc1991 signature (missing RFC1991 of GPG,RFC1991)(B[m
ok 38 - ignore spaces in %(if) atom usage(B[m
[34mok 120 # skip verifying rfc1991 signature without --rfc1991 (missing RFC1991 of GPG,RFC1991)(B[m
[34mok 121 # skip list tag with rfc1991 signature without --rfc1991 (missing RFC1991 of GPG,RFC1991)(B[m
ok 52 - 12b: Moving two directory hierarchies into each other(B[m
[34mok 122 # skip reediting a signed tag body omits signature (missing RFC1991 of GPG,RFC1991)(B[m
ok 47 - basic atom: head *objecttype(B[m
ok 39 - check %(if:equals=<string>)(B[m
ok 6 - after first commit, create unstaged changes(B[m
ok 48 - basic atom: head author(B[m
ok 40 - check %(if:notequals=<string>)(B[m
ok 123 - git tag -s fails if gpg is misconfigured (bad key)(B[m
ok 7 - after first commit but omit untracked files and branch(B[m
ok 41 - --merged is incompatible with --no-merged(B[m
ok 49 - basic atom: head authorname(B[m
ok 50 - basic atom: head authoremail(B[m
ok 124 - git tag -s fails if gpg is misconfigured (bad signature format)(B[m
ok 8 - after first commit, stage existing changes(B[m
ok 1 - creating initial files(B[m
ok 51 - basic atom: head authordate(B[m
ok 42 - validate worktree atom(B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
ok 52 - basic atom: head committer(B[m
ok 12 - git_bisect: modified submodule does not update submodule work tree to invalid commit(B[m
*** t7102-reset.sh ***
ok 9 - rename causes 2 path lines(B[m
ok 125 - git tag -s fails if gpgsm is misconfigured (bad key)(B[m
ok 53 - basic atom: head committername(B[m
ok 10 - rename causes 2 path lines (-z)(B[m
ok 54 - basic atom: head committeremail(B[m
ok 2 - creating second files(B[m
ok 126 - git tag -s fails if gpgsm is misconfigured (bad signature format)(B[m
ok 3 - resetting tree HEAD^(B[m
ok 55 - basic atom: head committerdate(B[m
ok 4 - checking initial files exist after rewind(B[m
ok 5 - checking lack of path1/path2/COPYING(B[m
ok 11 - make second commit, confirm clean and new HEAD oid(B[m
ok 6 - checking lack of path1/COPYING(B[m
ok 56 - basic atom: head tag(B[m
ok 127 - verify signed tag fails when public key is not present(B[m
ok 7 - checking lack of COPYING(B[m
ok 8 - checking checking lack of path1/COPYING-TOO(B[m
ok 9 - checking lack of path1/path2(B[m
ok 128 - git tag -a fails if tag annotation is empty(B[m
ok 57 - basic atom: head tagger(B[m
ok 53 - 12c: Moving one directory hierarchy into another w/ content merge(B[m
ok 10 - checking lack of path1(B[m
ok 12 - confirm ignored files are not printed(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 129 - message in editor has initial comment(B[m
*** t7103-reset-bare.sh ***
ok 58 - basic atom: head taggername(B[m
ok 130 - message in editor has initial comment: first line(B[m
ok 13 - ignored files are printed with --ignored(B[m
ok 131 - message in editor has initial comment: remainder(B[m
ok 59 - basic atom: head taggeremail(B[m
ok 60 - basic atom: head taggerdate(B[m
ok 132 - overwriting an annotated tag should use its previous body(B[m
ok 14 - create and commit permanent ignore file(B[m
ok 61 - basic atom: head creator(B[m
ok 1 - creating initial files and commits(B[m
ok 133 - filename for the message is relative to cwd(B[m
ok 62 - basic atom: head creatordate(B[m
ok 15 - verify --intent-to-add output(B[m
ok 134 - filename for the message is relative to cwd(B[m
ok 44 - test bisection on bare repo - --no-checkout defaulted(B[m
ok 2 - reset --hard message(B[m
ok 63 - basic atom: head subject(B[m
ok 1 - setup non-bare(B[m
ok 39 - git_pull_ff_only: modified submodule does not update submodule work tree(B[m
ok 2 - "hard" reset requires a worktree(B[m
ok 64 - basic atom: head contents:subject(B[m
ok 3 - reset --hard message (ISO8859-1 logoutputencoding)(B[m
ok 3 - "merge" reset requires a worktree(B[m
ok 135 - creating second commit and tag(B[m
ok 65 - basic atom: head body(B[m
ok 4 - "keep" reset requires a worktree(B[m
ok 66 - basic atom: head contents:body(B[m
ok 5 - "mixed" reset is ok(B[m
ok 136 - creating third commit without tag(B[m
ok 6 - "soft" reset is ok(B[m
ok 67 - basic atom: head contents:signature(B[m
ok 4 - giving a non existing revision should fail(B[m
ok 7 - hard reset works with GIT_WORK_TREE(B[m
ok 137 - checking that first commit is in all tags (hash)(B[m
ok 68 - basic atom: head contents(B[m
ok 54 - 12d: Rename/merge subdir into the root, variant 1(B[m
ok 138 - checking that first commit is in all tags (tag)(B[m
ok 69 - basic atom: head HEAD(B[m
ok 5 - reset --soft with unmerged index should fail(B[m
ok 8 - setup bare(B[m
ok 9 - "hard" reset is not allowed in bare(B[m
ok 139 - checking that first commit is in all tags (relative)(B[m
ok 70 - basic atom: tag refname(B[m
ok 16 - verify AA (add-add) conflict(B[m
ok 10 - "merge" reset is not allowed in bare(B[m
ok 140 - checking that first commit is not listed in any tag with --no-contains  (hash)(B[m
ok 71 - basic atom: tag refname:short(B[m
ok 11 - "keep" reset is not allowed in bare(B[m
ok 141 - checking that first commit is in all tags (tag)(B[m
ok 12 - "mixed" reset is not allowed in bare(B[m
ok 6 - giving paths with options different than --mixed should fail(B[m
ok 72 - basic atom: tag upstream(B[m
ok 142 - checking that first commit is in all tags (relative)(B[m
ok 13 - "soft" reset is allowed in bare(B[m
ok 73 - basic atom: tag push(B[m
ok 143 - checking that second commit only has one tag(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 45 - broken branch creation(B[m
*** t7104-reset-hard.sh ***
ok 144 - inverse of the last test, with --no-contains(B[m
ok 74 - basic atom: tag objecttype(B[m
ok 145 - checking that third commit has no tags(B[m
ok 75 - basic atom: tag objectsize(B[m
ok 146 - conversely --no-contains on the third commit lists all tags(B[m
ok 7 - giving unrecognized options should fail(B[m
ok 76 - basic atom: tag objectsize:disk(B[m
ok 77 - basic atom: tag *objectsize:disk(B[m
ok 78 - basic atom: tag deltabase(B[m
ok 147 - creating simple branch(B[m
ok 79 - basic atom: tag *deltabase(B[m
ok 55 - 12e: Rename/merge subdir into the root, variant 2(B[m
ok 148 - checking that branch head only has one tag(B[m
ok 17 - verify UU (edit-edit) conflict(B[m
ok 46 - bisect fails if tree is broken on start commit(B[m
ok 149 - checking that branch head with --no-contains lists all but one tag(B[m
ok 80 - basic atom: tag objectname(B[m
ok 1 - setup(B[m
ok 2 - reset --hard should restore unmerged ones(B[m
ok 81 - basic atom: tag objectname:short(B[m
ok 150 - merging original branch into this branch(B[m
ok 8 - trying to do reset --soft with pending merge should fail(B[m
ok 151 - checking that original branch head has one tag now(B[m
ok 82 - basic atom: head objectname:short=1(B[m
ok 3 - reset --hard did not corrupt index or cached-tree(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t7105-reset-patch.sh ***
ok 152 - checking that original branch head with --no-contains lists all but one tag now(B[m
ok 83 - basic atom: head objectname:short=10(B[m
ok 153 - checking that initial commit is in all tags(B[m
ok 84 - basic atom: tag tree(B[m
ok 154 - checking that --contains can be used in non-list mode(B[m
ok 85 - basic atom: tag parent(B[m
ok 155 - checking that initial commit is in all tags with --no-contains(B[m
ok 86 - basic atom: tag numparent(B[m
ok 18 - verify upstream fields in branch header(B[m
ok 56 - 13a(conflict): messages for newly added files(B[m
ok 47 - bisect fails if tree is broken on trial commit(B[m
[34mok 1 # skip setup (missing PERL)(B[m
[34mok 2 # skip saying "n" does nothing (missing PERL)(B[m
[34mok 3 # skip git reset -p (missing PERL)(B[m
[34mok 4 # skip git reset -p HEAD^ (missing PERL)(B[m
[34mok 5 # skip git reset -p HEAD^^{tree} (missing PERL)(B[m
[34mok 6 # skip git reset -p HEAD^:dir/foo (blob fails) (missing PERL)(B[m
[34mok 7 # skip git reset -p aaaaaaaa (unknown fails) (missing PERL)(B[m
ok 87 - basic atom: tag object(B[m
[34mok 8 # skip git reset -p dir (missing PERL)(B[m
[34mok 9 # skip git reset -p -- foo (inside dir) (missing PERL)(B[m
ok 9 - trying to do reset --soft with pending checkout merge should fail(B[m
[34mok 10 # skip git reset -p HEAD^ -- dir (missing PERL)(B[m
[34mok 11 # skip none of this moved HEAD (missing PERL)(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 88 - basic atom: tag type(B[m
*** t7107-reset-pathspec-file.sh ***
ok 89 - basic atom: tag *objectname(B[m
ok 90 - basic atom: tag *objecttype(B[m
ok 91 - basic atom: tag author(B[m
ok 92 - basic atom: tag authorname(B[m
ok 93 - basic atom: tag authoremail(B[m
ok 1 - setup(B[m
ok 19 - verify --[no-]ahead-behind with V2 format(B[m
ok 94 - basic atom: tag authordate(B[m
ok 57 - 13a(info): messages for newly added files(B[m
ok 156 - mixing incompatibles modes and options is forbidden(B[m
ok 95 - basic atom: tag committer(B[m
ok 48 - bisect: --no-checkout - start commit bad(B[m
ok 2 - --pathspec-from-file from stdin(B[m
ok 13 - git_bisect: modified submodule does not update submodule work tree from invalid commit(B[m
ok 96 - basic atom: tag committername(B[m
ok 157 - mixing incompatible modes with --contains is forbidden(B[m
ok 40 - git_pull_ff_only: modified submodule does not update submodule work tree to invalid commit(B[m
ok 97 - basic atom: tag committeremail(B[m
ok 3 - --pathspec-from-file from file(B[m
ok 98 - basic atom: tag committerdate(B[m
ok 158 - Doing 'git tag --list-like --contains <commit> <pattern> is permitted(B[m
ok 99 - basic atom: tag tag(B[m
ok 1 - setup(B[m
ok 159 - mixing incompatible modes with --with is forbidden(B[m
ok 4 - NUL delimiters(B[m
ok 100 - basic atom: tag tagger(B[m
ok 10 - resetting to HEAD with no changes should succeed and do nothing(B[m
ok 101 - basic atom: tag taggername(B[m
ok 160 - Doing 'git tag --list-like --with <commit> <pattern> is permitted(B[m
ok 102 - basic atom: tag taggeremail(B[m
ok 5 - LF delimiters(B[m
ok 161 - mixing incompatible modes with --no-contains is forbidden(B[m
ok 103 - basic atom: tag taggerdate(B[m
ok 11 - --soft reset only should show changes in diff --cached(B[m
ok 104 - basic atom: tag creator(B[m
ok 58 - 13b(conflict): messages for transitive rename with conflicted content(B[m
ok 6 - no trailing delimiter(B[m
ok 162 - Doing 'git tag --list-like --no-contains <commit> <pattern> is permitted(B[m
ok 49 - bisect: --no-checkout - trial commit bad(B[m
ok 105 - basic atom: tag creatordate(B[m
ok 106 - basic atom: tag subject(B[m
ok 163 - mixing incompatible modes with --without is forbidden(B[m
ok 12 - changing files and redo the last commit should succeed(B[m
ok 20 - create and add submodule, submodule appears clean (A. S...)(B[m
ok 7 - CRLF delimiters(B[m
ok 107 - basic atom: tag contents:subject(B[m
ok 164 - Doing 'git tag --list-like --without <commit> <pattern> is permitted(B[m
ok 108 - basic atom: tag body(B[m
ok 21 - untracked changes in added submodule (AM S..U)(B[m
ok 8 - quotes(B[m
ok 13 - --hard reset should change the files and undo commits permanently(B[m
ok 14 - git_bisect: added submodule doesn't remove untracked unignored file with same name(B[m
ok 109 - basic atom: tag contents:body(B[m
ok 165 - mixing incompatible modes with --merged is forbidden(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 12 test(s)(B[m
[36m1..14(B[m
ok 110 - basic atom: tag contents:signature(B[m
ok 9 - quotes not compatible with --pathspec-file-nul(B[m
ok 166 - Doing 'git tag --list-like --merged <commit> <pattern> is permitted(B[m
ok 111 - basic atom: tag contents(B[m
ok 22 - staged changes in added submodule (AM S.M.)(B[m
*** t7110-reset-merge.sh ***
ok 14 - redoing changes adding them without commit them should succeed(B[m
ok 112 - basic atom: tag HEAD(B[m
ok 167 - mixing incompatible modes with --no-merged is forbidden(B[m
ok 113 - Check invalid atoms names are errors(B[m
ok 10 - only touches what was listed(B[m
ok 23 - staged and unstaged changes in added (AM S.M.)(B[m
ok 59 - 13b(info): messages for transitive rename with conflicted content(B[m
ok 168 - Doing 'git tag --list-like --no-merged <commit> <pattern> is permitted(B[m
ok 114 - Check format specifiers are ignored in naming date atoms(B[m
ok 15 - --mixed reset to HEAD should unadd the files(B[m
ok 169 - mixing incompatible modes with --points-at is forbidden(B[m
ok 24 - staged and untracked changes in added submodule (AM S.MU)(B[m
ok 115 - Check valid format specifiers for date fields(B[m
ok 170 - Doing 'git tag --list-like --points-at <commit> <pattern> is permitted(B[m
ok 11 - error conditions(B[m
ok 116 - Check invalid format specifiers are errors(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t7111-reset-table.sh ***
ok 171 - --points-at can be used in non-list mode(B[m
ok 1 - setup(B[m
ok 117 - arguments to %(objectname:short=) must be positive integers(B[m
ok 25 - commit within the submodule appears as new commit in super (AM SC..)(B[m
ok 16 - redoing the last two commits should succeed(B[m
ok 172 - --points-at is a synonym for --points-at HEAD(B[m
ok 118 - Check unformatted date fields output(B[m
ok 173 - --points-at finds lightweight tags(B[m
ok 2 - reset --merge is ok with changes in file it does not touch(B[m
ok 2 - rewrite identically(B[m
ok 119 - Check format "default" formatted date fields output(B[m
ok 174 - --points-at finds annotated tags of commits(B[m
ok 3 - result is really identical(B[m
ok 26 - stage submodule in super and commit(B[m
ok 3 - reset --merge is ok when switching back(B[m
ok 60 - 13c(conflict): messages for rename/rename(1to1) via transitive rename(B[m
ok 120 - Check format "default-local" date fields output(B[m
ok 175 - --points-at finds annotated tags of tags(B[m
ok 50 - bisect: --no-checkout - target before breakage(B[m
ok 121 - Check format "relative" date fields output(B[m
ok 27 - make unstaged changes in existing submodule (.M S.M.)(B[m
ok 176 - recursive tagging should give advice(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
ok 177 - multiple --points-at are OR-ed together(B[m
ok 4 - reset --keep is ok with changes in file it does not touch(B[m
*** t7112-reset-submodule.sh ***
ok 17 - --hard reset to HEAD should clear a failed merge(B[m
ok 1 - creating initial commits(B[m
ok 122 - Check format "relative-local" date fields output(B[m
ok 5 - reset --keep is ok when switching back(B[m
ok 178 - lexical sort(B[m
ok 123 - Check format "short" date fields output(B[m
ok 41 - git_pull_ff_only: modified submodule does not update submodule work tree from invalid commit(B[m
ok 179 - version sort(B[m
ok 124 - Check format "short-local" date fields output(B[m
ok 2 - check: A B C D --soft A B D(B[m
ok 180 - reverse version sort(B[m
ok 125 - Check format "local" date fields output(B[m
ok 6 - reset --merge discards changes added to index (1)(B[m
ok 181 - reverse lexical sort(B[m
ok 126 - Check format "iso8601" date fields output(B[m
ok 3 - check: A B C D --mixed A D D(B[m
ok 182 - configured lexical sort(B[m
ok 61 - 13c(info): messages for rename/rename(1to1) via transitive rename(B[m
ok 127 - Check format "iso8601-local" date fields output(B[m
ok 7 - reset --merge is ok again when switching back (1)(B[m
ok 183 - option override configured sort(B[m
ok 18 - --hard reset to ORIG_HEAD should clear a fast-forward merge(B[m
ok 128 - Check format "rfc2822" date fields output(B[m
ok 4 - check: A B C D --hard D D D(B[m
ok 184 - invalid sort parameter on command line(B[m
ok 8 - reset --keep fails with changes in index in files it touches(B[m
ok 129 - Check format "rfc2822-local" date fields output(B[m
ok 185 - invalid sort parameter in configuratoin(B[m
ok 5 - check: A B C D --merge XXXXX  (B[m
ok 130 - Check format "raw" date fields output(B[m
ok 6 - check: A B C D --keep XXXXX  (B[m
ok 9 - reset --merge discards changes added to index (2)(B[m
ok 19 - test --mixed <paths>(B[m
ok 131 - Check format "raw-local" date fields output(B[m
ok 186 - version sort with prerelease reordering(B[m
ok 132 - Check format of strftime date fields(B[m
ok 133 - Check format of strftime-local date fields(B[m
ok 187 - reverse version sort with prerelease reordering(B[m
ok 7 - check: A B C C --soft A B C(B[m
ok 10 - reset --merge is ok again when switching back (2)(B[m
ok 20 - test resetting the index at give paths(B[m
ok 134 - exercise strftime with odd fields(B[m
ok 4 - rewrite bare repository identically(B[m
ok 62 - 13d(conflict): messages for rename/rename(1to1) via dual transitive rename(B[m
ok 135 - Verify ascending sort(B[m
ok 51 - bisect: --no-checkout - target in breakage(B[m
ok 21 - resetting an unmodified path is a no-op(B[m
ok 5 - result is really identical(B[m
ok 188 - version sort with prerelease reordering and common leading character(B[m
ok 8 - check: A B C C --mixed A C C(B[m
ok 136 - Verify descending sort(B[m
ok 42 - git_pull_ff_only: added submodule doesn't remove untracked unignored file with same name(B[m
ok 11 - reset --keep keeps changes it does not touch(B[m
ok 22 - --mixed refreshes the index(B[m
ok 137 - exercise patterns with prefixes(B[m
ok 189 - version sort with prerelease reordering, multiple suffixes and common leading character(B[m
ok 12 - reset --keep keeps changes when switching back(B[m
ok 9 - check: A B C C --hard C C C(B[m
ok 138 - exercise glob patterns with prefixes(B[m
ok 23 - resetting specific path that is unmerged(B[m
ok 10 - check: A B C C --merge XXXXX  (B[m
ok 139 - Quoting style: shell(B[m
ok 13 - reset --merge fails with changes in file it touches(B[m
ok 140 - Quoting style: perl(B[m
ok 190 - version sort with prerelease reordering, multiple suffixes match the same tag(B[m
ok 141 - Quoting style: python(B[m
ok 24 - disambiguation (1)(B[m
ok 14 - reset --keep fails with changes in file it touches(B[m
ok 142 - Quoting style: tcl(B[m
ok 11 - check: A B C C --keep A C C(B[m
ok 143 - more than one quoting style: --perl --shell(B[m
ok 25 - disambiguation (2)(B[m
ok 144 - more than one quoting style: -s --python(B[m
ok 191 - version sort with prerelease reordering, multiple suffixes match starting at the same position(B[m
ok 63 - 13d(info): messages for rename/rename(1to1) via dual transitive rename(B[m
ok 145 - more than one quoting style: --python --tcl(B[m
ok 12 - check: B B C D --soft B B D(B[m
ok 146 - more than one quoting style: --tcl --perl(B[m
ok 26 - disambiguation (3)(B[m
ok 6 - correct GIT_DIR while using -d(B[m
ok 147 - setup for upstream:track[short](B[m
ok 13 - check: B B C D --mixed B D D(B[m
ok 27 - disambiguation (4)(B[m
ok 15 - setup 3 different branches(B[m
ok 148 - basic atom: head upstream:track(B[m
ok 192 - version sort with general suffix reordering(B[m
ok 149 - basic atom: head upstream:trackshort(B[m
ok 28 - reset with paths accepts tree(B[m
ok 150 - basic atom: head upstream:track,nobracket(B[m
ok 14 - check: B B C D --hard D D D(B[m
ok 193 - versionsort.suffix overrides versionsort.prereleaseSuffix(B[m
ok 16 - "reset --merge HEAD^" is ok with pending merge(B[m
ok 151 - basic atom: head upstream:nobracket,track(B[m
ok 29 - reset -N keeps removed files as intent-to-add(B[m
ok 194 - version sort with very long prerelease suffix(B[m
ok 52 - bisect: --no-checkout - target after breakage(B[m
ok 15 - check: B B C D --merge D D D(B[m
ok 17 - "reset --keep HEAD^" fails with pending merge(B[m
ok 152 - setup for push:track[short](B[m
ok 30 - reset --mixed sets up work tree(B[m
ok 153 - basic atom: head push:track(B[m
ok 16 - check: B B C D --keep XXXXX  (B[m
[32m# passed all 30 test(s)(B[m
[36m1..30(B[m
ok 154 - basic atom: head push:trackshort(B[m
*** t7113-post-index-change-hook.sh ***
ok 18 - "reset --merge HEAD" is ok with pending merge(B[m
ok 155 - Check that :track[short] cannot be used with other atoms(B[m
ok 17 - check: B B C C --soft B B C(B[m
ok 19 - "reset --keep HEAD" fails with pending merge(B[m
ok 7 - tree-filter works with -d(B[m
ok 64 - 13e: directory rename detection in recursive case(B[m
ok 156 - Check that :track[short] works when upstream is invalid(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 62 test(s)(B[m
[36m1..64(B[m
ok 157 - Check for invalid refname format(B[m
ok 18 - check: B B C C --mixed B C C(B[m
ok 20 - --merge is ok with added/deleted merge(B[m
ok 1 - setup(B[m
ok 158 - set up color tests(B[m
[34mok 159 # skip %(color) shows color with a tty (missing TTY)(B[m
ok 19 - check: B B C C --hard C C C(B[m
ok 160 - %(color) does not show color without tty(B[m
ok 21 - --keep fails with added/deleted merge(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
ok 161 - --color can override tty check(B[m
*** t7201-co.sh ***
ok 162 - color.ui=always does not override tty check(B[m
ok 8 - Fail if commit filter fails(B[m
ok 20 - check: B B C C --merge C C C(B[m
ok 2 - test status, add, commit, others trigger hook without flags set(B[m
ok 43 - git_pull_noff: added submodule creates empty directory(B[m
ok 163 - Check ambiguous head and tag refs (strict)(B[m
ok 21 - check: B B C C --keep B C C(B[m
ok 164 - Check ambiguous head and tag refs (loose)(B[m
ok 3 - test checkout and reset trigger the hook(B[m
ok 22 - check: B C C D --soft B C D(B[m
ok 165 - Check ambiguous head and tag refs II (loose)(B[m
ok 53 - bisect: demonstrate identification of damage boundary(B[m
ok 166 - create tag without tagger(B[m
ok 23 - check: B C C D --mixed B D D(B[m
ok 167 - basic atom: refs/tags/taggerless type(B[m
ok 1 - setup(B[m
ok 4 - test reset --mixed and update-index triggers the hook(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 168 - basic atom: refs/tags/taggerless tag(B[m
*** t7300-clean.sh ***
ok 24 - check: B C C D --hard D D D(B[m
*** t7301-clean-interactive.sh ***
ok 169 - basic atom: refs/tags/taggerless tagger(B[m
ok 2 - checkout from non-existing branch(B[m
ok 25 - check: B C C D --merge XXXXX  (B[m
ok 170 - basic atom: refs/tags/taggerless taggername(B[m
ok 3 - checkout with dirty tree without -m(B[m
ok 26 - check: B C C D --keep XXXXX  (B[m
ok 171 - basic atom: refs/tags/taggerless taggeremail(B[m
ok 4 - checkout with unrelated dirty tree without -m(B[m
ok 172 - basic atom: refs/tags/taggerless taggerdate(B[m
ok 173 - basic atom: refs/tags/taggerless committer(B[m
ok 27 - check: B C C C --soft B C C(B[m
ok 174 - basic atom: refs/tags/taggerless committername(B[m
ok 1 - setup(B[m
ok 1 - setup(B[m
ok 175 - basic atom: refs/tags/taggerless committeremail(B[m
ok 5 - checkout -m with dirty tree(B[m
ok 2 - git clean -i (c: clean hotkey)(B[m
ok 28 - check: B C C C --mixed B C C(B[m
ok 176 - basic atom: refs/tags/taggerless committerdate(B[m
ok 3 - git clean -i (cl: clean prefix)(B[m
ok 2 - git clean with skip-worktree .gitignore(B[m
ok 177 - basic atom: refs/tags/taggerless subject(B[m
ok 4 - git clean -i (quit)(B[m
ok 3 - git clean(B[m
ok 6 - checkout -m with dirty tree, renamed(B[m
ok 29 - check: B C C C --hard C C C(B[m
ok 5 - git clean -i (Ctrl+D)(B[m
ok 4 - git clean src/(B[m
ok 178 - an unusual tag with an incomplete line(B[m
ok 5 - git clean src/ src/(B[m
ok 6 - git clean -id (filter all)(B[m
ok 179 - create tag with subject and body content(B[m
ok 6 - git clean with prefix(B[m
ok 7 - git clean -id (filter patterns)(B[m
ok 195 - --contains and --no-contains work in a deep repo(B[m
ok 30 - check: B C C C --merge B C C(B[m
ok 7 - checkout -m with merge conflict(B[m
ok 180 - basic atom: refs/tags/subject-body subject(B[m
ok 8 - git clean -id (filter patterns 2)(B[m
ok 196 - --format should list tags as per format given(B[m
ok 7 - git clean with relative prefix(B[m
ok 197 - set up color tests(B[m
ok 54 - bisect log: successful result(B[m
ok 181 - basic atom: refs/tags/subject-body body(B[m
ok 9 - git clean -id (select - all)(B[m
ok 31 - check: B C C C --keep B C C(B[m
ok 8 - format of merge conflict from checkout -m(B[m
ok 198 - %(color) omitted without tty(B[m
ok 8 - git clean with absolute path(B[m
ok 182 - basic atom: refs/tags/subject-body contents(B[m
ok 10 - git clean -id (select - none)(B[m
[34mok 199 # skip %(color) present with tty (missing TTY)(B[m
ok 183 - create tag with multiline subject(B[m
ok 9 - git clean with out of work tree relative path(B[m
ok 11 - git clean -id (select - number)(B[m
ok 200 - --color overrides auto-color(B[m
ok 184 - basic atom: refs/tags/multiline subject(B[m
ok 12 - git clean -id (select - number 2)(B[m
ok 10 - git clean with out of work tree absolute path(B[m
ok 9 - checkout --merge --conflict=diff3 <branch>(B[m
ok 201 - color.ui=always overrides auto-color(B[m
ok 185 - basic atom: refs/tags/multiline contents:subject(B[m
ok 11 - git clean -d with prefix and path(B[m
ok 13 - git clean -id (select - number 3)(B[m
ok 186 - basic atom: refs/tags/multiline body(B[m
ok 202 - setup --merged test tags(B[m
ok 14 - git clean -id (select - filenames)(B[m
ok 12 - git clean symbolic link(B[m
ok 187 - basic atom: refs/tags/multiline contents:body(B[m
ok 32 - setting up branches to test with unmerged entries(B[m
ok 15 - git clean -id (select - range)(B[m
ok 203 - --merged can be used in non-list mode(B[m
ok 13 - git clean with wildcard(B[m
ok 10 - switch to another branch while carrying a deletion(B[m
ok 204 - --merged is incompatible with --no-merged(B[m
ok 188 - basic atom: refs/tags/multiline contents:signature(B[m
ok 16 - git clean -id (select - range 2)(B[m
ok 14 - git clean -n(B[m
ok 33 - check: X U B C --soft XXXXX  (B[m
ok 205 - --merged shows merged tags(B[m
ok 189 - basic atom: refs/tags/multiline contents(B[m
ok 17 - git clean -id (inverse select)(B[m
[34mok 190 # skip create signed tags (missing GPG)(B[m
[34mok 191 # skip basic atom: refs/tags/signed-empty subject (missing GPG)(B[m
[34mok 192 # skip basic atom: refs/tags/signed-empty contents:subject (missing GPG)(B[m
ok 15 - git clean -d(B[m
ok 44 - git_pull_noff: added submodule leaves existing empty directory alone(B[m
[34mok 193 # skip basic atom: refs/tags/signed-empty body (missing GPG)(B[m
[34mok 194 # skip basic atom: refs/tags/signed-empty contents:body (missing GPG)(B[m
ok 18 - git clean -id (ask)(B[m
[34mok 195 # skip basic atom: refs/tags/signed-empty contents:signature (missing GPG)(B[m
ok 206 - --no-merged show unmerged tags(B[m
[34mok 196 # skip basic atom: refs/tags/signed-empty contents (missing GPG)(B[m
[34mok 197 # skip basic atom: refs/tags/signed-short subject (missing GPG)(B[m
ok 16 - git clean -d src/ examples/(B[m
[34mok 198 # skip basic atom: refs/tags/signed-short contents:subject (missing GPG)(B[m
[34mok 199 # skip basic atom: refs/tags/signed-short body (missing GPG)(B[m
[34mok 200 # skip basic atom: refs/tags/signed-short contents:body (missing GPG)(B[m
ok 11 - checkout to detach HEAD (with advice declined)(B[m
ok 19 - git clean -id (ask - Ctrl+D)(B[m
[34mok 201 # skip basic atom: refs/tags/signed-short contents:signature (missing GPG)(B[m
ok 207 - --no-merged can be used in non-list mode(B[m
[34mok 202 # skip basic atom: refs/tags/signed-short contents (missing GPG)(B[m
[34mok 203 # skip basic atom: refs/tags/signed-long subject (missing GPG)(B[m
ok 9 - rewrite, renaming a specific file(B[m
[34mok 204 # skip basic atom: refs/tags/signed-long contents:subject (missing GPG)(B[m
ok 17 - git clean -x(B[m
[34mok 205 # skip basic atom: refs/tags/signed-long body (missing GPG)(B[m
ok 34 - check: X U B C --mixed X C C(B[m
[34mok 206 # skip basic atom: refs/tags/signed-long contents:body (missing GPG)(B[m
[34mok 207 # skip basic atom: refs/tags/signed-long contents:signature (missing GPG)(B[m
ok 20 - git clean -id with prefix and path (filter)(B[m
[34mok 208 # skip basic atom: refs/tags/signed-long contents (missing GPG)(B[m
ok 10 - test that the file was renamed(B[m
ok 18 - git clean -d -x(B[m
ok 208 - ambiguous branch/tags not marked(B[m
ok 21 - git clean -id with prefix and path (select by name)(B[m
ok 19 - git clean -d -x with ignored tracked directory(B[m
ok 209 - Verify sort with multiple keys(B[m
ok 22 - git clean -id with prefix and path (ask)(B[m
ok 12 - checkout to detach HEAD(B[m
ok 20 - git clean -X(B[m
[34mok 23 # skip git clean -i paints the header in HEADER color (missing TTY)(B[m
ok 35 - check: X U B C --hard C C C(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
*** t7400-submodule-basic.sh ***
ok 21 - git clean -d -X(B[m
ok 210 - do not dereference NULL upon %(HEAD) on unborn branch(B[m
ok 22 - git clean -d -X with ignored tracked directory(B[m
ok 13 - checkout to detach HEAD with branchname^(B[m
ok 23 - clean.requireForce defaults to true(B[m
ok 211 - set up trailers for next test(B[m
ok 55 - bisect log: only skip commits left(B[m
ok 36 - check: X U B C --merge C C C(B[m
ok 24 - clean.requireForce(B[m
ok 212 - %(trailers:unfold) unfolds trailers(B[m
ok 25 - clean.requireForce and -n(B[m
ok 14 - checkout to detach HEAD with :/message(B[m
ok 37 - check: X U B C --keep XXXXX  (B[m
ok 213 - %(trailers:only) shows only "key: value" trailers(B[m
ok 26 - clean.requireForce and -f(B[m
ok 209 - --contains combined with --no-contains(B[m
ok 214 - %(trailers:only) and %(trailers:unfold) work together(B[m
ok 38 - check: X U B B --soft XXXXX  (B[m
ok 27 - core.excludesfile(B[m
ok 15 - checkout to detach HEAD with HEAD^0(B[m
ok 215 - %(contents:trailers:unfold) unfolds trailers(B[m
ok 1 - submodule deinit works on empty repository(B[m
ok 216 - %(contents:trailers:only) shows only "key: value" trailers(B[m
ok 210 - Does --[no-]contains stop at commits? Yes!(B[m
ok 39 - check: X U B B --mixed X B B(B[m
ok 2 - setup - initial commit(B[m
ok 28 - removal failure(B[m
[32m# passed all 210 test(s)(B[m
[36m1..210(B[m
ok 217 - %(contents:trailers:only) and %(contents:trailers:unfold) work together(B[m
ok 16 - checkout with ambiguous tag/branch names(B[m
*** t7401-submodule-summary.sh ***
ok 218 - %(trailers) rejects unknown trailers arguments(B[m
ok 1 - git reset --keep --recurse-submodules: added submodule is checked out(B[m
ok 40 - check: X U B B --hard B B B(B[m
ok 219 - %(contents:trailers) rejects unknown trailers arguments(B[m
ok 220 - basic atom: head contents:trailers(B[m
ok 29 - nested git work tree(B[m
ok 17 - checkout with ambiguous tag/branch names(B[m
ok 3 - submodule init aborts on missing .gitmodules file(B[m
ok 221 - trailer parsing not fooled by --- line(B[m
ok 41 - check: X U B B --merge B B B(B[m
ok 30 - should clean things that almost look like git but are not(B[m
ok 222 - Add symbolic ref for the following tests(B[m
ok 18 - switch branches while in subdirectory(B[m
ok 223 - Verify usage of %(symref) atom(B[m
ok 42 - check: X U B B --keep XXXXX  (B[m
[32m# passed all 42 test(s)(B[m
[36m1..42(B[m
ok 224 - Verify usage of %(symref:short) atom(B[m
*** t7402-submodule-rebase.sh ***
ok 56 - "git bisect bad HEAD" behaves as "git bisect bad"(B[m
ok 225 - Verify usage of %(symref:lstrip) atom(B[m
ok 19 - checkout specific path while in subdirectory(B[m
ok 4 - submodule update aborts on missing .gitmodules file(B[m
ok 226 - Verify usage of %(symref:rstrip) atom(B[m
ok 20 - checkout w/--track sets up tracking(B[m
ok 21 - checkout w/autosetupmerge=always sets up tracking(B[m
ok 5 - submodule update aborts on missing gitmodules url(B[m
ok 1 - added submodule(B[m
ok 45 - git_pull_noff: replace tracked file with submodule creates empty directory(B[m
ok 22 - checkout w/--track from non-branch HEAD fails(B[m
ok 2 - git reset --keep --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 1 - setup(B[m
ok 227 - :remotename and :remoteref(B[m
ok 23 - checkout w/--track from tag fails(B[m
ok 228 - for-each-ref --ignore-case ignores case(B[m
[32m# passed all 228 test(s)(B[m
ok 57 - bisect starts with only one new(B[m
[36m1..228(B[m
ok 6 - add aborts on repository with no commits(B[m
ok 11 - rewrite, renaming a specific directory(B[m
*** t7403-submodule-sync.sh ***
ok 12 - test that the directory was renamed(B[m
ok 2 - added submodule (subdirectory)(B[m
ok 2 - rebase with a dirty submodule(B[m
ok 24 - detach a symbolic link HEAD(B[m
ok 31 - should not clean submodules(B[m
[34mok 1 # skip create signed tags (missing GPG)(B[m
[34mok 2 # skip create signed tags x509  (missing GPGSM)(B[m
[34mok 3 # skip verify and show signatures (missing GPG)(B[m
[34mok 4 # skip verify and show signatures x509 (missing GPGSM)(B[m
ok 3 - interactive rebase with a dirty submodule(B[m
[34mok 5 # skip verify and show signatures x509 with low minTrustLevel (missing GPGSM)(B[m
[34mok 6 # skip verify and show signatures x509 with matching minTrustLevel (missing GPGSM)(B[m
ok 32 - should avoid cleaning possible submodules(B[m
[34mok 7 # skip verify and show signatures x509 with high minTrustLevel (missing GPGSM)(B[m
[34mok 8 # skip detect fudged signature (missing GPG)(B[m
ok 7 - status should ignore inner git repo when not added(B[m
[34mok 9 # skip verify signatures with --raw (missing GPG)(B[m
[34mok 10 # skip verify signatures with --raw x509 (missing GPGSM)(B[m
[34mok 11 # skip verify multiple tags (missing GPG)(B[m
ok 3 - added submodule (subdirectory only)(B[m
[34mok 12 # skip verify multiple tags x509 (missing GPGSM)(B[m
[34mok 13 # skip verifying tag with --format (missing GPG)(B[m
[34mok 14 # skip verifying a forged tag with --format should fail silently (missing GPG)(B[m
ok 33 - nested (empty) git should be kept(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
*** t7405-submodule-merge.sh ***
ok 4 - rebase with dirty file and submodule fails(B[m
ok 8 - setup - repository in init subdirectory(B[m
ok 9 - setup - commit with gitlink(B[m
ok 25 - checkout with --track fakes a sensible -b <name>(B[m
ok 34 - nested bare repositories should be cleaned(B[m
ok 10 - setup - hide init subdirectory(B[m
ok 26 - checkout with --track, but without -b, fails with too short tracked name(B[m
[33mnot ok 46 - git_pull_noff: replace directory with submodule # TODO known breakage(B[m
ok 11 - setup - repository to add submodules to(B[m
[33mnot ok 35 - nested (empty) bare repositories should be cleaned even when in .git # TODO known breakage(B[m
ok 58 - bisect does not start with only one old(B[m
ok 5 - stash with a dirty submodule(B[m
ok 4 - added submodule (subdirectory with explicit path)(B[m
ok 27 - checkout an unmerged path should fail(B[m
[33mnot ok 36 - nested (non-empty) bare repositories should be cleaned even when in .git # TODO known breakage(B[m
ok 37 - giving path in nested git work tree will NOT remove it(B[m
ok 28 - checkout with an unmerged path can be ignored(B[m
ok 6 - rebasing submodule that should conflict(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
*** t7406-submodule-update.sh ***
ok 38 - giving path to nested .git will not remove it(B[m
ok 29 - checkout unmerged stage(B[m
ok 1 - setup(B[m
ok 5 - modified submodule(forward)(B[m
ok 39 - giving path to nested .git/ will NOT remove contents(B[m
ok 30 - checkout with --merge(B[m
ok 12 - submodule add(B[m
ok 31 - checkout with --merge, in diff3 -m style(B[m
ok 3 - git reset --keep --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 13 - setup parent and one repository(B[m
ok 40 - force removal of nested git work tree(B[m
ok 6 - modified submodule(forward), --files(B[m
ok 41 - git clean -e(B[m
ok 32 - checkout --conflict=merge, overriding config(B[m
ok 42 - git clean -d with an unreadable empty directory(B[m
ok 43 - git clean -d respects pathspecs (dir is prefix of pathspec)(B[m
ok 44 - git clean -d respects pathspecs (pathspec is prefix of dir)(B[m
ok 45 - git clean -d skips untracked dirs containing ignored files(B[m
ok 33 - checkout --conflict=diff3(B[m
ok 14 - redirected submodule add does not show progress(B[m
ok 47 - git_pull_noff: removed submodule leaves submodule directory and its contents in place(B[m
ok 13 - populate --state-branch(B[m
ok 34 - failing checkout -b should not break working tree(B[m
ok 46 - git clean -d skips nested repo containing ignored files(B[m
ok 2 - setup for merge search(B[m
ok 47 - git clean handles being told what to clean(B[m
ok 35 - switch out of non-branch(B[m
ok 48 - git clean handles being told what to clean, with -d(B[m
ok 59 - bisect start with one new and old(B[m
ok 7 - no ignore=all setting has any effect(B[m
ok 3 - merge with one side as a fast-forward of the other(B[m
ok 49 - git clean works if a glob is passed without -d(B[m
ok 50 - git clean works if a glob is passed with -d(B[m
[34mok 51 # skip handle clean & core.longpaths = false nicely (missing MINGW)(B[m
ok 4 - merging should conflict for non fast-forward(B[m
ok 52 - clean untracked paths by pathspec(B[m
[33m# still have 2 known breakage(s)(B[m
[32m# passed all remaining 50 test(s)(B[m
[36m1..52(B[m
ok 1 - core.untrackedCache is unset(B[m
*** t7407-submodule-foreach.sh ***
ok 4 - git reset --keep --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
ok 15 - redirected submodule add --progress does show progress(B[m
ok 2 - setup(B[m
ok 5 - merging should fail for ambiguous common parent(B[m
ok 3 - untracked cache is empty(B[m
ok 36 - custom merge driver with checkout -m(B[m
ok 60 - bisect replay with old and new(B[m
[32m# passed all 36 test(s)(B[m
[36m1..36(B[m
ok 8 - modified submodule(backward)(B[m
*** t7408-submodule-reference.sh ***
ok 14 - using --state-branch to skip already rewritten commits(B[m
ok 16 - submodule add to .gitignored path fails(B[m
ok 6 - merging should fail for changes that are backwards(B[m
ok 1 - preparing first repository(B[m
ok 7 - git submodule status should display the merge conflict properly with merge base(B[m
ok 61 - bisect cannot mix old/new and good/bad(B[m
ok 17 - submodule add to .gitignored path with --force(B[m
ok 9 - modified submodule(backward and forward)(B[m
ok 2 - preparing second repository(B[m
ok 5 - git reset --keep --recurse-submodules: replace directory with submodule(B[m
ok 3 - preparing superproject(B[m
ok 8 - git submodule status should display the merge conflict properly without merge-base(B[m
ok 15 - rewrite one branch, keeping a side branch(B[m
ok 16 - common ancestor is still common (unchanged)(B[m
ok 9 - merging with a modify/modify conflict between merge bases(B[m
ok 48 - git_pull_noff: removed submodule leaves submodule containing a .git directory alone(B[m
ok 10 - --summary-limit(B[m
ok 62 - bisect terms needs 0 or 1 argument(B[m
ok 4 - submodule add --reference uses alternates(B[m
ok 11 - typechanged submodule(submodule->blob), --cached(B[m
ok 1 - setup(B[m
ok 2 - change submodule(B[m
ok 1 - setup a submodule tree(B[m
ok 63 - bisect terms shows good/bad after start(B[m
ok 18 - submodule add to reconfigure existing submodule with --force(B[m
ok 12 - typechanged submodule(submodule->blob), --files(B[m
ok 17 - filter subdirectory only(B[m
ok 3 - change submodule url(B[m
ok 5 - submodule add --reference with --dissociate does not use alternates(B[m
ok 10 - setup for recursive merge with submodule(B[m
ok 18 - subdirectory filter result looks okay(B[m
ok 19 - submodule add relays add --dry-run stderr(B[m
ok 6 - that reference gets used with add(B[m
ok 11 - recursive merge with submodule(B[m
ok 6 - git reset --keep --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 4 - status first time (empty cache)(B[m
ok 19 - more setup(B[m
ok 5 - untracked cache after first status(B[m
ok 2 - submodule update detaching the HEAD (B[m
ok 13 - typechanged submodule(submodule->blob)(B[m
[33mnot ok 49 - git_pull_noff: replace submodule with a directory must fail # TODO known breakage(B[m
ok 1 - setup a submodule tree(B[m
ok 4 - "git submodule sync" should update submodule URLs(B[m
ok 3 - submodule update from subdirectory(B[m
ok 20 - submodule add --branch(B[m
ok 14 - nonexistent commit(B[m
ok 12 - setup file/submodule conflict(B[m
ok 7 - updating superproject keeps alternates(B[m
[33mnot ok 13 - file/submodule conflict # TODO known breakage(B[m
ok 5 - "git submodule sync --recursive" should update all submodule URLs(B[m
ok 6 - reset submodule URLs(B[m
ok 14 - file/submodule conflict; merge --abort works afterward(B[m
ok 64 - bisect start with one term1 and term2(B[m
ok 15 - typechanged submodule(blob->submodule)(B[m
ok 21 - submodule add with ./ in path(B[m
ok 2 - test basic "submodule foreach" usage(B[m
ok 7 - git reset --keep --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 7 - "git submodule sync" should update submodule URLs - subdirectory(B[m
ok 16 - deleted submodule(B[m
[33mnot ok 50 - git_pull_noff: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 65 - bisect replay with term1 and term2(B[m
ok 3 - test "submodule foreach" from subdirectory(B[m
ok 17 - create second submodule(B[m
ok 8 - updating superproject with --dissociate does not keep alternates(B[m
ok 15 - setup directory/submodule conflict(B[m
ok 8 - "git submodule sync --recursive" should update all submodule URLs - subdirectory(B[m
ok 22 - submodule add with /././ in path(B[m
[33mnot ok 16 - directory/submodule conflict; keep submodule clean # TODO known breakage(B[m
ok 18 - multiple submodules(B[m
ok 6 - status second time (fully populated cache)(B[m
[33mnot ok 17 - directory/submodule conflict; should not treat submodule files as untracked or in the way # TODO known breakage(B[m
ok 7 - untracked cache after second status(B[m
ok 20 - use index-filter to move into a subdirectory(B[m
ok 9 - "git submodule sync" should update known submodule URLs(B[m
[33mnot ok 18 - directory/submodule conflict; merge --abort works afterward # TODO known breakage(B[m
[33m# still have 4 known breakage(s)(B[m
[32m# passed all remaining 14 test(s)(B[m
[36m1..18(B[m
ok 4 - submodule update --init --recursive from subdirectory(B[m
ok 19 - path filter(B[m
*** t7409-submodule-detached-work-tree.sh ***
ok 66 - bisect start term1 term2(B[m
ok 8 - git reset --keep --recurse-submodules: replace submodule with a file(B[m
[33mnot ok 51 - git_pull_noff: replace submodule with a file must fail # TODO known breakage(B[m
ok 21 - stops when msg filter fails(B[m
ok 23 - submodule add with // in path(B[m
ok 9 - submodules use alternates when cloning a superproject(B[m
ok 10 - "git submodule sync" should not vivify uninteresting submodule(B[m
ok 20 - given commit(B[m
ok 11 - "git submodule sync" handles origin URL of the form foo(B[m
ok 5 - submodule update --init from and of subdirectory(B[m
ok 12 - "git submodule sync" handles origin URL of the form foo/bar(B[m
ok 10 - missing submodule alternate fails clone and submodule update(B[m
ok 24 - submodule add with /.. in path(B[m
ok 21 - --for-status(B[m
ok 22 - fail when using --files together with --cached(B[m
ok 13 - "git submodule sync --recursive" propagates changes in origin(B[m
ok 67 - bisect cannot mix terms(B[m
[33mnot ok 9 - git reset --keep --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 14 - "git submodule sync" handles origin URL of the form ./foo(B[m
ok 23 - should not fail in an empty repo(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
ok 1 - submodule on detached working tree(B[m
*** t7411-submodule-config.sh ***
ok 6 - submodule update does not fetch already present commits(B[m
[33mnot ok 52 - git_pull_noff: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 25 - submodule add with ./, /.. and // in path(B[m
ok 15 - "git submodule sync" handles origin URL of the form ./foo/bar(B[m
ok 4 - setup nested submodules(B[m
ok 8 - modify in root directory, one dir invalidation(B[m
ok 16 - "git submodule sync" handles origin URL of the form ../foo(B[m
ok 9 - verify untracked cache dump(B[m
ok 7 - submodule update should fail due to local changes(B[m
ok 22 - author information is preserved(B[m
ok 11 - ignoring missing submodule alternates passes clone and submodule update(B[m
ok 17 - "git submodule sync" handles origin URL of the form ../foo/bar(B[m
ok 68 - bisect terms rejects invalid terms(B[m
ok 26 - submodule add with \\ in path(B[m
ok 8 - submodule update should throw away changes with --force (B[m
ok 1 - submodule config cache setup(B[m
ok 2 - configuration parsing with error(B[m
ok 10 - git reset --keep --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 2 - submodule on detached working pointed by core.worktree(B[m
ok 3 - test parsing and lookup of submodule config by path(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 4 - test parsing and lookup of submodule config by name(B[m
ok 18 - "git submodule sync" handles origin URL of the form ../foo/bar with deeply nested submodule(B[m
ok 9 - submodule update --force forcibly checks out submodules(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 27 - submodule add in subdirectory(B[m
ok 69 - bisect start --term-* does store terms(B[m
*** t7412-submodule-absorbgitdirs.sh ***
*** t7413-submodule-is-active.sh ***
ok 5 - error in history of one submodule config lets continue, stderr message contains blob ref(B[m
ok 28 - submodule add in subdirectory with relative path should fail(B[m
ok 29 - setup - add an example entry to .gitmodules(B[m
ok 6 - using different treeishs works(B[m
ok 53 - git_pull_noff: modified submodule does not update submodule work tree(B[m
ok 30 - status should fail for unmapped paths(B[m
ok 7 - error in history in fetchrecursesubmodule lets continue(B[m
ok 31 - setup - map path in .gitmodules(B[m
ok 8 - reading submodules config from the working tree with "submodule--helper config"(B[m
ok 9 - unsetting submodules config from the working tree with "submodule--helper config --unset"(B[m
ok 10 - submodule update --remote should fetch upstream changes(B[m
ok 10 - writing submodules config with "submodule--helper config"(B[m
ok 70 - bisect start takes options and revs in any order(B[m
ok 32 - status should only print one line(B[m
ok 1 - setup a real submodule(B[m
ok 11 - overwriting unstaged submodules config with "submodule--helper config"(B[m
ok 12 - writeable .gitmodules when it is in the working tree(B[m
ok 13 - writeable .gitmodules when it is nowhere in the repository(B[m
ok 14 - non-writeable .gitmodules when it is in the index but not in the working tree(B[m
ok 2 - absorb the git dir(B[m
ok 15 - non-writeable .gitmodules when it is in the current branch but not in the index(B[m
ok 16 - reading submodules config from the index when .gitmodules is not in the working tree(B[m
ok 11 - git reset --keep --recurse-submodules: updating to a missing submodule commit fails(B[m
ok 10 - new .gitignore invalidates recursively(B[m
ok 11 - verify untracked cache dump(B[m
ok 12 - preparing second superproject with a nested submodule plus partial clone(B[m
ok 23 - remove a certain author's commits(B[m
ok 17 - reading submodules config from the current branch when .gitmodules is not in the index(B[m
ok 5 - use "submodule foreach" to checkout 2nd level submodule(B[m
ok 1 - setup(B[m
ok 2 - is-active works with urls(B[m
ok 71 - git bisect reset cleans bisection state properly(B[m
[32m# passed all 71 test(s)(B[m
[36m1..71(B[m
*** t7414-submodule-mistakes.sh ***
ok 3 - is-active works with submodule.<name>.active config(B[m
ok 4 - is-active works with basic submodule.active config(B[m
ok 24 - barf on invalid name(B[m
ok 5 - is-active correctly works with paths that are not submodules(B[m
ok 18 - reading nested submodules config(B[m
ok 1 - create embedded repository(B[m
ok 12 - git reset --keep --recurse-submodules: added submodule doesn't remove untracked file with same name(B[m
ok 19 - reading nested submodules config when .gitmodules is not in the working tree(B[m
ok 6 - is-active works with exclusions in submodule.active config(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
ok 2 - git-add on embedded repository warns(B[m
*** t7415-submodule-names.sh ***
ok 3 - --no-warn-embedded-repo suppresses warning(B[m
ok 11 - submodule update --remote should fetch upstream changes with .(B[m
ok 7 - is-active with submodule.active and submodule.<name>.active(B[m
ok 3 - absorbing does not fail for deinitialized submodules(B[m
ok 4 - no warning when updating entry(B[m
ok 54 - git_pull_noff: modified submodule does not update submodule work tree to invalid commit(B[m
ok 1 - check names(B[m
ok 2 - create innocent subrepo(B[m
ok 25 - "map" works in commit filter(B[m
ok 3 - submodule add refuses invalid names(B[m
[33mnot ok 13 - git reset --keep --recurse-submodules: added submodule removes an untracked ignored file # TODO known breakage(B[m
ok 13 - nested submodule alternate in works and is actually used(B[m
ok 4 - setup nested submodule(B[m
ok 5 - submodule add does not warn(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 12 - local config should override .gitmodules branch(B[m
*** t7416-submodule-dash-url.sh ***
ok 8 - is-active, submodule.active and submodule add(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 5 - absorb the git dir in a nested submodule(B[m
*** t7417-submodule-path-url.sh ***
ok 33 - status from subdirectory should have the same SHA1(B[m
ok 34 - setup - fetch commit name from submodule(B[m
ok 4 - add evil submodule(B[m
ok 26 - Name needing quotes(B[m
ok 13 - submodule update --rebase staying on master(B[m
ok 35 - status should initially be "missing"(B[m
ok 12 - new info/exclude invalidates everything(B[m
ok 13 - verify untracked cache dump(B[m
ok 1 - create submodule with protected dash in url(B[m
ok 14 - move two from tracked to untracked(B[m
ok 6 - use "foreach --recursive" to checkout all submodules(B[m
ok 6 - re-setup nested submodule(B[m
ok 15 - status after the move(B[m
ok 36 - init should register submodule url in .git/config(B[m
ok 5 - add other submodule(B[m
ok 16 - verify untracked cache dump(B[m
ok 17 - move two from untracked to tracked(B[m
ok 14 - missing nested submodule alternate fails clone and submodule update(B[m
ok 18 - status after the move(B[m
[33mnot ok 14 - git reset --keep --recurse-submodules: replace submodule with a directory # TODO known breakage(B[m
ok 1 - create submodule with dash in path(B[m
ok 19 - verify untracked cache dump(B[m
ok 37 - status should still be "missing" after initializing(B[m
ok 14 - submodule update --merge staying on master(B[m
ok 55 - git_pull_noff: modified submodule does not update submodule work tree from invalid commit(B[m
ok 7 - test messages from "foreach --recursive"(B[m
ok 20 - set up for sparse checkout testing(B[m
ok 7 - absorb the git dir in a nested submodule(B[m
ok 21 - status after commit(B[m
ok 22 - untracked cache correct after commit(B[m
ok 38 - init should fail with unknown submodule(B[m
ok 8 - setup a gitlink with missing .gitmodules entry(B[m
ok 2 - clone can recurse submodule(B[m
ok 23 - set up sparse checkout(B[m
ok 2 - clone rejects unprotected dash(B[m
ok 27 - Subdirectory filter with disappearing trees(B[m
ok 24 - create/modify files, some of which are gitignored(B[m
ok 6 - clone evil superproject(B[m
ok 8 - test messages from "foreach --recursive" from subdirectory(B[m
ok 3 - fsck accepts protected dash(B[m
ok 7 - fsck detects evil superproject(B[m
ok 39 - update should fail with unknown submodule(B[m
ok 3 - fsck rejects unprotected dash(B[m
[34mok 4 # skip submodule paths disallows trailing spaces (missing MINGW)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 4 - remove ./ protection from .gitmodules url(B[m
*** t7418-submodule-sparse-gitmodules.sh ***
ok 15 - submodule update - rebase in .git/config(B[m
ok 8 - transfer.fsckObjects detects evil superproject (unpack)(B[m
ok 40 - status should fail with unknown submodule(B[m
ok 9 - absorbing the git dir fails for incomplete submodules(B[m
ok 9 - transfer.fsckObjects detects evil superproject (index)(B[m
ok 5 - clone rejects unprotected dash(B[m
ok 56 - git_pull_noff: added submodule doesn't remove untracked unignored file with same name(B[m
ok 9 - test "submodule foreach --recursive" from subdirectory(B[m
ok 41 - sync should fail with unknown submodule(B[m
ok 6 - fsck rejects unprotected dash(B[m
ok 28 - Tag name filtering retains tag message(B[m
ok 42 - update should fail when path is used by a file(B[m
ok 16 - submodule update - checkout in .git/config but --rebase given(B[m
ok 10 - test "foreach --quiet --recursive"(B[m
ok 10 - setup a submodule with multiple worktrees(B[m
[33mnot ok 15 - git reset --keep --recurse-submodules: replace submodule containing a .git directory with a directory must absorb the git dir # TODO known breakage(B[m
ok 1 - sparse checkout setup which hides .gitmodules(B[m
ok 43 - update should fail when path is used by a nonempty directory(B[m
ok 2 - reading gitmodules config file when it is not checked out(B[m
ok 3 - not writing gitmodules config file when it is not checked out(B[m
ok 11 - absorbing fails for a submodule with multiple worktrees(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t7419-submodule-set-branch.sh ***
ok 4 - initialising submodule when the gitmodules config is not checked out(B[m
ok 17 - submodule update - merge in .git/config(B[m
ok 15 - missing nested submodule alternate in --reference-if-able mode(B[m
ok 7 - trailing backslash is handled correctly(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
ok 29 - Tag name filtering strips gpg signature(B[m
[34mok 30 # skip Filtering retains message of gpg signed commit (missing GPG)(B[m
ok 44 - update should work when path is an empty dir(B[m
*** t7420-submodule-set-url.sh ***
ok 57 - pull --recurse-submodule setup(B[m
ok 8 - fsck rejects missing URL scheme(B[m
ok 5 - updating submodule when the gitmodules config is not checked out(B[m
ok 45 - status should be "up-to-date" after update(B[m
ok 18 - submodule update - checkout in .git/config but --merge given(B[m
ok 10 - create oddly ordered pack(B[m
ok 11 - transfer.fsckObjects handles odd pack (unpack)(B[m
ok 9 - fsck rejects relative URL resolving to missing scheme(B[m
ok 1 - submodule config cache setup(B[m
ok 2 - ensure submodule branch is unset(B[m
ok 46 - status "up-to-date" from subdirectory(B[m
ok 12 - transfer.fsckObjects handles odd pack (index)(B[m
ok 16 - git reset --keep --recurse-submodules: replace submodule with a file works ignores ignored files in submodule(B[m
ok 13 - index-pack --strict works for non-repo pack(B[m
ok 25 - test sparse status with untracked cache(B[m
ok 26 - untracked cache correct after status(B[m
ok 10 - fsck rejects empty URL scheme(B[m
ok 47 - status "up-to-date" from subdirectory with path(B[m
ok 1 - submodule config cache setup(B[m
ok 14 - fsck detects symlinked .gitmodules file(B[m
ok 19 - submodule update - checkout in .git/config(B[m
ok 31 - Tag name filtering allows slashes in tag names(B[m
ok 11 - fsck rejects relative URL resolving to empty scheme(B[m
ok 15 - fsck detects non-blob .gitmodules(B[m
ok 48 - status should be "modified" after submodule commit(B[m
ok 3 - test submodule set-branch --branch(B[m
ok 16 - fsck detects corrupt .gitmodules(B[m
[34mok 17 # skip prevent git~1 squatting on Windows (missing MINGW)(B[m
ok 12 - fsck rejects empty hostname(B[m
ok 49 - the --cached sha1 should be rev1(B[m
ok 50 - git diff should report the SHA1 of the new submodule commit(B[m
ok 58 - recursive pull updates working tree(B[m
ok 20 - submodule update - command in .git/config(B[m
ok 13 - fsck rejects relative url that produced empty hostname(B[m
ok 32 - setup --prune-empty comparisons(B[m
ok 14 - fsck permits embedded newline with unrecognized scheme(B[m
ok 11 - use "update --recursive" to checkout all submodules(B[m
ok 21 - submodule update - command in .gitmodules is rejected(B[m
ok 51 - update should checkout rev1(B[m
ok 18 - git dirs of sibling submodules must not be nested(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 4 - test submodule set-branch --default(B[m
ok 2 - test submodule set-url(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 15 - fsck rejects embedded newline in url(B[m
*** t7500-commit-template-squash-signoff.sh ***
ok 52 - status should be "up-to-date" after update(B[m
*** t7501-commit-basic-functionality.sh ***
ok 53 - checkout superproject with subproject already present(B[m
ok 17 - git -c submodule.recurse=true reset --keep: modified submodule updates submodule work tree(B[m
ok 16 - fsck rejects embedded newline in relative url(B[m
ok 1 - a basic commit in an empty tree should succeed(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 2 - nonexistent template file should return error(B[m
*** t7502-commit-porcelain.sh ***
ok 1 - initial status(B[m
ok 54 - apply submodule diff(B[m
ok 2 - fail initial amend(B[m
ok 3 - nonexistent template file in config should return error(B[m
ok 22 - fsck detects command in .gitmodules(B[m
ok 3 - setup: initial commit(B[m
ok 4 - unedited template should not commit(B[m
ok 5 - unedited template with comments should not commit(B[m
ok 4 - -m and -F do not mix(B[m
ok 12 - test "status --recursive"(B[m
ok 6 - a Signed-off-by line by itself should not commit(B[m
ok 5 - -m and -C do not mix(B[m
ok 7 - adding comments to a template should not commit(B[m
ok 6 - paths and -a do not mix(B[m
[34mok 7 # skip can use paths with --interactive (missing PERL)(B[m
ok 5 - test submodule set-branch -b(B[m
ok 59 - submodule.recurse option triggers recursive pull(B[m
ok 1 - output summary format(B[m
ok 8 - adding real content to a template should commit(B[m
ok 8 - removed files and relative paths(B[m
ok 2 - output summary format: root-commit(B[m
ok 9 - using invalid commit with -C(B[m
ok 9 - -t option should be short for --template(B[m
ok 27 - test sparse status again with untracked cache(B[m
ok 23 - submodule update - command in .git/config catches failure(B[m
ok 28 - set up for test of subdir and sparse checkouts(B[m
ok 10 - nothing to commit(B[m
ok 3 - output summary format for commit with an empty diff(B[m
ok 11 - --dry-run fails with nothing to commit(B[m
ok 12 - --short fails with nothing to commit(B[m
ok 10 - config-specified template should commit(B[m
ok 13 - --porcelain fails with nothing to commit(B[m
ok 55 - update --init(B[m
ok 13 - ensure "status --cached --recursive" preserves the --cached flag(B[m
ok 14 - --long fails with nothing to commit(B[m
ok 11 - explicit commit message should override template(B[m
ok 15 - setup: non-initial commit(B[m
ok 6 - re-updating submodule when the gitmodules config is not checked out(B[m
ok 16 - --dry-run with stuff to commit returns ok(B[m
ok 17 - --short with stuff to commit returns ok(B[m
ok 12 - commit message from file should override template(B[m
ok 18 - --porcelain with stuff to commit returns ok(B[m
ok 19 - --long with stuff to commit returns ok(B[m
ok 20 - commit message from non-existing file(B[m
ok 24 - submodule update - command in .git/config catches failure -- subdirectory(B[m
ok 13 - commit message from template with whitespace issue(B[m
ok 21 - empty commit message(B[m
ok 4 - output summary format for merges(B[m
ok 6 - test submodule set-branch -d(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 7 - not adding submodules when the gitmodules config is not checked out(B[m
ok 22 - template "emptyness" check does not kick in with -F(B[m
*** t7503-pre-commit-and-pre-merge-commit-hooks.sh ***
ok 14 - using alternate GIT_INDEX_FILE (1)(B[m
ok 23 - template "emptyness" check(B[m
ok 15 - using alternate GIT_INDEX_FILE (2)(B[m
ok 5 - the basics(B[m
ok 8 - init submodule still works even after the previous add failed(B[m
ok 24 - setup: commit message from file(B[m
ok 14 - test "status --recursive" from sub directory(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 16 - --signoff(B[m
ok 6 - partial(B[m
*** t7504-commit-msg-hook.sh ***
ok 25 - amend commit(B[m
ok 7 - partial modification in a subdirectory(B[m
ok 56 - update --init from subdirectory(B[m
ok 17 - commit message from file (1)(B[m
ok 1 - sample script setup(B[m
ok 57 - do not add files from a submodule(B[m
ok 33 - Prune empty commits(B[m
ok 18 - commit message from file (2)(B[m
ok 26 - amend --only ignores staged contents(B[m
ok 8 - partial removal(B[m
ok 19 - commit message from stdin(B[m
ok 2 - root commit(B[m
ok 27 - allow-empty --only ignores staged contents(B[m
ok 9 - sign off(B[m
ok 1 - with no hook(B[m
ok 28 - set up editor(B[m
ok 20 - commit -F overrides -t(B[m
ok 10 - multiple -m(B[m
ok 58 - gracefully add/reset submodule with a trailing slash(B[m
ok 2 - with no hook (editor)(B[m
ok 21 - Commit without message is allowed with --allow-empty-message(B[m
ok 59 - ls-files gracefully handles trailing slash(B[m
ok 29 - amend without launching editor(B[m
ok 11 - verbose(B[m
ok 3 - setup conflicting branches(B[m
ok 3 - --no-verify with no hook(B[m
ok 22 - Commit without message is no-no without --allow-empty-message(B[m
ok 60 - moving to a commit without submodule does not leave empty dir(B[m
ok 12 - verbose respects diff config(B[m
ok 4 - with no hook(B[m
ok 18 - git reset --keep --recurse-submodules: modified submodule updates submodule recursively(B[m
ok 13 - prepare file with comment line and trailing newlines(B[m
ok 4 - --no-verify with no hook (editor)(B[m
ok 23 - Commit a message with --allow-empty-message(B[m
ok 30 - --amend --edit(B[m
ok 14 - cleanup commit messages (verbatim option,-t)(B[m
ok 5 - with no hook (merge)(B[m
ok 5 - with succeeding hook(B[m
ok 25 - submodule update - command run for initial population of submodule(B[m
ok 24 - commit -C empty respects --allow-empty-message(B[m
ok 15 - cleanup commit messages (verbatim option,-F)(B[m
ok 6 - --no-verify with no hook(B[m
ok 61 - submodule <invalid-subcommand> fails(B[m
ok 31 - --amend --edit of empty message(B[m
ok 6 - with succeeding hook (editor)(B[m
ok 16 - cleanup commit messages (verbatim option,-m)(B[m
ok 7 - --no-verify with succeeding hook(B[m
ok 7 - --no-verify with no hook (merge)(B[m
ok 32 - --amend to set message to empty(B[m
ok 17 - cleanup commit messages (whitespace option,-F)(B[m
ok 25 - commit --fixup provides correct one-line commit message(B[m
ok 8 - --no-verify with succeeding hook (editor)(B[m
ok 8 - with succeeding hook(B[m
ok 18 - cleanup commit messages (scissors option,-F,-e)(B[m
ok 33 - --amend to set empty message needs --allow-empty-message(B[m
ok 9 - with failing hook(B[m
ok 19 - cleanup commit messages (scissors option,-F,-e, scissors on first line)(B[m
ok 9 - with succeeding hook (merge)(B[m
ok 26 - commit --fixup -m"something" -m"extra"(B[m
ok 10 - with failing hook (editor)(B[m
ok 34 - -m --edit(B[m
ok 20 - cleanup commit messages (strip option,-F)(B[m
ok 35 - -m and -F do not mix(B[m
ok 11 - --no-verify with failing hook(B[m
ok 21 - cleanup commit messages (strip option,-F,-e)(B[m
ok 36 - using message from other commit(B[m
ok 22 - cleanup commit messages (strip option,-F,-e): output(B[m
ok 23 - cleanup commit message (fail on invalid cleanup mode option)(B[m
ok 12 - --no-verify with failing hook (editor)(B[m
ok 10 - automatic merge fails; both hooks are available(B[m
ok 24 - cleanup commit message (fail on invalid cleanup mode configuration)(B[m
ok 27 - commit --squash works with -F(B[m
ok 37 - editing message from other commit(B[m
ok 29 - test sparse status with untracked cache and subdir(B[m
ok 11 - --no-verify with succeeding hook(B[m
ok 19 - git reset --hard --recurse-submodules: added submodule is checked out(B[m
ok 38 - message from stdin(B[m
ok 30 - verify untracked cache dump (sparse/subdirs)(B[m
ok 25 - cleanup commit message (no config and no option uses default)(B[m
ok 39 - overriding author from command line(B[m
[34mok 40 # skip interactive add (missing PERL)(B[m
ok 13 - merge fails with failing hook(B[m
[34mok 41 # skip commit --interactive doesn't change index if editor aborts (missing PERL)(B[m
ok 12 - --no-verify with succeeding hook (merge)(B[m
ok 28 - commit --squash works with -m(B[m
ok 26 - cleanup commit message (option overrides default)(B[m
ok 13 - with failing hook(B[m
ok 42 - editor not invoked if -F is given(B[m
ok 27 - cleanup commit message (config overrides default)(B[m
ok 14 - merge bypasses failing hook with --no-verify(B[m
ok 62 - add submodules without specifying an explicit path(B[m
ok 14 - --no-verify with failing hook(B[m
ok 60 -  --[no-]recurse-submodule and submodule.recurse(B[m
ok 29 - commit --squash works with -C(B[m
ok 43 - partial commit that involves removal (1)(B[m
ok 15 - with non-executable hook(B[m
ok 28 - cleanup commit message (option overrides config)(B[m
ok 15 - with failing hook (merge)(B[m
ok 44 - partial commit that involves removal (2)(B[m
ok 16 - with non-executable hook (editor)(B[m
ok 29 - cleanup commit message (default, -m)(B[m
ok 17 - --no-verify with non-executable hook(B[m
ok 45 - partial commit that involves removal (3)(B[m
ok 16 - --no-verify with failing hook (merge)(B[m
ok 63 - add should fail when path is used by a file(B[m
ok 30 - commit --squash works with -c(B[m
ok 30 - cleanup commit message (whitespace option, -m)(B[m
ok 26 - recursive submodule update - command in .git/config catches failure -- subdirectory(B[m
ok 18 - --no-verify with non-executable hook (editor)(B[m
ok 17 - with non-executable hook(B[m
ok 46 - amend commit to fix author(B[m
ok 31 - cleanup commit message (whitespace config, -m)(B[m
ok 18 - --no-verify with non-executable hook(B[m
ok 19 - hook edits commit message(B[m
ok 32 - message shows author when it is not equal to committer(B[m
ok 47 - amend commit to fix date(B[m
ok 31 - commit --squash works with -C for same commit(B[m
ok 33 - message shows date when it is explicitly set(B[m
ok 20 - git reset --hard --recurse-submodules: added submodule is checked out in empty dir(B[m
ok 48 - commit mentions forced date in output(B[m
[34mok 34 # skip message shows committer when it is automatic (missing AUTOIDENT)(B[m
ok 64 - add should fail when path is used by an existing directory(B[m
ok 20 - hook edits commit message (editor)(B[m
ok 19 - with non-executable hook (merge)(B[m
ok 49 - commit complains about completely bogus dates(B[m
ok 50 - commit --date allows approxidate(B[m
ok 21 - hook doesn't edit commit message(B[m
ok 35 - do not fire editor when committer is bogus(B[m
ok 27 - submodule init does not copy command into .git/config(B[m
ok 15 - use "git clone --recursive" to checkout all submodules(B[m
ok 20 - --no-verify with non-executable hook (merge)(B[m
ok 36 - do not fire editor if -m <msg> was given(B[m
ok 32 - commit --squash works with -c for same commit(B[m
ok 22 - hook doesn't edit commit message (editor)(B[m
ok 51 - sign off (1)(B[m
ok 37 - do not fire editor if -m "" was given(B[m
ok 21 - with hook requiring GIT_PREFIX(B[m
ok 28 - submodule init picks up rebase(B[m
ok 34 - prune empty collapsed merges(B[m
ok 52 - sign off (2)(B[m
ok 22 - with failing hook requiring GIT_PREFIX(B[m
ok 23 - hook called in git-merge picks up commit message(B[m
ok 33 - commit --squash works with editor(B[m
ok 53 - signoff gap(B[m
ok 34 - invalid message options when using --fixup(B[m
ok 38 - do not fire editor in the presence of conflicts(B[m
ok 23 - check the author in hook(B[m
ok 29 - submodule init picks up merge(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
ok 54 - signoff gap 2(B[m
ok 39 - a SIGTERM should break locks(B[m
ok 65 - use superproject as upstream when path is relative and no url is set there(B[m
*** t7505-prepare-commit-msg-hook.sh ***
[33mnot ok 24 - merge --continue remembers --no-verify # TODO known breakage(B[m
ok 35 - new line found before status message in commit template(B[m
ok 40 - Hand committing of a redundant merge removes dups(B[m
ok 55 - signoff respects trailer config(B[m
ok 25 - hook is called for reword during `rebase -i`(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 24 test(s)(B[m
[36m1..25(B[m
ok 66 - set up for relative path tests(B[m
ok 36 - setup empty commit with unstaged rename and copy(B[m
*** t7506-status-submodule.sh ***
ok 56 - signoff not confused by ---(B[m
ok 41 - A single-liner subject with a token plus colon is not a footer(B[m
ok 37 - check commit with unstaged rename and copy(B[m
ok 61 - recursive rebasing pull(B[m
ok 42 - commit -s places sob on third line after two empty lines(B[m
ok 57 - multiple -m(B[m
ok 38 - commit without staging files fails and displays hints(B[m
[32m# passed all 38 test(s)(B[m
[36m1..38(B[m
*** t7507-commit-verbose.sh ***
ok 67 - ../subrepo works with URL - ssh://hostname/repo(B[m
ok 43 - commit(B[m
ok 58 - amend commit to fix author(B[m
ok 44 - commit --status(B[m
ok 59 - git commit <file> with dirty index(B[m
ok 1 - setup(B[m
ok 31 - test sparse status again with untracked cache and subdir(B[m
ok 60 - same tree (single parent)(B[m
ok 45 - commit --no-status(B[m
ok 68 - ../subrepo works with port-qualified URL - ssh://hostname:22/repo(B[m
ok 2 - status clean(B[m
ok 1 - setup(B[m
ok 32 - move entry in subdir from untracked to cached(B[m
ok 61 - same tree (single parent) --allow-empty(B[m
ok 3 - commit --dry-run -a clean(B[m
ok 33 - move entry in subdir from cached to untracked(B[m
ok 2 - initial commit shows verbose diff(B[m
ok 30 - submodule update --merge  - ignores --merge  for new submodules(B[m
ok 46 - commit with commit.status = yes(B[m
ok 4 - status with modified file in submodule(B[m
ok 34 - --no-untracked-cache removes the cache(B[m
ok 3 - second commit(B[m
ok 21 - git reset --hard --recurse-submodules: submodule branch is not changed, detach HEAD instead(B[m
ok 35 - git status does not change anything(B[m
ok 5 - status with modified file in submodule (porcelain)(B[m
ok 62 - same tree (merge and amend merge)(B[m
ok 69 - ../subrepo path works with local path - //somewhere else/repo(B[m
ok 4 - verbose diff is stripped out(B[m
ok 47 - commit with commit.status = no(B[m
ok 6 - status with modified file in submodule (short)(B[m
ok 36 - setting core.untrackedCache to true and using git status creates the cache(B[m
ok 5 - verbose diff is stripped out (mnemonicprefix)(B[m
ok 7 - status with added file in submodule(B[m
ok 37 - using --no-untracked-cache does not fail when core.untrackedCache is true(B[m
ok 48 - commit --status with commit.status = yes(B[m
ok 63 - amend using the message from another commit(B[m
ok 6 - diff in message is retained without -v(B[m
ok 8 - status with added file in submodule (porcelain)(B[m
ok 70 - ../subrepo works with file URL - file:///tmp/repo(B[m
ok 38 - setting core.untrackedCache to false and using git status removes the cache(B[m
ok 7 - diff in message is retained with -v(B[m
ok 39 - using --untracked-cache does not fail when core.untrackedCache is false(B[m
ok 49 - commit --no-status with commit.status = yes(B[m
ok 9 - status with added file in submodule (short)(B[m
ok 62 - pull rebase recursing fails with conflicts(B[m
ok 10 - status with untracked file in submodule(B[m
ok 64 - amend using the message from a commit named with tag(B[m
ok 11 - status -uno with untracked file in submodule(B[m
ok 50 - commit --status with commit.status = no(B[m
ok 71 - ../subrepo works with helper URL- helper:://hostname/repo(B[m
ok 12 - status with untracked file in submodule (porcelain)(B[m
ok 40 - setting core.untrackedCache to keep(B[m
ok 35 - prune empty works even without index/tree filters(B[m
ok 13 - status with untracked file in submodule (short)(B[m
ok 65 - amend can copy notes(B[m
ok 51 - commit --no-status with commit.status = no(B[m
ok 41 - test ident field is working(B[m
ok 14 - status with added and untracked file in submodule(B[m
ok 66 - commit a file whose name is a dash(B[m
ok 31 - submodule update --rebase - ignores --rebase for new submodules(B[m
ok 72 - ../subrepo works with scp-style URL - user@host:repo(B[m
ok 52 - commit(B[m
ok 22 - git reset --hard --recurse-submodules: replace tracked file with submodule checks out submodule(B[m
ok 15 - status with added and untracked file in submodule (porcelain)(B[m
ok 1 - set up commits for rebasing(B[m
ok 67 - --only works on to-be-born branch(B[m
ok 8 - submodule log is stripped out too with -v(B[m
ok 53 - commit --status(B[m
ok 16 - test "update --recursive" with a flag with spaces(B[m
ok 2 - with no hook(B[m
ok 42 - untracked cache survives a checkout(B[m
ok 16 - status with modified file in modified submodule(B[m
ok 9 - verbose diff is stripped out with set core.commentChar(B[m
ok 54 - commit --no-status(B[m
ok 17 - status with modified file in modified submodule (porcelain)(B[m
ok 73 - ../subrepo works with scp-style URL - user@host:path/to/repo(B[m
ok 10 - status does not verbose without --verbose(B[m
ok 11 - setup -v -v(B[m
ok 43 - untracked cache survives a commit(B[m
ok 44 - teardown worktree(B[m
ok 3 - with hook (-m)(B[m
ok 18 - status with added file in modified submodule(B[m
ok 12 - commit.verbose=true and --verbose omitted(B[m
ok 68 - --dry-run with conflicts fixed from a merge(B[m
ok 55 - commit with commit.status = yes(B[m
ok 69 - --dry-run --short(B[m
ok 19 - status with added file in modified submodule (porcelain)(B[m
[32m# passed all 69 test(s)(B[m
[36m1..69(B[m
ok 13 - commit.verbose=1 and --verbose omitted(B[m
ok 4 - with hook (-m editor)(B[m
*** t7508-status.sh ***
ok 74 - ../subrepo works with relative local path - foo(B[m
ok 45 - setup worktree for symlink test(B[m
ok 20 - status with untracked file in modified submodule(B[m
ok 56 - commit with commit.status = no(B[m
ok 14 - commit.verbose=false and --verbose omitted(B[m
ok 21 - status with untracked file in modified submodule (porcelain)(B[m
ok 5 - with hook (-t)(B[m
ok 63 - branch has no merge base with remote-tracking counterpart(B[m
[33m# still have 11 known breakage(s)(B[m
[32m# passed all remaining 52 test(s)(B[m
ok 15 - commit.verbose=-2 and --verbose omitted(B[m
[36m1..63(B[m
ok 22 - status with added and untracked file in modified submodule(B[m
ok 57 - commit --status with commit.status = yes(B[m
ok 6 - with hook (-F)(B[m
ok 16 - commit.verbose=-1 and --verbose omitted(B[m
ok 75 - ../subrepo works with relative local path - foo/bar(B[m
ok 23 - status with added and untracked file in modified submodule (porcelain)(B[m
ok 1 - status -h in broken repository(B[m
*** t7509-commit-authorship.sh ***
ok 58 - commit --no-status with commit.status = yes(B[m
ok 17 - commit.verbose=0 and --verbose omitted(B[m
ok 24 - setup .git file for sub(B[m
ok 32 - submodule update ignores update=merge config for new submodules(B[m
ok 23 - git reset --hard --recurse-submodules: replace directory with submodule(B[m
ok 7 - with hook (-F editor)(B[m
ok 2 - commit -h in broken repository(B[m
ok 18 - commit.verbose=2 and --verbose omitted(B[m
ok 25 - status with added file in modified submodule with .git file(B[m
ok 59 - commit --status with commit.status = no(B[m
ok 76 - ../subrepo works with relative local path - ./foo(B[m
ok 8 - with hook (-C)(B[m
ok 19 - commit.verbose=3 and --verbose omitted(B[m
ok 3 - create upstream branch(B[m
ok 26 - status with a lot of untracked files in the submodule(B[m
ok 20 - commit.verbose=true and --verbose(B[m
ok 60 - commit --no-status with commit.status = no(B[m
ok 9 - with hook (editor)(B[m
ok 21 - commit.verbose=true and --no-verbose(B[m
ok 1 - -C option copies authorship and message(B[m
ok 27 - rm submodule contents(B[m
ok 4 - setup(B[m
ok 77 - ../subrepo works with relative local path - ./foo/bar(B[m
ok 5 - status (1)(B[m
ok 28 - status clean (empty submodule dir)(B[m
ok 61 - commit --status with custom comment character(B[m
ok 22 - commit.verbose=true and -v -v(B[m
ok 10 - with hook (--amend)(B[m
ok 29 - status -a clean (empty submodule dir)(B[m
ok 6 - status --column(B[m
ok 2 - -C option copies only the message with --reset-author(B[m
ok 36 - --prune-empty is able to prune root commit(B[m
ok 7 - status --column status.displayCommentPrefix=false(B[m
ok 23 - commit.verbose=false and --verbose(B[m
ok 3 - -c option copies authorship and message(B[m
ok 62 - switch core.commentchar(B[m
ok 8 - status with status.displayCommentPrefix=true(B[m
ok 11 - with hook (-c)(B[m
ok 78 - ../subrepo works with relative local path - ../foo(B[m
ok 24 - commit.verbose=false and --no-verbose(B[m
ok 9 - status with status.displayCommentPrefix=false(B[m
ok 63 - switch core.commentchar but out of options(B[m
[32m# passed all 63 test(s)(B[m
[36m1..63(B[m
ok 4 - -c option copies only the message with --reset-author(B[m
ok 10 - status -v(B[m
ok 25 - commit.verbose=false and -v -v(B[m
*** t7510-signed-commit.sh ***
ok 11 - status -v -v(B[m
ok 5 - --amend option copies authorship(B[m
ok 26 - commit.verbose=-2 and --verbose(B[m
ok 17 - use "update --recursive nested1" to checkout all submodules rooted in nested1(B[m
ok 12 - setup fake editor(B[m
ok 33 - submodule update ignores update=rebase config for new submodules(B[m
ok 12 - with hook (merge)(B[m
ok 79 - ../subrepo works with relative local path - ../foo/bar(B[m
ok 13 - commit ignores status.displayCommentPrefix=false in COMMIT_EDITMSG(B[m
ok 27 - commit.verbose=-2 and --no-verbose(B[m
ok 14 - status (advice.statusHints false)(B[m
ok 6 - --amend option with empty author(B[m
ok 28 - commit.verbose=-2 and -v -v(B[m
ok 15 - status -s(B[m
ok 34 - submodule init picks up update=none(B[m
ok 37 - --prune-empty is able to prune entire branch(B[m
ok 29 - commit.verbose=-1 and --verbose(B[m
ok 13 - with hook and editor (merge)(B[m
ok 7 - --amend option with missing author(B[m
ok 16 - status with gitignore(B[m
ok 30 - commit.verbose=-1 and --no-verbose(B[m
ok 18 - command passed to foreach retains notion of stdin(B[m
ok 8 - --reset-author makes the commit ours even with --amend option(B[m
ok 17 - status with gitignore (nothing untracked)(B[m
ok 31 - commit.verbose=-1 and -v -v(B[m
ok 9 - --reset-author and --author are mutually exclusive(B[m
ok 18 - status -s -b(B[m
ok 24 - git reset --hard --recurse-submodules: removed submodule removes submodules working tree(B[m
ok 10 - --reset-author should be rejected without -c/-C/--amend(B[m
ok 32 - commit.verbose=0 and --verbose(B[m
ok 19 - status -s -z -b(B[m
ok 20 - setup dir3(B[m
ok 33 - commit.verbose=0 and --no-verbose(B[m
ok 21 - status -uno(B[m
ok 80 - ../bar/a/b/c works with relative local path - ../foo/bar.git(B[m
ok 11 - commit respects CHERRY_PICK_HEAD and MERGE_MSG(B[m
ok 22 - status (status.showUntrackedFiles no)(B[m
ok 34 - commit.verbose=0 and -v -v(B[m
ok 23 - status -uno (advice.statusHints false)(B[m
ok 12 - --reset-author with CHERRY_PICK_HEAD(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 35 - commit.verbose=1 and --verbose(B[m
*** t7511-status-index.sh ***
ok 24 - status -s -uno(B[m
ok 25 - status -s (status.showUntrackedFiles no)(B[m
ok 36 - commit.verbose=1 and --no-verbose(B[m
ok 30 - status with merge conflict in .gitmodules(B[m
ok 26 - status -unormal(B[m
ok 46 - "status" after symlink replacement should be clean with UC=true(B[m
ok 37 - commit.verbose=1 and -v -v(B[m
ok 19 - command passed to foreach --recursive retains notion of stdin(B[m
ok 27 - status (status.showUntrackedFiles normal)(B[m
ok 31 - diff with merge conflict in .gitmodules(B[m
ok 28 - status -s -unormal(B[m
ok 1 - status, filename length 1(B[m
ok 38 - commit.verbose=2 and --verbose(B[m
ok 29 - status -s (status.showUntrackedFiles normal)(B[m
ok 32 - diff --submodule with merge conflict in .gitmodules(B[m
ok 2 - status, filename length 2(B[m
ok 35 - submodule update - update=none in .git/config(B[m
ok 39 - commit.verbose=2 and --no-verbose(B[m
ok 30 - status -uall(B[m
ok 3 - status, filename length 3(B[m
ok 31 - status (status.showUntrackedFiles all)(B[m
ok 40 - commit.verbose=2 and -v -v(B[m
ok 32 - teardown dir3(B[m
ok 38 - --remap-to-ancestor with filename filters(B[m
ok 4 - status, filename length 4(B[m
ok 33 - status -s -uall(B[m
ok 5 - status, filename length 5(B[m
ok 41 - commit.verbose=3 and --verbose(B[m
ok 20 - multi-argument command passed to foreach is not shell-evaluated twice(B[m
ok 34 - status -s (status.showUntrackedFiles all)(B[m
ok 6 - status, filename length 6(B[m
ok 42 - commit.verbose=3 and --no-verbose(B[m
ok 35 - status with relative paths(B[m
ok 7 - status, filename length 7(B[m
ok 36 - status -s with relative paths(B[m
ok 43 - commit.verbose=3 and -v -v(B[m
ok 8 - status, filename length 8(B[m
ok 37 - status --porcelain ignores relative paths setting(B[m
ok 44 - status ignores commit.verbose=true(B[m
[32m# passed all 44 test(s)(B[m
[36m1..44(B[m
ok 9 - status, filename length 9(B[m
*** t7512-status-help.sh ***
ok 38 - setup unique colors(B[m
[34mok 39 # skip status with color.ui (missing TTY)(B[m
[34mok 40 # skip status with color.status (missing TTY)(B[m
ok 10 - status, filename length 10(B[m
[34mok 41 # skip status -s with color.ui (missing TTY)(B[m
[34mok 42 # skip status -s with color.status (missing TTY)(B[m
[34mok 43 # skip status -s -b with color.status (missing TTY)(B[m
[34mok 44 # skip status --porcelain ignores color.ui (missing TTY)(B[m
ok 14 - with hook (rebase -i)(B[m
[34mok 45 # skip status --porcelain ignores color.status (missing TTY)(B[m
ok 25 - git reset --hard --recurse-submodules: removed submodule absorbs submodules .git directory(B[m
ok 11 - status, filename length 11(B[m
ok 12 - status, filename length 12(B[m
ok 46 - status --porcelain respects -b(B[m
ok 21 - option-like arguments passed to foreach commands are not lost(B[m
ok 13 - status, filename length 13(B[m
ok 47 - status without relative paths(B[m
ok 36 - submodule update - update=none in .git/config but --checkout given(B[m
ok 14 - status, filename length 14(B[m
ok 48 - status -s without relative paths(B[m
ok 15 - status, filename length 15(B[m
ok 81 - moving the superproject does not break submodules(B[m
ok 49 - dry-run of partial commit excluding new file in index(B[m
ok 1 - prepare for conflicts(B[m
ok 16 - status, filename length 16(B[m
ok 50 - status refreshes the index(B[m
ok 17 - status, filename length 17(B[m
ok 2 - status when conflicts unresolved(B[m
ok 18 - status, filename length 18(B[m
ok 51 - setup status submodule summary(B[m
ok 19 - status, filename length 19(B[m
ok 52 - status submodule summary is disabled by default(B[m
ok 3 - status when conflicts resolved before commit(B[m
ok 39 - automatic remapping to ancestor with filename filters(B[m
ok 53 - status --untracked-files=all does not show submodule(B[m
ok 20 - status, filename length 20(B[m
ok 54 - status -s submodule summary is disabled by default(B[m
ok 22 - option-like arguments passed to foreach recurse correctly(B[m
ok 21 - status, filename length 21(B[m
ok 55 - status -s --untracked-files=all does not show submodule(B[m
ok 22 - status, filename length 22(B[m
ok 4 - prepare for rebase conflicts(B[m
ok 23 - status, filename length 23(B[m
ok 24 - status, filename length 24(B[m
[32m# passed all 24 test(s)(B[m
[36m1..24(B[m
*** t7513-interpret-trailers.sh ***
ok 5 - status when rebase --apply in progress before resolving conflicts(B[m
ok 33 - setup superproject with untracked file in nested submodule(B[m
ok 23 - option-like arguments passed to foreach commands are not lost(B[m
ok 26 - git reset --hard --recurse-submodules: replace submodule with a file(B[m
[32m# passed all 23 test(s)(B[m
[36m1..23(B[m
ok 37 - submodule update --init skips submodule with update=none(B[m
ok 1 - setup(B[m
ok 34 - status with untracked file in nested submodule (porcelain)(B[m
ok 6 - status when rebase --apply in progress before rebase --continue(B[m
ok 2 - without config(B[m
ok 3 - without config in another order(B[m
ok 35 - status with untracked file in nested submodule (porcelain=2)(B[m
ok 4 - --trim-empty without config(B[m
ok 56 - status submodule summary(B[m
ok 5 - with config option on the command line(B[m
ok 36 - status with untracked file in nested submodule (short)(B[m
ok 6 - with only a title in the message(B[m
ok 40 - setup submodule(B[m
ok 47 - "status" after symlink replacement should be clean with UC=false(B[m
ok 7 - with multiline title in the message(B[m
ok 37 - setup superproject with modified file in nested submodule(B[m
ok 7 - prepare for rebase_i_conflicts(B[m
ok 8 - with non-trailer lines mixed with Signed-off-by(B[m
ok 38 - status with added file in nested submodule (porcelain)(B[m
ok 9 - with non-trailer lines mixed with cherry picked from(B[m
ok 48 - setup worktree for non-symlink test(B[m
ok 82 - moving the submodule does not break the superproject(B[m
ok 10 - with non-trailer lines mixed with a configured trailer(B[m
ok 39 - status with added file in nested submodule (porcelain=2)(B[m
ok 8 - status during rebase -i when conflicts unresolved(B[m
*** t7514-commit-patch.sh ***
ok 11 - with non-trailer lines mixed with a non-configured trailer(B[m
ok 40 - status with added file in nested submodule (short)(B[m
[32m# passed all 40 test(s)(B[m
[36m1..40(B[m
ok 12 - with all non-configured trailers(B[m
*** t7515-status-symlinks.sh ***
ok 13 - with non-trailer lines only(B[m
ok 9 - status during rebase -i after resolving conflicts(B[m
[36m1..0 # SKIP skipping 'hunk edit with "commit -p -m"' tests, perl not available(B[m
*** t7516-commit-races.sh ***
ok 57 - status submodule summary with status.displayCommentPrefix=false(B[m
ok 14 - line with leading whitespace is not trailer(B[m
ok 15 - multiline field treated as one trailer for 25% check(B[m
ok 16 - multiline field treated as atomic for placement(B[m
ok 1 - setup(B[m
ok 17 - multiline field treated as atomic for replacement(B[m
[33mnot ok 27 - git reset --hard --recurse-submodules: replace submodule with a file must fail with untracked files # TODO known breakage(B[m
ok 1 - race to create orphan commit(B[m
ok 83 - submodule add --name allows to replace a submodule with another at the same path(B[m
ok 2 - symlink to a directory(B[m
ok 18 - multiline field treated as atomic for difference check(B[m
ok 10 - status when rebasing -i in edit mode(B[m
ok 3 - symlink replacing a directory(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 2 - race to create non-orphan commit(B[m
*** t7517-per-repo-email.sh ***
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 41 - rewrite submodule with another content(B[m
*** t7518-ident-corner-cases.sh ***
ok 58 - commit with submodule summary ignores status.displayCommentPrefix(B[m
ok 19 - multiline field treated as atomic for neighbor check(B[m
ok 59 - status -s submodule summary(B[m
ok 20 - with config setup(B[m
ok 1 - empty name and missing email(B[m
ok 1 - setup a likely user.useConfigOnly use case(B[m
ok 2 - commit rejects all-crud name(B[m
ok 2 - fails committing if clone email is not set(B[m
ok 21 - with config setup and ":=" as separators(B[m
ok 38 - submodule update continues after checkout error(B[m
ok 3 - fails committing if clone email is not set, but EMAIL set(B[m
ok 3 - empty configured name does not auto-detect(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
ok 22 - with config setup and "%" as separators(B[m
*** t7519-status-fsmonitor.sh ***
ok 4 - succeeds committing if clone email is set(B[m
ok 23 - with "%" as separators and a message with trailers(B[m
ok 5 - succeeds cloning if global email is not set(B[m
ok 24 - with config setup and ":=#" as separators(B[m
ok 11 - status when splitting a commit(B[m
ok 25 - with commit basic message(B[m
ok 26 - with basic patch(B[m
ok 27 - with commit complex message as argument(B[m
ok 1 - setup(B[m
ok 6 - set up rebase scenarios(B[m
ok 2 - fsmonitor extension is off by default(B[m
ok 28 - with 2 files arguments(B[m
ok 3 - update-index --fsmonitor" adds the fsmonitor extension(B[m
ok 7 - fast-forward rebase does not care about ident(B[m
ok 29 - with message that has comments (#)(B[m
ok 4 - update-index --no-fsmonitor" removes the fsmonitor extension(B[m
ok 30 - with message that has comments (;)(B[m
ok 8 - non-fast-forward rebase refuses to write commits(B[m
ok 31 - with message that has an old style conflict block(B[m
ok 9 - fast-forward rebase does not care about ident (interactive)(B[m
ok 42 - replace submodule revision(B[m
ok 32 - with commit complex message and trailer args(B[m
ok 5 - update-index --fsmonitor-valid" sets the fsmonitor valid bit(B[m
ok 60 - status submodule summary (clean submodule): commit(B[m
ok 33 - with complex patch, args and --trim-empty(B[m
ok 10 - non-fast-forward rebase refuses to write commits (interactive)(B[m
ok 12 - status after editing the last commit with --amend during a rebase -i(B[m
ok 61 - status -s submodule summary (clean submodule)(B[m
ok 28 - git reset --hard --recurse-submodules: modified submodule updates submodule work tree(B[m
ok 6 - update-index --no-fsmonitor-valid" clears the fsmonitor valid bit(B[m
ok 34 - in-place editing with basic patch(B[m
ok 11 - noop interactive rebase does not care about ident(B[m
ok 62 - status -z implies porcelain(B[m
ok 35 - in-place editing with additional trailer(B[m
ok 7 - all files returned by integration script get flagged as invalid(B[m
ok 36 - in-place editing on stdin disallowed(B[m
ok 37 - in-place editing on non-existing file(B[m
ok 8 - newly added files are marked valid(B[m
ok 49 - "status" after file replacement should be clean with UC=true(B[m
ok 13 - prepare for several edits(B[m
ok 38 - in-place editing doesn't clobber original file on error(B[m
ok 9 - all unmodified files get marked valid(B[m
ok 43 - filter commit message without trailing newline(B[m
ok 39 - using "where = before"(B[m
ok 40 - overriding configuration with "--where after"(B[m
ok 41 - using "where = before" with "--no-where"(B[m
ok 10 - *only* files returned by the integration script get flagged as invalid(B[m
ok 84 - recursive relative submodules stay relative(B[m
ok 42 - using "where = after"(B[m
ok 14 - status: (continue first edit) second edit(B[m
ok 43 - using "where = end"(B[m
ok 63 - commit --dry-run submodule summary (--amend)(B[m
ok 44 - using "where = start"(B[m
ok 11 - refresh_index() invalidates fsmonitor cache(B[m
ok 12 - setup preloadIndex to false(B[m
ok 45 - using "where = before" for a token in the middle of the message(B[m
ok 64 - status succeeds in a read-only repository(B[m
ok 46 - using "where = before" and --trim-empty(B[m
ok 15 - status: (continue first edit) second edit and split(B[m
ok 47 - the default is "ifExists = addIfDifferentNeighbor"(B[m
ok 44 - tree-filter deals with object name vs pathname ambiguity(B[m
ok 48 - default "ifExists" is now "addIfDifferent"(B[m
ok 49 - using "ifExists = addIfDifferent" with "where = end"(B[m
ok 50 - using "ifExists = addIfDifferent" with "where = before"(B[m
ok 29 - git reset --hard --recurse-submodules: updating to a missing submodule commit fails(B[m
ok 16 - status: (continue first edit) second edit and amend(B[m
ok 51 - using "ifExists = addIfDifferentNeighbor" with "where = end"(B[m
ok 85 - submodule add with an existing name fails unless forced(B[m
ok 52 - using "ifExists = addIfDifferentNeighbor"  with "where = after"(B[m
ok 53 - using "ifExists = addIfDifferentNeighbor" and --trim-empty(B[m
ok 54 - using "ifExists = add" with "where = end"(B[m
ok 65 - --ignore-submodules=untracked suppresses submodules with untracked content(B[m
ok 17 - status: (amend first edit) second edit(B[m
ok 55 - using "ifExists = add" with "where = after"(B[m
ok 56 - overriding configuration with "--if-exists replace"(B[m
ok 86 - set up a second submodule(B[m
ok 57 - using "ifExists = replace"(B[m
ok 58 - using "ifExists = replace" with "where = after"(B[m
ok 59 - using "ifExists = doNothing"(B[m
ok 12 - fast-forward rebase does not care about ident (preserve)(B[m
ok 18 - status: (amend first edit) second edit and split(B[m
ok 45 - rewrite repository including refs that point at non-commit object(B[m
[32m# passed all 45 test(s)(B[m
[36m1..45(B[m
ok 60 - the default is "ifMissing = add"(B[m
*** t7520-ignored-hook-warning.sh ***
ok 39 - submodule update continues after recursive checkout error(B[m
ok 30 - git reset --hard --recurse-submodules: added submodule does remove untracked unignored file with same name when forced(B[m
ok 61 - overriding configuration with "--if-missing doNothing"(B[m
ok 62 - when default "ifMissing" is "doNothing"(B[m
ok 87 - submodule deinit works on repository without submodules(B[m
ok 1 - setup(B[m
ok 63 - using "ifMissing = add" with "where = end"(B[m
ok 19 - status: (amend first edit) second edit and amend(B[m
ok 2 - no warning if hook is not ignored(B[m
ok 64 - using "ifMissing = add" with "where = before"(B[m
ok 3 - warning if hook is ignored(B[m
ok 65 - using "ifMissing = doNothing"(B[m
ok 88 - submodule deinit should remove the whole submodule section from .git/config(B[m
ok 89 - submodule deinit should unset core.worktree(B[m
ok 4 - no warning if advice.ignoredHook set to false(B[m
ok 66 - default "where" is now "after"(B[m
ok 50 - "status" after file replacement should be clean with UC=false(B[m
[32m# passed all 50 test(s)(B[m
[36m1..50(B[m
ok 5 - no warning if unset advice.ignoredHook and hook removed(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t7521-ignored-mode.sh ***
*** t7525-status-rename.sh ***
ok 67 - with simple command(B[m
ok 20 - status: (split first edit) second edit(B[m
ok 68 - with command using committer information(B[m
ok 66 - .gitmodules ignore=untracked suppresses submodules with untracked content(B[m
ok 13 - non-fast-forward rebase refuses to write commits (preserve)(B[m
ok 69 - with command using author information(B[m
ok 1 - setup initial commit and ignore file(B[m
ok 1 - setup(B[m
ok 70 - setup a commit(B[m
ok 2 - Verify behavior of status on directories with ignored files(B[m
ok 2 - status no-options(B[m
ok 14 - author.name overrides user.name(B[m
ok 3 - status --no-renames(B[m
ok 71 - with command using $ARG(B[m
ok 4 - status.renames inherits from diff.renames false(B[m
ok 21 - status: (split first edit) second edit and split(B[m
ok 5 - status.renames inherits from diff.renames true(B[m
ok 3 - Verify status behavior on directory with tracked & ignored files(B[m
ok 6 - status.renames overrides diff.renames false(B[m
ok 72 - with failing command using $ARG(B[m
ok 4 - Verify status behavior on directory with untracked and ignored files(B[m
ok 7 - status.renames overrides from diff.renames true(B[m
ok 15 - author.email overrides user.email(B[m
ok 73 - with empty tokens(B[m
ok 8 - status status.renames=false(B[m
ok 5 - Verify status matching ignored files on ignored directory(B[m
ok 9 - status status.renames=true(B[m
ok 74 - with command but no key(B[m
ok 10 - commit honors status.renames=false(B[m
ok 31 - git reset --hard --recurse-submodules: replace submodule with a directory(B[m
ok 75 - with no command and no key(B[m
ok 11 - commit honors status.renames=true(B[m
ok 67 - .git/config ignore=untracked suppresses submodules with untracked content(B[m
ok 6 - Verify status behavior on ignored directory containing tracked file(B[m
ok 12 - status config overridden(B[m
ok 76 - with cut line(B[m
ok 16 - committer.name overrides user.name(B[m
ok 77 - only trailers(B[m
ok 22 - status: (split first edit) second edit and amend(B[m
ok 7 - Verify matching ignored files with --untracked-files=normal(B[m
ok 13 - status score=100%(B[m
ok 90 - submodule deinit from subdirectory(B[m
ok 78 - only-trailers omits non-trailer in middle of block(B[m
ok 14 - status score=01%(B[m
ok 8 - Verify matching ignored files with --untracked-files=normal(B[m
ok 79 - only input(B[m
ok 17 - committer.email overrides user.email(B[m
ok 15 - copies not overridden by find-renames(B[m
ok 80 - unfold(B[m
[32m# passed all 15 test(s)(B[m
[36m1..15(B[m
*** t7526-commit-pathspec-file.sh ***
ok 81 - handling of --- lines in input(B[m
ok 9 - Verify status behavior on ignored directory containing tracked file(B[m
ok 23 - prepare am_session(B[m
ok 82 - suppress --- handling(B[m
[32m# passed all 82 test(s)(B[m
[36m1..82(B[m
*** t7600-merge.sh ***
ok 10 - Verify behavior of status with --ignored=no(B[m
ok 11 - Verify behavior of status with --ignored=traditional and --untracked-files=all(B[m
ok 24 - status in an am session: file already exists(B[m
ok 68 - --ignore-submodules=dirty suppresses submodules with untracked content(B[m
ok 12 - Verify behavior of status with --ignored=traditional and --untracked-files=normal(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
ok 1 - setup(B[m
ok 18 - author and committer environment variables override config settings(B[m
*** t7601-merge-pull-config.sh ***
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
ok 40 - submodule update exit immediately in case of merge conflict(B[m
*** t7602-merge-octopus-many.sh ***
ok 2 - --pathspec-from-file from stdin(B[m
ok 25 - status in an am session: file does not exist(B[m
ok 3 - --pathspec-from-file from file(B[m
ok 4 - NUL delimiters(B[m
ok 26 - status in an am session: empty patch(B[m
ok 5 - LF delimiters(B[m
ok 6 - no trailing delimiter(B[m
ok 1 - setup(B[m
ok 2 - merge c1 with c2(B[m
ok 32 - git reset --hard --recurse-submodules: replace submodule containing a .git directory with a directory must fail(B[m
ok 7 - CRLF delimiters(B[m
ok 1 - setup(B[m
ok 8 - quotes(B[m
ok 9 - quotes not compatible with --pathspec-file-nul(B[m
ok 3 - fast-forward pull succeeds with "true" in pull.ff(B[m
ok 15 - with hook (rebase -p)(B[m
ok 10 - only touches what was listed(B[m
ok 2 - test option parsing(B[m
ok 16 - with hook (cherry-pick)(B[m
ok 3 - merge -h with invalid index(B[m
ok 4 - pull.ff=true overrides merge.ff=false(B[m
ok 4 - reject non-strategy with a git-merge-foo name(B[m
ok 91 - submodule deinit . deinits all initialized submodules(B[m
ok 17 - with hook and editor (cherry-pick)(B[m
ok 11 - error conditions(B[m
ok 69 - .gitmodules ignore=dirty suppresses submodules with untracked content(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
*** t7603-merge-reduce-heads.sh ***
ok 5 - merge c0 with c1(B[m
ok 18 - with failing hook(B[m
ok 5 - fast-forward pull creates merge with "false" in pull.ff(B[m
ok 41 - submodule update exit immediately after recursive rebase error(B[m
ok 19 - with failing hook (--no-verify)(B[m
ok 27 - status when bisecting(B[m
ok 6 - merge c0 with c1 with --ff-only(B[m
ok 6 - pull prevents non-fast-forward with "only" in pull.ff(B[m
ok 20 - with failing hook (merge)(B[m
ok 7 - merge c1 with c2 (ours in pull.twohead)(B[m
ok 7 - merge from unborn branch(B[m
ok 21 - with failing hook (cherry-pick)(B[m
ok 8 - merge c1 with c2 and c3 (recursive in pull.octopus)(B[m
[32m# passed all 21 test(s)(B[m
[36m1..21(B[m
*** t7604-merge-custom-message.sh ***
ok 33 - git reset --hard --recurse-submodules: replace submodule with a file ignoring ignored files(B[m
ok 70 - .git/config ignore=dirty suppresses submodules with untracked content(B[m
ok 28 - status when rebase --apply conflicts with statushints disabled(B[m
ok 8 - merge c1 with c2(B[m
ok 1 - setup(B[m
ok 42 - add different submodules to the same path(B[m
ok 9 - merge --squash c3 with c7(B[m
ok 10 - merge c3 with c7 with commit.cleanup = scissors(B[m
ok 1 - setup(B[m
ok 9 - merge c1 with c2 and c3 (recursive and octopus in pull.octopus)(B[m
ok 29 - prepare for cherry-pick conflicts(B[m
ok 2 - merge c2 with a custom message(B[m
ok 30 - status when cherry-picking before resolving conflicts(B[m
ok 11 - merge c3 with c7 with --squash commit.cleanup = scissors(B[m
ok 3 - merge --log appends to custom message(B[m
ok 43 - submodule add places git-dir in superprojects git-dir(B[m
ok 4 - prepare file with comment line and trailing newlines(B[m
ok 71 - --ignore-submodules=dirty suppresses submodules with modified content(B[m
ok 31 - status when cherry-picking after resolving conflicts(B[m
ok 5 - cleanup commit messages (verbatim option)(B[m
ok 10 - setup conflicted merge(B[m
ok 2 - merge c1 with c2, c3, c4, c5(B[m
ok 6 - cleanup commit messages (whitespace option)(B[m
ok 34 - git reset --hard --recurse-submodules: modified submodule does update submodule work tree from invalid commit(B[m
ok 32 - status when cherry-picking after committing conflict resolution(B[m
ok 7 - cleanup merge messages (scissors option)(B[m
ok 33 - status shows cherry-pick with invalid oid(B[m
ok 34 - status does not show error if .git/sequencer is a file(B[m
ok 8 - cleanup commit messages (strip option)(B[m
[32m# passed all 8 test(s)(B[m
[36m1..8(B[m
ok 92 - submodule deinit --all deinits all initialized submodules(B[m
*** t7605-merge-resolve.sh ***
ok 35 - status showing detached at and from a tag(B[m
ok 72 - .gitmodules ignore=dirty suppresses submodules with modified content(B[m
ok 44 - submodule update places git-dir in superprojects git-dir(B[m
ok 11 - merge picks up the best result(B[m
ok 12 - merge c1 with c2 and c3(B[m
ok 3 - pull c2, c3, c4, c5 into c1(B[m
ok 1 - setup(B[m
[34mok 1 # skip create signed commits (missing GPG)(B[m
[34mok 2 # skip verify and show signatures (missing GPG)(B[m
[34mok 3 # skip verify-commit exits success on untrusted signature (missing GPG)(B[m
[34mok 4 # skip verify-commit exits success with matching minTrustLevel (missing GPG)(B[m
[34mok 5 # skip verify-commit exits success with low minTrustLevel (missing GPG)(B[m
[34mok 6 # skip verify-commit exits failure with high minTrustLevel (missing GPG)(B[m
ok 36 - status while reverting commit (conflicts)(B[m
[34mok 7 # skip verify signatures with --raw (missing GPG)(B[m
[34mok 8 # skip show signed commit with signature (missing GPG)(B[m
[34mok 9 # skip detect fudged signature (missing GPG)(B[m
[34mok 10 # skip detect fudged signature with NUL (missing GPG)(B[m
[34mok 11 # skip amending already signed commit (missing GPG)(B[m
[34mok 12 # skip show good signature with custom format (missing GPG)(B[m
[34mok 13 # skip show bad signature with custom format (missing GPG)(B[m
[34mok 14 # skip show untrusted signature with custom format (missing GPG)(B[m
[34mok 15 # skip show untrusted signature with undefined trust level (missing GPG)(B[m
ok 1 - setup(B[m
ok 37 - status while reverting commit (conflicts resolved)(B[m
[34mok 16 # skip show untrusted signature with ultimate trust level (missing GPG)(B[m
ok 13 - merges with --ff-only(B[m
[34mok 17 # skip show unknown signature with custom format (missing GPG)(B[m
[34mok 18 # skip show lack of signature with custom format (missing GPG)(B[m
[34mok 19 # skip log.showsignature behaves like --show-signature (missing GPG)(B[m
[34mok 20 # skip check config gpg.format values (missing GPG)(B[m
[34mok 21 # skip detect fudged commit with double signature (missing GPG)(B[m
[34mok 22 # skip show double signature with custom format (missing GPG)(B[m
[32m# passed all 22 test(s)(B[m
[36m1..22(B[m
*** t7606-merge-custom.sh ***
ok 38 - status after reverting commit(B[m
ok 14 - merges with merge.ff=only(B[m
ok 2 - merge c1 to c2(B[m
ok 39 - status while reverting after committing conflict resolution(B[m
ok 1 - set up custom strategy(B[m
ok 93 - submodule deinit deinits a submodule when its work tree is missing or empty(B[m
ok 73 - .git/config ignore=dirty suppresses submodules with modified content(B[m
ok 15 - merge c0 with c1 (no-commit)(B[m
ok 45 - submodule add places git-dir in superprojects git-dir recursive(B[m
ok 3 - merge c1 to c2, again(B[m
ok 12 - merge picks up the best result (from config)(B[m
ok 35 - git reset --hard --recurse-submodules: updating submodules fixes .git links(B[m
ok 16 - merge c1 with c2 (no-commit)(B[m
ok 4 - setup(B[m
ok 13 - merge errors out on invalid strategy(B[m
ok 14 - merge errors out on invalid strategy(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 40 - prepare for different number of commits rebased(B[m
*** t7607-merge-overwrite.sh ***
ok 2 - setup(B[m
ok 4 - merge c2 to c3 (fails)(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
*** t7608-merge-messages.sh ***
ok 41 - status: one command done nothing remaining(B[m
ok 5 - merge E and I(B[m
ok 74 - --ignore-submodules=untracked doesn't suppress submodules with modified content(B[m
ok 6 - verify merge result(B[m
ok 3 - merge c2 with a custom strategy(B[m
ok 42 - status: two commands done with some white lines in done file(B[m
ok 7 - add conflicts(B[m
ok 1 - setup(B[m
ok 4 - trivial merge with custom strategy(B[m
ok 1 - merge local branch(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 17 - merge c1 with c2 and c3 (no-commit)(B[m
*** t7609-merge-co-error-msgs.sh ***
ok 2 - will not overwrite untracked file(B[m
ok 43 - status: two remaining commands with some white lines in todo file(B[m
ok 18 - merge c0 with c1 (squash)(B[m
ok 3 - will overwrite tracked file(B[m
ok 44 - status: handle not-yet-started rebase -i gracefully(B[m
ok 4 - will not overwrite new file(B[m
[32m# passed all 44 test(s)(B[m
[36m1..44(B[m
ok 75 - .gitmodules ignore=untracked doesn't suppress submodules with modified content(B[m
ok 19 - merge c0 with c1 (squash, ff-only)(B[m
*** t7610-mergetool.sh ***
ok 94 - submodule deinit fails when the submodule contains modifications unless forced(B[m
ok 5 - will not overwrite staged changes(B[m
ok 1 - setup(B[m
ok 20 - merge c1 with c2 (squash)(B[m
ok 8 - merge E2 and I2, causing a conflict and resolve it(B[m
ok 21 - unsuccessful merge of c1 with c2 (squash, ff-only)(B[m
ok 6 - will not overwrite removed file(B[m
ok 36 - git reset --hard --recurse-submodules: changed submodule worktree is reset(B[m
ok 9 - verify merge result(B[m
ok 2 - untracked files overwritten by merge (fast and non-fast forward)(B[m
ok 2 - merge octopus branches(B[m
ok 10 - fast-forward to redundant refs(B[m
ok 7 - will not overwrite re-added file(B[m
ok 3 - untracked files or local changes ovewritten by merge(B[m
ok 11 - verify merge result(B[m
ok 12 - merge up-to-date redundant refs(B[m
ok 13 - verify merge result(B[m
[32m# passed all 13 test(s)(B[m
[36m1..13(B[m
ok 8 - will not overwrite removed file with staged changes(B[m
ok 4 - cannot switch branches because of local changes(B[m
*** t7611-merge-abort.sh ***
ok 3 - merge tag(B[m
ok 5 - not uptodate file porcelain checkout error(B[m
ok 76 - .git/config ignore=untracked doesn't suppress submodules with modified content(B[m
ok 9 - will not overwrite unstaged changes in renamed file(B[m
ok 10 - will not overwrite untracked subtree(B[m
ok 4 - ambiguous tag(B[m
ok 6 - not_uptodate_dir porcelain checkout error(B[m
[32m# passed all 6 test(s)(B[m
[36m1..6(B[m
ok 11 - will not overwrite untracked file in leading path(B[m
*** t7612-merge-verify-signatures.sh ***
ok 1 - setup(B[m
ok 22 - merge c1 with c2 and c3 (squash)(B[m
ok 12 - will not overwrite untracked symlink in leading path(B[m
ok 2 - fails without MERGE_HEAD (unstarted merge)(B[m
ok 3 - fails without MERGE_HEAD (unstarted merge): .git/MERGE_HEAD sanity(B[m
ok 5 - remote-tracking branch(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 13 - will not be confused by symlink in leading path(B[m
*** t7613-merge-submodule.sh ***
ok 23 - merge c1 with c2 (no-commit in config)(B[m
ok 4 - fails without MERGE_HEAD (completed merge)(B[m
ok 5 - fails without MERGE_HEAD (completed merge): .git/MERGE_HEAD sanity(B[m
ok 6 - Forget previous merge(B[m
ok 46 - submodule update places git-dir in superprojects git-dir recursive(B[m
ok 14 - will not overwrite untracked file on unborn branch(B[m
ok 95 - submodule deinit fails when the submodule contains untracked files unless forced(B[m
ok 15 - will not overwrite untracked file on unborn branch .git/MERGE_HEAD sanity etc.(B[m
ok 16 - failed merge leaves unborn branch in the womb(B[m
ok 7 - Abort after --no-commit(B[m
ok 24 - merge c1 with c2 (log in config)(B[m
ok 17 - set up unborn branch and content(B[m
ok 8 - Abort after conflicts(B[m
ok 77 - --ignore-submodules=untracked doesn't suppress submodule summary(B[m
ok 18 - will not clobber WT/index when merging into unborn(B[m
[32m# passed all 18 test(s)(B[m
[36m1..18(B[m
*** t7614-merge-signoff.sh ***
ok 9 - Clean merge with dirty index fails(B[m
ok 25 - merge c1 with c2 (log in config gets overridden)(B[m
ok 37 - git reset --keep: added submodule creates empty directory(B[m
ok 47 - submodule add properly re-creates deeper level submodules(B[m
ok 10 - Conflicting merge with dirty index fails(B[m
ok 11 - Reset index (but preserve worktree changes)(B[m
ok 26 - merge c1 with c2 (squash in config)(B[m
ok 1 - setup(B[m
ok 12 - Abort clean merge with non-conflicting dirty worktree(B[m
ok 13 - Abort conflicting merge with non-conflicting dirty worktree(B[m
ok 27 - override config option -n with --summary(B[m
ok 14 - Reset worktree changes(B[m
ok 2 - git merge --signoff adds a sign-off line(B[m
ok 15 - Fail clean merge with conflicting dirty worktree(B[m
ok 3 - git merge does not add a sign-off line(B[m
ok 78 - .gitmodules ignore=untracked doesn't suppress submodule summary(B[m
ok 16 - Fail conflicting merge with conflicting dirty worktree(B[m
ok 28 - override config option -n with --stat(B[m
ok 17 - Reset worktree changes(B[m
ok 96 - submodule deinit fails when the submodule HEAD does not match unless forced(B[m
ok 4 - git merge --no-signoff flag cancels --signoff flag(B[m
ok 18 - Fail clean merge with matching dirty worktree(B[m
[32m# passed all 4 test(s)(B[m
[36m1..4(B[m
ok 2 - merge c1 with c2, c3, c4, ... c29(B[m
*** t7700-repack.sh ***
ok 1 - setup(B[m
ok 29 - override config option --stat(B[m
ok 19 - Fail conflicting merge with matching dirty worktree(B[m
[32m# passed all 19 test(s)(B[m
[36m1..19(B[m
*** t7701-repack-unpack-unreachable.sh ***
ok 30 - merge c1 with c2 (override --no-commit)(B[m
ok 3 - merge output uses pretty names(B[m
ok 48 - submodule update properly revives a moved submodule(B[m
ok 4 - merge reduces irrelevant remote heads(B[m
ok 1 - objects in packs marked .keep are not repacked(B[m
ok 31 - merge c1 with c2 (override --squash)(B[m
ok 38 - git reset --keep: added submodule leaves existing empty directory alone(B[m
ok 79 - .git/config ignore=untracked doesn't suppress submodule summary(B[m
ok 2 - writing bitmaps via command-line can duplicate .keep objects(B[m
ok 32 - merge c0 with c1 (no-ff)(B[m
ok 3 - writing bitmaps via config can duplicate .keep objects(B[m
ok 5 - merge fast-forward output uses pretty names(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 1 - -A with -d option leaves unreachable objects unpacked(B[m
*** t7702-repack-cyclic-alternate.sh ***
ok 33 - merge c0 with c1 (merge.ff=false)(B[m
ok 4 - loose objects in alternate ODB are not repacked(B[m
ok 2 - -A without -d option leaves unreachable objects packed(B[m
ok 34 - combine branch.master.mergeoptions with merge.ff(B[m
ok 3 - unpacked objects receive timestamp of pack file(B[m
ok 1 - setup(B[m
ok 5 - packed obs in alt ODB are repacked even when local repo is packless(B[m
ok 49 - submodule update can handle symbolic links in pwd(B[m
ok 35 - tolerate unknown values for merge.ff(B[m
ok 80 - --ignore-submodules=dirty doesn't suppress submodule summary(B[m
ok 2 - re-packing repository with itsself as alternate(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 36 - combining --squash and --no-ff is refused(B[m
*** t7800-difftool.sh ***
ok 37 - combining --squash and --commit is refused(B[m
ok 38 - option --ff-only overwrites --no-ff(B[m
ok 4 - do not bother loosening old objects(B[m
ok 6 - packed obs in alt ODB are repacked when local repo has packs(B[m
ok 39 - option --no-ff overrides merge.ff=only config(B[m
ok 1 - basic usage requires no repo(B[m
ok 7 - packed obs in alternate ODB kept pack are repacked(B[m
ok 40 - merge c0 with c1 (ff overrides no-ff)(B[m
ok 2 - setup(B[m
ok 8 - packed unreachable obs in alternate ODB are not loosened(B[m
ok 13 - setup untracked cache to false(B[m
ok 39 - git reset --keep: replace tracked file with submodule creates empty directory(B[m
ok 81 - .gitmodules ignore=dirty doesn't suppress submodule summary(B[m
ok 5 - keep packed objects found only in index(B[m
ok 9 - local packed unreachable obs that exist in alternate ODB are not loosened(B[m
ok 41 - merge log message(B[m
ok 14 - compare status with and without fsmonitor(B[m
ok 97 - submodule deinit is silent when used on an uninitialized submodule(B[m
ok 3 - custom commands(B[m
ok 10 - objects made unreachable by grafts only are kept(B[m
ok 42 - merge c1 with c0, c2, c0, and c1(B[m
ok 6 - repack -k keeps unreachable packed objects(B[m
ok 15 - status doesn't detect unreported modifications(B[m
ok 16 - setup untracked cache to true(B[m
ok 4 - custom tool commands override built-ins(B[m
ok 50 - submodule update clone shallow submodule(B[m
ok 7 - repack -k packs unreachable loose objects(B[m
[32m# passed all 7 test(s)(B[m
[36m1..7(B[m
ok 43 - merge c1 with c0, c2, c0, and c1(B[m
*** t7810-grep.sh ***
ok 5 - difftool ignores bad --tool values(B[m
ok 17 - compare status with and without fsmonitor(B[m
ok 44 - merge c1 with c1 and c2(B[m
ok 45 - merge fast-forward in a dirty tree(B[m
ok 18 - status doesn't detect unreported modifications(B[m
ok 1 - setup(B[m
ok 19 - setup preloadIndex to true(B[m
ok 2 - grep should not segfault with a bad input(B[m
ok 82 - .git/config ignore=dirty doesn't suppress submodule summary(B[m
ok 20 - setup untracked cache to false(B[m
ok 3 - grep -w HEAD(B[m
ok 6 - difftool forwards arguments to diff(B[m
ok 46 - in-index merge(B[m
ok 11 - repack --keep-pack(B[m
ok 4 - grep -w HEAD (with --column)(B[m
ok 5 - grep -w HEAD (with --column, extended OR)(B[m
ok 47 - refresh the index before merging(B[m
ok 6 - grep -w HEAD (with --column, --invert-match)(B[m
ok 7 - difftool ignores exit code(B[m
ok 12 - bitmaps are created by default in bare repos(B[m
ok 7 - grep HEAD (with --column, --invert-match, extended OR)(B[m
ok 21 - compare status with and without fsmonitor(B[m
ok 13 - incremental repack does not complain(B[m
ok 8 - grep HEAD (with --column, --invert-match, extended AND)(B[m
ok 9 - grep HEAD (with --column, double-negation)(B[m
ok 14 - bitmaps can be disabled on bare repos(B[m
ok 10 - grep -w HEAD (with --column, -C)(B[m
ok 98 - submodule deinit fails when submodule has a .git directory even when forced(B[m
ok 2 - custom mergetool(B[m
ok 8 - difftool forwards exit code with --trust-exit-code(B[m
ok 11 - grep -w HEAD (with --line-number, --column)(B[m
ok 15 - no bitmaps created if .keep files present(B[m
ok 22 - status doesn't detect unreported modifications(B[m
ok 12 - grep -w HEAD (with non-extended patterns, --column)(B[m
ok 23 - setup untracked cache to true(B[m
ok 13 - grep -w HEAD(B[m
ok 40 - git reset --keep: replace directory with submodule(B[m
ok 14 - grep -w HEAD(B[m
ok 9 - difftool forwards exit code with --trust-exit-code for built-ins(B[m
ok 15 - grep -w HEAD (w)(B[m
ok 48 - merge early part of c2(B[m
ok 16 - grep -w HEAD (x)(B[m
ok 17 - grep -w HEAD (y-1)(B[m
ok 18 - grep -w HEAD (y-2)(B[m
ok 24 - compare status with and without fsmonitor(B[m
ok 19 - grep -w HEAD (z)(B[m
ok 10 - difftool honors difftool.trustExitCode = true(B[m
ok 49 - merge --no-ff --no-commit && commit(B[m
ok 20 - grep HEAD (with --column, --only-matching)(B[m
ok 83 - status (core.commentchar with submodule summary)(B[m
ok 21 - grep HEAD (t-1)(B[m
ok 16 - auto-bitmaps do not complain if unavailable(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 84 - status (core.commentchar with two chars with submodule summary)(B[m
ok 22 - grep HEAD (t-2)(B[m
ok 25 - status doesn't detect unreported modifications(B[m
ok 50 - amending no-ff merge commit(B[m
*** t7811-grep-open.sh ***
ok 85 - --ignore-submodules=all suppresses submodule summary(B[m
ok 23 - grep HEAD (t-3)(B[m
ok 24 - grep -c HEAD (no /dev/null)(B[m
ok 11 - difftool honors difftool.trustExitCode = false(B[m
ok 25 - grep --max-depth -1 HEAD(B[m
ok 26 - splitting the index results in the same state(B[m
ok 51 - merge --no-ff --edit(B[m
ok 26 - grep --max-depth 0 HEAD(B[m
ok 1 - determine default pager(B[m
ok 12 - difftool ignores exit code with --no-trust-exit-code(B[m
ok 27 - grep --max-depth 0 -- '*' HEAD(B[m
ok 1 - git merge: added submodule creates empty directory(B[m
ok 28 - grep --max-depth 1 HEAD(B[m
ok 99 - submodule with UTF-8 name(B[m
ok 29 - grep --max-depth 0 -- t HEAD(B[m
ok 13 - difftool stops on error with --trust-exit-code(B[m
ok 27 - ignore .git changes when invalidating UNTR(B[m
ok 30 - grep --max-depth 0 -- . t HEAD(B[m
ok 2 - setup(B[m
ok 52 - merge annotated/signed tag w/o tracking(B[m
ok 31 - grep --max-depth 0 -- t . HEAD(B[m
ok 86 - .gitmodules ignore=all suppresses unstaged submodule summary(B[m
ok 28 - discard_index() also discards fsmonitor info(B[m
ok 32 - grep HEAD with grep.extendedRegexp=false(B[m
ok 3 - git grep -O(B[m
ok 14 - difftool honors exit status if command not found(B[m
ok 51 - submodule update clone shallow submodule outside of depth(B[m
ok 33 - grep HEAD with grep.extendedRegexp=true(B[m
ok 34 - grep HEAD with grep.patterntype=basic(B[m
ok 4 - git grep -O --cached(B[m
ok 35 - grep HEAD with grep.patterntype=extended(B[m
ok 5 - git grep -O --no-index(B[m
ok 36 - grep HEAD with grep.patterntype=fixed(B[m
[34mok 37 # skip grep HEAD with grep.patterntype=perl (missing PCRE)(B[m
ok 6 - setup: fake "less"(B[m
ok 41 - git reset --keep: removed submodule leaves submodule directory and its contents in place(B[m
ok 100 - submodule add clone shallow submodule(B[m
ok 38 - grep HEAD with grep.patterntype=perl errors without PCRE(B[m
ok 7 - git grep -O jumps to line in less(B[m
ok 29 - status succeeds after staging/unstaging(B[m
ok 39 - grep HEAD with grep.patternType=default and grep.extendedRegexp=true(B[m
[32m# passed all 29 test(s)(B[m
[36m1..29(B[m
ok 40 - grep HEAD with grep.extendedRegexp=true and grep.patternType=default(B[m
*** t7812-grep-icase-non-ascii.sh ***
ok 8 - modified file(B[m
ok 53 - merge annotated/signed tag w/ tracking(B[m
ok 41 - grep HEAD with grep.patternType=extended and grep.extendedRegexp=false(B[m
ok 15 - difftool honors --gui(B[m
ok 42 - grep HEAD with grep.patternType=basic and grep.extendedRegexp=true(B[m
ok 43 - grep HEAD with grep.extendedRegexp=false and grep.patternType=extended(B[m
ok 44 - grep HEAD with grep.extendedRegexp=true and grep.patternType=basic(B[m
ok 9 - copes with color settings(B[m
[34mok 1 # skip setup (missing GETTEXT_LOCALE)(B[m
[34mok 2 # skip grep literal string, no -F (missing REGEX_LOCALE)(B[m
[34mok 3 # skip grep pcre utf-8 icase (missing PCRE,GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)(B[m
ok 45 - grep --count HEAD(B[m
[34mok 4 # skip grep pcre utf-8 string with "+" (missing PCRE,GETTEXT_LOCALE of GETTEXT_LOCALE,PCRE)(B[m
[34mok 5 # skip grep literal string, with -F (missing REGEX_LOCALE)(B[m
ok 52 - submodule update --recursive drops module name before recursing(B[m
ok 87 - .git/config ignore=all suppresses unstaged submodule summary(B[m
[34mok 6 # skip grep string with regex, with -F (missing REGEX_LOCALE)(B[m
[34mok 7 # skip pickaxe -i on non-ascii (missing REGEX_LOCALE)(B[m
ok 54 - merge --ff-only tag(B[m
[34mok 8 # skip PCRE v2: setup invalid UTF-8 data (missing LIBPCRE2,GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)(B[m
ok 46 - grep --count -h HEAD(B[m
[34mok 9 # skip PCRE v2: grep ASCII from invalid UTF-8 data (missing LIBPCRE2,GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)(B[m
[34mok 10 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data (missing LIBPCRE2,GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)(B[m
ok 10 - run from subdir(B[m
[34mok 11 # skip PCRE v2: grep non-ASCII from invalid UTF-8 data with -i (missing LIBPCRE2,GETTEXT_LOCALE of GETTEXT_LOCALE,LIBPCRE2)(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
[32m# passed all 11 test(s)(B[m
[36m1..11(B[m
ok 47 - grep -w in working tree(B[m
*** t7813-grep-icase-iso.sh ***
*** t7814-grep-recurse-submodules.sh ***
ok 48 - grep -w in working tree (with --column)(B[m
ok 49 - grep -w in working tree (with --column, extended OR)(B[m
ok 50 - grep -w in working tree (with --column, --invert-match)(B[m
ok 55 - merge --no-edit tag should skip editor(B[m
ok 51 - grep in working tree (with --column, --invert-match, extended OR)(B[m
ok 16 - difftool --gui last setting wins(B[m
[34mok 1 # skip setup (missing GETTEXT_ISO_LOCALE)(B[m
[34mok 2 # skip grep pcre string (missing PCRE,GETTEXT_ISO_LOCALE of GETTEXT_ISO_LOCALE,PCRE)(B[m
ok 52 - grep in working tree (with --column, --invert-match, extended AND)(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
*** t7815-grep-binary.sh ***
ok 53 - grep in working tree (with --column, double-negation)(B[m
ok 54 - grep -w in working tree (with --column, -C)(B[m
ok 55 - grep -w in working tree (with --line-number, --column)(B[m
ok 56 - set up mod-256 conflict scenario(B[m
ok 56 - grep -w in working tree (with non-extended patterns, --column)(B[m
ok 57 - merge detects mod-256 conflicts (recursive)(B[m
ok 57 - grep -w in working tree(B[m
ok 17 - difftool --gui works without configured diff.guitool(B[m
ok 58 - grep -w in working tree(B[m
ok 101 - submodule helper list is not confused by common prefixes(B[m
ok 2 - git merge: added submodule leaves existing empty directory alone(B[m
ok 1 - setup(B[m
ok 59 - grep -w in working tree (w)(B[m
ok 2 - git grep ina a(B[m
ok 60 - grep -w in working tree (x)(B[m
ok 3 - git grep -ah ina a(B[m
ok 61 - grep -w in working tree (y-1)(B[m
ok 4 - git grep -I ina a(B[m
ok 62 - grep -w in working tree (y-2)(B[m
ok 53 - submodule update can be run in parallel(B[m
ok 5 - git grep -c ina a(B[m
ok 63 - grep -w in working tree (z)(B[m
ok 6 - git grep -l ina a(B[m
ok 88 - setup of test environment(B[m
ok 64 - grep in working tree (with --column, --only-matching)(B[m
ok 58 - merge detects mod-256 conflicts (resolve)(B[m
ok 1 - setup directory structure and submodule(B[m
ok 18 - GIT_DIFF_TOOL variable(B[m
ok 7 - git grep -L bar a(B[m
ok 65 - grep in working tree (t-1)(B[m
ok 89 - "status.short=true" same as "-s"(B[m
ok 2 - grep correctly finds patterns in a submodule(B[m
ok 8 - git grep -q ina a(B[m
ok 66 - grep in working tree (t-2)(B[m
ok 9 - git grep -F ile a(B[m
ok 42 - git reset --keep: removed submodule leaves submodule containing a .git directory alone(B[m
ok 10 - git grep -Fi iLE a(B[m
ok 3 - grep finds patterns in a submodule via config(B[m
ok 67 - grep in working tree (t-3)(B[m
ok 11 - git grep ile a(B[m
ok 68 - grep -c in working tree (no /dev/null)(B[m
[33mnot ok 12 - git grep .fi a # TODO known breakage(B[m
ok 4 - grep --no-recurse-submodules overrides config(B[m
ok 59 - merge nothing into void(B[m
ok 69 - grep --max-depth -1 in working tree(B[m
ok 5 - grep and basic pathspecs(B[m
ok 13 - grep respects binary diff attribute(B[m
ok 70 - grep --max-depth 0 in working tree(B[m
ok 14 - grep --cached respects binary diff attribute(B[m
ok 71 - grep --max-depth 0 -- '*' in working tree(B[m
ok 60 - merge can be completed with --continue(B[m
ok 72 - grep --max-depth 1 in working tree(B[m
ok 15 - grep --cached respects binary diff attribute (2)(B[m
ok 73 - grep --max-depth 0 -- t in working tree(B[m
ok 16 - grep revision respects binary diff attribute(B[m
ok 19 - GIT_DIFF_TOOL overrides(B[m
ok 74 - grep --max-depth 0 -- . t in working tree(B[m
ok 61 - killed merge can be completed with --continue(B[m
ok 17 - grep respects not-binary diff attribute(B[m
ok 75 - grep --max-depth 0 -- t . in working tree(B[m
ok 18 - setup textconv filters(B[m
ok 76 - grep in working tree with grep.extendedRegexp=false(B[m
ok 19 - grep does not honor textconv(B[m
ok 77 - grep in working tree with grep.extendedRegexp=true(B[m
ok 54 - git clone passes the parallel jobs config on to submodules(B[m
ok 78 - grep in working tree with grep.patterntype=basic(B[m
[32m# passed all 54 test(s)(B[m
[36m1..54(B[m
ok 20 - grep --textconv honors textconv(B[m
ok 90 - "status.short=true" weaker than "--no-short"(B[m
ok 20 - GIT_DIFFTOOL_NO_PROMPT variable(B[m
ok 79 - grep in working tree with grep.patterntype=extended(B[m
ok 21 - grep --no-textconv does not honor textconv(B[m
ok 3 - gui mergetool(B[m
ok 80 - grep in working tree with grep.patterntype=fixed(B[m
[34mok 81 # skip grep in working tree with grep.patterntype=perl (missing PCRE)(B[m
ok 6 - grep and nested submodules(B[m
ok 22 - grep --textconv blob honors textconv(B[m
ok 82 - grep in working tree with grep.patterntype=perl errors without PCRE(B[m
ok 62 - merge --quit(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 21 test(s)(B[m
[36m1..22(B[m
ok 7 - grep and multiple patterns(B[m
*** t7816-grep-binary-pattern.sh ***
ok 83 - grep in working tree with grep.patternType=default and grep.extendedRegexp=true(B[m
ok 8 - grep and multiple patterns(B[m
ok 84 - grep in working tree with grep.extendedRegexp=true and grep.patternType=default(B[m
ok 9 - basic grep tree(B[m
ok 85 - grep in working tree with grep.patternType=extended and grep.extendedRegexp=false(B[m
ok 63 - merge suggests matching remote refname(B[m
ok 86 - grep in working tree with grep.patternType=basic and grep.extendedRegexp=true(B[m
ok 10 - grep tree HEAD^(B[m
ok 64 - suggested names are not ambiguous(B[m
[32m# passed all 64 test(s)(B[m
[36m1..64(B[m
ok 87 - grep in working tree with grep.extendedRegexp=false and grep.patternType=extended(B[m
ok 21 - GIT_DIFFTOOL_PROMPT variable(B[m
ok 11 - grep tree HEAD^^(B[m
ok 88 - grep in working tree with grep.extendedRegexp=true and grep.patternType=basic(B[m
ok 12 - grep tree and pathspecs(B[m
ok 1 - setup(B[m
*** t8001-annotate.sh ***
ok 89 - grep --count in working tree(B[m
ok 3 - git merge: replace tracked file with submodule creates empty directory(B[m
ok 13 - grep tree and pathspecs(B[m
ok 90 - grep --count -h in working tree(B[m
ok 43 - git reset --keep: replace submodule with a directory must fail(B[m
*** t8002-blame.sh ***
ok 14 - grep tree and more pathspecs(B[m
ok 2 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a(B[m
ok 91 - grep -l -C(B[m
[34mok 3 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>f' a (missing LIBPCRE2)(B[m
[34mok 4 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 15 - grep tree and more pathspecs(B[m
ok 92 - grep -c -C(B[m
ok 5 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a(B[m
ok 93 - grep -L -C(B[m
[34mok 6 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>x' a (missing LIBPCRE2)(B[m
ok 22 - difftool.prompt config variable is false(B[m
[34mok 7 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>x' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 94 - grep --files-without-match --quiet(B[m
ok 1 - setup A lines(B[m
ok 102 - setup superproject with submodules(B[m
ok 95 - grep -e A --and -e B(B[m
ok 2 - blame 1 author(B[m
ok 8 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a(B[m
[34mok 9 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>f' a (missing LIBPCRE2)(B[m
ok 1 - setup A lines(B[m
[34mok 10 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 96 - grep ( -e A --or -e B ) --and -e B(B[m
ok 91 - "status.short=false" same as "--no-short"(B[m
ok 2 - blame 1 author(B[m
ok 3 - blame in a bare repo without starting commit(B[m
ok 97 - grep -e A --and --not -e B(B[m
ok 92 - "status.short=false" weaker than "-s"(B[m
ok 11 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a(B[m
[34mok 12 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>x' a (missing LIBPCRE2)(B[m
ok 98 - grep should ignore GREP_OPTIONS(B[m
[34mok 13 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>x' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 3 - blame in a bare repo without starting commit(B[m
ok 99 - grep -f, non-existent file(B[m
ok 4 - blame by tag objects(B[m
ok 93 - "status.branch=true" same as "-b"(B[m
ok 14 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a(B[m
[34mok 15 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>f' a (missing LIBPCRE2)(B[m
ok 100 - grep -f, one pattern(B[m
ok 5 - setup B lines(B[m
ok 23 - difftool merge.prompt = false(B[m
[34mok 16 # skip LC_ALL='' git grep -P -f f  'y<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 4 - blame by tag objects(B[m
ok 94 - "status.branch=true" different from "--no-branch"(B[m
ok 6 - blame 2 authors(B[m
ok 101 - grep -f, multiple patterns(B[m
ok 5 - setup B lines(B[m
ok 17 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a(B[m
ok 95 - "status.branch=true" weaker than "--no-branch"(B[m
[34mok 18 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>x' a (missing LIBPCRE2)(B[m
ok 102 - grep, multiple patterns(B[m
ok 7 - setup B1 lines (branch1)(B[m
[34mok 19 # skip LC_ALL='' git grep -P -f f  'y<NUL>x' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 6 - blame 2 authors(B[m
ok 96 - "status.branch=true" weaker than "--porcelain"(B[m
ok 103 - grep -f, ignore empty lines(B[m
ok 8 - blame 2 authors + 1 branch1 author(B[m
ok 97 - "status.branch=false" same as "--no-branch"(B[m
ok 7 - setup B1 lines (branch1)(B[m
ok 20 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a(B[m
ok 104 - grep -f, ignore empty lines, read patterns from stdin(B[m
[34mok 21 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>ð' a (missing LIBPCRE2)(B[m
[34mok 22 # skip LC_ALL='' git grep -P -f f  'æ<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 8 - blame 2 authors + 1 branch1 author(B[m
ok 98 - "status.branch=false" weaker than "-b"(B[m
ok 9 - setup B2 lines (branch2)(B[m
ok 105 - grep -q, silently report matches(B[m
ok 99 - Restore default test environment(B[m
ok 16 - grep recurse submodule colon in name(B[m
ok 10 - blame 2 authors + 1 branch2 author(B[m
ok 24 - difftool.prompt can overridden with -y(B[m
ok 23 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a(B[m
ok 106 - grep -C1 hunk mark between files(B[m
[34mok 24 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'e<NUL>m[*]c' a (missing LIBPCRE2)(B[m
ok 9 - setup B2 lines (branch2)(B[m
[34mok 25 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'e<NUL>m[*]c' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 11 - merge branch1 & branch2(B[m
ok 10 - blame 2 authors + 1 branch2 author(B[m
ok 12 - blame 2 authors + 2 merged-in authors(B[m
ok 26 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a(B[m
[34mok 27 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'E<NUL>M[*]C' a (missing LIBPCRE2)(B[m
ok 11 - merge branch1 & branch2(B[m
ok 107 - log grep setup(B[m
ok 13 - blame --first-parent blames merge for branch1(B[m
[34mok 28 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'E<NUL>M[*]C' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 108 - log grep (1)(B[m
ok 12 - blame 2 authors + 2 merged-in authors(B[m
ok 14 - blame ancestor(B[m
ok 109 - log grep (2)(B[m
ok 29 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a(B[m
ok 13 - blame --first-parent blames merge for branch1(B[m
ok 15 - blame great-ancestor(B[m
[34mok 30 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a (missing LIBPCRE2)(B[m
[34mok 31 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>[f]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 110 - log grep (3)(B[m
ok 14 - blame ancestor(B[m
ok 16 - setup evil merge(B[m
ok 111 - log grep (4)(B[m
ok 25 - difftool.prompt can overridden with --prompt(B[m
ok 15 - blame great-ancestor(B[m
ok 17 - blame evil merge(B[m
ok 32 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a(B[m
ok 112 - log grep (5)(B[m
[34mok 33 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[y]<NUL>f' a (missing LIBPCRE2)(B[m
ok 16 - setup evil merge(B[m
[34mok 34 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F '[y]<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 113 - log grep (6)(B[m
ok 17 - blame evil merge(B[m
ok 114 - log grep (7)(B[m
ok 35 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a(B[m
[34mok 36 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a (missing LIBPCRE2)(B[m
ok 115 - log grep (8)(B[m
[34mok 37 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>[F]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 44 - git reset --keep: replace submodule containing a .git directory with a directory must fail(B[m
ok 116 - log grep (9)(B[m
ok 117 - log grep (9)(B[m
ok 38 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a(B[m
[34mok 39 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi '[Y]<NUL>F' a (missing LIBPCRE2)(B[m
ok 100 - git commit will commit a staged but ignored submodule(B[m
ok 118 - log --grep-reflog can only be used under -g(B[m
[34mok 40 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi '[Y]<NUL>F' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 119 - log with multiple --grep uses union(B[m
ok 4 - git merge: replace directory with submodule(B[m
ok 41 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a(B[m
ok 120 - log --all-match with multiple --grep uses intersection(B[m
[34mok 42 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a (missing LIBPCRE2)(B[m
[34mok 43 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'æ<NUL>[ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 121 - log with multiple --author uses union(B[m
ok 26 - difftool last flag wins(B[m
ok 122 - log --all-match with multiple --author still uses union(B[m
ok 17 - grep history with moved submoules(B[m
ok 44 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a(B[m
ok 123 - log --grep --author uses intersection(B[m
[34mok 45 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F '[æ]<NUL>ð' a (missing LIBPCRE2)(B[m
[34mok 46 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F '[æ]<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 124 - log --grep --grep --author takes union of greps and intersects with author(B[m
ok 103 - submodule update --init with a specification(B[m
ok 125 - log ---all-match -grep --author --author still takes union of authors and intersects with grep(B[m
ok 47 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>ð' a(B[m
[34mok 48 # skip LC_ALL='C' git grep -P -f f -i '[æ]<NUL>ð' a (missing LIBPCRE2)(B[m
ok 126 - log --grep --author --author takes union of authors and intersects with grep(B[m
[34mok 49 # skip LC_ALL='' git grep -P -f f -i '[æ]<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 127 - log --all-match --grep --grep --author takes intersection(B[m
ok 50 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a(B[m
ok 128 - log --author does not search in timestamp(B[m
[34mok 51 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing LIBPCRE2)(B[m
[34mok 52 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 129 - log --committer does not search in timestamp(B[m
ok 53 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a(B[m
[34mok 54 # skip LC_ALL='C' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing LIBPCRE2)(B[m
ok 101 - git commit --dry-run will show a staged but ignored submodule(B[m
ok 130 - grep with CE_VALID file(B[m
[34mok 55 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 131 - grep -p with userdiff(B[m
ok 56 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>Ð' a(B[m
[34mok 57 # skip LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>Ð' a (missing LIBPCRE2)(B[m
ok 102 - git commit -m will commit a staged but ignored submodule(B[m
[34mok 58 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>Ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 132 - grep -p(B[m
ok 133 - grep -p -B5(B[m
ok 59 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>ð' a(B[m
[34mok 60 # skip LC_ALL='C' git grep -P -f f -i '[Æ]<NUL>ð' a (missing LIBPCRE2)(B[m
[34mok 61 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 134 - grep -W(B[m
ok 135 - grep -W shows no trailing empty lines(B[m
ok 62 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>Ð' a(B[m
[34mok 63 # skip LC_ALL='C' git grep -P -f f -i 'Æ<NUL>Ð' a (missing LIBPCRE2)(B[m
[34mok 64 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>Ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 18 - grep using relative path(B[m
ok 136 - grep -W with userdiff(B[m
ok 137 -  includes preceding comment(B[m
ok 138 -  includes function line(B[m
ok 65 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a(B[m
[34mok 66 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>[f]' a (missing LIBPCRE2)(B[m
ok 139 -  includes matching line(B[m
[34mok 67 # skip LC_ALL='' git grep -P -f f  'y<NUL>[f]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
[33mnot ok 45 - git reset --keep: replace submodule with a file must fail # TODO known breakage(B[m
ok 140 -  includes last line of the function(B[m
ok 141 - grep --threads=0 & -c grep.threads=0(B[m
ok 68 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a(B[m
[34mok 69 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  '[y]<NUL>f' a (missing LIBPCRE2)(B[m
[34mok 70 # skip LC_ALL='' git grep -P -f f  '[y]<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 142 - grep --threads=1 & -c grep.threads=1(B[m
ok 71 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a(B[m
[34mok 72 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>[F]' a (missing LIBPCRE2)(B[m
ok 143 - grep --threads=2 & -c grep.threads=2(B[m
[34mok 73 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>[F]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 5 - git merge: removed submodule leaves submodule directory and its contents in place(B[m
ok 144 - grep --threads=3 & -c grep.threads=3(B[m
ok 74 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a(B[m
[34mok 75 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Y]<NUL>f' a (missing LIBPCRE2)(B[m
[34mok 76 # skip LC_ALL='' git grep -P -f f -i '[Y]<NUL>f' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 145 - grep --threads=4 & -c grep.threads=4(B[m
ok 77 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a(B[m
[34mok 78 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'æ<NUL>[ð]' a (missing LIBPCRE2)(B[m
ok 146 - grep --threads=5 & -c grep.threads=5(B[m
[34mok 79 # skip LC_ALL='' git grep -P -f f  'æ<NUL>[ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 147 - grep --threads=6 & -c grep.threads=6(B[m
ok 80 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a(B[m
ok 4 - gui mergetool without merge.guitool set falls back to merge.tool(B[m
[34mok 81 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  '[æ]<NUL>ð' a (missing LIBPCRE2)(B[m
[34mok 82 # skip LC_ALL='' git grep -P -f f  '[æ]<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 148 - grep --threads=7 & -c grep.threads=7(B[m
ok 83 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a(B[m
ok 149 - grep --threads=8 & -c grep.threads=8(B[m
[34mok 84 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a (missing LIBPCRE2)(B[m
ok 27 - difftool + mergetool config variables(B[m
[34mok 85 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 150 - grep --threads=9 & -c grep.threads=9(B[m
ok 103 - show stash info with "--show-stash"(B[m
ok 104 - submodule update --init with submodule.active set(B[m
ok 86 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a(B[m
[34mok 87 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m.*c<NUL>' a (missing LIBPCRE2)(B[m
[34mok 88 # skip LC_ALL='' git grep -P -f f  'e<NUL>m.*c<NUL>' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 151 - grep --threads=10 & -c grep.threads=10(B[m
[34mok 152 # skip grep --threads=N or pack.threads=N warns when no pthreads (missing !PTHREADS of !PTHREADS,C_LOCALE_OUTPUT)(B[m
ok 89 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a(B[m
ok 28 - difftool.<tool>.path(B[m
[34mok 90 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M.*c<NUL>' a (missing LIBPCRE2)(B[m
ok 153 - grep from a subdirectory to search wider area (1)(B[m
[34mok 91 # skip LC_ALL='' git grep -P -f f -i 'E<NUL>M.*c<NUL>' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 154 - grep from a subdirectory to search wider area (2)(B[m
ok 19 - grep from a subdir(B[m
ok 29 - difftool --extcmd=cat(B[m
ok 92 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a(B[m
ok 155 - grep -Fi(B[m
ok 18 - blame huge graft(B[m
[34mok 93 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'e<NUL>m[*]c' a (missing LIBPCRE2)(B[m
[34mok 94 # skip LC_ALL='' git grep -P -f f  'e<NUL>m[*]c' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 20 - --recurse-submodules and --untracked are incompatible(B[m
ok 19 - setup incomplete line(B[m
ok 21 - grep --recurse-submodules --no-index ignores --recurse-submodules(B[m
ok 30 - difftool --extcmd cat(B[m
ok 18 - blame huge graft(B[m
ok 95 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a(B[m
[34mok 96 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'E<NUL>M[*]C' a (missing LIBPCRE2)(B[m
ok 20 - blame incomplete line(B[m
[34mok 97 # skip LC_ALL='' git grep -P -f f -i 'E<NUL>M[*]C' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 19 - setup incomplete line(B[m
[33mnot ok 46 - git reset --keep: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 31 - difftool -x cat(B[m
ok 156 - outside of git repository(B[m
ok 21 - setup edits(B[m
ok 20 - blame incomplete line(B[m
ok 98 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a(B[m
ok 104 - no stash info with "--show-stash --no-show-stash"(B[m
[34mok 99 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'NOMATCH<NUL>ð' a (missing LIBPCRE2)(B[m
[34mok 100 # skip LC_ALL='' git grep -P -f f -i 'NOMATCH<NUL>ð' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 22 - blame edits(B[m
ok 21 - setup edits(B[m
ok 22 - grep --recurse-submodules should pass the pattern type along(B[m
ok 32 - difftool --extcmd echo arg1(B[m
ok 23 - setup obfuscated email(B[m
ok 101 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a(B[m
ok 22 - blame edits(B[m
[34mok 102 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[Æ]<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
[34mok 103 # skip LC_ALL='' git grep -P -f f -i '[Æ]<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 24 - blame obfuscated email(B[m
ok 23 - grep --recurse-submodules with submodules without .gitmodules in the working tree(B[m
ok 23 - setup obfuscated email(B[m
ok 33 - difftool --extcmd cat arg1(B[m
ok 157 - outside of git repository with fallbackToNoIndex(B[m
ok 25 - blame -L 1 (all)(B[m
ok 104 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a(B[m
ok 24 - blame obfuscated email(B[m
[34mok 105 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i '[æ]<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
[34mok 106 # skip LC_ALL='' git grep -P -f f -i '[æ]<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 26 - blame -L , (all)(B[m
ok 25 - blame -L 1 (all)(B[m
ok 34 - difftool --extcmd cat arg2(B[m
ok 27 - blame -L X (X to end)(B[m
ok 26 - blame -L , (all)(B[m
ok 107 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a(B[m
[34mok 1 # skip create signed commits (missing GPG)(B[m
ok 6 - git merge: removed submodule leaves submodule containing a .git directory alone(B[m
[34mok 2 # skip merge unsigned commit with verification (missing GPG)(B[m
[34mok 108 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'y<NUL>[f]' a (missing LIBPCRE2)(B[m
ok 28 - blame -L X, (X to end)(B[m
[34mok 3 # skip merge unsigned commit with merge.verifySignatures=true (missing GPG)(B[m
[34mok 4 # skip merge commit with bad signature with verification (missing GPG)(B[m
[34mok 109 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'y<NUL>[f]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
[34mok 5 # skip merge commit with bad signature with merge.verifySignatures=true (missing GPG)(B[m
ok 27 - blame -L X (X to end)(B[m
[34mok 6 # skip merge commit with untrusted signature with verification (missing GPG)(B[m
[34mok 7 # skip merge commit with untrusted signature with verification and high minTrustLevel (missing GPG)(B[m
[34mok 8 # skip merge commit with untrusted signature with verification and low minTrustLevel (missing GPG)(B[m
ok 29 - blame -L ,Y (up to Y)(B[m
[34mok 9 # skip merge commit with untrusted signature with merge.verifySignatures=true (missing GPG)(B[m
ok 158 - inside git repository but with --no-index(B[m
[34mok 10 # skip merge commit with untrusted signature with merge.verifySignatures=true and minTrustLevel (missing GPG)(B[m
[34mok 11 # skip merge signed commit with verification (missing GPG)(B[m
ok 28 - blame -L X, (X to end)(B[m
[34mok 12 # skip merge signed commit with merge.verifySignatures=true (missing GPG)(B[m
[34mok 13 # skip merge commit with bad signature without verification (missing GPG)(B[m
ok 35 - setup with 2 files different(B[m
ok 110 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a(B[m
[34mok 14 # skip merge commit with bad signature with merge.verifySignatures=false (missing GPG)(B[m
ok 30 - blame -L X,X(B[m
[34mok 15 # skip merge commit with bad signature with merge.verifySignatures=true and --no-verify-signatures (missing GPG)(B[m
[34mok 16 # skip merge unsigned commit into unborn branch (missing GPG)(B[m
ok 105 - "status.showStash=false" weaker than "--show-stash"(B[m
[34mok 111 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Y<NUL>[F]' a (missing LIBPCRE2)(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 29 - blame -L ,Y (up to Y)(B[m
[34mok 112 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Y<NUL>[F]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
*** t8003-blame-corner-cases.sh ***
ok 31 - blame -L X,Y(B[m
ok 30 - blame -L X,X(B[m
ok 32 - blame -L Y,X (undocumented)(B[m
ok 159 - grep --no-index descends into repos, but not .git(B[m
ok 113 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a(B[m
[34mok 114 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
ok 31 - blame -L X,Y(B[m
ok 33 - blame -L -X(B[m
[34mok 115 # skip LC_ALL='' git grep -P -f f  'y<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 36 - say no to the first file(B[m
ok 160 - setup double-dash tests(B[m
ok 34 - blame -L 0(B[m
ok 32 - blame -L Y,X (undocumented)(B[m
ok 35 - blame -L ,0(B[m
ok 161 - grep -- pattern(B[m
ok 33 - blame -L -X(B[m
ok 116 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a(B[m
[34mok 117 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
ok 36 - blame -L ,+0(B[m
ok 105 - submodule update and setting submodule.<name>.active(B[m
ok 34 - blame -L 0(B[m
ok 24 - grep --recurse-submodules without --cached considers worktree modifications(B[m
[34mok 118 # skip LC_ALL='' git grep -P -f f  '<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 162 - grep -- pattern -- pathspec(B[m
ok 37 - blame -L X,+0(B[m
ok 35 - blame -L ,0(B[m
ok 163 - grep -e pattern -- path(B[m
ok 37 - say no to the second file(B[m
ok 36 - blame -L ,+0(B[m
ok 38 - blame -L X,+1(B[m
ok 119 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a(B[m
[34mok 120 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
ok 164 - grep -e -- -- path(B[m
ok 37 - blame -L X,+0(B[m
[34mok 121 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 39 - blame -L X,+N(B[m
ok 165 - dashdash disambiguates rev as rev(B[m
ok 38 - blame -L X,+1(B[m
ok 40 - blame -L ,-0(B[m
ok 122 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a(B[m
ok 41 - blame -L X,-0(B[m
[34mok 123 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NOMATCH' a (missing LIBPCRE2)(B[m
ok 39 - blame -L X,+N(B[m
ok 38 - ending prompt input with EOF(B[m
[34mok 124 # skip LC_ALL='' git grep -P -f f -i '<NUL>NOMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 106 - "status.showStash=true" weaker than "--no-show-stash"(B[m
ok 166 - dashdash disambiguates pathspec as pathspec(B[m
ok 42 - blame -L X,-1(B[m
ok 40 - blame -L ,-0(B[m
ok 167 - report bogus arg without dashdash(B[m
ok 41 - blame -L X,-0(B[m
ok 125 - error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a(B[m
ok 43 - blame -L X,-N(B[m
ok 1 - setup(B[m
ok 168 - report bogus rev with dashdash(B[m
[34mok 126 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -F 'æ<NUL>[ð]' a (missing LIBPCRE2)(B[m
[34mok 127 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -F 'æ<NUL>[ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 2 - straight copy without -C(B[m
ok 42 - blame -L X,-1(B[m
ok 44 - blame -L /RE/ (RE to end)(B[m
ok 169 - allow non-existent path with dashdash(B[m
ok 3 - straight move without -C(B[m
ok 43 - blame -L X,-N(B[m
ok 45 - blame -L /RE/,/RE2/(B[m
ok 128 - error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a(B[m
ok 4 - straight copy with -C(B[m
[34mok 129 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing LIBPCRE2)(B[m
ok 170 - grep --no-index pattern -- path(B[m
[34mok 130 # skip error, PCRE v2 only: LC_ALL='' git grep -f f -Fi 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 44 - blame -L /RE/ (RE to end)(B[m
ok 46 - blame -L X,/RE/(B[m
ok 5 - straight move with -C(B[m
ok 171 - grep --no-index complains of revs(B[m
ok 6 - straight copy with -C -C(B[m
ok 47 - blame -L /RE/,Y(B[m
ok 45 - blame -L /RE/,/RE2/(B[m
ok 131 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a(B[m
ok 172 - grep --no-index prefers paths to revs(B[m
ok 7 - straight move with -C -C(B[m
[34mok 132 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Æ<NUL>[Ð]' a (missing LIBPCRE2)(B[m
ok 25 - grep --recurse-submodules with --cached ignores worktree modifications(B[m
ok 48 - blame -L /RE/,+N(B[m
[32m# passed all 25 test(s)(B[m
[36m1..25(B[m
[34mok 133 # skip LC_ALL='' git grep -P -f f -i 'Æ<NUL>[Ð]' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 46 - blame -L X,/RE/(B[m
ok 173 - grep --no-index does not "diagnose" revs(B[m
ok 8 - append without -C(B[m
[34mok 174 # skip grep --perl-regexp pattern (missing PCRE)(B[m
*** t8004-blame-with-conflicts.sh ***
ok 47 - blame -L /RE/,Y(B[m
ok 49 - blame -L /RE/,-N(B[m
ok 9 - append with -C(B[m
ok 175 - grep --perl-regexp pattern errors without PCRE(B[m
ok 134 - error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a(B[m
[34mok 176 # skip grep -P pattern (missing PCRE)(B[m
[34mok 177 # skip grep -P with (*NO_JIT) doesn't error out (missing LIBPCRE2)(B[m
ok 10 - append with -C -C(B[m
[34mok 135 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  'y<NUL>NÓMATCH' a (missing LIBPCRE2)(B[m
ok 48 - blame -L /RE/,+N(B[m
[34mok 136 # skip LC_ALL='' git grep -P -f f  'y<NUL>NÓMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 50 - blame -L X (X == nlines)(B[m
ok 178 - grep -P pattern errors without PCRE(B[m
ok 11 - append with -C -C -C(B[m
ok 49 - blame -L /RE/,-N(B[m
ok 51 - blame -L X (X == nlines + 1)(B[m
ok 179 - grep pattern with grep.extendedRegexp=true(B[m
ok 107 - no additional info if no stash entries(B[m
[34mok 180 # skip grep -P pattern with grep.extendedRegexp=true (missing PCRE)(B[m
[34mok 181 # skip grep -P -v pattern (missing PCRE)(B[m
ok 12 - blame wholesale copy(B[m
[34mok 182 # skip grep -P -i pattern (missing PCRE)(B[m
ok 137 - error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a(B[m
ok 52 - blame -L X (X > nlines)(B[m
[34mok 183 # skip grep -P -w pattern (missing PCRE)(B[m
[34mok 184 # skip grep -P backreferences work (the PCRE NO_AUTO_CAPTURE flag is not set) (missing PCRE)(B[m
[34mok 138 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f  '<NUL>NÓMATCH' a (missing LIBPCRE2)(B[m
ok 7 - git merge: replace submodule with a directory must fail(B[m
ok 50 - blame -L X (X == nlines)(B[m
[34mok 139 # skip LC_ALL='' git grep -P -f f  '<NUL>NÓMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 13 - blame wholesale copy and more(B[m
ok 185 - grep -G invalidpattern properly dies (B[m
ok 53 - blame -L ,Y (Y == nlines)(B[m
ok 51 - blame -L X (X == nlines + 1)(B[m
ok 47 - git reset --keep: modified submodule does not update submodule work tree(B[m
ok 186 - grep invalidpattern properly dies with grep.patternType=basic(B[m
ok 140 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a(B[m
ok 52 - blame -L X (X > nlines)(B[m
ok 187 - grep -E invalidpattern properly dies (B[m
[34mok 141 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i 'Y<NUL>NÓMATCH' a (missing LIBPCRE2)(B[m
[34mok 142 # skip LC_ALL='' git grep -P -f f -i 'Y<NUL>NÓMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 54 - blame -L ,Y (Y == nlines + 1)(B[m
ok 14 - blame wholesale copy and more in the index(B[m
ok 188 - grep invalidpattern properly dies with grep.patternType=extended(B[m
[34mok 189 # skip grep -P invalidpattern properly dies  (missing PCRE)(B[m
[34mok 190 # skip grep invalidpattern properly dies with grep.patternType=perl (missing PCRE)(B[m
ok 53 - blame -L ,Y (Y == nlines)(B[m
ok 55 - blame -L ,Y (Y > nlines)(B[m
ok 143 - error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a(B[m
ok 191 - grep -G -E -F pattern(B[m
[34mok 144 # skip error, PCRE v2 only: LC_ALL='C' git grep -f f -i '<NUL>NÓMATCH' a (missing LIBPCRE2)(B[m
ok 56 - blame -L multiple (disjoint)(B[m
[34mok 145 # skip LC_ALL='' git grep -P -f f -i '<NUL>NÓMATCH' a (missing GETTEXT_LOCALE,LIBPCRE2 of LIBPCRE2,GETTEXT_LOCALE)(B[m
ok 192 - grep pattern with grep.patternType=basic, =extended, =fixed(B[m
ok 54 - blame -L ,Y (Y == nlines + 1)(B[m
[32m# passed all 145 test(s)(B[m
[36m1..145(B[m
*** t8005-blame-i18n.sh ***
ok 57 - blame -L multiple (disjoint: unordered)(B[m
ok 193 - grep -E -F -G pattern(B[m
ok 55 - blame -L ,Y (Y > nlines)(B[m
ok 194 - grep pattern with grep.patternType=extended, =fixed, =basic(B[m
ok 58 - blame -L multiple (adjacent)(B[m
ok 56 - blame -L multiple (disjoint)(B[m
ok 195 - grep -F -G -E pattern(B[m
ok 59 - blame -L multiple (adjacent: unordered)(B[m
ok 57 - blame -L multiple (disjoint: unordered)(B[m
ok 15 - blame during cherry-pick with file rename conflict(B[m
ok 196 - grep pattern with grep.patternType=fixed, =basic, =extended(B[m
ok 1 - setup first case(B[m
ok 60 - blame -L multiple (overlapping)(B[m
ok 58 - blame -L multiple (adjacent)(B[m
ok 197 - grep -G -F -P -E pattern(B[m
ok 2 - blame runs on unconflicted file while other file has conflicts(B[m
ok 61 - blame -L multiple (overlapping: unordered)(B[m
ok 59 - blame -L multiple (adjacent: unordered)(B[m
ok 3 - blame does not crash with conflicted file in stages 1,3(B[m
ok 198 - grep pattern with grep.patternType=fixed, =basic, =perl, =extended(B[m
[34mok 199 # skip grep -G -F -E -P pattern (missing PCRE)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
[34mok 200 # skip grep pattern with grep.patternType=fixed, =basic, =extended, =perl (missing PCRE)(B[m
[34mok 201 # skip grep -P pattern with grep.patternType=fixed (missing PCRE)(B[m
*** t8006-blame-textconv.sh ***
ok 62 - blame -L multiple (superset/subset)(B[m
ok 60 - blame -L multiple (overlapping)(B[m
ok 16 - blame path that used to be a directory(B[m
ok 202 - grep -F pattern with grep.patternType=basic(B[m
ok 108 - "No commits yet" should be noted in status output(B[m
ok 63 - blame -L multiple (superset/subset: unordered)(B[m
ok 61 - blame -L multiple (overlapping: unordered)(B[m
ok 203 - grep -G pattern with grep.patternType=fixed(B[m
ok 17 - blame to a commit with no author name(B[m
ok 64 - blame -L /RE/ (relative)(B[m
ok 62 - blame -L multiple (superset/subset)(B[m
ok 204 - grep -E pattern with grep.patternType=fixed(B[m
ok 1 - setup the repository(B[m
ok 18 - blame -L with invalid start(B[m
ok 65 - blame -L /RE/ (relative: no preceding range)(B[m
ok 63 - blame -L multiple (superset/subset: unordered)(B[m
ok 2 - blame respects i18n.commitencoding(B[m
ok 19 - blame -L with invalid end(B[m
ok 66 - blame -L /RE/ (relative: adjacent)(B[m
ok 64 - blame -L /RE/ (relative)(B[m
ok 67 - blame -L /RE/ (relative: not found)(B[m
ok 20 - blame parses <end> part of -L(B[m
ok 3 - blame respects i18n.logoutputencoding(B[m
ok 65 - blame -L /RE/ (relative: no preceding range)(B[m
ok 68 - blame -L /RE/ (relative: end-of-file)(B[m
ok 21 - blame -Ln,-(n+1)(B[m
ok 39 - difftool --tool-help(B[m
ok 66 - blame -L /RE/ (relative: adjacent)(B[m
ok 69 - blame -L ^/RE/ (absolute)(B[m
ok 4 - blame respects --encoding=UTF-8(B[m
ok 22 - indent of line numbers, nine lines(B[m
ok 67 - blame -L /RE/ (relative: not found)(B[m
ok 70 - blame -L ^/RE/ (absolute: no preceding range)(B[m
ok 106 - clone active submodule without submodule url set(B[m
ok 1 - setup (B[m
ok 68 - blame -L /RE/ (relative: end-of-file)(B[m
ok 23 - indent of line numbers, ten lines(B[m
ok 5 - blame respects --encoding=none(B[m
ok 205 - grep --color, separator(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 71 - blame -L ^/RE/ (absolute: not found)(B[m
*** t8007-cat-file-textconv.sh ***
ok 2 - no filter specified(B[m
ok 69 - blame -L ^/RE/ (absolute)(B[m
ok 206 - grep --break(B[m
ok 40 - setup change in subdirectory(B[m
ok 24 - setup file with CRLF newlines(B[m
ok 72 - blame -L ^/RE/ (absolute: end-of-file)(B[m
ok 3 - setup textconv filters(B[m
ok 70 - blame -L ^/RE/ (absolute: no preceding range)(B[m
ok 207 - grep --break with context(B[m
ok 71 - blame -L ^/RE/ (absolute: not found)(B[m
ok 25 - blame file with CRLF core.autocrlf true(B[m
ok 4 - blame with --no-textconv(B[m
ok 208 - grep --heading(B[m
ok 109 - "No commits yet" should not be noted in status output(B[m
ok 72 - blame -L ^/RE/ (absolute: end-of-file)(B[m
ok 26 - blame file with CRLF attributes text(B[m
ok 73 - setup -L :regex(B[m
ok 5 - basic blame on last commit(B[m
ok 41 - difftool -d with growing paths(B[m
ok 74 - blame -L :literal(B[m
ok 8 - git merge: replace submodule containing a .git directory with a directory must fail(B[m
ok 75 - blame -L :regex(B[m
ok 27 - blame file with CRLF core.autocrlf=true(B[m
ok 73 - setup -L :regex(B[m
ok 1 - setup (B[m
ok 76 - blame -L :nomatch(B[m
ok 6 - blame --textconv going through revisions(B[m
ok 42 - difftool -d --no-symlinks(B[m
ok 74 - blame -L :literal(B[m
ok 2 - no filter specified(B[m
ok 209 - mimic ack-grep --group(B[m
ok 77 - blame -L :RE (relative)(B[m
[34mok 210 # skip grep -E "^ " (missing PCRE)(B[m
[34mok 211 # skip grep -P "^ " (missing PCRE)(B[m
ok 75 - blame -L :regex(B[m
ok 3 - setup textconv filters(B[m
ok 78 - blame -L :RE (relative: no preceding range)(B[m
ok 76 - blame -L :nomatch(B[m
ok 43 - difftool -d --symlinks(B[m
ok 4 - cat-file without --textconv(B[m
ok 7 - blame --textconv with local changes(B[m
ok 79 - blame -L :RE (relative: not found)(B[m
ok 5 - mergetool crlf(B[m
ok 77 - blame -L :RE (relative)(B[m
ok 8 - setup +cachetextconv(B[m
ok 5 - cat-file without --textconv on previous commit(B[m
ok 80 - blame -L :RE (relative: end-of-file)(B[m
ok 78 - blame -L :RE (relative: no preceding range)(B[m
ok 28 - blame coalesce(B[m
ok 44 - difftool --dir-diff --no-symlinks(B[m
ok 81 - blame -L ^:RE (absolute)(B[m
[32m# passed all 28 test(s)(B[m
[36m1..28(B[m
ok 6 - cat-file --textconv on last commit(B[m
ok 79 - blame -L :RE (relative: not found)(B[m
*** t8008-blame-formats.sh ***
ok 82 - blame -L ^:RE (absolute: no preceding range)(B[m
ok 80 - blame -L :RE (relative: end-of-file)(B[m
ok 45 - difftool --dir-diff --symlinks(B[m
ok 83 - blame -L ^:RE (absolute: not found)(B[m
ok 7 - cat-file --textconv on previous commit(B[m
ok 81 - blame -L ^:RE (absolute)(B[m
ok 107 - clone --recurse-submodules with a pathspec works(B[m
ok 8 - cat-file without --textconv (symlink)(B[m
ok 48 - git reset --keep: modified submodule does not update submodule work tree to invalid commit(B[m
ok 84 - blame -L ^:RE (absolute: end-of-file)(B[m
ok 82 - blame -L ^:RE (absolute: no preceding range)(B[m
ok 46 - difftool --dir-diff ignores --prompt --no-symlinks(B[m
ok 9 - cat-file --textconv on index (symlink)(B[m
ok 212 - grep --color -e A -e B with context(B[m
ok 83 - blame -L ^:RE (absolute: not found)(B[m
ok 9 - blame --textconv works with textconvcache(B[m
ok 10 - cat-file --textconv on HEAD (symlink)(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 10 - setup -cachetextconv(B[m
*** t8009-blame-vs-topicbranches.sh ***
ok 47 - difftool --dir-diff ignores --prompt --symlinks(B[m
ok 84 - blame -L ^:RE (absolute: end-of-file)(B[m
ok 110 - "Initial commit" should be noted in commit template(B[m
ok 85 - setup incremental(B[m
ok 11 - make a new commit(B[m
ok 86 - blame empty(B[m
ok 87 - blame -L 0 empty(B[m
ok 48 - difftool --dir-diff branch from subdirectory --no-symlinks(B[m
ok 85 - setup incremental(B[m
ok 88 - blame -L 1 empty(B[m
ok 1 - setup(B[m
ok 12 - blame from previous revision(B[m
ok 89 - blame -L 2 empty(B[m
ok 86 - blame empty(B[m
ok 2 - normal blame output(B[m
ok 13 - blame with --no-textconv (on symlink)(B[m
ok 87 - blame -L 0 empty(B[m
ok 213 - grep --color -e A --and -e B with context(B[m
ok 90 - blame half(B[m
ok 3 - blame --porcelain output(B[m
ok 49 - difftool --dir-diff branch from subdirectory --symlinks(B[m
ok 88 - blame -L 1 empty(B[m
ok 14 - blame --textconv (on symlink)(B[m
ok 91 - blame -L 0 half(B[m
ok 4 - blame --line-porcelain output(B[m
ok 89 - blame -L 2 empty(B[m
ok 92 - blame -L 1 half(B[m
ok 15 - make another new commit(B[m
ok 90 - blame half(B[m
ok 93 - blame -L 2 half(B[m
ok 50 - difftool --dir-diff v1 from subdirectory --no-symlinks(B[m
ok 91 - blame -L 0 half(B[m
ok 94 - blame -L 3 half(B[m
ok 5 - --porcelain detects first non-blank line as subject(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
*** t8010-cat-file-filters.sh ***
ok 92 - blame -L 1 half(B[m
ok 95 - blame full(B[m
ok 93 - blame -L 2 half(B[m
ok 96 - blame -L 0 full(B[m
ok 51 - difftool --dir-diff v1 from subdirectory --symlinks(B[m
ok 94 - blame -L 3 half(B[m
ok 97 - blame -L 1 full(B[m
[33mnot ok 9 - git merge: replace submodule with a file must fail # TODO known breakage(B[m
ok 6 - mergetool in subdir(B[m
ok 95 - blame full(B[m
ok 214 - grep --color -e A --and --not -e B with context(B[m
ok 98 - blame -L 2 full(B[m
ok 16 - blame on last commit (-C -C, symlink)(B[m
ok 96 - blame -L 0 full(B[m
ok 99 - blame -L 3 full(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 111 - "Initial commit" should not be noted in commit template(B[m
ok 52 - difftool --dir-diff branch from subdirectory w/ pathspec --no-symlinks(B[m
ok 100 - blame -L(B[m
*** t8011-blame-split-file.sh ***
ok 97 - blame -L 1 full(B[m
ok 101 - blame -L X,+(B[m
ok 98 - blame -L 2 full(B[m
ok 1 - setup (B[m
ok 102 - blame -L X,-(B[m
ok 53 - difftool --dir-diff branch from subdirectory w/ pathspec --symlinks(B[m
ok 99 - blame -L 3 full(B[m
ok 1 - setup(B[m
ok 103 - blame -L X (non-numeric X)(B[m
ok 2 - no filters with `git show`(B[m
ok 100 - blame -L(B[m
ok 104 - blame -L X,Y (non-numeric Y)(B[m
ok 2 - blame --reverse --first-parent finds A1(B[m
ok 3 - no filters with cat-file(B[m
ok 101 - blame -L X,+(B[m
[32m# passed all 2 test(s)(B[m
[36m1..2(B[m
ok 105 - blame -L X,+N (non-numeric N)(B[m
ok 102 - blame -L X,-(B[m
ok 54 - difftool --dir-diff v1 from subdirectory w/ pathspec --no-symlinks(B[m
*** t8012-blame-colors.sh ***
ok 4 - cat-file --filters converts to worktree version(B[m
ok 106 - blame -L X,-N (non-numeric N)(B[m
ok 103 - blame -L X (non-numeric X)(B[m
ok 107 - blame -L ,^/RE/(B[m
ok 104 - blame -L X,Y (non-numeric Y)(B[m
ok 5 - cat-file --filters --path=<path> works(B[m
ok 215 - grep --color -e A --and -e B -p with context(B[m
ok 55 - difftool --dir-diff v1 from subdirectory w/ pathspec --symlinks(B[m
ok 105 - blame -L X,+N (non-numeric N)(B[m
ok 108 - annotate old revision(B[m
ok 106 - blame -L X,-N (non-numeric N)(B[m
[32m# passed all 108 test(s)(B[m
[36m1..108(B[m
ok 108 - clone with multiple --recurse-submodules options(B[m
ok 6 - cat-file --textconv --path=<path> works(B[m
ok 107 - blame -L ,^/RE/(B[m
ok 216 - grep can find things only in the work tree(B[m
ok 56 - difftool --dir-diff from subdirectory with GIT_DIR set --no-symlinks(B[m
*** t8013-blame-ignore-revs.sh ***
ok 108 - blame untracked file in empty repo(B[m
ok 7 - --path=<path> complains without --textconv/--filters(B[m
ok 109 - blame --show-email(B[m
ok 1 - setup A lines(B[m
ok 57 - difftool --dir-diff from subdirectory with GIT_DIR set --symlinks(B[m
ok 8 - --textconv/--filters complain without path(B[m
ok 217 - grep can find things only in the work tree (i-t-a)(B[m
ok 2 - blame 1 author(B[m
ok 1 - setup split file case(B[m
ok 110 - setup showEmail tests(B[m
ok 2 - setup simulated porcelain(B[m
ok 111 - blame with no options and no config(B[m
ok 9 - cat-file --textconv --batch works(B[m
ok 3 - generate --porcelain output(B[m
ok 3 - blame in a bare repo without starting commit(B[m
[32m# passed all 9 test(s)(B[m
[36m1..9(B[m
ok 58 - difftool --dir-diff when worktree file is missing --no-symlinks(B[m
*** t8014-blame-ignore-fuzzy.sh ***
ok 218 - grep does not search work tree with assume unchanged(B[m
ok 4 - porcelain output finds correct commits(B[m
ok 5 - porcelain output shows correct filenames(B[m
ok 49 - git reset --keep: modified submodule does not update submodule work tree from invalid commit(B[m
ok 112 - blame with showemail options(B[m
ok 59 - difftool --dir-diff when worktree file is missing --symlinks(B[m
ok 4 - blame by tag objects(B[m
ok 6 - porcelain output shows correct previous pointer(B[m
ok 219 - grep can find things only in the index(B[m
ok 5 - setup B lines(B[m
ok 7 - generate --line-porcelain output(B[m
ok 6 - blame 2 authors(B[m
ok 8 - line-porcelain output finds correct commits(B[m
ok 9 - line-porcelain output shows correct filenames(B[m
ok 220 - grep does not report i-t-a with -L --cached(B[m
ok 7 - setup B1 lines (branch1)(B[m
ok 113 - blame with showEmail config false(B[m
ok 1 - setup(B[m
ok 10 - line-porcelain output shows correct previous pointer(B[m
ok 8 - blame 2 authors + 1 branch1 author(B[m
[32m# passed all 10 test(s)(B[m
[36m1..10(B[m
ok 112 - --no-optional-locks prevents index update(B[m
[32m# passed all 112 test(s)(B[m
[36m1..112(B[m
*** t9001-send-email.sh ***
ok 221 - grep does not report i-t-a and assume unchanged with -L(B[m
[32m# passed all 221 test(s)(B[m
[36m1..221(B[m
ok 114 - blame with showEmail config true(B[m
ok 2 - ignore_rev_changing_lines(B[m
*** t9002-column.sh ***
ok 9 - setup B2 lines (branch2)(B[m
*** t9003-help-autocorrect.sh ***
[33mnot ok 10 - git merge: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 10 - blame 2 authors + 1 branch2 author(B[m
ok 115 - set up abbrev tests(B[m
ok 11 - merge branch1 & branch2(B[m
ok 3 - ignore_rev_adding_unblamable_lines(B[m
[34mok 1 # skip prepare reference tree (missing PERL)(B[m
ok 12 - blame 2 authors + 2 merged-in authors(B[m
[34mok 2 # skip Setup helper tool (missing PERL)(B[m
[34mok 3 # skip Extract patches (missing PERL)(B[m
[34mok 4 # skip No confirm with --suppress-cc (missing PERL)(B[m
[34mok 5 # skip No confirm with --confirm=never (missing PERL)(B[m
[34mok 6 # skip No confirm with sendemail.confirm=never (missing PERL)(B[m
ok 116 - blame --abbrev=<n> works(B[m
[34mok 7 # skip Send patches (missing PERL)(B[m
ok 13 - blame --first-parent blames merge for branch1(B[m
ok 1 - setup(B[m
[34mok 8 # skip setup expect (missing PERL)(B[m
ok 60 - difftool --dir-diff with unmerged files --no-symlinks(B[m
[34mok 9 # skip Verify commandline (missing PERL)(B[m
[34mok 10 # skip Send patches with --envelope-sender (missing PERL)(B[m
[34mok 11 # skip setup expect (missing PERL)(B[m
[34mok 12 # skip Verify commandline (missing PERL)(B[m
ok 2 - never(B[m
[34mok 13 # skip Send patches with --envelope-sender=auto (missing PERL)(B[m
ok 14 - blame ancestor(B[m
[34mok 14 # skip setup expect (missing PERL)(B[m
[34mok 15 # skip Verify commandline (missing PERL)(B[m
[34mok 16 # skip setup expect for cc trailer (missing PERL)(B[m
[34mok 17 # skip cc trailer with various syntax (missing PERL)(B[m
ok 50 - git reset --keep: added submodule doesn't remove untracked unignored file with same name(B[m
ok 4 - ignore_revs_from_files(B[m
[34mok 18 # skip setup fake get_maintainer.pl script for cc trailer (missing PERL)(B[m
[34mok 19 # skip cc trailer with get_maintainer.pl output (missing PERL)(B[m
ok 3 - always(B[m
ok 15 - blame great-ancestor(B[m
ok 117 - blame -l aligns regular and boundary commits(B[m
[34mok 20 # skip setup expect (missing PERL)(B[m
[34mok 21 # skip self name is suppressed (missing PERL)(B[m
[34mok 22 # skip self name with dot is suppressed (missing PERL)(B[m
[34mok 23 # skip non-ascii self name is suppressed (missing PERL)(B[m
[34mok 24 # skip long non-ascii self name is suppressed (missing PERL)(B[m
ok 4 - 80 columns(B[m
[34mok 25 # skip sanitized self name is suppressed (missing PERL)(B[m
ok 16 - setup evil merge(B[m
[34mok 26 # skip Show all headers (missing PERL)(B[m
ok 1 - setup(B[m
[34mok 27 # skip Prompting works (missing PERL)(B[m
ok 17 - blame evil merge(B[m
ok 5 - ignore_revs_from_configs_and_files(B[m
ok 5 - COLUMNS = 1(B[m
ok 118 - blame --abbrev=40 behaves like -l(B[m
[34mok 28 # skip implicit ident is allowed (missing AUTOIDENT,PERL of PERL,AUTOIDENT)(B[m
[34mok 29 # skip broken implicit ident aborts send-email (missing PERL of PERL,!AUTOIDENT)(B[m
[34mok 30 # skip setup tocmd and cccmd scripts (missing PERL)(B[m
[34mok 31 # skip tocmd works (missing PERL)(B[m
[34mok 32 # skip cccmd works (missing PERL)(B[m
[34mok 33 # skip reject long lines (missing PERL)(B[m
ok 6 - width = 1(B[m
ok 2 - autocorrect showing candidates(B[m
[34mok 34 # skip no patch was sent (missing PERL)(B[m
[34mok 35 # skip Author From: in message body (missing PERL)(B[m
ok 119 - --no-abbrev works like --abbrev=40(B[m
[34mok 36 # skip Author From: not in message body (missing PERL)(B[m
[34mok 37 # skip allow long lines with --no-validate (missing PERL)(B[m
ok 6 - override_ignore_revs_file(B[m
[34mok 38 # skip short lines with auto encoding are 8bit (missing PERL)(B[m
ok 7 - 20 columns(B[m
[34mok 39 # skip long lines with auto encoding are quoted-printable (missing PERL)(B[m
ok 120 - --exclude-promisor-objects does not BUG-crash(B[m
[34mok 40 # skip carriage returns with auto encoding are quoted-printable (missing PERL)(B[m
[34mok 41 # skip --validate passes with encoding auto (missing PERL)(B[m
[32m# passed all 120 test(s)(B[m
[36m1..120(B[m
[34mok 42 # skip --validate passes with encoding quoted-printable (missing PERL)(B[m
[34mok 43 # skip --validate passes with encoding base64 (missing PERL)(B[m
[34mok 44 # skip --transfer-encoding=7bit produces correct header (missing PERL)(B[m
[34mok 45 # skip --transfer-encoding=8bit produces correct header (missing PERL)(B[m
ok 8 - 20 columns, nodense(B[m
[34mok 46 # skip --transfer-encoding=quoted-printable produces correct header (missing PERL)(B[m
ok 3 - autocorrect running commands(B[m
[34mok 47 # skip --transfer-encoding=base64 produces correct header (missing PERL)(B[m
[34mok 48 # skip Invalid In-Reply-To (missing PERL)(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
[34mok 49 # skip Valid In-Reply-To when prompting (missing PERL)(B[m
[34mok 50 # skip In-Reply-To without --chain-reply-to (missing PERL)(B[m
*** t9004-example.sh ***
*** t9010-svn-fe.sh ***
ok 9 - 20 columns, dense(B[m
[34mok 51 # skip In-Reply-To with --chain-reply-to (missing PERL)(B[m
[34mok 52 # skip setup fake editor (missing PERL)(B[m
ok 7 - bad_files_and_revs(B[m
[34mok 53 # skip --compose works (missing PERL)(B[m
[34mok 54 # skip first message is compose text (missing PERL)(B[m
[34mok 55 # skip second message is patch (missing PERL)(B[m
[34mok 56 # skip setup expect (missing PERL)(B[m
ok 10 - 20 columns, padding 2(B[m
[34mok 57 # skip sendemail.cc set (missing PERL)(B[m
[34mok 58 # skip setup expect (missing PERL)(B[m
[34mok 59 # skip sendemail.cc unset (missing PERL)(B[m
[34mok 60 # skip setup expect (missing PERL)(B[m
[34mok 61 # skip sendemail.cccmd (missing PERL)(B[m
ok 61 - difftool --dir-diff with unmerged files --symlinks(B[m
[34mok 62 # skip setup expect (missing PERL)(B[m
ok 11 - 20 columns, indented(B[m
ok 8 - mark_unblamable_lines(B[m
[34mok 63 # skip --suppress-cc=all (missing PERL)(B[m
[34mok 64 # skip setup expect (missing PERL)(B[m
[34mok 65 # skip --suppress-cc=body (missing PERL)(B[m
[34mok 66 # skip setup expect (missing PERL)(B[m
[34mok 67 # skip --suppress-cc=body --suppress-cc=cccmd (missing PERL)(B[m
[34mok 68 # skip setup expect (missing PERL)(B[m
[34mok 69 # skip --suppress-cc=sob (missing PERL)(B[m
ok 12 - 20 columns, row first(B[m
[34mok 70 # skip setup expect (missing PERL)(B[m
[34mok 71 # skip --suppress-cc=bodycc (missing PERL)(B[m
[34mok 72 # skip setup expect (missing PERL)(B[m
[34mok 73 # skip --suppress-cc=cc (missing PERL)(B[m
[34mok 74 # skip --confirm=always (missing PERL)(B[m
[34mok 75 # skip --confirm=auto (missing PERL)(B[m
ok 13 - 20 columns, row first, nodense(B[m
ok 62 - difftool --dir-diff --symlinks without unstaged changes(B[m
[34mok 76 # skip --confirm=cc (missing PERL)(B[m
[34mok 77 # skip --confirm=compose (missing PERL)(B[m
[34mok 78 # skip confirm by default (due to cc) (missing PERL)(B[m
ok 1 - decorate(B[m
[34mok 79 # skip confirm by default (due to --compose) (missing PERL)(B[m
[32m# passed all 1 test(s)(B[m
[36m1..1(B[m
[34mok 80 # skip confirm detects EOF (inform assumes y) (missing PERL)(B[m
ok 14 - 20 columns, row first, dense(B[m
[34mok 81 # skip confirm detects EOF (auto causes failure) (missing PERL)(B[m
[34mok 82 # skip confirm does not loop forever (missing PERL)(B[m
*** t9011-svn-da.sh ***
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
[34mok 83 # skip utf8 Cc is rfc2047 encoded (missing PERL)(B[m
[34mok 84 # skip --compose adds MIME for utf8 body (missing PERL)(B[m
*** t9020-remote-svn.sh ***
[34mok 85 # skip --compose respects user mime type (missing PERL)(B[m
ok 9 - mark_ignored_lines(B[m
[34mok 86 # skip --compose adds MIME for utf8 subject (missing PERL)(B[m
[34mok 87 # skip utf8 author is correctly passed on (missing PERL)(B[m
[34mok 88 # skip utf8 sender is not duplicated (missing PERL)(B[m
[34mok 89 # skip sendemail.composeencoding works (missing PERL)(B[m
ok 1 - empty dump(B[m
[34mok 90 # skip --compose-encoding works (missing PERL)(B[m
[34mok 91 # skip --compose-encoding overrides sendemail.composeencoding (missing PERL)(B[m
[34mok 92 # skip --compose-encoding adds correct MIME for subject (missing PERL)(B[m
[34mok 93 # skip detects ambiguous reference/file conflict (missing PERL)(B[m
ok 63 - difftool --dir-diff syncs worktree with unstaged change --no-symlinks(B[m
[34mok 94 # skip feed two files (missing PERL)(B[m
[34mok 95 # skip in-reply-to but no threading (missing PERL)(B[m
[34mok 96 # skip no in-reply-to and no threading (missing PERL)(B[m
[34mok 97 # skip threading but no chain-reply-to (missing PERL)(B[m
ok 10 - mark_unblamable_lines_intermediate(B[m
[34mok 98 # skip sendemail.to works (missing PERL)(B[m
[34mok 99 # skip setup sendemail.identity (missing PERL)(B[m
[34mok 100 # skip sendemail.identity: reads the correct identity config (missing PERL)(B[m
[34mok 101 # skip sendemail.identity: identity overrides sendemail.identity (missing PERL)(B[m
[34mok 102 # skip sendemail.identity: --no-identity clears previous identity (missing PERL)(B[m
ok 2 - v4 dumps not supported(B[m
[34mok 103 # skip sendemail.identity: bool identity variable existence overrides (missing PERL)(B[m
[34mok 104 # skip sendemail.identity: bool variable fallback (missing PERL)(B[m
ok 64 - difftool --dir-diff syncs worktree with unstaged change --symlinks(B[m
[34mok 105 # skip --no-to overrides sendemail.to (missing PERL)(B[m
[34mok 106 # skip sendemail.cc works (missing PERL)(B[m
[34mok 107 # skip --no-cc overrides sendemail.cc (missing PERL)(B[m
[34mok 108 # skip sendemail.bcc works (missing PERL)(B[m
[34mok 109 # skip --no-bcc overrides sendemail.bcc (missing PERL)(B[m
ok 1 - reject empty delta(B[m
[36m1..0 # SKIP skipping remote-svn tests, python not available(B[m
[34mok 110 # skip patches To headers are used by default (missing PERL)(B[m
[34mok 111 # skip patches To headers are appended to (missing PERL)(B[m
*** t9101-git-svn-props.sh ***
[34mok 112 # skip To headers from files reset each patch (missing PERL)(B[m
[34mok 113 # skip setup expect (missing PERL)(B[m
[33mnot ok 3 - empty revision # TODO known breakage(B[m
[34mok 114 # skip setup expect (missing PERL)(B[m
ok 2 - delta can empty file(B[m
[34mok 115 # skip ASCII subject is not RFC2047 quoted (missing PERL)(B[m
[34mok 116 # skip setup expect (missing PERL)(B[m
[34mok 117 # skip asks about and fixes 8bit encodings (missing PERL)(B[m
[34mok 118 # skip sendemail.8bitEncoding works (missing PERL)(B[m
ok 3 - reject svndiff2(B[m
[34mok 119 # skip --8bit-encoding overrides sendemail.8bitEncoding (missing PERL)(B[m
ok 65 - difftool --dir-diff syncs worktree without unstaged change --no-symlinks(B[m
[34mok 120 # skip setup expect (missing PERL)(B[m
[34mok 121 # skip setup expect (missing PERL)(B[m
[34mok 122 # skip --8bit-encoding also treats subject (missing PERL)(B[m
[34mok 123 # skip setup expect (missing PERL)(B[m
ok 4 - one-window empty delta(B[m
[34mok 124 # skip --transfer-encoding overrides sendemail.transferEncoding (missing PERL)(B[m
[34mok 125 # skip sendemail.transferEncoding via config (missing PERL)(B[m
[34mok 126 # skip sendemail.transferEncoding via cli (missing PERL)(B[m
[34mok 127 # skip setup expect (missing PERL)(B[m
[34mok 128 # skip 8-bit and sendemail.transferencoding=quoted-printable (missing PERL)(B[m
[34mok 129 # skip setup expect (missing PERL)(B[m
[34mok 130 # skip 8-bit and sendemail.transferencoding=base64 (missing PERL)(B[m
[34mok 131 # skip setup expect (missing PERL)(B[m
ok 11 - ignored_chunk_negative_parent_size(B[m
ok 66 - difftool --dir-diff syncs worktree without unstaged change --symlinks(B[m
[34mok 132 # skip convert from quoted-printable to base64 (missing PERL)(B[m
[34mok 133 # skip setup expect (missing PERL)(B[m
ok 5 - reject incomplete window header(B[m
[34mok 134 # skip setup expect (missing PERL)(B[m
[34mok 135 # skip CRLF and sendemail.transferencoding=quoted-printable (missing PERL)(B[m
ok 4 - empty properties(B[m
[34mok 136 # skip setup expect (missing PERL)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[34mok 137 # skip CRLF and sendemail.transferencoding=base64 (missing PERL)(B[m
[34mok 138 # skip refusing to send cover letter template (missing PERL)(B[m
*** t9102-git-svn-deep-rmdir.sh ***
[34mok 139 # skip --force sends cover letter template anyway (missing PERL)(B[m
[34mok 140 # skip to-cover adds To to all mail (missing PERL)(B[m
[34mok 141 # skip cc-cover adds Cc to all mail (missing PERL)(B[m
[34mok 142 # skip tocover adds To to all mail (missing PERL)(B[m
ok 6 - reject declared delta longer than actual delta(B[m
[34mok 143 # skip cccover adds Cc to all mail (missing PERL)(B[m
[34mok 144 # skip escaped quotes in sendemail.aliasfiletype=mutt (missing PERL)(B[m
[34mok 145 # skip sendemail.aliasfiletype=mailrc (missing PERL)(B[m
[34mok 146 # skip sendemail.aliasfile=~/.mailrc (missing PERL)(B[m
ok 67 - difftool --no-symlinks does not overwrite working tree file (B[m
[34mok 147 # skip --dump-aliases sendmail format (missing PERL)(B[m
ok 7 - two-window empty delta(B[m
[34mok 148 # skip --dump-aliases mutt format (missing PERL)(B[m
[34mok 149 # skip --dump-aliases mailrc format (missing PERL)(B[m
[34mok 150 # skip --dump-aliases pine format (missing PERL)(B[m
ok 8 - noisy zeroes(B[m
[34mok 151 # skip --dump-aliases gnus format (missing PERL)(B[m
ok 5 - author name and commit message(B[m
ok 9 - reject variable-length int in magic(B[m
ok 68 - difftool --no-symlinks detects conflict (B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 152 - --dump-aliases must be used alone(B[m
[34mok 153 # skip aliases and sendemail.identity (missing PERL)(B[m
*** t9103-git-svn-tracked-directory-removed.sh ***
[34mok 154 # skip sendemail.aliasfiletype=sendmail (missing PERL)(B[m
[34mok 155 # skip sendmail aliases line folding (missing PERL)(B[m
[34mok 156 # skip sendmail aliases tolerate bogus line folding (missing PERL)(B[m
ok 10 - reject truncated integer(B[m
[34mok 157 # skip sendmail aliases empty (missing PERL)(B[m
[34mok 158 # skip alias support in To header (missing PERL)(B[m
[34mok 159 # skip alias support in Cc header (missing PERL)(B[m
[34mok 160 # skip tocmd works with aliases (missing PERL)(B[m
[34mok 161 # skip cccmd works with aliases (missing PERL)(B[m
ok 11 - git merge: modified submodule does not update submodule work tree(B[m
[34mok 162 # skip --[no-]xmailer without any configuration (missing PERL)(B[m
ok 11 - nonempty (but unused) preimage view(B[m
[34mok 163 # skip --[no-]xmailer with sendemail.xmailer=true (missing PERL)(B[m
[34mok 164 # skip --[no-]xmailer with sendemail.xmailer=false (missing PERL)(B[m
[34mok 165 # skip setup expected-list (missing PERL)(B[m
[34mok 166 # skip use email list in --cc --to and --bcc (missing PERL)(B[m
ok 6 - unsupported properties are ignored(B[m
[34mok 167 # skip aliases work with email list (missing PERL)(B[m
ok 12 - ignore_merge(B[m
ok 12 - preimage view: right endpoint cannot backtrack(B[m
[34mok 168 # skip leading and trailing whitespaces are removed (missing PERL)(B[m
[32m# passed all 12 test(s)(B[m
[36m1..12(B[m
[34mok 169 # skip invoke hook (missing PERL)(B[m
[34mok 170 # skip test that send-email works outside a repo (missing PERL)(B[m
*** t9104-git-svn-follow-parent.sh ***
[32m# passed all 170 test(s)(B[m
[36m1..170(B[m
ok 51 - git reset --merge: added submodule creates empty directory(B[m
*** t9105-git-svn-commit-diff.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 13 - preimage view: left endpoint can advance(B[m
*** t9106-git-svn-commit-diff-clobber.sh ***
ok 14 - preimage view: offsets compared by value(B[m
[33mnot ok 7 - timestamp and empty file # TODO known breakage(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 15 - preimage view: reject truncated preimage(B[m
*** t9107-git-svn-migrate.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9108-git-svn-glob.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 16 - forbid unconsumed inline data(B[m
*** t9109-git-svn-multi-glob.sh ***
ok 17 - reject truncated inline data(B[m
ok 18 - reject truncated inline data (after instruction section)(B[m
ok 8 - directory with files(B[m
ok 109 - clone and subsequent updates correctly auto-initialize submodules(B[m
ok 19 - copyfrom_data(B[m
ok 69 - difftool properly honors gitlink and core.worktree(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 7 - mergetool on file in parent dir(B[m
*** t9110-git-svn-use-svm-props.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 20 - multiple copyfrom_data(B[m
*** t9111-git-svn-use-svnsync-props.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9112-git-svn-md5less-file.sh ***
ok 21 - incomplete multiple insn(B[m
ok 22 - catch attempt to copy missing data(B[m
ok 23 - copyfrom target to repeat data(B[m
ok 9 - branch name with backslash(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9113-git-svn-dcommit-new-file.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 24 - copyfrom target out of order(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9114-git-svn-dcommit-merge.sh ***
*** t9115-git-svn-dcommit-funky-renames.sh ***
ok 25 - catch copyfrom future(B[m
ok 10 - node without action(B[m
ok 26 - copy to sustain(B[m
ok 70 - difftool --dir-diff symlinked directories(B[m
ok 27 - catch copy that overflows(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9116-git-svn-log.sh ***
ok 11 - action: add node without text(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 28 - copyfrom source(B[m
*** t9117-git-svn-init-clone.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 18 - blame huge graft(B[m
*** t9118-git-svn-funky-branch-names.sh ***
ok 29 - copy backwards(B[m
ok 19 - setup incomplete line(B[m
ok 30 - offsets are relative to window(B[m
ok 20 - blame incomplete line(B[m
ok 31 - example from notes/svndiff(B[m
[32m# passed all 31 test(s)(B[m
[36m1..31(B[m
*** t9119-git-svn-info.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 21 - setup edits(B[m
*** t9120-git-svn-clone-with-percent-escapes.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[33mnot ok 12 - change file mode but keep old content # TODO known breakage(B[m
*** t9121-git-svn-fetch-renamed-dir.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9122-git-svn-author.sh ***
ok 22 - blame edits(B[m
ok 23 - setup obfuscated email(B[m
ok 24 - blame obfuscated email(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9123-git-svn-rebuild-with-rewriteroot.sh ***
ok 13 - NUL in property value(B[m
*** t9124-git-svn-dcommit-auto-props.sh ***
ok 25 - blame -L 1 (all)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9125-git-svn-multi-glob-branch-names.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9126-git-svn-follow-deleted-readded-directory.sh ***
ok 26 - blame -L , (all)(B[m
ok 27 - blame -L X (X to end)(B[m
ok 52 - git reset --merge: added submodule leaves existing empty directory alone(B[m
ok 28 - blame -L X, (X to end)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9127-git-svn-partial-rebuild.sh ***
ok 29 - blame -L ,Y (up to Y)(B[m
*** t9128-git-svn-cmd-branch.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9129-git-svn-i18n-commitencoding.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 12 - git merge: modified submodule does not update submodule work tree to invalid commit(B[m
ok 30 - blame -L X,X(B[m
*** t9130-git-svn-authors-file.sh ***
ok 14 - NUL in log message, file content, and property name(B[m
ok 31 - blame -L X,Y(B[m
ok 32 - blame -L Y,X (undocumented)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 71 - difftool --dir-diff handles modified symlinks(B[m
ok 33 - blame -L -X(B[m
*** t9131-git-svn-empty-symlink.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9132-git-svn-broken-symlink.sh ***
ok 34 - blame -L 0(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 35 - blame -L ,0(B[m
*** t9133-git-svn-nested-git-repo.sh ***
*** t9134-git-svn-ignore-paths.sh ***
ok 36 - blame -L ,+0(B[m
ok 15 - change file mode and reiterate content(B[m
ok 37 - blame -L X,+0(B[m
ok 72 - outside worktree(B[m
ok 38 - blame -L X,+1(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9135-git-svn-moved-branch-empty-file.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 8 - mergetool skips autoresolved(B[m
ok 39 - blame -L X,+N(B[m
*** t9136-git-svn-recreated-branch-empty-file.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 40 - blame -L ,-0(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9137-git-svn-dcommit-clobber-series.sh ***
*** t9138-git-svn-authors-prog.sh ***
ok 41 - blame -L X,-0(B[m
ok 73 - difftool --gui, --tool and --extcmd are mutually exclusive(B[m
[32m# passed all 73 test(s)(B[m
[36m1..73(B[m
[1m[31mnot ok 16 - deltas supported(B[m
#	
#		reinit_git &&
#		{
#			# (old) h + (inline) ello + (old) \n
#			printf "SVNQ%b%b%s" "Q\003\006\005\004" "\001Q\0204\001\002" "ello" |
#			q_to_nul
#		} >delta &&
#		{
#			properties \
#				svn:author author@example.com \
#				svn:date "1999-01-05T00:01:002.000000Z" \
#				svn:log "add greeting" &&
#			echo PROPS-END
#		} >props &&
#		{
#			properties \
#				svn:author author@example.com \
#				svn:date "1999-01-06T00:01:002.000000Z" \
#				svn:log "change it" &&
#			echo PROPS-END
#		} >props2 &&
#		{
#			echo SVN-fs-dump-format-version: 3 &&
#			echo &&
#			echo Revision-number: 1 &&
#			echo Prop-content-length: $(wc -c <props) &&
#			echo Content-length: $(wc -c <props) &&
#			echo &&
#			cat props &&
#			cat <<-\EOF &&
#	
#			Node-path: hello
#			Node-kind: file
#			Node-action: add
#			Prop-content-length: 10
#			Text-content-length: 3
#			Content-length: 13
#	
#			PROPS-END
#			hi
#	
#			EOF
#			echo Revision-number: 2 &&
#			echo Prop-content-length: $(wc -c <props2) &&
#			echo Content-length: $(wc -c <props2) &&
#			echo &&
#			cat props2 &&
#			cat <<-\EOF &&
#	
#			Node-path: hello
#			Node-kind: file
#			Node-action: change
#			Text-delta: true
#			Prop-content-length: 10
#			EOF
#			echo Text-content-length: $(wc -c <delta) &&
#			echo Content-length: $((10 + $(wc -c <delta))) &&
#			echo &&
#			echo PROPS-END &&
#			cat delta
#		} >delta.dump &&
#		try_dump delta.dump
#	
ok 42 - blame -L X,-1(B[m
ok 43 - blame -L X,-N(B[m
*** t9139-git-svn-non-utf8-commitencoding.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9140-git-svn-reset.sh ***
*** t9141-git-svn-multiple-branches.sh ***
ok 44 - blame -L /RE/ (RE to end)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 110 - init properly sets the config(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9142-git-svn-shallow-clone.sh ***
ok 45 - blame -L /RE/,/RE2/(B[m
*** t9143-git-svn-gc.sh ***
ok 46 - blame -L X,/RE/(B[m
ok 17 - property deltas supported(B[m
ok 47 - blame -L /RE/,Y(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9144-git-svn-old-rev_map.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9145-git-svn-master-branch.sh ***
ok 48 - blame -L /RE/,+N(B[m
*** t9146-git-svn-empty-dirs.sh ***
ok 1 - setup(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 49 - blame -L /RE/,-N(B[m
*** t9147-git-svn-include-paths.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9148-git-svn-propset.sh ***
ok 2 - Regression test for partially overlapping search ranges(B[m
ok 18 - properties on /(B[m
ok 50 - blame -L X (X == nlines)(B[m
ok 3 - Combine 3 lines into 2(B[m
ok 51 - blame -L X (X == nlines + 1)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9150-svk-mergetickets.sh ***
*** t9151-svn-mergeinfo.sh ***
ok 52 - blame -L X (X > nlines)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 4 - Add curly brackets(B[m
*** t9152-svn-empty-dirs-after-gc.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 53 - blame -L ,Y (Y == nlines)(B[m
ok 19 - deltas for typechange(B[m
*** t9153-git-svn-rewrite-uuid.sh ***
ok 5 - Combine many lines and change case(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9154-git-svn-fancy-glob.sh ***
ok 54 - blame -L ,Y (Y == nlines + 1)(B[m
ok 6 - Rename and combine lines(B[m
ok 55 - blame -L ,Y (Y > nlines)(B[m
ok 7 - Same line twice(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9155-git-svn-fetch-deleted-tag.sh ***
*** t9156-git-svn-fetch-deleted-tag-2.sh ***
*** t9157-git-svn-fetch-merge.sh ***
ok 56 - blame -L multiple (disjoint)(B[m
ok 8 - Enforce line order(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9158-git-svn-mergeinfo.sh ***
ok 57 - blame -L multiple (disjoint: unordered)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 53 - git reset --merge: replace tracked file with submodule creates empty directory(B[m
ok 9 - Expand lines and rename variables(B[m
*** t9159-git-svn-no-parent-mergeinfo.sh ***
ok 58 - blame -L multiple (adjacent)(B[m
[1m[31mnot ok 20 - deltas need not consume the whole preimage(B[m
ok 10 - Two close matches versus one less close match(B[m
#	
#		reinit_git &&
#		cat >expect <<-\EOF &&
#		OBJID
#		:120000 100644 OBJID OBJID T	postimage
#		OBJID
#		:100644 120000 OBJID OBJID T	postimage
#		OBJID
#		:000000 100644 OBJID OBJID A	postimage
#		EOF
#		echo "first preimage" >expect.1 &&
#		printf target >expect.2 &&
#		printf lnk >expect.3 &&
#		{
#			printf "SVNQ%b%b%b" "QQ\017\001\017" "\0217" "first preimage\n" |
#			q_to_nul
#		} >delta.1 &&
#		{
#			properties svn:special "*" &&
#			echo PROPS-END
#		} >symlink.props &&
#		{
#			printf "SVNQ%b%b%b" "Q\002\013\004\012" "\0201\001\001\0211" "lnk target" |
#			q_to_nul
#		} >delta.2 &&
#		{
#			printf "SVNQ%b%b" "Q\004\003\004Q" "\001Q\002\002" |
#			q_to_nul
#		} >delta.3 &&
#		{
#			cat <<-\EOF &&
#			SVN-fs-dump-format-version: 3
#	
#			Revision-number: 1
#			Prop-content-length: 10
#			Content-length: 10
#	
#			PROPS-END
#	
#			Node-path: postimage
#			Node-kind: file
#			Node-action: add
#			Text-delta: true
#			Prop-content-length: 10
#			EOF
#			echo Text-content-length: $(wc -c <delta.1) &&
#			echo Content-length: $((10 + $(wc -c <delta.1))) &&
#			echo &&
#			echo PROPS-END &&
#			cat delta.1 &&
#			cat <<-\EOF &&
#	
#			Revision-number: 2
#			Prop-content-length: 10
#			Content-length: 10
#	
#			PROPS-END
#	
#			Node-path: postimage
#			Node-kind: file
#			Node-action: change
#			Text-delta: true
#			EOF
#			echo Prop-content-length: $(wc -c <symlink.props) &&
#			echo Text-content-length: $(wc -c <delta.2) &&
#			echo Content-length: $(($(wc -c <symlink.props) + $(wc -c <delta.2))) &&
#			echo &&
#			cat symlink.props &&
#			cat delta.2 &&
#			cat <<-\EOF &&
#	
#			Revision-number: 3
#			Prop-content-length: 10
#			Content-length: 10
#	
#			PROPS-END
#	
#			Node-path: postimage
#			Node-kind: file
#			Node-action: change
#			Text-delta: true
#			Prop-content-length: 10
#			EOF
#			echo Text-content-length: $(wc -c <delta.3) &&
#			echo Content-length: $((10 + $(wc -c <delta.3))) &&
#			echo &&
#			echo PROPS-END &&
#			cat delta.3 &&
#			echo
#		} >deltapartial.dump &&
#		try_dump deltapartial.dump &&
#		{
#			git rev-list HEAD |
#			git diff-tree --root --stdin |
#			sed "s/$OID_REGEX/OBJID/g"
#		} >actual &&
#		test_cmp expect actual &&
#		git show HEAD:postimage >actual.3 &&
#		git show HEAD^:postimage >actual.2 &&
#		git show HEAD^^:postimage >actual.1 &&
#		test_cmp expect.1 actual.1 &&
#		test_cmp expect.2 actual.2 &&
#		test_cmp expect.3 actual.3
#	
ok 59 - blame -L multiple (adjacent: unordered)(B[m
ok 11 - Piggy in the middle(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 13 - git merge: modified submodule does not update submodule work tree from invalid commit(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9160-git-svn-preserve-empty-dirs.sh ***
*** t9161-git-svn-mergeinfo-push.sh ***
ok 60 - blame -L multiple (overlapping)(B[m
*** t9162-git-svn-dcommit-interactive.sh ***
ok 12 - No trailing newline(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 61 - blame -L multiple (overlapping: unordered)(B[m
*** t9163-git-svn-reset-clears-caches.sh ***
ok 13 - Reorder includes(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 21 - no hang for delta trying to read past end of preimage(B[m
*** t9164-git-svn-dcommit-concurrent.sh ***
ok 22 - set up svn repo(B[m
ok 62 - blame -L multiple (superset/subset)(B[m
[34mok 23 # skip t9135/svn.dump (missing SVNREPO)(B[m
[33m# still have 3 known breakage(s)(B[m
[1m[31m# failed 2 among remaining 20 test(s)(B[m
[36m1..23(B[m
make[2]: *** [Makefile:56: t9010-svn-fe.sh] Error 1
*** t9165-git-svn-fetch-merge-branch-of-branch.sh ***
ok 63 - blame -L multiple (superset/subset: unordered)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9166-git-svn-fetch-merge-branch-of-branch2.sh ***
*** t9167-git-svn-cmd-branch-subproject.sh ***
ok 64 - blame -L /RE/ (relative)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9168-git-svn-partially-globbed-names.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 65 - blame -L /RE/ (relative: no preceding range)(B[m
*** t9169-git-svn-dcommit-crlf.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 14 - Diff chunks with no suspects(B[m
*** t9300-fast-import.sh ***
ok 66 - blame -L /RE/ (relative: adjacent)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 67 - blame -L /RE/ (relative: not found)(B[m
*** t9301-fast-import-notes.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 68 - blame -L /RE/ (relative: end-of-file)(B[m
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9302-fast-import-unpack-limit.sh ***
*** t9303-fast-import-compression.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
ok 69 - blame -L ^/RE/ (absolute)(B[m
*** t9350-fast-export.sh ***
[36m1..0 # SKIP skipping git svn tests, NO_SVN_TESTS defined(B[m
*** t9351-fast-export-anonymize.sh ***
ok 70 - blame -L ^/RE/ (absolute: no preceding range)(B[m
ok 71 - blame -L ^/RE/ (absolute: not found)(B[m
ok 1 - empty stream succeeds(B[m
ok 14 - git merge: added submodule doesn't remove untracked unignored file with same name(B[m
ok 2 - truncated stream complains(B[m
ok 15 - position matching(B[m
ok 72 - blame -L ^/RE/ (absolute: end-of-file)(B[m
ok 1 - set up master branch(B[m
ok 3 - A: create pack from stdin(B[m
ok 1 - create loose objects on import(B[m
ok 4 - A: verify pack(B[m
ok 1 - fast-import (packed) with -c core.compression=0(B[m
ok 73 - setup -L :regex(B[m
ok 5 - A: verify commit(B[m
ok 2 - add notes with simple M command(B[m
ok 6 - A: verify tree(B[m
ok 74 - blame -L :literal(B[m
ok 2 - bigger packs are preserved(B[m
ok 7 - A: verify file2(B[m
ok 2 - fast-import (packed) with -c core.compression=9(B[m
ok 75 - blame -L :regex(B[m
ok 8 - A: verify file3(B[m
ok 76 - blame -L :nomatch(B[m
ok 1 - setup(B[m
ok 3 - add notes with simple N command(B[m
ok 16 - preserve order(B[m
ok 9 - A: verify file4(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
ok 77 - blame -L :RE (relative)(B[m
ok 3 - fast-import (packed) with -c core.compression=0 -c pack.compression=0(B[m
ok 1 - setup simple repo(B[m
ok 10 - A: verify tag/series-A(B[m
ok 78 - blame -L :RE (relative: no preceding range)(B[m
ok 4 - update existing notes with N command(B[m
*** t9500-gitweb-standalone-no-errors.sh ***
ok 2 - export anonymized stream(B[m
ok 79 - blame -L :RE (relative: not found)(B[m
ok 11 - A: verify tag/series-A-blob(B[m
ok 111 - recursive clone respects -q(B[m
ok 80 - blame -L :RE (relative: end-of-file)(B[m
ok 3 - stream omits path names(B[m
[32m# passed all 111 test(s)(B[m
[36m1..111(B[m
ok 12 - A: verify tag deletion is successful(B[m
ok 4 - stream allows master as refname(B[m
ok 81 - blame -L ^:RE (absolute)(B[m
ok 5 - stream omits other refnames(B[m
ok 4 - fast-import (packed) with -c core.compression=9 -c pack.compression=0(B[m
ok 5 - add concatenation notes with M command(B[m
ok 6 - stream omits identities(B[m
ok 2 - fast-export | fast-import(B[m
ok 82 - blame -L ^:RE (absolute: no preceding range)(B[m
ok 9 - mergetool merges all from subdir (rerere disabled)(B[m
ok 7 - stream omits tag message(B[m
ok 83 - blame -L ^:RE (absolute: not found)(B[m
[36m1..0 # SKIP skipping gitweb tests, perl not available(B[m
*** t9501-gitweb-standalone-http-status.sh ***
ok 13 - A: verify marks output(B[m
ok 54 - git reset --merge: replace directory with submodule(B[m
ok 3 - fast-export ^muss^{commit} muss(B[m
ok 6 - verify that deleteall also removes notes(B[m
ok 5 - fast-import (packed) with -c core.compression=0 -c pack.compression=9(B[m
ok 84 - blame -L ^:RE (absolute: end-of-file)(B[m
ok 8 - import stream to new repository(B[m
ok 14 - A: verify marks import(B[m
ok 4 - fast-export --mark-tags ^muss^{commit} muss(B[m
ok 9 - result has two branches(B[m
ok 7 - verify that later N commands override earlier M commands(B[m
ok 6 - fast-import (packed) with -c core.compression=9 -c pack.compression=9(B[m
ok 85 - setup incremental(B[m
ok 10 - repo has original shape and timestamps(B[m
[36m1..0 # SKIP skipping gitweb tests, perl not available(B[m
*** t9502-gitweb-standalone-parse-output.sh ***
ok 86 - blame empty(B[m
ok 15 - A: tag blob by sha1(B[m
*** t9700-perl-git.sh ***
ok 11 - root tree has original shape(B[m
ok 87 - blame -L 0 empty(B[m
ok 5 - fast-export master~2..master(B[m
ok 88 - blame -L 1 empty(B[m
ok 7 - fast-import (packed) with -c pack.compression=0(B[m
ok 12 - paths in subdir ended up in one tree(B[m
ok 16 - A: verify marks import does not crash(B[m
ok 89 - blame -L 2 empty(B[m
ok 90 - blame half(B[m
ok 13 - tag points to branch tip(B[m
ok 6 - fast-export --reference-excluded-parents master~2..master(B[m
ok 91 - blame -L 0 half(B[m
ok 17 - A: verify pack(B[m
[36m1..0 # SKIP skipping gitweb tests, perl not available(B[m
ok 8 - fast-import (packed) with -c pack.compression=9(B[m
[36m1..0 # SKIP skipping perl interface tests, perl not available(B[m
*** t9800-git-p4-basic.sh ***
*** t9801-git-p4-branch.sh ***
ok 92 - blame -L 1 half(B[m
ok 14 - idents are shared(B[m
[32m# passed all 14 test(s)(B[m
[36m1..14(B[m
ok 7 - fast-export --show-original-ids(B[m
ok 93 - blame -L 2 half(B[m
*** t9802-git-p4-filetype.sh ***
ok 94 - blame -L 3 half(B[m
ok 18 - A: verify diff(B[m
ok 95 - blame full(B[m
ok 8 - fast-export --show-original-ids | git fast-import(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 96 - blame -L 0 full(B[m
ok 9 - fast-import (loose) with -c core.compression=0(B[m
*** t9803-git-p4-shell-metachars.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9804-git-p4-label.sh ***
ok 97 - blame -L 1 full(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 98 - blame -L 2 full(B[m
*** t9805-git-p4-skip-submit-edit.sh ***
ok 15 - git merge --ff: added submodule creates empty directory(B[m
ok 99 - blame -L 3 full(B[m
ok 100 - blame -L(B[m
ok 10 - fast-import (loose) with -c core.compression=9(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 101 - blame -L X,+(B[m
*** t9806-git-p4-options.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 9 - reencoding iso-8859-7(B[m
*** t9807-git-p4-submit.sh ***
ok 102 - blame -L X,-(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 103 - blame -L X (non-numeric X)(B[m
ok 19 - A: export marks with large values(B[m
*** t9808-git-p4-chdir.sh ***
ok 104 - blame -L X,Y (non-numeric Y)(B[m
ok 20 - B: fail on invalid blob sha1(B[m
ok 10 - aborting on iso-8859-7(B[m
ok 105 - blame -L X,+N (non-numeric N)(B[m
ok 11 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=0(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 106 - blame -L X,-N (non-numeric N)(B[m
*** t9809-git-p4-client-view.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9810-git-p4-rcs.sh ***
ok 107 - blame -L ,^/RE/(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9811-git-p4-label-import.sh ***
ok 12 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=0(B[m
ok 108 - colored blame colors contiguous lines(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 11 - preserving iso-8859-7(B[m
*** t9812-git-p4-wildcards.sh ***
ok 55 - git reset --merge: removed submodule leaves submodule directory and its contents in place(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9813-git-p4-preserve-users.sh ***
ok 109 - color by age consistently colors old code(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9814-git-p4-rename.sh ***
ok 13 - fast-import (loose) with -c core.compression=0 -c core.loosecompression=9(B[m
ok 21 - B: accept branch name "TEMP_TAG"(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9815-git-p4-submit-fail.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 110 - blame color by age: new code is different(B[m
*** t9816-git-p4-locked.sh ***
[32m# passed all 110 test(s)(B[m
[36m1..110(B[m
ok 12 - encoding preserved if reencoding fails(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9817-git-p4-exclude.sh ***
*** t9818-git-p4-block.sh ***
ok 14 - fast-import (loose) with -c core.compression=9 -c core.loosecompression=9(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9819-git-p4-case-folding.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9820-git-p4-editor-handling.sh ***
ok 13 - import/export-marks(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 15 - fast-import (loose) with -c core.loosecompression=0(B[m
*** t9821-git-p4-path-variations.sh ***
*** t9822-git-p4-path-encoding.sh ***
ok 14 - set up faked signed tag(B[m
ok 22 - B: accept empty committer(B[m
ok 15 - signed-tags=abort(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 3 - lookups after checkpoint works(B[m
*** t9823-git-p4-mock-lfs.sh ***
ok 16 - signed-tags=verbatim(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[32m# passed all 3 test(s)(B[m
[36m1..3(B[m
*** t9824-git-p4-git-lfs.sh ***
*** t9825-git-p4-handle-utf16-without-bom.sh ***
ok 17 - signed-tags=strip(B[m
ok 16 - fast-import (loose) with -c core.loosecompression=9(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 18 - signed-tags=warn-strip(B[m
[32m# passed all 16 test(s)(B[m
[36m1..16(B[m
*** t9826-git-p4-keep-empty-commits.sh ***
*** t9827-git-p4-change-filetype.sh ***
*** t9828-git-p4-map-user.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9829-git-p4-jobs.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9830-git-p4-symlink-dir.sh ***
*** t9831-git-p4-triggers.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9832-unshelve.sh ***
*** t9833-errors.sh ***
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9901-git-web--browse.sh ***
ok 23 - B: accept and fixup committer with no name(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9902-completion.sh ***
ok 10 - mergetool merges all from subdir (rerere enabled)(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
*** t9903-bash-prompt.sh ***
ok 24 - B: fail on invalid committer (1)(B[m
ok 16 - git merge --ff: added submodule leaves existing empty directory alone(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
[36m1..0 # SKIP skipping git p4 tests; python not available(B[m
ok 25 - B: fail on invalid committer (2)(B[m
ok 26 - B: fail on invalid committer (3)(B[m
ok 27 - B: fail on invalid committer (4)(B[m
ok 1 - URL with an ampersand in it(B[m
ok 1 - setup for __git_find_repo_path/__gitdir tests(B[m
ok 19 - setup submodule(B[m
ok 2 - __git_find_repo_path - from command line (through $__git_dir)(B[m
ok 28 - B: fail on invalid committer (5)(B[m
ok 3 - __git_find_repo_path - .git directory in cwd(B[m
ok 56 - git reset --merge: removed submodule leaves submodule containing a .git directory alone(B[m
ok 4 - __git_find_repo_path - .git directory in parent(B[m
ok 2 - URL with a semi-colon in it(B[m
ok 5 - __git_find_repo_path - cwd is a .git directory(B[m
ok 29 - C: incremental import create pack from stdin(B[m
ok 6 - __git_find_repo_path - parent is a .git directory(B[m
ok 7 - __git_find_repo_path - $GIT_DIR set while .git directory in cwd(B[m
ok 30 - C: verify pack(B[m
ok 8 - __git_find_repo_path - $GIT_DIR set while .git directory in parent(B[m
ok 31 - C: validate reuse existing blob(B[m
ok 9 - __git_find_repo_path - from command line while "git -C"(B[m
ok 3 - URL with a hash in it(B[m
ok 1 - setup for prompt tests(B[m
ok 10 - __git_find_repo_path - relative dir from command line and "git -C"(B[m
ok 32 - C: verify commit(B[m
ok 2 - prompt - branch name(B[m
ok 11 - __git_find_repo_path - $GIT_DIR set while "git -C"(B[m
ok 33 - C: validate rename result(B[m
ok 12 - __git_find_repo_path - relative dir in $GIT_DIR and "git -C"(B[m
ok 13 - __git_find_repo_path - "git -C" while .git directory in cwd(B[m
ok 4 - browser paths are properly quoted(B[m
ok 34 - D: inline data in commit(B[m
ok 14 - __git_find_repo_path - "git -C" while cwd is a .git directory(B[m
ok 3 - prompt - branch name - symlink symref(B[m
ok 15 - __git_find_repo_path - "git -C" while .git directory in parent(B[m
ok 35 - D: verify pack(B[m
ok 16 - __git_find_repo_path - non-existing path in "git -C"(B[m
ok 4 - prompt - unborn branch(B[m
ok 17 - __git_find_repo_path - non-existing path in $__git_dir(B[m
ok 5 - browser command allows arbitrary shell code(B[m
ok 18 - __git_find_repo_path - non-existing $GIT_DIR(B[m
[32m# passed all 5 test(s)(B[m
[36m1..5(B[m
ok 36 - D: validate new files added(B[m
ok 19 - __git_find_repo_path - gitfile in cwd(B[m
ok 37 - D: verify file5(B[m
ok 5 - prompt - with newline in path(B[m
ok 20 - __git_find_repo_path - gitfile in parent(B[m
ok 38 - D: verify file6(B[m
ok 39 - E: rfc2822 date, --date-format=raw(B[m
ok 21 - __git_find_repo_path - resulting path avoids symlinks(B[m
ok 20 - submodule fast-export | fast-import(B[m
ok 40 - E: rfc2822 date, --date-format=rfc2822(B[m
ok 22 - __git_find_repo_path - not a git repository(B[m
ok 6 - prompt - detached head(B[m
ok 23 - __gitdir - finds repo(B[m
ok 24 - __gitdir - returns error when cannot find repo(B[m
ok 25 - __gitdir - repo as argument(B[m
ok 41 - E: verify pack(B[m
ok 26 - __gitdir - remote as argument(B[m
ok 7 - prompt - describe detached head - contains(B[m
ok 27 - __git_dequote - plain unquoted word(B[m
ok 42 - E: verify commit(B[m
ok 28 - __git_dequote - backslash escaped(B[m
ok 29 - __git_dequote - single quoted(B[m
ok 30 - __git_dequote - double quoted(B[m
ok 31 - __git_dequote - open single quote(B[m
ok 32 - __git_dequote - open double quote(B[m
ok 8 - prompt - describe detached head - branch(B[m
ok 43 - F: non-fast-forward update skips(B[m
ok 33 - __gitcomp_direct - puts everything into COMPREPLY as-is(B[m
ok 21 - setup copies(B[m
ok 34 - __gitcomp - trailing space - options(B[m
ok 17 - git merge --ff: replace tracked file with submodule creates empty directory(B[m
ok 57 - git reset --merge: replace submodule with a directory must fail(B[m
ok 35 - __gitcomp - trailing space - config keys(B[m
ok 36 - __gitcomp - option parameter(B[m
ok 9 - prompt - describe detached head - describe(B[m
ok 37 - __gitcomp - prefix(B[m
ok 44 - F: verify pack(B[m
ok 38 - __gitcomp - suffix(B[m
ok 39 - __gitcomp - ignore optional negative options(B[m
ok 10 - prompt - describe detached head - default(B[m
ok 45 - F: verify other commit(B[m
ok 40 - __gitcomp - ignore/narrow optional negative options(B[m
ok 11 - prompt - inside .git directory(B[m
ok 41 - __gitcomp - ignore/narrow optional negative options(B[m
ok 22 - fast-export -C -C | fast-import(B[m
ok 42 - __gitcomp - expand all negative options(B[m
ok 12 - prompt - deep inside .git directory(B[m
ok 46 - G: non-fast-forward update forced(B[m
ok 43 - __gitcomp - expand/narrow all negative options(B[m
ok 23 - fast-export | fast-import when master is tagged(B[m
ok 44 - __gitcomp - doesnt fail because of invalid variable name(B[m
ok 45 - __gitcomp_nl - trailing space(B[m
ok 13 - prompt - inside bare repository(B[m
ok 46 - __gitcomp_nl - prefix(B[m
ok 47 - __gitcomp_nl - suffix(B[m
ok 48 - __gitcomp_nl - no suffix(B[m
ok 47 - G: verify pack(B[m
ok 49 - __gitcomp_nl - doesnt fail because of invalid variable name(B[m
ok 24 - cope with tagger-less tags(B[m
ok 48 - G: branch changed, but logged(B[m
ok 14 - prompt - interactive rebase(B[m
ok 49 - H: deletall, add 1(B[m
ok 50 - __git_remotes - list remotes from $GIT_DIR/remotes and from config file(B[m
ok 25 - setup for limiting exports by PATH(B[m
ok 51 - __git_is_configured_remote(B[m
ok 15 - prompt - rebase merge(B[m
ok 26 - dropping tag of filtered out object(B[m
ok 50 - H: verify pack(B[m
ok 27 - rewriting tag of filtered out object(B[m
ok 51 - H: validate old files removed, new files added(B[m
ok 52 - H: verify file(B[m
ok 16 - prompt - rebase am(B[m
ok 53 - I: export-pack-edges(B[m
ok 52 - setup for ref completion(B[m
ok 28 - rewrite tag predating pathspecs to nothing(B[m
ok 54 - I: verify edge list(B[m
ok 53 - __git_refs - simple(B[m
ok 17 - prompt - merge(B[m
[33mnot ok 29 - no exact-ref revisions included # TODO known breakage(B[m
ok 54 - __git_refs - full refs(B[m
ok 55 - J: reset existing branch creates empty commit(B[m
ok 11 - mergetool skips resolved paths when rerere is active(B[m
ok 55 - __git_refs - repo given on the command line(B[m
ok 56 - J: branch has 1 commit, empty tree(B[m
ok 30 - path limiting with import-marks does not lose unmodified files(B[m
ok 57 - J: tag must fail on empty branch(B[m
ok 56 - __git_refs - remote on local file system(B[m
ok 18 - prompt - cherry-pick(B[m
ok 58 - git reset --merge: replace submodule containing a .git directory with a directory must fail(B[m
ok 58 - K: reinit branch with from(B[m
ok 57 - __git_refs - remote on local file system - full refs(B[m
ok 59 - K: verify K^1 = branch^1(B[m
ok 58 - __git_refs - configured remote(B[m
ok 19 - prompt - revert(B[m
ok 18 - git merge --ff: replace directory with submodule(B[m
ok 60 - L: verify internal tree sorting(B[m
ok 59 - __git_refs - configured remote - full refs(B[m
ok 60 - __git_refs - configured remote - repo given on the command line(B[m
ok 31 - avoid corrupt stream with non-existent mark(B[m
ok 61 - __git_refs - configured remote - full refs - repo given on the command line(B[m
ok 32 - full-tree re-shows unmodified files(B[m
ok 61 - L: nested tree copy does not corrupt deltas(B[m
ok 62 - __git_refs - configured remote - remote name matches a directory(B[m
ok 20 - prompt - bisect(B[m
ok 33 - set-up a few more tags for tag export tests(B[m
ok 62 - M: rename file in same subdirectory(B[m
ok 63 - __git_refs - URL remote(B[m
ok 21 - prompt - dirty status indicator - clean(B[m
ok 34 - tree_tag(B[m
ok 35 - tree_tag-obj(B[m
ok 64 - __git_refs - URL remote - full refs(B[m
ok 36 - tag-obj_tag(B[m
ok 63 - M: rename file to new subdirectory(B[m
ok 22 - prompt - dirty status indicator - dirty worktree(B[m
ok 37 - tag-obj_tag-obj(B[m
ok 65 - __git_refs - non-existing remote(B[m
ok 38 - handling tags of blobs(B[m
ok 66 - __git_refs - non-existing remote - full refs(B[m
ok 64 - M: rename subdirectory to new subdirectory(B[m
ok 12 - conflicted stash sets up rerere(B[m
ok 23 - prompt - dirty status indicator - dirty index(B[m
ok 39 - handling nested tags(B[m
ok 67 - __git_refs - non-existing URL remote(B[m
ok 65 - M: rename root to subdirectory(B[m
ok 68 - __git_refs - non-existing URL remote - full refs(B[m
ok 69 - __git_refs - not in a git repository(B[m
ok 24 - prompt - dirty status indicator - dirty index and worktree(B[m
ok 66 - N: copy file in same subdirectory(B[m
[33mnot ok 59 - git reset --merge: replace submodule with a file must fail # TODO known breakage(B[m
ok 25 - prompt - dirty status indicator - orphan branch - clean(B[m
ok 70 - __git_refs - unique remote branches for git checkout DWIMery(B[m
ok 40 - directory becomes symlink(B[m
ok 67 - N: copy then modify subdirectory(B[m
ok 71 - __git_refs - after --opt=(B[m
ok 72 - __git_refs - after --opt= - full refs(B[m
ok 26 - prompt - dirty status indicator - orphan branch - dirty index(B[m
ok 73 - __git refs - exluding refs(B[m
ok 68 - N: copy dirty subdirectory(B[m
ok 19 - git merge --ff: removed submodule leaves submodule directory and its contents in place(B[m
ok 74 - __git refs - exluding full refs(B[m
ok 27 - prompt - dirty status indicator - orphan branch - dirty index and worktree(B[m
ok 69 - N: copy directory by id(B[m
ok 28 - prompt - dirty status indicator - shell variable unset with config disabled(B[m
ok 75 - setup for filtering matching refs(B[m
ok 41 - fast-export quotes pathnames(B[m
ok 76 - __git_refs - do not filter refs unless told so(B[m
ok 29 - prompt - dirty status indicator - shell variable unset with config enabled(B[m
ok 77 - __git_refs - only matching refs(B[m
ok 13 - mergetool takes partial path(B[m
ok 70 - N: read and copy directory(B[m
ok 78 - __git_refs - only matching refs - full refs(B[m
ok 30 - prompt - dirty status indicator - shell variable set with config disabled(B[m
ok 79 - __git_refs - only matching refs - remote on local file system(B[m
ok 42 - test bidirectionality(B[m
ok 80 - __git_refs - only matching refs - configured remote(B[m
ok 71 - N: empty directory reads as missing(B[m
ok 31 - prompt - dirty status indicator - shell variable set with config enabled(B[m
ok 81 - __git_refs - only matching refs - remote - full refs(B[m
ok 32 - prompt - dirty status indicator - not shown inside .git directory(B[m
ok 43 - avoid uninteresting refs(B[m
ok 72 - N: copy root directory by tree hash(B[m
ok 33 - prompt - stash status indicator - no stash(B[m
ok 44 - refs are updated even if no commits need to be exported(B[m
ok 82 - __git_refs - only matching refs - checkout DWIMery(B[m
ok 45 - use refspec(B[m
ok 73 - N: copy root by path(B[m
ok 46 - delete ref because entire history excluded(B[m
ok 83 - teardown after filtering matching refs(B[m
ok 34 - prompt - stash status indicator - stash(B[m
[33mnot ok 60 - git reset --merge: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 47 - delete refspec(B[m
ok 84 - __git_refs - for-each-ref format specifiers in prefix(B[m
ok 74 - N: delete directory by copying(B[m
ok 85 - __git_complete_refs - simple(B[m
ok 86 - __git_complete_refs - matching(B[m
ok 35 - prompt - stash status indicator - not shown inside .git directory(B[m
ok 87 - __git_complete_refs - remote(B[m
ok 75 - N: modify copied tree(B[m
ok 36 - prompt - untracked files status indicator - no untracked files(B[m
ok 88 - __git_complete_refs - track(B[m
ok 76 - N: reject foo/ syntax(B[m
ok 48 - when using -C, do not declare copy when source of copy is also modified(B[m
ok 37 - prompt - untracked files status indicator - untracked files(B[m
ok 89 - __git_complete_refs - current word(B[m
ok 77 - N: reject foo/ syntax in copy source(B[m
ok 20 - git merge --ff: removed submodule leaves submodule containing a .git directory alone(B[m
ok 90 - __git_complete_refs - prefix(B[m
ok 78 - N: reject foo/ syntax in rename source(B[m
ok 38 - prompt - untracked files status indicator - empty untracked dir(B[m
ok 91 - __git_complete_refs - suffix(B[m
ok 79 - N: reject foo/ syntax in ls argument(B[m
ok 39 - prompt - untracked files status indicator - non-empty untracked dir(B[m
ok 92 - __git_complete_fetch_refspecs - simple(B[m
ok 93 - __git_complete_fetch_refspecs - matching(B[m
ok 40 - prompt - untracked files status indicator - untracked files outside cwd(B[m
ok 14 - mergetool delete/delete conflict(B[m
ok 80 - N: copy to root by id and modify(B[m
ok 94 - __git_complete_fetch_refspecs - prefix(B[m
ok 49 - merge commit gets exported with --import-marks(B[m
ok 41 - prompt - untracked files status indicator - shell variable unset with config disabled(B[m
[33m# still have 1 known breakage(s)(B[m
[32m# passed all remaining 48 test(s)(B[m
[36m1..49(B[m
ok 42 - prompt - untracked files status indicator - shell variable unset with config enabled(B[m
ok 81 - N: extract subtree(B[m
ok 95 - __git_complete_fetch_refspecs - fully qualified(B[m
ok 96 - __git_complete_fetch_refspecs - fully qualified & prefix(B[m
ok 43 - prompt - untracked files status indicator - shell variable set with config disabled(B[m
ok 97 - teardown after ref completion(B[m
ok 98 - setup for path completion tests(B[m
ok 44 - prompt - untracked files status indicator - shell variable set with config enabled(B[m
ok 82 - N: modify subtree, extract it, and modify again(B[m
ok 45 - prompt - untracked files status indicator - not shown inside .git directory(B[m
ok 99 - __git_complete_index_file - simple(B[m
ok 15 - mergetool produces no errors when keepBackup is used(B[m
ok 46 - prompt - format string starting with dash(B[m
ok 83 - O: comments are all skipped(B[m
ok 47 - prompt - pc mode(B[m
ok 48 - prompt - bash color pc mode - branch name(B[m
ok 100 - __git_complete_index_file - escaped characters on cmdline(B[m
ok 84 - O: blank lines not necessary after data commands(B[m
ok 49 - prompt - bash color pc mode - detached head(B[m
ok 85 - O: repack before next test(B[m
ok 101 - __git_complete_index_file - quoted characters on cmdline(B[m
ok 102 - __git_complete_index_file - UTF-8 in ls-files output(B[m
ok 50 - prompt - bash color pc mode - dirty status indicator - dirty worktree(B[m
ok 21 - git merge --ff: replace submodule with a directory must fail(B[m
ok 86 - O: blank lines not necessary after other commands(B[m
ok 61 - git reset --merge: modified submodule does not update submodule work tree(B[m
ok 16 - mergetool honors tempfile config for deleted files(B[m
ok 103 - __git_complete_index_file - C-style escapes in ls-files output(B[m
ok 51 - prompt - bash color pc mode - dirty status indicator - dirty index(B[m
ok 87 - O: progress outputs as requested by input(B[m
ok 104 - __git_complete_index_file - \nnn-escaped characters in ls-files output(B[m
ok 52 - prompt - bash color pc mode - dirty status indicator - dirty index and worktree(B[m
ok 53 - prompt - bash color pc mode - dirty status indicator - before root commit(B[m
ok 105 - __git_complete_index_file - removing repeated quoted path components(B[m
ok 106 - teardown after path completion tests(B[m
ok 54 - prompt - bash color pc mode - inside .git directory(B[m
ok 107 - __git_find_on_cmdline - single match(B[m
ok 108 - __git_find_on_cmdline - multiple matches(B[m
ok 109 - __git_find_on_cmdline - no match(B[m
ok 110 - __git_find_on_cmdline - single match with index(B[m
ok 111 - __git_find_on_cmdline - multiple matches with index(B[m
ok 112 - __git_find_on_cmdline - no match with index(B[m
ok 17 - mergetool keeps tempfiles when aborting delete/delete(B[m
ok 55 - prompt - bash color pc mode - stash status indicator(B[m
ok 8 - add lots of commits and notes(B[m
ok 56 - prompt - bash color pc mode - untracked files status indicator(B[m
ok 113 - __git_get_config_variables(B[m
ok 57 - prompt - zsh color pc mode(B[m
ok 88 - P: superproject & submodule mix(B[m
ok 58 - prompt - hide if pwd ignored - env var unset, config disabled(B[m
ok 114 - __git_pretty_aliases(B[m
ok 115 - basic(B[m
ok 59 - prompt - hide if pwd ignored - env var unset, config disabled, pc mode(B[m
ok 60 - prompt - hide if pwd ignored - env var unset, config unset(B[m
ok 116 - double dash "git" itself(B[m
ok 61 - prompt - hide if pwd ignored - env var unset, config unset, pc mode(B[m
ok 117 - double dash "git checkout"(B[m
ok 62 - prompt - hide if pwd ignored - env var set, config disabled(B[m
ok 63 - prompt - hide if pwd ignored - env var set, config disabled, pc mode(B[m
ok 64 - prompt - hide if pwd ignored - env var set, config unset(B[m
ok 118 - general options(B[m
ok 89 - P: verbatim SHA gitlinks(B[m
ok 65 - prompt - hide if pwd ignored - env var set, config unset, pc mode(B[m
ok 90 - P: fail on inline gitlink(B[m
ok 66 - prompt - hide if pwd ignored - inside gitdir(B[m
ok 22 - git merge --ff: replace submodule containing a .git directory with a directory must fail(B[m
[32m# passed all 66 test(s)(B[m
[36m1..66(B[m
ok 91 - P: fail on blob mark in gitlink(B[m
ok 92 - Q: commit notes(B[m
ok 119 - general options plus command(B[m
ok 93 - Q: verify pack(B[m
ok 120 - git --help completion(B[m
ok 121 - completion.commands removes multiple commands(B[m
ok 94 - Q: verify first commit(B[m
ok 62 - git reset --merge: modified submodule does not update submodule work tree to invalid commit(B[m
ok 95 - Q: verify second commit(B[m
ok 96 - Q: verify third commit(B[m
ok 122 - setup for integration tests(B[m
ok 97 - Q: verify first notes commit(B[m
ok 123 - checkout completes ref names(B[m
ok 98 - Q: verify first notes tree(B[m
ok 99 - Q: verify first note for first commit(B[m
ok 100 - Q: verify first note for second commit(B[m
ok 124 - git -C <path> checkout uses the right repo(B[m
ok 101 - Q: verify first note for third commit(B[m
ok 125 - show completes all refs(B[m
ok 102 - Q: verify second notes commit(B[m
ok 126 - <ref>: completes paths(B[m
ok 103 - Q: verify second notes tree(B[m
ok 104 - Q: verify second note for first commit(B[m
ok 105 - Q: verify first note for second commit(B[m
ok 127 - complete tree filename with spaces(B[m
ok 106 - Q: verify first note for third commit(B[m
ok 9 - verify that lots of notes trigger a fanout scheme(B[m
ok 107 - Q: verify third notes commit(B[m
[33mnot ok 23 - git merge --ff: replace submodule with a file must fail # TODO known breakage(B[m
ok 128 - complete tree filename with metacharacters(B[m
ok 108 - Q: verify third notes tree(B[m
[34mok 129 # skip send-email (missing PERL)(B[m
ok 109 - Q: verify third note for first commit(B[m
ok 110 - Q: verify fourth notes commit(B[m
ok 111 - Q: verify fourth notes tree(B[m
ok 112 - Q: verify second note for second commit(B[m
ok 113 - Q: deny note on empty branch(B[m
ok 114 - R: abort on unsupported feature(B[m
ok 115 - R: supported feature is accepted(B[m
ok 116 - R: abort on receiving feature after data command(B[m
ok 117 - R: import-marks features forbidden by default(B[m
ok 118 - R: only one import-marks feature allowed per stream(B[m
ok 119 - R: export-marks feature forbidden by default(B[m
ok 120 - R: export-marks feature results in a marks file being created(B[m
ok 63 - git reset --merge: modified submodule does not update submodule work tree from invalid commit(B[m
ok 121 - R: export-marks options can be overridden by commandline options(B[m
ok 130 - complete files(B[m
ok 122 - R: catch typo in marks file name(B[m
ok 123 - R: import and output marks can be the same file(B[m
ok 131 - completion uses <cmd> completion for alias: !sh -c 'git <cmd> ...'(B[m
ok 124 - R: --import-marks=foo --output-marks=foo to create foo fails(B[m
ok 125 - R: --import-marks-if-exists(B[m
[33mnot ok 24 - git merge --ff: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 132 - completion uses <cmd> completion for alias: !f () { VAR=val git <cmd> ... }(B[m
ok 126 - R: feature import-marks-if-exists(B[m
ok 133 - completion used <cmd> completion for alias: !f() { : git <cmd> ; ... }(B[m
ok 127 - R: import to output marks works without any content(B[m
ok 64 - git reset --merge: added submodule doesn't remove untracked unignored file with same name(B[m
ok 128 - R: import marks prefers commandline marks file over the stream(B[m
ok 134 - completion without explicit _git_xxx function(B[m
ok 129 - R: multiple --import-marks= should be honoured(B[m
[33mnot ok 135 - complete with tilde expansion # TODO known breakage(B[m
ok 130 - R: feature relative-marks should be honoured(B[m
ok 10 - verify that importing a notes tree respects the fanout scheme(B[m
ok 131 - R: feature no-relative-marks should be honoured(B[m
ok 136 - setup other remote for remote reference completion(B[m
ok 132 - R: feature ls supported(B[m
ok 137 - __git_complete_remote_or_refspec - push -d other(B[m
ok 11 - verify that non-notes are untouched by a fanout change(B[m
ok 133 - R: feature cat-blob supported(B[m
[33mnot ok 138 - __git_complete_remote_or_refspec - push other -d # TODO known breakage(B[m
ok 134 - R: cat-blob-fd must be a nonnegative integer(B[m
ok 139 - __git_complete_remote_or_refspec - push --delete other(B[m
ok 135 - R: print old blob(B[m
ok 12 - change a few existing notes(B[m
[33mnot ok 140 - __git_complete_remote_or_refspec - push other --delete # TODO known breakage(B[m
ok 136 - R: in-stream cat-blob-fd not respected(B[m
ok 141 - git config - section(B[m
ok 142 - git config - variable name(B[m
ok 137 - R: print mark for new blob(B[m
ok 143 - git config - value(B[m
ok 138 - R: print new blob(B[m
ok 144 - git -c - section(B[m
ok 139 - R: print new blob by sha1(B[m
ok 145 - git -c - variable name(B[m
ok 146 - git -c - value(B[m
ok 140 - setup: big file(B[m
ok 147 - git clone --config= - section(B[m
ok 148 - git clone --config= - variable name(B[m
ok 141 - R: print two blobs to stdout(B[m
ok 149 - git clone --config= - value(B[m
ok 150 - sourcing the completion script clears cached commands(B[m
ok 142 - R: copy using cat-file(B[m
ok 151 - sourcing the completion script clears cached merge strategies(B[m
ok 25 - git merge --ff: modified submodule does not update submodule work tree(B[m
ok 65 - git reset --hard: added submodule creates empty directory(B[m
ok 152 - sourcing the completion script clears cached --options(B[m
ok 143 - R: print blob mid-commit(B[m
[33m# still have 3 known breakage(s)(B[m
[32m# passed all remaining 149 test(s)(B[m
[36m1..152(B[m
ok 144 - R: print staged blob within commit(B[m
ok 145 - R: quiet option results in no stats being output(B[m
ok 146 - R: feature done means terminating "done" is mandatory(B[m
ok 147 - R: terminating "done" with trailing gibberish is ok(B[m
ok 148 - R: terminating "done" within commit(B[m
ok 149 - R: die on unknown option(B[m
ok 150 - R: unknown commandline options are rejected(B[m
ok 151 - R: die on invalid option argument(B[m
ok 13 - verify that changing notes respect existing fanout(B[m
ok 152 - R: ignore non-git options(B[m
ok 153 - R: corrupt lines do not mess marks file(B[m
ok 154 - R: blob bigger than threshold(B[m
ok 155 - R: verify created pack(B[m
ok 156 - R: verify written objects(B[m
ok 66 - git reset --hard: added submodule leaves existing empty directory alone(B[m
ok 157 - R: blob appears only once(B[m
ok 158 - S: initialize for S tests(B[m
ok 26 - git merge --ff: modified submodule does not update submodule work tree to invalid commit(B[m
ok 159 - S: filemodify with garbage after mark must fail(B[m
ok 160 - S: filemodify with garbage after inline must fail(B[m
ok 161 - S: filemodify with garbage after sha1 must fail(B[m
ok 162 - S: notemodify with garbage after mark dataref must fail(B[m
ok 163 - S: notemodify with garbage after inline dataref must fail(B[m
ok 164 - S: notemodify with garbage after sha1 dataref must fail(B[m
ok 165 - S: notemodify with garbage after mark commit-ish must fail(B[m
ok 166 - S: from with garbage after mark must fail(B[m
ok 167 - S: merge with garbage after mark must fail(B[m
ok 168 - S: tag with garbage after mark must fail(B[m
ok 169 - S: cat-blob with garbage after mark must fail(B[m
ok 170 - S: ls with garbage after mark must fail(B[m
ok 171 - S: ls with garbage after sha1 must fail(B[m
ok 172 - T: ls root tree(B[m
ok 173 - T: delete branch(B[m
ok 174 - T: empty reset doesnt delete branch(B[m
ok 175 - U: initialize for U tests(B[m
ok 176 - U: filedelete file succeeds(B[m
ok 67 - git reset --hard: replace tracked file with submodule creates empty directory(B[m
ok 177 - U: validate file delete result(B[m
ok 178 - U: filedelete directory succeeds(B[m
ok 27 - git merge --ff: modified submodule does not update submodule work tree from invalid commit(B[m
ok 179 - U: validate directory delete result(B[m
ok 180 - U: filedelete root succeeds(B[m
ok 181 - U: validate root delete result(B[m
ok 182 - V: checkpoint helper does not get stuck with extra output(B[m
ok 183 - V: checkpoint updates refs after reset(B[m
ok 184 - V: checkpoint updates refs and marks after commit(B[m
ok 28 - git merge --ff: added submodule doesn't remove untracked unignored file with same name(B[m
ok 185 - V: checkpoint updates refs and marks after commit (no new objects)(B[m
ok 186 - V: checkpoint updates tags after tag(B[m
ok 187 - W: get-mark & empty orphan commit with no newlines(B[m
ok 188 - W: get-mark & empty orphan commit with one newline(B[m
ok 189 - W: get-mark & empty orphan commit with ugly second newline(B[m
ok 190 - W: get-mark & empty orphan commit with erroneous third newline(B[m
ok 68 - git reset --hard: replace directory with submodule(B[m
ok 191 - X: handling encoding(B[m
[32m# passed all 191 test(s)(B[m
[36m1..191(B[m
ok 29 - git merge --ff-only: added submodule creates empty directory(B[m
ok 69 - git reset --hard: removed submodule leaves submodule directory and its contents in place(B[m
ok 14 - remove lots of notes(B[m
ok 30 - git merge --ff-only: added submodule leaves existing empty directory alone(B[m
ok 15 - verify that removing notes trigger fanout consolidation(B[m
ok 16 - verify that non-notes are untouched by a fanout change(B[m
ok 70 - git reset --hard: removed submodule leaves submodule containing a .git directory alone(B[m
ok 18 - deleted vs modified submodule(B[m
[33mnot ok 71 - git reset --hard: replace submodule with a directory must fail # TODO known breakage(B[m
ok 31 - git merge --ff-only: replace tracked file with submodule creates empty directory(B[m
ok 17 - add notes to 16 commits in each of 10 refs(B[m
[32m# passed all 17 test(s)(B[m
[36m1..17(B[m
[33mnot ok 72 - git reset --hard: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
ok 32 - git merge --ff-only: replace directory with submodule(B[m
[33mnot ok 73 - git reset --hard: replace submodule with a file must fail # TODO known breakage(B[m
ok 33 - git merge --ff-only: removed submodule leaves submodule directory and its contents in place(B[m
[33mnot ok 74 - git reset --hard: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 34 - git merge --ff-only: removed submodule leaves submodule containing a .git directory alone(B[m
ok 75 - git reset --hard: modified submodule does not update submodule work tree(B[m
ok 35 - git merge --ff-only: replace submodule with a directory must fail(B[m
ok 36 - git merge --ff-only: replace submodule containing a .git directory with a directory must fail(B[m
ok 76 - git reset --hard: modified submodule does not update submodule work tree to invalid commit(B[m
[33mnot ok 37 - git merge --ff-only: replace submodule with a file must fail # TODO known breakage(B[m
ok 77 - git reset --hard: modified submodule does not update submodule work tree from invalid commit(B[m
ok 78 - git reset --hard: added submodule does remove untracked unignored file with same name when forced(B[m
[33m# still have 13 known breakage(s)(B[m
[32m# passed all remaining 65 test(s)(B[m
[36m1..78(B[m
[33mnot ok 38 - git merge --ff-only: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 39 - git merge --ff-only: modified submodule does not update submodule work tree(B[m
ok 19 - file vs modified submodule(B[m
ok 40 - git merge --ff-only: modified submodule does not update submodule work tree to invalid commit(B[m
ok 41 - git merge --ff-only: modified submodule does not update submodule work tree from invalid commit(B[m
ok 42 - git merge --ff-only: added submodule doesn't remove untracked unignored file with same name(B[m
ok 20 - submodule in subdirectory(B[m
ok 43 - git merge --no-ff: added submodule creates empty directory(B[m
ok 44 - git merge --no-ff: added submodule leaves existing empty directory alone(B[m
ok 21 - directory vs modified submodule(B[m
ok 22 - file with no base(B[m
ok 45 - git merge --no-ff: replace tracked file with submodule creates empty directory(B[m
ok 23 - custom commands override built-ins(B[m
[33mnot ok 46 - git merge --no-ff: replace directory with submodule # TODO known breakage(B[m
ok 24 - filenames seen by tools start with ./(B[m
ok 25 - temporary filenames are used with mergetool.writeToTemp(B[m
ok 47 - git merge --no-ff: removed submodule leaves submodule directory and its contents in place(B[m
ok 26 - diff.orderFile configuration is honored(B[m
ok 48 - git merge --no-ff: removed submodule leaves submodule containing a .git directory alone(B[m
ok 27 - mergetool -Oorder-file is honored(B[m
[32m# passed all 27 test(s)(B[m
[36m1..27(B[m
[33mnot ok 49 - git merge --no-ff: replace submodule with a directory must fail # TODO known breakage(B[m
[33mnot ok 50 - git merge --no-ff: replace submodule containing a .git directory with a directory must fail # TODO known breakage(B[m
[33mnot ok 51 - git merge --no-ff: replace submodule with a file must fail # TODO known breakage(B[m
[33mnot ok 52 - git merge --no-ff: replace submodule containing a .git directory with a file must fail # TODO known breakage(B[m
ok 53 - git merge --no-ff: modified submodule does not update submodule work tree(B[m
ok 54 - git merge --no-ff: modified submodule does not update submodule work tree to invalid commit(B[m
ok 55 - git merge --no-ff: modified submodule does not update submodule work tree from invalid commit(B[m
ok 56 - git merge --no-ff: added submodule doesn't remove untracked unignored file with same name(B[m
[33m# still have 11 known breakage(s)(B[m
[32m# passed all remaining 45 test(s)(B[m
[36m1..56(B[m
make[2]: Target 'aggregate-results-and-cleanup' not remade because of errors.
make[2]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t'
make[1]: *** [Makefile:43: test] Error 2
make[1]: Target 'all' not remade because of errors.
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t'
make: *** [Makefile:2783: test] Error 2
emake failed
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 aggregate-results 
for f in 'test-results'/t*-*.counts; do \
	echo "$f"; \
done | '/bin/sh' ./aggregate-results.sh

failed test(s): t9010

fixed   0
success 20144
failed  2
broken  233
total   21057
 [31;01m*[0m ERROR: dev-vcs/git-2.26.2::gentoo failed (test phase):
 [31;01m*[0m   tests failed. Please file a bug.
 [31;01m*[0m 
 [31;01m*[0m Call stack:
 [31;01m*[0m     ebuild.sh, line 125:  Called src_test
 [31;01m*[0m   environment, line 3340:  Called die
 [31;01m*[0m The specific snippet of code:
 [31;01m*[0m       [[ ${rc} -eq 0 ]] || die "tests failed. Please file a bug."
 [31;01m*[0m 
 [31;01m*[0m If you need support, post the output of `emerge --info '=dev-vcs/git-2.26.2::gentoo'`,
 [31;01m*[0m the complete build log and the output of `emerge -pqv '=dev-vcs/git-2.26.2::gentoo'`.
 [31;01m*[0m The complete build log is located at '/var/log/emerge-log/dev-vcs:git-2.26.2:20200515-050200.log'.
 [31;01m*[0m For convenience, a symlink to the build log is located at '/tmp/portage/dev-vcs/git-2.26.2/temp/build.log'.
 [31;01m*[0m The ebuild environment file is located at '/tmp/portage/dev-vcs/git-2.26.2/temp/environment'.
 [31;01m*[0m Working directory: '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/t'
 [31;01m*[0m S: '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2'

>>> Install dev-vcs/git-2.26.2 into /tmp/portage/dev-vcs/git-2.26.2/image
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 install 
make -C templates  SHELL_PATH='/bin/sh' PERL_PATH='/usr/bin/perl'
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
: no custom templates yet
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
install -d -m 755 '/tmp/portage/dev-vcs/git-2.26.2/image/usr/bin'
install -d -m 755 '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core'
install   git-credential-store git-daemon git-fast-import git-http-backend git-imap-send git-sh-i18n--envsubst git-shell git-remote-testsvn git-http-fetch git-http-push git-credential-cache git-credential-cache--daemon git-remote-http git-remote-https git-remote-ftp git-remote-ftps git-bisect git-difftool--helper git-filter-branch git-merge-octopus git-merge-one-file git-merge-resolve git-mergetool git-quiltimport git-legacy-stash git-request-pull git-submodule git-web--browse git-add--interactive git-archimport git-send-email git-svn git-cvsexportcommit git-cvsimport git-cvsserver git-p4 git-instaweb '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core'
install -m 644  git-mergetool--lib git-parse-remote git-rebase--preserve-merges git-sh-setup git-sh-i18n '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core'
install git git-upload-pack git-receive-pack git-upload-archive git-shell git-cvsserver '/tmp/portage/dev-vcs/git-2.26.2/image/usr/bin'
make -C templates DESTDIR='/tmp/portage/dev-vcs/git-2.26.2/image' install
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
: no custom templates yet
install -d -m 755 '/tmp/portage/dev-vcs/git-2.26.2/image/usr/share/git-core/templates'
(cd blt && tar cf - .) | \
(cd '/tmp/portage/dev-vcs/git-2.26.2/image/usr/share/git-core/templates' && umask 022 && tar xof -)
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2/templates'
install -d -m 755 '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core/mergetools'
install -m 644 mergetools/* '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core/mergetools'
bindir=$(cd '/tmp/portage/dev-vcs/git-2.26.2/image/usr/bin' && pwd) && \
execdir=$(cd '/tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core' && pwd) && \
destdir_from_execdir_SQ=$(echo 'libexec/git-core' | sed -e 's|[^/][^/]*|..|g') && \
{ test "$bindir/" = "$execdir/" || \
  for p in git git-shell git-cvsserver; do \
	rm -f "$execdir/$p" && \
	test -n "" && \
	ln -s "$destdir_from_execdir_SQ/bin/$p" "$execdir/$p" || \
	{ test -z "" && \
	  ln "$bindir/$p" "$execdir/$p" 2>/dev/null || \
	  cp "$bindir/$p" "$execdir/$p" || exit; } \
  done; \
} && \
for p in git-receive-pack git-upload-archive git-upload-pack; do \
	rm -f "$bindir/$p" && \
	test -n "" && \
	ln -s "git" "$bindir/$p" || \
	{ test -z "" && \
	  ln "$bindir/git" "$bindir/$p" 2>/dev/null || \
	  ln -s "git" "$bindir/$p" 2>/dev/null || \
	  cp "$bindir/git" "$bindir/$p" || exit; } \
done && \
for p in  git-add git-am git-annotate git-apply git-archive git-bisect--helper git-blame git-branch git-bundle git-cat-file git-check-attr git-check-ignore git-check-mailmap git-check-ref-format git-checkout-index git-checkout git-clean git-clone git-column git-commit-tree git-commit git-commit-graph git-config git-count-objects git-credential git-describe git-diff-files git-diff-index git-diff-tree git-diff git-difftool git-env--helper git-fast-export git-fetch-pack git-fetch git-fmt-merge-msg git-for-each-ref git-fsck git-gc git-get-tar-commit-id git-grep git-hash-object git-help git-index-pack git-init-db git-interpret-trailers git-log git-ls-files git-ls-remote git-ls-tree git-mailinfo git-mailsplit git-merge git-merge-base git-merge-file git-merge-index git-merge-ours git-merge-recursive git-merge-tree git-mktag git-mktree git-multi-pack-index git-mv git-name-rev git-notes git-pack-objects git-pack-redundant git-pack-refs git-patch-id git-prune-packed git-prune git-pull git-push git-range-diff git-read-tree git-rebase git-receive-pack git-reflog git-remote git-remote-ext git-remote-fd git-repack git-replace git-rerere git-reset git-rev-list git-rev-parse git-revert git-rm git-send-pack git-shortlog git-show-branch git-show-index git-show-ref git-sparse-checkout git-stash git-stripspace git-submodule--helper git-symbolic-ref git-tag git-unpack-file git-unpack-objects git-update-index git-update-ref git-update-server-info git-upload-archive git-upload-pack git-var git-verify-commit git-verify-pack git-verify-tag git-worktree git-write-tree git-cherry git-cherry-pick git-format-patch git-fsck-objects git-init git-merge-subtree git-restore git-show git-stage git-status git-switch git-whatchanged; do \
	rm -f "$execdir/$p" && \
	test -n "" && \
	ln -s "$destdir_from_execdir_SQ/bin/git" "$execdir/$p" || \
	{ test -z "" && \
	  ln "$execdir/git" "$execdir/$p" 2>/dev/null || \
	  ln -s "git" "$execdir/$p" 2>/dev/null || \
	  cp "$execdir/git" "$execdir/$p" || exit; } \
done && \
remote_curl_aliases="git-remote-https git-remote-ftp git-remote-ftps" && \
for p in $remote_curl_aliases; do \
	rm -f "$execdir/$p" && \
	test -n "" && \
	ln -s "git-remote-http" "$execdir/$p" || \
	{ test -z "" && \
	  ln "$execdir/git-remote-http" "$execdir/$p" 2>/dev/null || \
	  ln -s "git-remote-http" "$execdir/$p" 2>/dev/null || \
	  cp "$execdir/git-remote-http" "$execdir/$p" || exit; } \
done && \
./check_bindir "z$bindir" "z$execdir" "$bindir/git-add"
make -j12 ASCIIDOC_NO_ROFF=YesPlease NO_CVS=YesPlease NO_GETTEXT=YesPlease NO_PERL=YesPlease NO_PYTHON=YesPlease NO_SVN_TESTS=YesPlease NO_TCLTK=YesPlease BLK_SHA1=YesPlease NO_FINK=YesPlease NO_DARWIN_PORTS=YesPlease INSTALL=install TAR=tar SHELL_PATH=/bin/sh SANE_TOOL_PATH= OLD_ICONV= NO_EXTERNAL_GREP= prefix=/usr htmldir=/usr/share/doc/git-2.26.2/html perllibdir= sysconfdir=/etc DESTDIR=/tmp/portage/dev-vcs/git-2.26.2/image GIT_TEST_OPTS=--no-color OPTAR=x86_64-pc-linux-gnu-ar OPTCC=x86_64-pc-linux-gnu-gcc 'OPTCFLAGS=-O3 -march=native -pipe -g0 -fno-stack-protector -fno-stack-clash-protection -fstack-check=no -fno-stack-check' 'OPTLDFLAGS=-Wl,-O1 -Wl,--as-needed -Wl,--defsym=__gentoo_check_ldflags__=0 -Wl,--hash-style=gnu -Wl,-z,norelro' PERL_PATH=/usr/bin/perl PERL_MM_OPT= PYTHON_PATH= V=1 install 
make -C ../../ GIT-VERSION-FILE
make[1]: Entering directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2'
make[1]: 'GIT-VERSION-FILE' is up to date.
make[1]: Leaving directory '/tmp/portage/dev-vcs/git-2.26.2/work/git-2.26.2'
install -d -m 755 /tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core
install -m 755 git-subtree /tmp/portage/dev-vcs/git-2.26.2/image/usr/libexec/git-core
>>> Completed installing dev-vcs/git-2.26.2 into /tmp/portage/dev-vcs/git-2.26.2/image

 [32;01m*[0m Final size of build directory: 107536 KiB (105.0 MiB)
 [32;01m*[0m Final size of installed tree:   37928 KiB ( 37.0 MiB)

strip: x86_64-pc-linux-gnu-strip --strip-unneeded -N __gentoo_check_ldflags__ -R .comment -R .GCC.command.line -R .note.gnu.gold-version
   /usr/libexec/git-core/git-credential-store
   /usr/libexec/git-core/git-http-backend
   /usr/libexec/git-core/git-fast-import
   /usr/libexec/git-core/git-imap-send
   /usr/libexec/git-core/git-daemon
   /usr/libexec/git-core/git-remote-testsvn
   /usr/libexec/git-core/git-http-fetch
   /usr/libexec/git-core/git-sh-i18n--envsubst
   /usr/libexec/git-core/git-credential-cache
   /usr/libexec/git-core/git-remote-ftp
   /usr/libexec/git-core/git-credential-cache--daemon
   /usr/libexec/git-core/git-http-push
   /usr/libexec/git-core/git-remote-http
   /usr/libexec/git-core/git-remote-https
   /usr/libexec/git-core/git-remote-ftps
   /usr/libexec/git-core/git-commit-tree
   /usr/libexec/git-core/git-config
   /usr/libexec/git-core/git-check-mailmap
   /usr/libexec/git-core/git-am
   /usr/libexec/git-core/git-diff-tree
   /usr/libexec/git-core/git-blame
   /usr/libexec/git-core/git-update-ref
   /usr/libexec/git-core/git-hash-object
   /usr/libexec/git-core/git-verify-tag
   /usr/libexec/git-core/git-diff-files
   /usr/libexec/git-core/git-stash
   /usr/libexec/git-core/git-patch-id
   /usr/libexec/git-core/git-fetch-pack
   /usr/libexec/git-core/git-rm
   /usr/libexec/git-core/git-pack-refs
   /usr/libexec/git-core/git-clean
   /usr/libexec/git-core/git-show-ref
   /usr/libexec/git-core/git-ls-tree
   /usr/libexec/git-core/git-mv
   /usr/libexec/git-core/git-interpret-trailers
   /usr/libexec/git-core/git-format-patch
   /usr/libexec/git-core/git-status
   /usr/libexec/git-core/git-init-db
   /usr/libexec/git-core/git-stripspace
   /usr/libexec/git-core/git-rev-list
   /usr/libexec/git-core/git-difftool
   /usr/libexec/git-core/git-switch
   /usr/libexec/git-core/git-repack
   /usr/libexec/git-core/git-fetch
   /usr/libexec/git-core/git-fsck
   /usr/libexec/git-core/git-receive-pack
   /usr/libexec/git-core/git-remote
   /usr/libexec/git-core/git-stage
   /usr/libexec/git-core/git-revert
   /usr/libexec/git-core/git-prune-packed
   /usr/libexec/git-core/git-replace
   /usr/libexec/git-core/git-rebase
   /usr/libexec/git-core/git-merge-base
   /usr/libexec/git-core/git-merge-index
   /usr/libexec/git-core/git-merge-ours
   /usr/libexec/git-core/git-cherry
   /usr/libexec/git-core/git-fmt-merge-msg
   /usr/libexec/git-core/git-push
   /usr/libexec/git-core/git-credential
   /usr/libexec/git-core/git-update-server-info
   /usr/libexec/git-core/git-diff
   /usr/libexec/git-core/git-merge-recursive
   /usr/libexec/git-core/git-archive
   /usr/libexec/git-core/git-diff-index
   /usr/libexec/git-core/git-commit
   /usr/libexec/git-core/git-bisect--helper
   /usr/libexec/git-core/git-pack-objects
   /usr/libexec/git-core/git-check-attr
   /usr/libexec/git-core/git-show-branch
   /usr/libexec/git-core/git-pull
   /usr/libexec/git-core/git-env--helper
   /usr/libexec/git-core/git-reset
   /usr/libexec/git-core/git-whatchanged
   /usr/libexec/git-core/git-gc
   /usr/libexec/git-core/git-cat-file
   /usr/libexec/git-core/git-merge-subtree
   /usr/libexec/git-core/git-branch
   /usr/libexec/git-core/git-worktree
   /usr/libexec/git-core/git-mktag
   /usr/libexec/git-core/git-notes
   /usr/libexec/git-core/git-prune
   /usr/libexec/git-core/git-write-tree
   /usr/libexec/git-core/git-unpack-file
   /usr/libexec/git-core/git-init
   /usr/libexec/git-core/git-upload-archive
   /usr/libexec/git-core/git-remote-fd
   /usr/libexec/git-core/git-name-rev
   /usr/libexec/git-core/git-merge-tree
   /usr/libexec/git-core/git-mailsplit
   /usr/libexec/git-core/git-range-diff
   /usr/libexec/git-core/git-rerere
   /usr/libexec/git-core/git-verify-commit
   /usr/libexec/git-core/git-annotate
   /usr/libexec/git-core/git-ls-remote
   /usr/libexec/git-core/git-remote-ext
   /usr/libexec/git-core/git-describe
   /usr/libexec/git-core/git-restore
   /usr/libexec/git-core/git-sparse-checkout
   /usr/libexec/git-core/git-update-index
   /usr/libexec/git-core/git-pack-redundant
   /usr/libexec/git-core/git-send-pack
   /usr/libexec/git-core/git-var
   /usr/libexec/git-core/git-index-pack
   /usr/libexec/git-core/git-bundle
   /usr/libexec/git-core/git-add
   /usr/libexec/git-core/git-unpack-objects
   /usr/libexec/git-core/git-fast-export
   /usr/libexec/git-core/git-mktree
   /usr/libexec/git-core/git-help
   /usr/libexec/git-core/git
   /usr/libexec/git-core/git-show-index
   /usr/libexec/git-core/git-rev-parse
   /usr/libexec/git-core/git-show
   /usr/libexec/git-core/git-check-ignore
   /usr/libexec/git-core/git-tag
   /usr/libexec/git-core/git-mailinfo
   /usr/libexec/git-core/git-get-tar-commit-id
   /usr/libexec/git-core/git-merge-file
   /usr/libexec/git-core/git-check-ref-format
   /usr/libexec/git-core/git-shortlog
   /usr/libexec/git-core/git-count-objects
   /usr/libexec/git-core/git-merge
   /usr/libexec/git-core/git-log
   /usr/libexec/git-core/git-apply
   /usr/libexec/git-core/git-multi-pack-index
   /usr/libexec/git-core/git-fsck-objects
   /usr/libexec/git-core/git-upload-pack
   /usr/libexec/git-core/git-checkout-index
   /usr/libexec/git-core/git-ls-files
   /usr/libexec/git-core/git-submodule--helper
   /usr/libexec/git-core/git-cherry-pick
   /usr/libexec/git-core/git-symbolic-ref
   /usr/libexec/git-core/git-clone
   /usr/libexec/git-core/git-commit-graph
   /usr/libexec/git-core/git-reflog
   /usr/libexec/git-core/git-for-each-ref
   /usr/libexec/git-core/git-checkout
   /usr/libexec/git-core/git-verify-pack
   /usr/libexec/git-core/git-read-tree
   /usr/libexec/git-core/git-grep
   /usr/libexec/git-core/git-column
   /usr/bin/git-receive-pack
   /usr/bin/git-upload-archive
   /usr/bin/git
   /usr/bin/git-upload-pack
   /usr/libexec/git-core/git-shell
   /usr/bin/git-shell
./
./lib/
./lib/systemd/
./lib/systemd/system/
./lib/systemd/system/git-daemon.socket
./lib/systemd/system/git-daemon@.service
./usr/
./usr/lib/
./usr/lib/debug/
./usr/lib/debug/usr/
./usr/lib/debug/usr/libexec/
./usr/lib/debug/usr/libexec/git-core/
./usr/lib/debug/usr/libexec/git-core/git-blame.debug
./usr/lib/debug/usr/libexec/git-core/git-worktree.debug
./usr/lib/debug/usr/libexec/git-core/git-mktree.debug
./usr/lib/debug/usr/libexec/git-core/git-submodule--helper.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-fd.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-ours.debug
./usr/lib/debug/usr/libexec/git-core/git-pack-objects.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-http.debug
./usr/lib/debug/usr/libexec/git-core/git-range-diff.debug
./usr/lib/debug/usr/libexec/git-core/git-var.debug
./usr/lib/debug/usr/libexec/git-core/git-format-patch.debug
./usr/lib/debug/usr/libexec/git-core/git-commit-tree.debug
./usr/lib/debug/usr/libexec/git-core/git-index-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-reflog.debug
./usr/lib/debug/usr/libexec/git-core/git-http-backend.debug
./usr/lib/debug/usr/libexec/git-core/git-credential-store.debug
./usr/lib/debug/usr/libexec/git-core/git-patch-id.debug
./usr/lib/debug/usr/libexec/git-core/git-interpret-trailers.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-https.debug
./usr/lib/debug/usr/libexec/git-core/git-cat-file.debug
./usr/lib/debug/usr/libexec/git-core/git-clean.debug
./usr/lib/debug/usr/libexec/git-core/git-update-ref.debug
./usr/lib/debug/usr/libexec/git-core/git-repack.debug
./usr/lib/debug/usr/libexec/git-core/git-fast-export.debug
./usr/lib/debug/usr/libexec/git-core/git-check-mailmap.debug
./usr/lib/debug/usr/libexec/git-core/git-write-tree.debug
./usr/lib/debug/usr/libexec/git-core/git-name-rev.debug
./usr/lib/debug/usr/libexec/git-core/git-checkout.debug
./usr/lib/debug/usr/libexec/git-core/git-fsck.debug
./usr/lib/debug/usr/libexec/git-core/git-credential-cache.debug
./usr/lib/debug/usr/libexec/git-core/git-archive.debug
./usr/lib/debug/usr/libexec/git-core/git-sparse-checkout.debug
./usr/lib/debug/usr/libexec/git-core/git-annotate.debug
./usr/lib/debug/usr/libexec/git-core/git-mailsplit.debug
./usr/lib/debug/usr/libexec/git-core/git-grep.debug
./usr/lib/debug/usr/libexec/git-core/git-pull.debug
./usr/lib/debug/usr/libexec/git-core/git-pack-redundant.debug
./usr/lib/debug/usr/libexec/git-core/git-shortlog.debug
./usr/lib/debug/usr/libexec/git-core/git-bisect--helper.debug
./usr/lib/debug/usr/libexec/git-core/git-fetch-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-ext.debug
./usr/lib/debug/usr/libexec/git-core/git-notes.debug
./usr/lib/debug/usr/libexec/git-core/git-diff.debug
./usr/lib/debug/usr/libexec/git-core/git-rm.debug
./usr/lib/debug/usr/libexec/git-core/git-show-branch.debug
./usr/lib/debug/usr/libexec/git-core/git-daemon.debug
./usr/lib/debug/usr/libexec/git-core/git-mktag.debug
./usr/lib/debug/usr/libexec/git-core/git-receive-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-unpack-objects.debug
./usr/lib/debug/usr/libexec/git-core/git-commit-graph.debug
./usr/lib/debug/usr/libexec/git-core/git-rerere.debug
./usr/lib/debug/usr/libexec/git-core/git-diff-tree.debug
./usr/lib/debug/usr/libexec/git-core/git-gc.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-ftp.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-recursive.debug
./usr/lib/debug/usr/libexec/git-core/git-show-index.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-subtree.debug
./usr/lib/debug/usr/libexec/git-core/git-restore.debug
./usr/lib/debug/usr/libexec/git-core/git-prune-packed.debug
./usr/lib/debug/usr/libexec/git-core/git-prune.debug
./usr/lib/debug/usr/libexec/git-core/git-http-fetch.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-tree.debug
./usr/lib/debug/usr/libexec/git-core/git.debug
./usr/lib/debug/usr/libexec/git-core/git-check-attr.debug
./usr/lib/debug/usr/libexec/git-core/git-add.debug
./usr/lib/debug/usr/libexec/git-core/git-http-push.debug
./usr/lib/debug/usr/libexec/git-core/git-sh-i18n--envsubst.debug
./usr/lib/debug/usr/libexec/git-core/git-switch.debug
./usr/lib/debug/usr/libexec/git-core/git-describe.debug
./usr/lib/debug/usr/libexec/git-core/git-rev-list.debug
./usr/lib/debug/usr/libexec/git-core/git-upload-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-credential.debug
./usr/lib/debug/usr/libexec/git-core/git-show-ref.debug
./usr/lib/debug/usr/libexec/git-core/git-ls-files.debug
./usr/lib/debug/usr/libexec/git-core/git-rebase.debug
./usr/lib/debug/usr/libexec/git-core/git-am.debug
./usr/lib/debug/usr/libexec/git-core/git-count-objects.debug
./usr/lib/debug/usr/libexec/git-core/git-pack-refs.debug
./usr/lib/debug/usr/libexec/git-core/git-verify-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-index.debug
./usr/lib/debug/usr/libexec/git-core/git-read-tree.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-ftps.debug
./usr/lib/debug/usr/libexec/git-core/git-update-index.debug
./usr/lib/debug/usr/libexec/git-core/git-show.debug
./usr/lib/debug/usr/libexec/git-core/git-merge.debug
./usr/lib/debug/usr/libexec/git-core/git-log.debug
./usr/lib/debug/usr/libexec/git-core/git-whatchanged.debug
./usr/lib/debug/usr/libexec/git-core/git-reset.debug
./usr/lib/debug/usr/libexec/git-core/git-ls-tree.debug
./usr/lib/debug/usr/libexec/git-core/git-mv.debug
./usr/lib/debug/usr/libexec/git-core/git-check-ignore.debug
./usr/lib/debug/usr/libexec/git-core/git-check-ref-format.debug
./usr/lib/debug/usr/libexec/git-core/git-cherry.debug
./usr/lib/debug/usr/libexec/git-core/git-branch.debug
./usr/lib/debug/usr/libexec/git-core/git-symbolic-ref.debug
./usr/lib/debug/usr/libexec/git-core/git-remote-testsvn.debug
./usr/lib/debug/usr/libexec/git-core/git-stage.debug
./usr/lib/debug/usr/libexec/git-core/git-verify-tag.debug
./usr/lib/debug/usr/libexec/git-core/git-replace.debug
./usr/lib/debug/usr/libexec/git-core/git-remote.debug
./usr/lib/debug/usr/libexec/git-core/git-stash.debug
./usr/lib/debug/usr/libexec/git-core/git-push.debug
./usr/lib/debug/usr/libexec/git-core/git-ls-remote.debug
./usr/lib/debug/usr/libexec/git-core/git-stripspace.debug
./usr/lib/debug/usr/libexec/git-core/git-apply.debug
./usr/lib/debug/usr/libexec/git-core/git-status.debug
./usr/lib/debug/usr/libexec/git-core/git-commit.debug
./usr/lib/debug/usr/libexec/git-core/git-fsck-objects.debug
./usr/lib/debug/usr/libexec/git-core/git-unpack-file.debug
./usr/lib/debug/usr/libexec/git-core/git-verify-commit.debug
./usr/lib/debug/usr/libexec/git-core/git-shell.debug
./usr/lib/debug/usr/libexec/git-core/git-column.debug
./usr/lib/debug/usr/libexec/git-core/git-upload-archive.debug
./usr/lib/debug/usr/libexec/git-core/git-fast-import.debug
./usr/lib/debug/usr/libexec/git-core/git-init.debug
./usr/lib/debug/usr/libexec/git-core/git-clone.debug
./usr/lib/debug/usr/libexec/git-core/git-diff-index.debug
./usr/lib/debug/usr/libexec/git-core/git-multi-pack-index.debug
./usr/lib/debug/usr/libexec/git-core/git-diff-files.debug
./usr/lib/debug/usr/libexec/git-core/git-send-pack.debug
./usr/lib/debug/usr/libexec/git-core/git-rev-parse.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-base.debug
./usr/lib/debug/usr/libexec/git-core/git-fmt-merge-msg.debug
./usr/lib/debug/usr/libexec/git-core/git-fetch.debug
./usr/lib/debug/usr/libexec/git-core/git-tag.debug
./usr/lib/debug/usr/libexec/git-core/git-update-server-info.debug
./usr/lib/debug/usr/libexec/git-core/git-credential-cache--daemon.debug
./usr/lib/debug/usr/libexec/git-core/git-for-each-ref.debug
./usr/lib/debug/usr/libexec/git-core/git-help.debug
./usr/lib/debug/usr/libexec/git-core/git-mailinfo.debug
./usr/lib/debug/usr/libexec/git-core/git-cherry-pick.debug
./usr/lib/debug/usr/libexec/git-core/git-env--helper.debug
./usr/lib/debug/usr/libexec/git-core/git-config.debug
./usr/lib/debug/usr/libexec/git-core/git-difftool.debug
./usr/lib/debug/usr/libexec/git-core/git-merge-file.debug
./usr/lib/debug/usr/libexec/git-core/git-bundle.debug
./usr/lib/debug/usr/libexec/git-core/git-imap-send.debug
./usr/lib/debug/usr/libexec/git-core/git-checkout-index.debug
./usr/lib/debug/usr/libexec/git-core/git-revert.debug
./usr/lib/debug/usr/libexec/git-core/git-get-tar-commit-id.debug
./usr/lib/debug/usr/libexec/git-core/git-hash-object.debug
./usr/lib/debug/usr/libexec/git-core/git-init-db.debug
./usr/lib/debug/usr/bin/
./usr/lib/debug/usr/bin/git-receive-pack.debug
./usr/lib/debug/usr/bin/git.debug
./usr/lib/debug/usr/bin/git-upload-pack.debug
./usr/lib/debug/usr/bin/git-shell.debug
./usr/lib/debug/usr/bin/git-upload-archive.debug
./usr/libexec/
./usr/libexec/git-core/
./usr/libexec/git-core/git-format-patch
./usr/libexec/git-core/git-reflog
./usr/libexec/git-core/git-add
./usr/libexec/git-core/git-ls-files
./usr/libexec/git-core/git-rebase
./usr/libexec/git-core/git-fetch-pack
./usr/libexec/git-core/git-merge-octopus
./usr/libexec/git-core/git-commit-graph
./usr/libexec/git-core/git-pack-refs
./usr/libexec/git-core/git-remote
./usr/libexec/git-core/git-cvsimport
./usr/libexec/git-core/git-check-ignore
./usr/libexec/git-core/git-instaweb
./usr/libexec/git-core/git-count-objects
./usr/libexec/git-core/git-http-fetch
./usr/libexec/git-core/git-mktree
./usr/libexec/git-core/git-difftool--helper
./usr/libexec/git-core/git-quiltimport
./usr/libexec/git-core/git-column
./usr/libexec/git-core/git-reset
./usr/libexec/git-core/git-subtree
./usr/libexec/git-core/git-grep
./usr/libexec/git-core/git-show-branch
./usr/libexec/git-core/git-apply
./usr/libexec/git-core/git-archive
./usr/libexec/git-core/git-sh-i18n
./usr/libexec/git-core/git-add--interactive
./usr/libexec/git-core/git-check-attr
./usr/libexec/git-core/git-receive-pack
./usr/libexec/git-core/git-verify-pack
./usr/libexec/git-core/git-contacts
./usr/libexec/git-core/git-status
./usr/libexec/git-core/git-upload-archive
./usr/libexec/git-core/git-diff
./usr/libexec/git-core/git-merge-resolve
./usr/libexec/git-core/git-imap-send
./usr/libexec/git-core/git-fsck
./usr/libexec/git-core/git-merge-file
./usr/libexec/git-core/git-bisect
./usr/libexec/git-core/git-checkout
./usr/libexec/git-core/git-legacy-stash
./usr/libexec/git-core/git-verify-commit
./usr/libexec/git-core/git-rm
./usr/libexec/git-core/git-http-backend
./usr/libexec/git-core/git-push
./usr/libexec/git-core/git-mailinfo
./usr/libexec/git-core/git-fetch
./usr/libexec/git-core/git-remote-ftps
./usr/libexec/git-core/git-cherry
./usr/libexec/git-core/git-clean
./usr/libexec/git-core/git-repack
./usr/libexec/git-core/git-log
./usr/libexec/git-core/git-checkout-index
./usr/libexec/git-core/git-pack-objects
./usr/libexec/git-core/git-ls-remote
./usr/libexec/git-core/git-rerere
./usr/libexec/git-core/git-help
./usr/libexec/git-core/git-env--helper
./usr/libexec/git-core/git-fast-export
./usr/libexec/git-core/git-send-pack
./usr/libexec/git-core/git-replace
./usr/libexec/git-core/git-unpack-file
./usr/libexec/git-core/git-fsck-objects
./usr/libexec/git-core/git-mktag
./usr/libexec/git-core/git-fmt-merge-msg
./usr/libexec/git-core/git-merge-subtree
./usr/libexec/git-core/git-var
./usr/libexec/git-core/git-parse-remote
./usr/libexec/git-core/git-show
./usr/libexec/git-core/git-am
./usr/libexec/git-core/git-diff-files
./usr/libexec/git-core/git-archimport
./usr/libexec/git-core/git-sh-i18n--envsubst
./usr/libexec/git-core/git-diff-tree
./usr/libexec/git-core/git-get-tar-commit-id
./usr/libexec/git-core/git-remote-testsvn
./usr/libexec/git-core/git-prune-packed
./usr/libexec/git-core/git-web--browse
./usr/libexec/git-core/git-branch
./usr/libexec/git-core/git-daemon
./usr/libexec/git-core/git-worktree
./usr/libexec/git-core/git-credential
./usr/libexec/git-core/git-revert
./usr/libexec/git-core/git-merge-recursive
./usr/libexec/git-core/git-sh-setup
./usr/libexec/git-core/git-jump
./usr/libexec/git-core/git-verify-tag
./usr/libexec/git-core/git-blame
./usr/libexec/git-core/git-resurrect
./usr/libexec/git-core/git-submodule--helper
./usr/libexec/git-core/git-credential-cache--daemon
./usr/libexec/git-core/git-show-ref
./usr/libexec/git-core/git-update-server-info
./usr/libexec/git-core/git-write-tree
./usr/libexec/git-core/git-commit
./usr/libexec/git-core/git-rebase--preserve-merges
./usr/libexec/git-core/git-cvsserver
./usr/libexec/git-core/git-bundle
./usr/libexec/git-core/git-remote-ext
./usr/libexec/git-core/git-name-rev
./usr/libexec/git-core/git-merge-tree
./usr/libexec/git-core/git-send-email
./usr/libexec/git-core/git-init-db
./usr/libexec/git-core/git-range-diff
./usr/libexec/git-core/git-gc
./usr/libexec/git-core/git-patch-id
./usr/libexec/git-core/git-notes
./usr/libexec/git-core/git-show-index
./usr/libexec/git-core/git-difftool
./usr/libexec/git-core/git-cherry-pick
./usr/libexec/git-core/git-credential-store
./usr/libexec/git-core/git-request-pull
./usr/libexec/git-core/git-cvsexportcommit
./usr/libexec/git-core/git-interpret-trailers
./usr/libexec/git-core/git-submodule
./usr/libexec/git-core/git-cat-file
./usr/libexec/git-core/git-stash
./usr/libexec/git-core/git-check-ref-format
./usr/libexec/git-core/git-update-index
./usr/libexec/git-core/git-http-push
./usr/libexec/git-core/git-remote-http
./usr/libexec/git-core/git-mergetool
./usr/libexec/git-core/git-rev-list
./usr/libexec/git-core/git-shortlog
./usr/libexec/git-core/git-read-tree
./usr/libexec/git-core/git-stripspace
./usr/libexec/git-core/git-unpack-objects
./usr/libexec/git-core/git-annotate
./usr/libexec/git-core/git-hash-object
./usr/libexec/git-core/git-mv
./usr/libexec/git-core/git-merge-index
./usr/libexec/git-core/git
./usr/libexec/git-core/git-merge-ours
./usr/libexec/git-core/mergetools/
./usr/libexec/git-core/mergetools/deltawalker
./usr/libexec/git-core/mergetools/kdiff3
./usr/libexec/git-core/mergetools/araxis
./usr/libexec/git-core/mergetools/smerge
./usr/libexec/git-core/mergetools/vimdiff2
./usr/libexec/git-core/mergetools/codecompare
./usr/libexec/git-core/mergetools/ecmerge
./usr/libexec/git-core/mergetools/p4merge
./usr/libexec/git-core/mergetools/vimdiff3
./usr/libexec/git-core/mergetools/opendiff
./usr/libexec/git-core/mergetools/gvimdiff3
./usr/libexec/git-core/mergetools/emerge
./usr/libexec/git-core/mergetools/bc3
./usr/libexec/git-core/mergetools/bc
./usr/libexec/git-core/mergetools/gvimdiff
./usr/libexec/git-core/mergetools/gvimdiff2
./usr/libexec/git-core/mergetools/meld
./usr/libexec/git-core/mergetools/guiffy
./usr/libexec/git-core/mergetools/kompare
./usr/libexec/git-core/mergetools/xxdiff
./usr/libexec/git-core/mergetools/tkdiff
./usr/libexec/git-core/mergetools/diffuse
./usr/libexec/git-core/mergetools/diffmerge
./usr/libexec/git-core/mergetools/tortoisemerge
./usr/libexec/git-core/mergetools/examdiff
./usr/libexec/git-core/mergetools/vimdiff
./usr/libexec/git-core/mergetools/winmerge
./usr/libexec/git-core/git-clone
./usr/libexec/git-core/git-merge-base
./usr/libexec/git-core/git-for-each-ref
./usr/libexec/git-core/git-index-pack
./usr/libexec/git-core/git-sparse-checkout
./usr/libexec/git-core/git-mailsplit
./usr/libexec/git-core/git-commit-tree
./usr/libexec/git-core/git-multi-pack-index
./usr/libexec/git-core/git-merge-one-file
./usr/libexec/git-core/git-p4
./usr/libexec/git-core/git-remote-https
./usr/libexec/git-core/git-describe
./usr/libexec/git-core/git-credential-cache
./usr/libexec/git-core/git-merge
./usr/libexec/git-core/git-mergetool--lib
./usr/libexec/git-core/git-prune
./usr/libexec/git-core/git-ls-tree
./usr/libexec/git-core/git-rev-parse
./usr/libexec/git-core/git-remote-fd
./usr/libexec/git-core/git-pack-redundant
./usr/libexec/git-core/git-remote-ftp
./usr/libexec/git-core/git-init
./usr/libexec/git-core/git-check-mailmap
./usr/libexec/git-core/git-pull
./usr/libexec/git-core/git-config
./usr/libexec/git-core/git-symbolic-ref
./usr/libexec/git-core/git-whatchanged
./usr/libexec/git-core/git-tag
./usr/libexec/git-core/git-fast-import
./usr/libexec/git-core/git-shell
./usr/libexec/git-core/git-update-ref
./usr/libexec/git-core/git-bisect--helper
./usr/libexec/git-core/git-stage
./usr/libexec/git-core/git-filter-branch
./usr/libexec/git-core/git-switch
./usr/libexec/git-core/git-upload-pack
./usr/libexec/git-core/git-diff-index
./usr/libexec/git-core/git-restore
./usr/bin/
./usr/bin/git-receive-pack
./usr/bin/git-upload-archive
./usr/bin/diff-highlight
./usr/bin/git-cvsserver
./usr/bin/git
./usr/bin/import-tars
./usr/bin/git-shell
./usr/bin/git-upload-pack
./usr/share/
./usr/share/bash-completion/
./usr/share/bash-completion/completions/
./usr/share/bash-completion/completions/git
./usr/share/bash-completion/completions/gitk
./usr/share/man/
./usr/share/man/man1/
./usr/share/man/man1/git.1.bz2
./usr/share/man/man1/git-remote-fd.1.bz2
./usr/share/man/man1/git-sh-i18n.1.bz2
./usr/share/man/man1/git-rev-list.1.bz2
./usr/share/man/man1/git-parse-remote.1.bz2
./usr/share/man/man1/git-show-branch.1.bz2
./usr/share/man/man1/git-pack-objects.1.bz2
./usr/share/man/man1/git-mergetool--lib.1.bz2
./usr/share/man/man1/git-apply.1.bz2
./usr/share/man/man1/git-switch.1.bz2
./usr/share/man/man1/git-merge-file.1.bz2
./usr/share/man/man1/git-describe.1.bz2
./usr/share/man/man1/git-fast-import.1.bz2
./usr/share/man/man1/git-notes.1.bz2
./usr/share/man/man1/git-shortlog.1.bz2
./usr/share/man/man1/git-mv.1.bz2
./usr/share/man/man1/git-update-ref.1.bz2
./usr/share/man/man1/git-stash.1.bz2
./usr/share/man/man1/git-prune-packed.1.bz2
./usr/share/man/man1/git-credential-cache.1.bz2
./usr/share/man/man1/git-daemon.1.bz2
./usr/share/man/man1/git-multi-pack-index.1.bz2
./usr/share/man/man1/git-restore.1.bz2
./usr/share/man/man1/git-read-tree.1.bz2
./usr/share/man/man1/git-replace.1.bz2
./usr/share/man/man1/git-gc.1.bz2
./usr/share/man/man1/git-pack-redundant.1.bz2
./usr/share/man/man1/git-format-patch.1.bz2
./usr/share/man/man1/git-count-objects.1.bz2
./usr/share/man/man1/git-web--browse.1.bz2
./usr/share/man/man1/git-commit-tree.1.bz2
./usr/share/man/man1/git-diff-files.1.bz2
./usr/share/man/man1/git-send-pack.1.bz2
./usr/share/man/man1/git-remote-ext.1.bz2
./usr/share/man/man1/git-whatchanged.1.bz2
./usr/share/man/man1/git-quiltimport.1.bz2
./usr/share/man/man1/git-upload-archive.1.bz2
./usr/share/man/man1/git-unpack-file.1.bz2
./usr/share/man/man1/git-show.1.bz2
./usr/share/man/man1/git-annotate.1.bz2
./usr/share/man/man1/git-cherry-pick.1.bz2
./usr/share/man/man1/git-rm.1.bz2
./usr/share/man/man1/git-branch.1.bz2
./usr/share/man/man1/git-diff-index.1.bz2
./usr/share/man/man1/git-prune.1.bz2
./usr/share/man/man1/gitweb.1.bz2
./usr/share/man/man1/git-var.1.bz2
./usr/share/man/man1/git-range-diff.1.bz2
./usr/share/man/man1/git-add.1.bz2
./usr/share/man/man1/git-grep.1.bz2
./usr/share/man/man1/git-merge-tree.1.bz2
./usr/share/man/man1/git-bisect.1.bz2
./usr/share/man/man1/git-hash-object.1.bz2
./usr/share/man/man1/git-mktag.1.bz2
./usr/share/man/man1/git-column.1.bz2
./usr/share/man/man1/git-p4.1.bz2
./usr/share/man/man1/git-archimport.1.bz2
./usr/share/man/man1/git-status.1.bz2
./usr/share/man/man1/git-help.1.bz2
./usr/share/man/man1/git-interpret-trailers.1.bz2
./usr/share/man/man1/git-unpack-objects.1.bz2
./usr/share/man/man1/git-fetch.1.bz2
./usr/share/man/man1/git-send-email.1.bz2
./usr/share/man/man1/git-shell.1.bz2
./usr/share/man/man1/git-ls-tree.1.bz2
./usr/share/man/man1/git-clone.1.bz2
./usr/share/man/man1/git-ls-files.1.bz2
./usr/share/man/man1/git-commit.1.bz2
./usr/share/man/man1/git-check-ignore.1.bz2
./usr/share/man/man1/git-remote.1.bz2
./usr/share/man/man1/git-mktree.1.bz2
./usr/share/man/man1/git-check-attr.1.bz2
./usr/share/man/man1/git-diff.1.bz2
./usr/share/man/man1/git-upload-pack.1.bz2
./usr/share/man/man1/git-repack.1.bz2
./usr/share/man/man1/git-show-ref.1.bz2
./usr/share/man/man1/git-rebase.1.bz2
./usr/share/man/man1/git-for-each-ref.1.bz2
./usr/share/man/man1/git-ls-remote.1.bz2
./usr/share/man/man1/git-rev-parse.1.bz2
./usr/share/man/man1/git-imap-send.1.bz2
./usr/share/man/man1/git-config.1.bz2
./usr/share/man/man1/git-cvsserver.1.bz2
./usr/share/man/man1/git-archive.1.bz2
./usr/share/man/man1/git-symbolic-ref.1.bz2
./usr/share/man/man1/git-reset.1.bz2
./usr/share/man/man1/git-verify-tag.1.bz2
./usr/share/man/man1/git-http-fetch.1.bz2
./usr/share/man/man1/git-clean.1.bz2
./usr/share/man/man1/git-sh-setup.1.bz2
./usr/share/man/man1/git-push.1.bz2
./usr/share/man/man1/git-show-index.1.bz2
./usr/share/man/man1/git-checkout.1.bz2
./usr/share/man/man1/git-sh-i18n--envsubst.1.bz2
./usr/share/man/man1/git-citool.1.bz2
./usr/share/man/man1/gitk.1.bz2
./usr/share/man/man1/git-update-index.1.bz2
./usr/share/man/man1/git-cat-file.1.bz2
./usr/share/man/man1/git-verify-commit.1.bz2
./usr/share/man/man1/git-am.1.bz2
./usr/share/man/man1/git-http-push.1.bz2
./usr/share/man/man1/git-credential-cache--daemon.1.bz2
./usr/share/man/man1/git-merge.1.bz2
./usr/share/man/man1/git-pull.1.bz2
./usr/share/man/man1/git-index-pack.1.bz2
./usr/share/man/man1/git-log.1.bz2
./usr/share/man/man1/git-mergetool.1.bz2
./usr/share/man/man1/git-http-backend.1.bz2
./usr/share/man/man1/git-mailinfo.1.bz2
./usr/share/man/man1/git-request-pull.1.bz2
./usr/share/man/man1/git-init-db.1.bz2
./usr/share/man/man1/git-cvsimport.1.bz2
./usr/share/man/man1/git-credential.1.bz2
./usr/share/man/man1/git-rerere.1.bz2
./usr/share/man/man1/git-merge-base.1.bz2
./usr/share/man/man1/git-blame.1.bz2
./usr/share/man/man1/git-check-mailmap.1.bz2
./usr/share/man/man1/git-mailsplit.1.bz2
./usr/share/man/man1/git-reflog.1.bz2
./usr/share/man/man1/git-patch-id.1.bz2
./usr/share/man/man1/git-checkout-index.1.bz2
./usr/share/man/man1/git-cherry.1.bz2
./usr/share/man/man1/git-receive-pack.1.bz2
./usr/share/man/man1/git-get-tar-commit-id.1.bz2
./usr/share/man/man1/git-merge-one-file.1.bz2
./usr/share/man/man1/git-submodule.1.bz2
./usr/share/man/man1/git-pack-refs.1.bz2
./usr/share/man/man1/git-fsck.1.bz2
./usr/share/man/man1/git-stripspace.1.bz2
./usr/share/man/man1/git-sparse-checkout.1.bz2
./usr/share/man/man1/git-cvsexportcommit.1.bz2
./usr/share/man/man1/git-update-server-info.1.bz2
./usr/share/man/man1/git-name-rev.1.bz2
./usr/share/man/man1/git-write-tree.1.bz2
./usr/share/man/man1/git-instaweb.1.bz2
./usr/share/man/man1/git-stage.1.bz2
./usr/share/man/man1/git-merge-index.1.bz2
./usr/share/man/man1/git-commit-graph.1.bz2
./usr/share/man/man1/git-verify-pack.1.bz2
./usr/share/man/man1/git-revert.1.bz2
./usr/share/man/man1/git-init.1.bz2
./usr/share/man/man1/git-diff-tree.1.bz2
./usr/share/man/man1/git-fast-export.1.bz2
./usr/share/man/man1/git-fsck-objects.1.bz2
./usr/share/man/man1/git-difftool.1.bz2
./usr/share/man/man1/git-credential-store.1.bz2
./usr/share/man/man1/git-tag.1.bz2
./usr/share/man/man1/git-worktree.1.bz2
./usr/share/man/man1/git-check-ref-format.1.bz2
./usr/share/man/man1/git-fmt-merge-msg.1.bz2
./usr/share/man/man1/git-filter-branch.1.bz2
./usr/share/man/man1/git-fetch-pack.1.bz2
./usr/share/man/man1/git-bundle.1.bz2
./usr/share/man/man1/git-gui.1.bz2
./usr/share/man/man5/
./usr/share/man/man5/gitweb.conf.5.bz2
./usr/share/man/man5/gitmodules.5.bz2
./usr/share/man/man5/githooks.5.bz2
./usr/share/man/man5/gitrepository-layout.5.bz2
./usr/share/man/man5/gitattributes.5.bz2
./usr/share/man/man5/gitignore.5.bz2
./usr/share/man/man7/
./usr/share/man/man7/gittutorial-2.7.bz2
./usr/share/man/man7/gitcli.7.bz2
./usr/share/man/man7/gitdiffcore.7.bz2
./usr/share/man/man7/gittutorial.7.bz2
./usr/share/man/man7/gitremote-helpers.7.bz2
./usr/share/man/man7/gitcore-tutorial.7.bz2
./usr/share/man/man7/gitworkflows.7.bz2
./usr/share/man/man7/gitcredentials.7.bz2
./usr/share/man/man7/gitglossary.7.bz2
./usr/share/man/man7/gitrevisions.7.bz2
./usr/share/man/man7/gitsubmodules.7.bz2
./usr/share/man/man7/gitcvs-migration.7.bz2
./usr/share/man/man7/giteveryday.7.bz2
./usr/share/man/man7/gitnamespaces.7.bz2
./usr/share/git/
./usr/share/git/git-prompt.sh
./usr/share/git/contrib/
./usr/share/git/contrib/fast-import/
./usr/share/git/contrib/fast-import/git-import.perl
./usr/share/git/contrib/fast-import/import-directories.perl
./usr/share/git/contrib/fast-import/git-import.sh
./usr/share/git/contrib/fast-import/git-p4.README
./usr/share/git/contrib/fast-import/import-zips.py
./usr/share/git/contrib/fast-import/import-tars.perl
./usr/share/git/contrib/workdir/
./usr/share/git/contrib/workdir/.gitattributes
./usr/share/git/contrib/workdir/git-new-workdir
./usr/share/git/contrib/rerere-train.sh
./usr/share/git/contrib/buildsystems/
./usr/share/git/contrib/buildsystems/Generators.pm
./usr/share/git/contrib/buildsystems/parse.pl
./usr/share/git/contrib/buildsystems/generate
./usr/share/git/contrib/buildsystems/engine.pl
./usr/share/git/contrib/buildsystems/Generators/
./usr/share/git/contrib/buildsystems/Generators/QMake.pm
./usr/share/git/contrib/buildsystems/Generators/Vcxproj.pm
./usr/share/git/contrib/buildsystems/Generators/Vcproj.pm
./usr/share/git/contrib/hooks/
./usr/share/git/contrib/hooks/update-paranoid
./usr/share/git/contrib/hooks/multimail/
./usr/share/git/contrib/hooks/multimail/migrate-mailhook-config
./usr/share/git/contrib/hooks/multimail/README.rst
./usr/share/git/contrib/hooks/multimail/CHANGES
./usr/share/git/contrib/hooks/multimail/CONTRIBUTING.rst
./usr/share/git/contrib/hooks/multimail/git_multimail.py
./usr/share/git/contrib/hooks/multimail/README.Git
./usr/share/git/contrib/hooks/multimail/post-receive.example
./usr/share/git/contrib/hooks/multimail/README.migrate-from-post-receive-email
./usr/share/git/contrib/hooks/multimail/doc/
./usr/share/git/contrib/hooks/multimail/doc/customizing-emails.rst
./usr/share/git/contrib/hooks/multimail/doc/troubleshooting.rst
./usr/share/git/contrib/hooks/multimail/doc/gitolite.rst
./usr/share/git/contrib/hooks/multimail/doc/gerrit.rst
./usr/share/git/contrib/hooks/pre-auto-gc-battery
./usr/share/git/contrib/hooks/setgitperms.perl
./usr/share/git/contrib/hooks/post-receive-email
./usr/share/git/contrib/hg-to-git/
./usr/share/git/contrib/hg-to-git/hg-to-git.txt
./usr/share/git/contrib/hg-to-git/hg-to-git.py
./usr/share/git/contrib/stats/
./usr/share/git/contrib/stats/packinfo.pl
./usr/share/git/contrib/stats/git-common-hash
./usr/share/git/contrib/stats/mailmap.pl
./usr/share/git/contrib/remotes2config.sh
./usr/share/git-core/
./usr/share/git-core/templates/
./usr/share/git-core/templates/info/
./usr/share/git-core/templates/info/exclude
./usr/share/git-core/templates/description
./usr/share/git-core/templates/hooks/
./usr/share/git-core/templates/hooks/pre-commit.sample
./usr/share/git-core/templates/hooks/applypatch-msg.sample
./usr/share/git-core/templates/hooks/post-update.sample
./usr/share/git-core/templates/hooks/pre-receive.sample
./usr/share/git-core/templates/hooks/prepare-commit-msg.sample
./usr/share/git-core/templates/hooks/pre-applypatch.sample
./usr/share/git-core/templates/hooks/commit-msg.sample
./usr/share/git-core/templates/hooks/update.sample
./usr/share/git-core/templates/hooks/pre-rebase.sample
./usr/share/git-core/templates/hooks/pre-merge-commit.sample
./usr/share/git-core/templates/hooks/pre-push.sample
./usr/share/git-core/templates/hooks/fsmonitor-watchman.sample
./usr/share/doc/
./usr/share/doc/git-2.26.2/
./usr/share/doc/git-2.26.2/git-fetch.txt.bz2
./usr/share/doc/git-2.26.2/git-mktag.txt.bz2
./usr/share/doc/git-2.26.2/glossary-content.txt.bz2
./usr/share/doc/git-2.26.2/technical/
./usr/share/doc/git-2.26.2/technical/pack-heuristics.txt.bz2
./usr/share/doc/git-2.26.2/technical/long-running-process-protocol.txt.bz2
./usr/share/doc/git-2.26.2/technical/api-index-skel.txt.bz2
./usr/share/doc/git-2.26.2/technical/hash-function-transition.txt.bz2
./usr/share/doc/git-2.26.2/technical/protocol-v2.txt.bz2
./usr/share/doc/git-2.26.2/technical/api-error-handling.txt.bz2
./usr/share/doc/git-2.26.2/technical/partial-clone.txt.bz2
./usr/share/doc/git-2.26.2/technical/bitmap-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/pack-protocol.txt.bz2
./usr/share/doc/git-2.26.2/technical/http-protocol.txt.bz2
./usr/share/doc/git-2.26.2/technical/protocol-capabilities.txt.bz2
./usr/share/doc/git-2.26.2/technical/multi-pack-index.txt.bz2
./usr/share/doc/git-2.26.2/technical/protocol-common.txt.bz2
./usr/share/doc/git-2.26.2/technical/pack-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/commit-graph.txt.bz2
./usr/share/doc/git-2.26.2/technical/rerere.txt.bz2
./usr/share/doc/git-2.26.2/technical/shallow.txt.bz2
./usr/share/doc/git-2.26.2/technical/commit-graph-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/api-merge.txt.bz2
./usr/share/doc/git-2.26.2/technical/api-trace2.txt.bz2
./usr/share/doc/git-2.26.2/technical/directory-rename-detection.txt.bz2
./usr/share/doc/git-2.26.2/technical/send-pack-pipeline.txt.bz2
./usr/share/doc/git-2.26.2/technical/racy-git.txt.bz2
./usr/share/doc/git-2.26.2/technical/trivial-merge.txt.bz2
./usr/share/doc/git-2.26.2/technical/bundle-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/signature-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/repository-version.txt.bz2
./usr/share/doc/git-2.26.2/technical/index-format.txt.bz2
./usr/share/doc/git-2.26.2/technical/api-parse-options.txt.bz2
./usr/share/doc/git-2.26.2/git-check-mailmap.txt.bz2
./usr/share/doc/git-2.26.2/urls-remotes.txt.bz2
./usr/share/doc/git-2.26.2/git-help.txt.bz2
./usr/share/doc/git-2.26.2/gitglossary.txt.bz2
./usr/share/doc/git-2.26.2/git-difftool.txt.bz2
./usr/share/doc/git-2.26.2/git-bundle.txt.bz2
./usr/share/doc/git-2.26.2/git-credential-cache--daemon.txt.bz2
./usr/share/doc/git-2.26.2/git-send-email.txt.bz2
./usr/share/doc/git-2.26.2/CodingGuidelines.bz2
./usr/share/doc/git-2.26.2/git-check-attr.txt.bz2
./usr/share/doc/git-2.26.2/git-mailinfo.txt.bz2
./usr/share/doc/git-2.26.2/gitcli.txt.bz2
./usr/share/doc/git-2.26.2/git-get-tar-commit-id.txt.bz2
./usr/share/doc/git-2.26.2/git-mktree.txt.bz2
./usr/share/doc/git-2.26.2/git-replace.txt.bz2
./usr/share/doc/git-2.26.2/git-unpack-file.txt.bz2
./usr/share/doc/git-2.26.2/mailmap.txt.bz2
./usr/share/doc/git-2.26.2/git-ls-files.txt.bz2
./usr/share/doc/git-2.26.2/gitrevisions.txt.bz2
./usr/share/doc/git-2.26.2/git-range-diff.txt.bz2
./usr/share/doc/git-2.26.2/git-interpret-trailers.txt.bz2
./usr/share/doc/git-2.26.2/git-init.txt.bz2
./usr/share/doc/git-2.26.2/git-diff-tree.txt.bz2
./usr/share/doc/git-2.26.2/date-formats.txt.bz2
./usr/share/doc/git-2.26.2/git-sparse-checkout.txt.bz2
./usr/share/doc/git-2.26.2/git-rebase.txt.bz2
./usr/share/doc/git-2.26.2/revisions.txt.bz2
./usr/share/doc/git-2.26.2/gittutorial.txt.bz2
./usr/share/doc/git-2.26.2/README.md.bz2
./usr/share/doc/git-2.26.2/git-upload-archive.txt.bz2
./usr/share/doc/git-2.26.2/git-prune.txt.bz2
./usr/share/doc/git-2.26.2/git-format-patch.txt.bz2
./usr/share/doc/git-2.26.2/diff-options.txt.bz2
./usr/share/doc/git-2.26.2/git-archimport.txt.bz2
./usr/share/doc/git-2.26.2/git-diff-files.txt.bz2
./usr/share/doc/git-2.26.2/git-patch-id.txt.bz2
./usr/share/doc/git-2.26.2/gitweb.txt.bz2
./usr/share/doc/git-2.26.2/rev-list-options.txt.bz2
./usr/share/doc/git-2.26.2/git-jump.txt.bz2
./usr/share/doc/git-2.26.2/git-mailsplit.txt.bz2
./usr/share/doc/git-2.26.2/git-count-objects.txt.bz2
./usr/share/doc/git-2.26.2/gitattributes.txt.bz2
./usr/share/doc/git-2.26.2/git-merge-file.txt.bz2
./usr/share/doc/git-2.26.2/git-symbolic-ref.txt.bz2
./usr/share/doc/git-2.26.2/git-http-backend.txt.bz2
./usr/share/doc/git-2.26.2/git-shell.txt.bz2
./usr/share/doc/git-2.26.2/git-commit-graph.txt.bz2
./usr/share/doc/git-2.26.2/git-index-pack.txt.bz2
./usr/share/doc/git-2.26.2/gitcredentials.txt.bz2
./usr/share/doc/git-2.26.2/git-bisect-lk2009.txt.bz2
./usr/share/doc/git-2.26.2/git-var.txt.bz2
./usr/share/doc/git-2.26.2/git-daemon.txt.bz2
./usr/share/doc/git-2.26.2/diff-generate-patch.txt.bz2
./usr/share/doc/git-2.26.2/git-whatchanged.txt.bz2
./usr/share/doc/git-2.26.2/git-reflog.txt.bz2
./usr/share/doc/git-2.26.2/gitcvs-migration.txt.bz2
./usr/share/doc/git-2.26.2/git-fsck.txt.bz2
./usr/share/doc/git-2.26.2/gitdiffcore.txt.bz2
./usr/share/doc/git-2.26.2/git-diff-index.txt.bz2
./usr/share/doc/git-2.26.2/git-prune-packed.txt.bz2
./usr/share/doc/git-2.26.2/git-sh-setup.txt.bz2
./usr/share/doc/git-2.26.2/gitk.txt.bz2
./usr/share/doc/git-2.26.2/git-http-push.txt.bz2
./usr/share/doc/git-2.26.2/git-checkout.txt.bz2
./usr/share/doc/git-2.26.2/git-verify-commit.txt.bz2
./usr/share/doc/git-2.26.2/git-merge.txt.bz2
./usr/share/doc/git-2.26.2/git-cherry-pick.txt.bz2
./usr/share/doc/git-2.26.2/git-sh-i18n--envsubst.txt.bz2
./usr/share/doc/git-2.26.2/git-mv.txt.bz2
./usr/share/doc/git-2.26.2/line-range-format.txt.bz2
./usr/share/doc/git-2.26.2/git-fast-import.txt.bz2
./usr/share/doc/git-2.26.2/git-show-branch.txt.bz2
./usr/share/doc/git-2.26.2/git-config.txt.bz2
./usr/share/doc/git-2.26.2/blame-options.txt.bz2
./usr/share/doc/git-2.26.2/git-apply.txt.bz2
./usr/share/doc/git-2.26.2/git-update-ref.txt.bz2
./usr/share/doc/git-2.26.2/git-credential-cache.txt.bz2
./usr/share/doc/git-2.26.2/fetch-options.txt.bz2
./usr/share/doc/git-2.26.2/git-bisect.txt.bz2
./usr/share/doc/git-2.26.2/merge-strategies.txt.bz2
./usr/share/doc/git-2.26.2/git-reset.txt.bz2
./usr/share/doc/git-2.26.2/sequencer.txt.bz2
./usr/share/doc/git-2.26.2/pretty-options.txt.bz2
./usr/share/doc/git-2.26.2/git-pack-objects.txt.bz2
./usr/share/doc/git-2.26.2/git-name-rev.txt.bz2
./usr/share/doc/git-2.26.2/git-commit.txt.bz2
./usr/share/doc/git-2.26.2/git-update-server-info.txt.bz2
./usr/share/doc/git-2.26.2/pull-fetch-param.txt.bz2
./usr/share/doc/git-2.26.2/merge-options.txt.bz2
./usr/share/doc/git-2.26.2/i18n.txt.bz2
./usr/share/doc/git-2.26.2/git-update-index.txt.bz2
./usr/share/doc/git-2.26.2/git-notes.txt.bz2
./usr/share/doc/git-2.26.2/githooks.txt.bz2
./usr/share/doc/git-2.26.2/README.diff-highlight.bz2
./usr/share/doc/git-2.26.2/git-check-ref-format.txt.bz2
./usr/share/doc/git-2.26.2/git-stage.txt.bz2
./usr/share/doc/git-2.26.2/git-remote-fd.txt.bz2
./usr/share/doc/git-2.26.2/config.txt.bz2
./usr/share/doc/git-2.26.2/git-unpack-objects.txt.bz2
./usr/share/doc/git-2.26.2/gitworkflows.txt.bz2
./usr/share/doc/git-2.26.2/git-cherry.txt.bz2
./usr/share/doc/git-2.26.2/git-http-fetch.txt.bz2
./usr/share/doc/git-2.26.2/git-rev-parse.txt.bz2
./usr/share/doc/git-2.26.2/git-grep.txt.bz2
./usr/share/doc/git-2.26.2/user-manual.txt.bz2
./usr/share/doc/git-2.26.2/gitnamespaces.txt.bz2
./usr/share/doc/git-2.26.2/git-web--browse.txt.bz2
./usr/share/doc/git-2.26.2/git-restore.txt.bz2
./usr/share/doc/git-2.26.2/git-upload-pack.txt.bz2
./usr/share/doc/git-2.26.2/git-for-each-ref.txt.bz2
./usr/share/doc/git-2.26.2/git-gui.txt.bz2
./usr/share/doc/git-2.26.2/git-diff.txt.bz2
./usr/share/doc/git-2.26.2/git-am.txt.bz2
./usr/share/doc/git-2.26.2/git-hash-object.txt.bz2
./usr/share/doc/git-2.26.2/git-show-index.txt.bz2
./usr/share/doc/git-2.26.2/diff-format.txt.bz2
./usr/share/doc/git-2.26.2/git-stripspace.txt.bz2
./usr/share/doc/git-2.26.2/git-annotate.txt.bz2
./usr/share/doc/git-2.26.2/gittutorial-2.txt.bz2
./usr/share/doc/git-2.26.2/git-branch.txt.bz2
./usr/share/doc/git-2.26.2/git-contacts.txt.bz2
./usr/share/doc/git-2.26.2/gitremote-helpers.txt.bz2
./usr/share/doc/git-2.26.2/git-merge-base.txt.bz2
./usr/share/doc/git-2.26.2/git-remote-ext.txt.bz2
./usr/share/doc/git-2.26.2/git-pack-refs.txt.bz2
./usr/share/doc/git-2.26.2/git-cvsimport.txt.bz2
./usr/share/doc/git-2.26.2/git-column.txt.bz2
./usr/share/doc/git-2.26.2/git-submodule.txt.bz2
./usr/share/doc/git-2.26.2/git-verify-tag.txt.bz2
./usr/share/doc/git-2.26.2/git-init-db.txt.bz2
./usr/share/doc/git-2.26.2/git-push.txt.bz2
./usr/share/doc/git-2.26.2/git-mergetool--lib.txt.bz2
./usr/share/doc/git-2.26.2/git-fmt-merge-msg.txt.bz2
./usr/share/doc/git-2.26.2/git-gc.txt.bz2
./usr/share/doc/git-2.26.2/gitweb.conf.txt.bz2
./usr/share/doc/git-2.26.2/git-imap-send.txt.bz2
./usr/share/doc/git-2.26.2/git-worktree.txt.bz2
./usr/share/doc/git-2.26.2/git-parse-remote.txt.bz2
./usr/share/doc/git-2.26.2/git-archive.txt.bz2
./usr/share/doc/git-2.26.2/git-pack-redundant.txt.bz2
./usr/share/doc/git-2.26.2/git-ls-tree.txt.bz2
./usr/share/doc/git-2.26.2/git-cvsexportcommit.txt.bz2
./usr/share/doc/git-2.26.2/git-rm.txt.bz2
./usr/share/doc/git-2.26.2/transfer-data-leaks.txt.bz2
./usr/share/doc/git-2.26.2/urls.txt.bz2
./usr/share/doc/git-2.26.2/git-sh-i18n.txt.bz2
./usr/share/doc/git-2.26.2/git-stash.txt.bz2
./usr/share/doc/git-2.26.2/git-switch.txt.bz2
./usr/share/doc/git-2.26.2/git-revert.txt.bz2
./usr/share/doc/git-2.26.2/git-subtree.txt.bz2
./usr/share/doc/git-2.26.2/giteveryday.txt.bz2
./usr/share/doc/git-2.26.2/git-merge-one-file.txt.bz2
./usr/share/doc/git-2.26.2/git-mergetool.txt.bz2
./usr/share/doc/git-2.26.2/gitcore-tutorial.txt.bz2
./usr/share/doc/git-2.26.2/git-citool.txt.bz2
./usr/share/doc/git-2.26.2/MyFirstObjectWalk.txt.bz2
./usr/share/doc/git-2.26.2/gitignore.txt.bz2
./usr/share/doc/git-2.26.2/SubmittingPatches.bz2
./usr/share/doc/git-2.26.2/pretty-formats.txt.bz2
./usr/share/doc/git-2.26.2/git-describe.txt.bz2
./usr/share/doc/git-2.26.2/git-request-pull.txt.bz2
./usr/share/doc/git-2.26.2/git-clone.txt.bz2
./usr/share/doc/git-2.26.2/MyFirstContribution.txt.bz2
./usr/share/doc/git-2.26.2/howto/
./usr/share/doc/git-2.26.2/howto/revert-a-faulty-merge.txt.bz2
./usr/share/doc/git-2.26.2/howto/revert-branch-rebase.txt.bz2
./usr/share/doc/git-2.26.2/howto/using-merge-subtree.txt.bz2
./usr/share/doc/git-2.26.2/howto/using-signed-tag-in-pull-request.txt.bz2
./usr/share/doc/git-2.26.2/howto/update-hook-example.txt.bz2
./usr/share/doc/git-2.26.2/howto/rebuild-from-update-hook.txt.bz2
./usr/share/doc/git-2.26.2/howto/new-command.txt.bz2
./usr/share/doc/git-2.26.2/howto/keep-canonical-history-correct.txt.bz2
./usr/share/doc/git-2.26.2/howto/maintain-git.txt.bz2
./usr/share/doc/git-2.26.2/howto/setup-git-server-over-http.txt.bz2
./usr/share/doc/git-2.26.2/howto/rebase-from-internal-branch.txt.bz2
./usr/share/doc/git-2.26.2/howto/use-git-daemon.txt.bz2
./usr/share/doc/git-2.26.2/howto/recover-corrupted-object-harder.txt.bz2
./usr/share/doc/git-2.26.2/howto/separating-topic-branches.txt.bz2
./usr/share/doc/git-2.26.2/howto/recover-corrupted-blob-object.txt.bz2
./usr/share/doc/git-2.26.2/git-fast-export.txt.bz2
./usr/share/doc/git-2.26.2/git-ls-remote.txt.bz2
./usr/share/doc/git-2.26.2/git-merge-index.txt.bz2
./usr/share/doc/git-2.26.2/git.txt.bz2
./usr/share/doc/git-2.26.2/git-instaweb.txt.bz2
./usr/share/doc/git-2.26.2/README.git-subtree.bz2
./usr/share/doc/git-2.26.2/git-merge-tree.txt.bz2
./usr/share/doc/git-2.26.2/git-add.txt.bz2
./usr/share/doc/git-2.26.2/git-repack.txt.bz2
./usr/share/doc/git-2.26.2/git-fsck-objects.txt.bz2
./usr/share/doc/git-2.26.2/git-rev-list.txt.bz2
./usr/share/doc/git-2.26.2/git-cvsserver.txt.bz2
./usr/share/doc/git-2.26.2/git-cat-file.txt.bz2
./usr/share/doc/git-2.26.2/git-checkout-index.txt.bz2
./usr/share/doc/git-2.26.2/git-receive-pack.txt.bz2
./usr/share/doc/git-2.26.2/git-pull.txt.bz2
./usr/share/doc/git-2.26.2/git-log.txt.bz2
./usr/share/doc/git-2.26.2/gitrepository-layout.txt.bz2
./usr/share/doc/git-2.26.2/git-shortlog.txt.bz2
./usr/share/doc/git-2.26.2/git-rerere.txt.bz2
./usr/share/doc/git-2.26.2/trace2-target-values.txt.bz2
./usr/share/doc/git-2.26.2/git-quiltimport.txt.bz2
./usr/share/doc/git-2.26.2/git-write-tree.txt.bz2
./usr/share/doc/git-2.26.2/git-remote.txt.bz2
./usr/share/doc/git-2.26.2/git-read-tree.txt.bz2
./usr/share/doc/git-2.26.2/git-show-ref.txt.bz2
./usr/share/doc/git-2.26.2/gitmodules.txt.bz2
./usr/share/doc/git-2.26.2/git-clean.txt.bz2
./usr/share/doc/git-2.26.2/git-verify-pack.txt.bz2
./usr/share/doc/git-2.26.2/git-show.txt.bz2
./usr/share/doc/git-2.26.2/git-commit-tree.txt.bz2
./usr/share/doc/git-2.26.2/git-blame.txt.bz2
./usr/share/doc/git-2.26.2/git-multi-pack-index.txt.bz2
./usr/share/doc/git-2.26.2/git-send-pack.txt.bz2
./usr/share/doc/git-2.26.2/git-svn.txt.bz2
./usr/share/doc/git-2.26.2/git-credential-store.txt.bz2
./usr/share/doc/git-2.26.2/git-fetch-pack.txt.bz2
./usr/share/doc/git-2.26.2/gitsubmodules.txt.bz2
./usr/share/doc/git-2.26.2/git-filter-branch.txt.bz2
./usr/share/doc/git-2.26.2/git-check-ignore.txt.bz2
./usr/share/doc/git-2.26.2/git-status.txt.bz2
./usr/share/doc/git-2.26.2/git-tag.txt.bz2
./usr/share/doc/git-2.26.2/git-p4.txt.bz2
./usr/share/doc/git-2.26.2/git-tools.txt.bz2
./usr/share/doc/git-2.26.2/git-credential.txt.bz2
./etc/
./etc/init.d/
./etc/init.d/git-daemon
./etc/conf.d/
./etc/conf.d/git-daemon
>>> Done.
 [32;01m*[39;49;00m checking 841 files for package collisions
>>> Merging dev-vcs/git-2.26.2 to /
--- /etc/
--- /etc/conf.d/
>>> /etc/conf.d/git-daemon
--- /etc/init.d/
>>> /etc/init.d/git-daemon
--- /usr/
--- /usr/share/
--- /usr/share/doc/
--- /usr/share/doc/git-2.26.2/
>>> /usr/share/doc/git-2.26.2/git-credential.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-tools.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-p4.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-tag.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-status.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-check-ignore.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-filter-branch.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitsubmodules.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fetch-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-credential-store.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-svn.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-send-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-multi-pack-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-blame.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-commit-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-show.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-verify-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-clean.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitmodules.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-show-ref.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-read-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-remote.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-write-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-quiltimport.txt.bz2
>>> /usr/share/doc/git-2.26.2/trace2-target-values.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-rerere.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-shortlog.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitrepository-layout.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-log.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-pull.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-receive-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-checkout-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cat-file.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cvsserver.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-rev-list.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fsck-objects.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-repack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-add.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/README.git-subtree.bz2
>>> /usr/share/doc/git-2.26.2/git-instaweb.txt.bz2
>>> /usr/share/doc/git-2.26.2/git.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-ls-remote.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fast-export.txt.bz2
--- /usr/share/doc/git-2.26.2/howto/
>>> /usr/share/doc/git-2.26.2/howto/recover-corrupted-blob-object.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/separating-topic-branches.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/recover-corrupted-object-harder.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/use-git-daemon.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/rebase-from-internal-branch.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/setup-git-server-over-http.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/maintain-git.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/keep-canonical-history-correct.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/new-command.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/rebuild-from-update-hook.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/update-hook-example.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/using-signed-tag-in-pull-request.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/using-merge-subtree.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/revert-branch-rebase.txt.bz2
>>> /usr/share/doc/git-2.26.2/howto/revert-a-faulty-merge.txt.bz2
>>> /usr/share/doc/git-2.26.2/MyFirstContribution.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-clone.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-request-pull.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-describe.txt.bz2
>>> /usr/share/doc/git-2.26.2/pretty-formats.txt.bz2
>>> /usr/share/doc/git-2.26.2/SubmittingPatches.bz2
>>> /usr/share/doc/git-2.26.2/gitignore.txt.bz2
>>> /usr/share/doc/git-2.26.2/MyFirstObjectWalk.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-citool.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitcore-tutorial.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mergetool.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge-one-file.txt.bz2
>>> /usr/share/doc/git-2.26.2/giteveryday.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-subtree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-revert.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-switch.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-stash.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-sh-i18n.txt.bz2
>>> /usr/share/doc/git-2.26.2/urls.txt.bz2
>>> /usr/share/doc/git-2.26.2/transfer-data-leaks.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-rm.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cvsexportcommit.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-ls-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-pack-redundant.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-archive.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-parse-remote.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-worktree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-imap-send.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitweb.conf.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-gc.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fmt-merge-msg.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mergetool--lib.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-push.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-init-db.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-verify-tag.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-submodule.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-column.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cvsimport.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-pack-refs.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-remote-ext.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge-base.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitremote-helpers.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-contacts.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-branch.txt.bz2
>>> /usr/share/doc/git-2.26.2/gittutorial-2.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-annotate.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-stripspace.txt.bz2
>>> /usr/share/doc/git-2.26.2/diff-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-show-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-hash-object.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-am.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-diff.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-gui.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-for-each-ref.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-upload-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-restore.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-web--browse.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitnamespaces.txt.bz2
>>> /usr/share/doc/git-2.26.2/user-manual.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-grep.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-rev-parse.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-http-fetch.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cherry.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitworkflows.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-unpack-objects.txt.bz2
>>> /usr/share/doc/git-2.26.2/config.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-remote-fd.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-stage.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-check-ref-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/README.diff-highlight.bz2
>>> /usr/share/doc/git-2.26.2/githooks.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-notes.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-update-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/i18n.txt.bz2
>>> /usr/share/doc/git-2.26.2/merge-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/pull-fetch-param.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-update-server-info.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-commit.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-name-rev.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-pack-objects.txt.bz2
>>> /usr/share/doc/git-2.26.2/pretty-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/sequencer.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-reset.txt.bz2
>>> /usr/share/doc/git-2.26.2/merge-strategies.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-bisect.txt.bz2
>>> /usr/share/doc/git-2.26.2/fetch-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-credential-cache.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-update-ref.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-apply.txt.bz2
>>> /usr/share/doc/git-2.26.2/blame-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-config.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-show-branch.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fast-import.txt.bz2
>>> /usr/share/doc/git-2.26.2/line-range-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mv.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-sh-i18n--envsubst.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-cherry-pick.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-verify-commit.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-checkout.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-http-push.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitk.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-sh-setup.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-prune-packed.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-diff-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitdiffcore.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fsck.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitcvs-migration.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-reflog.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-whatchanged.txt.bz2
>>> /usr/share/doc/git-2.26.2/diff-generate-patch.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-daemon.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-var.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-bisect-lk2009.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitcredentials.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-index-pack.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-commit-graph.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-shell.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-http-backend.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-symbolic-ref.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-merge-file.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitattributes.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-count-objects.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mailsplit.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-jump.txt.bz2
>>> /usr/share/doc/git-2.26.2/rev-list-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitweb.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-patch-id.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-diff-files.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-archimport.txt.bz2
>>> /usr/share/doc/git-2.26.2/diff-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-format-patch.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-prune.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-upload-archive.txt.bz2
>>> /usr/share/doc/git-2.26.2/README.md.bz2
>>> /usr/share/doc/git-2.26.2/gittutorial.txt.bz2
>>> /usr/share/doc/git-2.26.2/revisions.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-rebase.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-sparse-checkout.txt.bz2
>>> /usr/share/doc/git-2.26.2/date-formats.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-diff-tree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-init.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-interpret-trailers.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-range-diff.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitrevisions.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-ls-files.txt.bz2
>>> /usr/share/doc/git-2.26.2/mailmap.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-unpack-file.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-replace.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mktree.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-get-tar-commit-id.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitcli.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mailinfo.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-check-attr.txt.bz2
>>> /usr/share/doc/git-2.26.2/CodingGuidelines.bz2
>>> /usr/share/doc/git-2.26.2/git-send-email.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-credential-cache--daemon.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-bundle.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-difftool.txt.bz2
>>> /usr/share/doc/git-2.26.2/gitglossary.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-help.txt.bz2
>>> /usr/share/doc/git-2.26.2/urls-remotes.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-check-mailmap.txt.bz2
--- /usr/share/doc/git-2.26.2/technical/
>>> /usr/share/doc/git-2.26.2/technical/api-parse-options.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/index-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/repository-version.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/signature-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/bundle-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/trivial-merge.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/racy-git.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/send-pack-pipeline.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/directory-rename-detection.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/api-trace2.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/api-merge.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/commit-graph-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/shallow.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/rerere.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/commit-graph.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/pack-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/protocol-common.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/multi-pack-index.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/protocol-capabilities.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/http-protocol.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/pack-protocol.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/bitmap-format.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/partial-clone.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/api-error-handling.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/protocol-v2.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/hash-function-transition.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/api-index-skel.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/long-running-process-protocol.txt.bz2
>>> /usr/share/doc/git-2.26.2/technical/pack-heuristics.txt.bz2
>>> /usr/share/doc/git-2.26.2/glossary-content.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-mktag.txt.bz2
>>> /usr/share/doc/git-2.26.2/git-fetch.txt.bz2
--- /usr/share/git-core/
--- /usr/share/git-core/templates/
--- /usr/share/git-core/templates/hooks/
>>> /usr/share/git-core/templates/hooks/fsmonitor-watchman.sample
>>> /usr/share/git-core/templates/hooks/pre-push.sample
>>> /usr/share/git-core/templates/hooks/pre-merge-commit.sample
>>> /usr/share/git-core/templates/hooks/pre-rebase.sample
>>> /usr/share/git-core/templates/hooks/update.sample
>>> /usr/share/git-core/templates/hooks/commit-msg.sample
>>> /usr/share/git-core/templates/hooks/pre-applypatch.sample
>>> /usr/share/git-core/templates/hooks/prepare-commit-msg.sample
>>> /usr/share/git-core/templates/hooks/pre-receive.sample
>>> /usr/share/git-core/templates/hooks/post-update.sample
>>> /usr/share/git-core/templates/hooks/applypatch-msg.sample
>>> /usr/share/git-core/templates/hooks/pre-commit.sample
>>> /usr/share/git-core/templates/description
--- /usr/share/git-core/templates/info/
>>> /usr/share/git-core/templates/info/exclude
--- /usr/share/git/
--- /usr/share/git/contrib/
>>> /usr/share/git/contrib/remotes2config.sh
--- /usr/share/git/contrib/stats/
>>> /usr/share/git/contrib/stats/mailmap.pl
>>> /usr/share/git/contrib/stats/git-common-hash
>>> /usr/share/git/contrib/stats/packinfo.pl
--- /usr/share/git/contrib/hg-to-git/
>>> /usr/share/git/contrib/hg-to-git/hg-to-git.py
>>> /usr/share/git/contrib/hg-to-git/hg-to-git.txt
--- /usr/share/git/contrib/hooks/
>>> /usr/share/git/contrib/hooks/post-receive-email
>>> /usr/share/git/contrib/hooks/setgitperms.perl
>>> /usr/share/git/contrib/hooks/pre-auto-gc-battery
--- /usr/share/git/contrib/hooks/multimail/
--- /usr/share/git/contrib/hooks/multimail/doc/
>>> /usr/share/git/contrib/hooks/multimail/doc/gerrit.rst
>>> /usr/share/git/contrib/hooks/multimail/doc/gitolite.rst
>>> /usr/share/git/contrib/hooks/multimail/doc/troubleshooting.rst
>>> /usr/share/git/contrib/hooks/multimail/doc/customizing-emails.rst
>>> /usr/share/git/contrib/hooks/multimail/README.migrate-from-post-receive-email
>>> /usr/share/git/contrib/hooks/multimail/post-receive.example
>>> /usr/share/git/contrib/hooks/multimail/README.Git
>>> /usr/share/git/contrib/hooks/multimail/git_multimail.py
>>> /usr/share/git/contrib/hooks/multimail/CONTRIBUTING.rst
>>> /usr/share/git/contrib/hooks/multimail/CHANGES
>>> /usr/share/git/contrib/hooks/multimail/README.rst
>>> /usr/share/git/contrib/hooks/multimail/migrate-mailhook-config
>>> /usr/share/git/contrib/hooks/update-paranoid
--- /usr/share/git/contrib/buildsystems/
--- /usr/share/git/contrib/buildsystems/Generators/
>>> /usr/share/git/contrib/buildsystems/Generators/Vcproj.pm
>>> /usr/share/git/contrib/buildsystems/Generators/Vcxproj.pm
>>> /usr/share/git/contrib/buildsystems/Generators/QMake.pm
>>> /usr/share/git/contrib/buildsystems/engine.pl
>>> /usr/share/git/contrib/buildsystems/generate
>>> /usr/share/git/contrib/buildsystems/parse.pl
>>> /usr/share/git/contrib/buildsystems/Generators.pm
>>> /usr/share/git/contrib/rerere-train.sh
--- /usr/share/git/contrib/workdir/
>>> /usr/share/git/contrib/workdir/git-new-workdir
>>> /usr/share/git/contrib/workdir/.gitattributes
--- /usr/share/git/contrib/fast-import/
>>> /usr/share/git/contrib/fast-import/import-tars.perl
>>> /usr/share/git/contrib/fast-import/import-zips.py
>>> /usr/share/git/contrib/fast-import/git-p4.README
>>> /usr/share/git/contrib/fast-import/git-import.sh
>>> /usr/share/git/contrib/fast-import/import-directories.perl
>>> /usr/share/git/contrib/fast-import/git-import.perl
>>> /usr/share/git/git-prompt.sh
--- /usr/share/man/
--- /usr/share/man/man7/
>>> /usr/share/man/man7/gitnamespaces.7.bz2
>>> /usr/share/man/man7/giteveryday.7.bz2
>>> /usr/share/man/man7/gitcvs-migration.7.bz2
>>> /usr/share/man/man7/gitsubmodules.7.bz2
>>> /usr/share/man/man7/gitrevisions.7.bz2
>>> /usr/share/man/man7/gitglossary.7.bz2
>>> /usr/share/man/man7/gitcredentials.7.bz2
>>> /usr/share/man/man7/gitworkflows.7.bz2
>>> /usr/share/man/man7/gitcore-tutorial.7.bz2
>>> /usr/share/man/man7/gitremote-helpers.7.bz2
>>> /usr/share/man/man7/gittutorial.7.bz2
>>> /usr/share/man/man7/gitdiffcore.7.bz2
>>> /usr/share/man/man7/gitcli.7.bz2
>>> /usr/share/man/man7/gittutorial-2.7.bz2
--- /usr/share/man/man5/
>>> /usr/share/man/man5/gitignore.5.bz2
>>> /usr/share/man/man5/gitattributes.5.bz2
>>> /usr/share/man/man5/gitrepository-layout.5.bz2
>>> /usr/share/man/man5/githooks.5.bz2
>>> /usr/share/man/man5/gitmodules.5.bz2
>>> /usr/share/man/man5/gitweb.conf.5.bz2
--- /usr/share/man/man1/
>>> /usr/share/man/man1/git-gui.1.bz2
>>> /usr/share/man/man1/git-bundle.1.bz2
>>> /usr/share/man/man1/git-fetch-pack.1.bz2
>>> /usr/share/man/man1/git-filter-branch.1.bz2
>>> /usr/share/man/man1/git-fmt-merge-msg.1.bz2
>>> /usr/share/man/man1/git-check-ref-format.1.bz2
>>> /usr/share/man/man1/git-worktree.1.bz2
>>> /usr/share/man/man1/git-tag.1.bz2
>>> /usr/share/man/man1/git-credential-store.1.bz2
>>> /usr/share/man/man1/git-difftool.1.bz2
>>> /usr/share/man/man1/git-fsck-objects.1.bz2
>>> /usr/share/man/man1/git-fast-export.1.bz2
>>> /usr/share/man/man1/git-diff-tree.1.bz2
>>> /usr/share/man/man1/git-init.1.bz2
>>> /usr/share/man/man1/git-revert.1.bz2
>>> /usr/share/man/man1/git-verify-pack.1.bz2
>>> /usr/share/man/man1/git-commit-graph.1.bz2
>>> /usr/share/man/man1/git-merge-index.1.bz2
>>> /usr/share/man/man1/git-stage.1.bz2
>>> /usr/share/man/man1/git-instaweb.1.bz2
>>> /usr/share/man/man1/git-write-tree.1.bz2
>>> /usr/share/man/man1/git-name-rev.1.bz2
>>> /usr/share/man/man1/git-update-server-info.1.bz2
>>> /usr/share/man/man1/git-cvsexportcommit.1.bz2
>>> /usr/share/man/man1/git-sparse-checkout.1.bz2
>>> /usr/share/man/man1/git-stripspace.1.bz2
>>> /usr/share/man/man1/git-fsck.1.bz2
>>> /usr/share/man/man1/git-pack-refs.1.bz2
>>> /usr/share/man/man1/git-submodule.1.bz2
>>> /usr/share/man/man1/git-merge-one-file.1.bz2
>>> /usr/share/man/man1/git-get-tar-commit-id.1.bz2
>>> /usr/share/man/man1/git-receive-pack.1.bz2
>>> /usr/share/man/man1/git-cherry.1.bz2
>>> /usr/share/man/man1/git-checkout-index.1.bz2
>>> /usr/share/man/man1/git-patch-id.1.bz2
>>> /usr/share/man/man1/git-reflog.1.bz2
>>> /usr/share/man/man1/git-mailsplit.1.bz2
>>> /usr/share/man/man1/git-check-mailmap.1.bz2
>>> /usr/share/man/man1/git-blame.1.bz2
>>> /usr/share/man/man1/git-merge-base.1.bz2
>>> /usr/share/man/man1/git-rerere.1.bz2
>>> /usr/share/man/man1/git-credential.1.bz2
>>> /usr/share/man/man1/git-cvsimport.1.bz2
>>> /usr/share/man/man1/git-init-db.1.bz2
>>> /usr/share/man/man1/git-request-pull.1.bz2
>>> /usr/share/man/man1/git-mailinfo.1.bz2
>>> /usr/share/man/man1/git-http-backend.1.bz2
>>> /usr/share/man/man1/git-mergetool.1.bz2
>>> /usr/share/man/man1/git-log.1.bz2
>>> /usr/share/man/man1/git-index-pack.1.bz2
>>> /usr/share/man/man1/git-pull.1.bz2
>>> /usr/share/man/man1/git-merge.1.bz2
>>> /usr/share/man/man1/git-credential-cache--daemon.1.bz2
>>> /usr/share/man/man1/git-http-push.1.bz2
>>> /usr/share/man/man1/git-am.1.bz2
>>> /usr/share/man/man1/git-verify-commit.1.bz2
>>> /usr/share/man/man1/git-cat-file.1.bz2
>>> /usr/share/man/man1/git-update-index.1.bz2
>>> /usr/share/man/man1/gitk.1.bz2
>>> /usr/share/man/man1/git-citool.1.bz2
>>> /usr/share/man/man1/git-sh-i18n--envsubst.1.bz2
>>> /usr/share/man/man1/git-checkout.1.bz2
>>> /usr/share/man/man1/git-show-index.1.bz2
>>> /usr/share/man/man1/git-push.1.bz2
>>> /usr/share/man/man1/git-sh-setup.1.bz2
>>> /usr/share/man/man1/git-clean.1.bz2
>>> /usr/share/man/man1/git-http-fetch.1.bz2
>>> /usr/share/man/man1/git-verify-tag.1.bz2
>>> /usr/share/man/man1/git-reset.1.bz2
>>> /usr/share/man/man1/git-symbolic-ref.1.bz2
>>> /usr/share/man/man1/git-archive.1.bz2
>>> /usr/share/man/man1/git-cvsserver.1.bz2
>>> /usr/share/man/man1/git-config.1.bz2
>>> /usr/share/man/man1/git-imap-send.1.bz2
>>> /usr/share/man/man1/git-rev-parse.1.bz2
>>> /usr/share/man/man1/git-ls-remote.1.bz2
>>> /usr/share/man/man1/git-for-each-ref.1.bz2
>>> /usr/share/man/man1/git-rebase.1.bz2
>>> /usr/share/man/man1/git-show-ref.1.bz2
>>> /usr/share/man/man1/git-repack.1.bz2
>>> /usr/share/man/man1/git-upload-pack.1.bz2
>>> /usr/share/man/man1/git-diff.1.bz2
>>> /usr/share/man/man1/git-check-attr.1.bz2
>>> /usr/share/man/man1/git-mktree.1.bz2
>>> /usr/share/man/man1/git-remote.1.bz2
>>> /usr/share/man/man1/git-check-ignore.1.bz2
>>> /usr/share/man/man1/git-commit.1.bz2
>>> /usr/share/man/man1/git-ls-files.1.bz2
>>> /usr/share/man/man1/git-clone.1.bz2
>>> /usr/share/man/man1/git-ls-tree.1.bz2
>>> /usr/share/man/man1/git-shell.1.bz2
>>> /usr/share/man/man1/git-send-email.1.bz2
>>> /usr/share/man/man1/git-fetch.1.bz2
>>> /usr/share/man/man1/git-unpack-objects.1.bz2
>>> /usr/share/man/man1/git-interpret-trailers.1.bz2
>>> /usr/share/man/man1/git-help.1.bz2
>>> /usr/share/man/man1/git-status.1.bz2
>>> /usr/share/man/man1/git-archimport.1.bz2
>>> /usr/share/man/man1/git-p4.1.bz2
>>> /usr/share/man/man1/git-column.1.bz2
>>> /usr/share/man/man1/git-mktag.1.bz2
>>> /usr/share/man/man1/git-hash-object.1.bz2
>>> /usr/share/man/man1/git-bisect.1.bz2
>>> /usr/share/man/man1/git-merge-tree.1.bz2
>>> /usr/share/man/man1/git-grep.1.bz2
>>> /usr/share/man/man1/git-add.1.bz2
>>> /usr/share/man/man1/git-range-diff.1.bz2
>>> /usr/share/man/man1/git-var.1.bz2
>>> /usr/share/man/man1/gitweb.1.bz2
>>> /usr/share/man/man1/git-prune.1.bz2
>>> /usr/share/man/man1/git-diff-index.1.bz2
>>> /usr/share/man/man1/git-branch.1.bz2
>>> /usr/share/man/man1/git-rm.1.bz2
>>> /usr/share/man/man1/git-cherry-pick.1.bz2
>>> /usr/share/man/man1/git-annotate.1.bz2
>>> /usr/share/man/man1/git-show.1.bz2
>>> /usr/share/man/man1/git-unpack-file.1.bz2
>>> /usr/share/man/man1/git-upload-archive.1.bz2
>>> /usr/share/man/man1/git-quiltimport.1.bz2
>>> /usr/share/man/man1/git-whatchanged.1.bz2
>>> /usr/share/man/man1/git-remote-ext.1.bz2
>>> /usr/share/man/man1/git-send-pack.1.bz2
>>> /usr/share/man/man1/git-diff-files.1.bz2
>>> /usr/share/man/man1/git-commit-tree.1.bz2
>>> /usr/share/man/man1/git-web--browse.1.bz2
>>> /usr/share/man/man1/git-count-objects.1.bz2
>>> /usr/share/man/man1/git-format-patch.1.bz2
>>> /usr/share/man/man1/git-pack-redundant.1.bz2
>>> /usr/share/man/man1/git-gc.1.bz2
>>> /usr/share/man/man1/git-replace.1.bz2
>>> /usr/share/man/man1/git-read-tree.1.bz2
>>> /usr/share/man/man1/git-restore.1.bz2
>>> /usr/share/man/man1/git-multi-pack-index.1.bz2
>>> /usr/share/man/man1/git-daemon.1.bz2
>>> /usr/share/man/man1/git-credential-cache.1.bz2
>>> /usr/share/man/man1/git-prune-packed.1.bz2
>>> /usr/share/man/man1/git-stash.1.bz2
>>> /usr/share/man/man1/git-update-ref.1.bz2
>>> /usr/share/man/man1/git-mv.1.bz2
>>> /usr/share/man/man1/git-shortlog.1.bz2
>>> /usr/share/man/man1/git-notes.1.bz2
>>> /usr/share/man/man1/git-fast-import.1.bz2
>>> /usr/share/man/man1/git-describe.1.bz2
>>> /usr/share/man/man1/git-merge-file.1.bz2
>>> /usr/share/man/man1/git-switch.1.bz2
>>> /usr/share/man/man1/git-apply.1.bz2
>>> /usr/share/man/man1/git-mergetool--lib.1.bz2
>>> /usr/share/man/man1/git-pack-objects.1.bz2
>>> /usr/share/man/man1/git-show-branch.1.bz2
>>> /usr/share/man/man1/git-parse-remote.1.bz2
>>> /usr/share/man/man1/git-rev-list.1.bz2
>>> /usr/share/man/man1/git-sh-i18n.1.bz2
>>> /usr/share/man/man1/git-remote-fd.1.bz2
>>> /usr/share/man/man1/git.1.bz2
--- /usr/share/bash-completion/
--- /usr/share/bash-completion/completions/
>>> /usr/share/bash-completion/completions/gitk -> git
>>> /usr/share/bash-completion/completions/git
--- /usr/bin/
>>> /usr/bin/git-upload-pack
>>> /usr/bin/git-shell
>>> /usr/bin/import-tars
>>> /usr/bin/git
>>> /usr/bin/git-cvsserver
>>> /usr/bin/diff-highlight
>>> /usr/bin/git-upload-archive
>>> /usr/bin/git-receive-pack
--- /usr/libexec/
--- /usr/libexec/git-core/
>>> /usr/libexec/git-core/git-restore
>>> /usr/libexec/git-core/git-diff-index
>>> /usr/libexec/git-core/git-upload-pack
>>> /usr/libexec/git-core/git-switch
>>> /usr/libexec/git-core/git-filter-branch
>>> /usr/libexec/git-core/git-stage
>>> /usr/libexec/git-core/git-bisect--helper
>>> /usr/libexec/git-core/git-update-ref
>>> /usr/libexec/git-core/git-shell
>>> /usr/libexec/git-core/git-fast-import
>>> /usr/libexec/git-core/git-tag
>>> /usr/libexec/git-core/git-whatchanged
>>> /usr/libexec/git-core/git-symbolic-ref
>>> /usr/libexec/git-core/git-config
>>> /usr/libexec/git-core/git-pull
>>> /usr/libexec/git-core/git-check-mailmap
>>> /usr/libexec/git-core/git-init
>>> /usr/libexec/git-core/git-remote-ftp
>>> /usr/libexec/git-core/git-pack-redundant
>>> /usr/libexec/git-core/git-remote-fd
>>> /usr/libexec/git-core/git-rev-parse
>>> /usr/libexec/git-core/git-ls-tree
>>> /usr/libexec/git-core/git-prune
>>> /usr/libexec/git-core/git-mergetool--lib
>>> /usr/libexec/git-core/git-merge
>>> /usr/libexec/git-core/git-credential-cache
>>> /usr/libexec/git-core/git-describe
>>> /usr/libexec/git-core/git-remote-https
>>> /usr/libexec/git-core/git-p4
>>> /usr/libexec/git-core/git-merge-one-file
>>> /usr/libexec/git-core/git-multi-pack-index
>>> /usr/libexec/git-core/git-commit-tree
>>> /usr/libexec/git-core/git-mailsplit
>>> /usr/libexec/git-core/git-sparse-checkout
>>> /usr/libexec/git-core/git-index-pack
>>> /usr/libexec/git-core/git-for-each-ref
>>> /usr/libexec/git-core/git-merge-base
>>> /usr/libexec/git-core/git-clone
--- /usr/libexec/git-core/mergetools/
>>> /usr/libexec/git-core/mergetools/winmerge
>>> /usr/libexec/git-core/mergetools/vimdiff
>>> /usr/libexec/git-core/mergetools/examdiff
>>> /usr/libexec/git-core/mergetools/tortoisemerge
>>> /usr/libexec/git-core/mergetools/diffmerge
>>> /usr/libexec/git-core/mergetools/diffuse
>>> /usr/libexec/git-core/mergetools/tkdiff
>>> /usr/libexec/git-core/mergetools/xxdiff
>>> /usr/libexec/git-core/mergetools/kompare
>>> /usr/libexec/git-core/mergetools/guiffy
>>> /usr/libexec/git-core/mergetools/meld
>>> /usr/libexec/git-core/mergetools/gvimdiff2
>>> /usr/libexec/git-core/mergetools/gvimdiff
>>> /usr/libexec/git-core/mergetools/bc
>>> /usr/libexec/git-core/mergetools/bc3
>>> /usr/libexec/git-core/mergetools/emerge
>>> /usr/libexec/git-core/mergetools/gvimdiff3
>>> /usr/libexec/git-core/mergetools/opendiff
>>> /usr/libexec/git-core/mergetools/vimdiff3
>>> /usr/libexec/git-core/mergetools/p4merge
>>> /usr/libexec/git-core/mergetools/ecmerge
>>> /usr/libexec/git-core/mergetools/codecompare
>>> /usr/libexec/git-core/mergetools/vimdiff2
>>> /usr/libexec/git-core/mergetools/smerge
>>> /usr/libexec/git-core/mergetools/araxis
>>> /usr/libexec/git-core/mergetools/kdiff3
>>> /usr/libexec/git-core/mergetools/deltawalker
>>> /usr/libexec/git-core/git-merge-ours
>>> /usr/libexec/git-core/git
>>> /usr/libexec/git-core/git-merge-index
>>> /usr/libexec/git-core/git-mv
>>> /usr/libexec/git-core/git-hash-object
>>> /usr/libexec/git-core/git-annotate
>>> /usr/libexec/git-core/git-unpack-objects
>>> /usr/libexec/git-core/git-stripspace
>>> /usr/libexec/git-core/git-read-tree
>>> /usr/libexec/git-core/git-shortlog
>>> /usr/libexec/git-core/git-rev-list
>>> /usr/libexec/git-core/git-mergetool
>>> /usr/libexec/git-core/git-remote-http
>>> /usr/libexec/git-core/git-http-push
>>> /usr/libexec/git-core/git-update-index
>>> /usr/libexec/git-core/git-check-ref-format
>>> /usr/libexec/git-core/git-stash
>>> /usr/libexec/git-core/git-cat-file
>>> /usr/libexec/git-core/git-submodule
>>> /usr/libexec/git-core/git-interpret-trailers
>>> /usr/libexec/git-core/git-cvsexportcommit
>>> /usr/libexec/git-core/git-request-pull
>>> /usr/libexec/git-core/git-credential-store
>>> /usr/libexec/git-core/git-cherry-pick
>>> /usr/libexec/git-core/git-difftool
>>> /usr/libexec/git-core/git-show-index
>>> /usr/libexec/git-core/git-notes
>>> /usr/libexec/git-core/git-patch-id
>>> /usr/libexec/git-core/git-gc
>>> /usr/libexec/git-core/git-range-diff
>>> /usr/libexec/git-core/git-init-db
>>> /usr/libexec/git-core/git-send-email
>>> /usr/libexec/git-core/git-merge-tree
>>> /usr/libexec/git-core/git-name-rev
>>> /usr/libexec/git-core/git-remote-ext
>>> /usr/libexec/git-core/git-bundle
>>> /usr/libexec/git-core/git-cvsserver
>>> /usr/libexec/git-core/git-rebase--preserve-merges
>>> /usr/libexec/git-core/git-commit
>>> /usr/libexec/git-core/git-write-tree
>>> /usr/libexec/git-core/git-update-server-info
>>> /usr/libexec/git-core/git-show-ref
>>> /usr/libexec/git-core/git-credential-cache--daemon
>>> /usr/libexec/git-core/git-submodule--helper
>>> /usr/libexec/git-core/git-resurrect
>>> /usr/libexec/git-core/git-blame
>>> /usr/libexec/git-core/git-verify-tag
>>> /usr/libexec/git-core/git-jump
>>> /usr/libexec/git-core/git-sh-setup
>>> /usr/libexec/git-core/git-merge-recursive
>>> /usr/libexec/git-core/git-revert
>>> /usr/libexec/git-core/git-credential
>>> /usr/libexec/git-core/git-worktree
>>> /usr/libexec/git-core/git-daemon
>>> /usr/libexec/git-core/git-branch
>>> /usr/libexec/git-core/git-web--browse
>>> /usr/libexec/git-core/git-prune-packed
>>> /usr/libexec/git-core/git-remote-testsvn
>>> /usr/libexec/git-core/git-get-tar-commit-id
>>> /usr/libexec/git-core/git-diff-tree
>>> /usr/libexec/git-core/git-sh-i18n--envsubst
>>> /usr/libexec/git-core/git-archimport
>>> /usr/libexec/git-core/git-diff-files
>>> /usr/libexec/git-core/git-am
>>> /usr/libexec/git-core/git-show
>>> /usr/libexec/git-core/git-parse-remote
>>> /usr/libexec/git-core/git-var
>>> /usr/libexec/git-core/git-merge-subtree
>>> /usr/libexec/git-core/git-fmt-merge-msg
>>> /usr/libexec/git-core/git-mktag
>>> /usr/libexec/git-core/git-fsck-objects
>>> /usr/libexec/git-core/git-unpack-file
>>> /usr/libexec/git-core/git-replace
>>> /usr/libexec/git-core/git-send-pack
>>> /usr/libexec/git-core/git-fast-export
>>> /usr/libexec/git-core/git-env--helper
>>> /usr/libexec/git-core/git-help
>>> /usr/libexec/git-core/git-rerere
>>> /usr/libexec/git-core/git-ls-remote
>>> /usr/libexec/git-core/git-pack-objects
>>> /usr/libexec/git-core/git-checkout-index
>>> /usr/libexec/git-core/git-log
>>> /usr/libexec/git-core/git-repack
>>> /usr/libexec/git-core/git-clean
>>> /usr/libexec/git-core/git-cherry
>>> /usr/libexec/git-core/git-remote-ftps
>>> /usr/libexec/git-core/git-fetch
>>> /usr/libexec/git-core/git-mailinfo
>>> /usr/libexec/git-core/git-push
>>> /usr/libexec/git-core/git-http-backend
>>> /usr/libexec/git-core/git-rm
>>> /usr/libexec/git-core/git-verify-commit
>>> /usr/libexec/git-core/git-legacy-stash
>>> /usr/libexec/git-core/git-checkout
>>> /usr/libexec/git-core/git-bisect
>>> /usr/libexec/git-core/git-merge-file
>>> /usr/libexec/git-core/git-fsck
>>> /usr/libexec/git-core/git-imap-send
>>> /usr/libexec/git-core/git-merge-resolve
>>> /usr/libexec/git-core/git-diff
>>> /usr/libexec/git-core/git-upload-archive
>>> /usr/libexec/git-core/git-status
>>> /usr/libexec/git-core/git-contacts
>>> /usr/libexec/git-core/git-verify-pack
>>> /usr/libexec/git-core/git-receive-pack
>>> /usr/libexec/git-core/git-check-attr
>>> /usr/libexec/git-core/git-add--interactive
>>> /usr/libexec/git-core/git-sh-i18n
>>> /usr/libexec/git-core/git-archive
>>> /usr/libexec/git-core/git-apply
>>> /usr/libexec/git-core/git-show-branch
>>> /usr/libexec/git-core/git-grep
>>> /usr/libexec/git-core/git-subtree
>>> /usr/libexec/git-core/git-reset
>>> /usr/libexec/git-core/git-column
>>> /usr/libexec/git-core/git-quiltimport
>>> /usr/libexec/git-core/git-difftool--helper
>>> /usr/libexec/git-core/git-mktree
>>> /usr/libexec/git-core/git-http-fetch
>>> /usr/libexec/git-core/git-count-objects
>>> /usr/libexec/git-core/git-instaweb
>>> /usr/libexec/git-core/git-check-ignore
>>> /usr/libexec/git-core/git-cvsimport
>>> /usr/libexec/git-core/git-remote
>>> /usr/libexec/git-core/git-pack-refs
>>> /usr/libexec/git-core/git-commit-graph
>>> /usr/libexec/git-core/git-merge-octopus
>>> /usr/libexec/git-core/git-fetch-pack
>>> /usr/libexec/git-core/git-rebase
>>> /usr/libexec/git-core/git-ls-files
>>> /usr/libexec/git-core/git-add
>>> /usr/libexec/git-core/git-reflog
>>> /usr/libexec/git-core/git-format-patch
--- /usr/lib/
--- /usr/lib/debug/
--- /usr/lib/debug/usr/
--- /usr/lib/debug/usr/bin/
>>> /usr/lib/debug/usr/bin/git-upload-archive.debug
>>> /usr/lib/debug/usr/bin/git-shell.debug
>>> /usr/lib/debug/usr/bin/git-upload-pack.debug
>>> /usr/lib/debug/usr/bin/git.debug
>>> /usr/lib/debug/usr/bin/git-receive-pack.debug
>>> /usr/lib/debug/usr/libexec/
>>> /usr/lib/debug/usr/libexec/git-core/
>>> /usr/lib/debug/usr/libexec/git-core/git-init-db.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-hash-object.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-get-tar-commit-id.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-revert.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-checkout-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-imap-send.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-bundle.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-file.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-difftool.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-config.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-env--helper.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-cherry-pick.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-mailinfo.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-help.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-for-each-ref.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-credential-cache--daemon.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-update-server-info.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-tag.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fetch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fmt-merge-msg.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-base.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-rev-parse.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-send-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-diff-files.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-multi-pack-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-diff-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-clone.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-init.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fast-import.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-upload-archive.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-column.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-shell.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-verify-commit.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-unpack-file.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fsck-objects.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-commit.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-status.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-apply.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-stripspace.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-ls-remote.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-push.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-stash.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-replace.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-verify-tag.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-stage.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-testsvn.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-symbolic-ref.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-branch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-cherry.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-check-ref-format.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-check-ignore.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-mv.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-ls-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-reset.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-whatchanged.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-log.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-show.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-update-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-ftps.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-read-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-verify-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-pack-refs.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-count-objects.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-am.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-rebase.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-ls-files.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-show-ref.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-credential.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-upload-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-rev-list.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-describe.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-switch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-sh-i18n--envsubst.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-http-push.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-add.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-check-attr.debug
>>> /usr/lib/debug/usr/libexec/git-core/git.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-http-fetch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-prune.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-prune-packed.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-restore.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-subtree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-show-index.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-recursive.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-ftp.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-gc.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-diff-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-rerere.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-commit-graph.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-unpack-objects.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-receive-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-mktag.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-daemon.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-show-branch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-rm.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-diff.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-notes.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-ext.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fetch-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-bisect--helper.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-shortlog.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-pack-redundant.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-pull.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-grep.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-mailsplit.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-annotate.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-sparse-checkout.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-archive.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-credential-cache.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fsck.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-checkout.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-name-rev.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-write-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-check-mailmap.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-fast-export.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-repack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-update-ref.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-clean.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-cat-file.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-https.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-interpret-trailers.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-patch-id.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-credential-store.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-http-backend.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-reflog.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-index-pack.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-commit-tree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-format-patch.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-var.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-range-diff.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-http.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-pack-objects.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-merge-ours.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-remote-fd.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-submodule--helper.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-mktree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-worktree.debug
>>> /usr/lib/debug/usr/libexec/git-core/git-blame.debug
--- /lib/
--- /lib/systemd/
--- /lib/systemd/system/
>>> /lib/systemd/system/git-daemon@.service
>>> /lib/systemd/system/git-daemon.socket
>>> Safely unmerging already-installed instance...
No package files given... Grabbing a set.
--- replaced obj /usr/share/man/man7/gitworkflows.7.bz2
--- replaced obj /usr/share/man/man7/gittutorial.7.bz2
--- replaced obj /usr/share/man/man7/gittutorial-2.7.bz2
--- replaced obj /usr/share/man/man7/gitsubmodules.7.bz2
--- replaced obj /usr/share/man/man7/gitrevisions.7.bz2
--- replaced obj /usr/share/man/man7/gitremote-helpers.7.bz2
--- replaced obj /usr/share/man/man7/gitnamespaces.7.bz2
--- replaced obj /usr/share/man/man7/gitglossary.7.bz2
--- replaced obj /usr/share/man/man7/giteveryday.7.bz2
--- replaced obj /usr/share/man/man7/gitdiffcore.7.bz2
--- replaced obj /usr/share/man/man7/gitcvs-migration.7.bz2
--- replaced obj /usr/share/man/man7/gitcredentials.7.bz2
--- replaced obj /usr/share/man/man7/gitcore-tutorial.7.bz2
--- replaced obj /usr/share/man/man7/gitcli.7.bz2
--- replaced dir /usr/share/man/man7
--- replaced obj /usr/share/man/man5/gitweb.conf.5.bz2
--- replaced obj /usr/share/man/man5/gitrepository-layout.5.bz2
--- replaced obj /usr/share/man/man5/gitmodules.5.bz2
--- replaced obj /usr/share/man/man5/gitignore.5.bz2
--- replaced obj /usr/share/man/man5/githooks.5.bz2
--- replaced obj /usr/share/man/man5/gitattributes.5.bz2
--- replaced dir /usr/share/man/man5
--- replaced obj /usr/share/man/man1/gitweb.1.bz2
--- replaced obj /usr/share/man/man1/gitk.1.bz2
--- replaced obj /usr/share/man/man1/git.1.bz2
--- replaced obj /usr/share/man/man1/git-write-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-worktree.1.bz2
--- replaced obj /usr/share/man/man1/git-whatchanged.1.bz2
--- replaced obj /usr/share/man/man1/git-web--browse.1.bz2
--- replaced obj /usr/share/man/man1/git-verify-tag.1.bz2
--- replaced obj /usr/share/man/man1/git-verify-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-verify-commit.1.bz2
--- replaced obj /usr/share/man/man1/git-var.1.bz2
--- replaced obj /usr/share/man/man1/git-upload-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-upload-archive.1.bz2
--- replaced obj /usr/share/man/man1/git-update-server-info.1.bz2
--- replaced obj /usr/share/man/man1/git-update-ref.1.bz2
--- replaced obj /usr/share/man/man1/git-update-index.1.bz2
--- replaced obj /usr/share/man/man1/git-unpack-objects.1.bz2
--- replaced obj /usr/share/man/man1/git-unpack-file.1.bz2
--- replaced obj /usr/share/man/man1/git-tag.1.bz2
--- replaced obj /usr/share/man/man1/git-symbolic-ref.1.bz2
--- replaced obj /usr/share/man/man1/git-switch.1.bz2
--- replaced obj /usr/share/man/man1/git-submodule.1.bz2
--- replaced obj /usr/share/man/man1/git-stripspace.1.bz2
--- replaced obj /usr/share/man/man1/git-status.1.bz2
--- replaced obj /usr/share/man/man1/git-stash.1.bz2
--- replaced obj /usr/share/man/man1/git-stage.1.bz2
--- replaced obj /usr/share/man/man1/git-sparse-checkout.1.bz2
--- replaced obj /usr/share/man/man1/git-show.1.bz2
--- replaced obj /usr/share/man/man1/git-show-ref.1.bz2
--- replaced obj /usr/share/man/man1/git-show-index.1.bz2
--- replaced obj /usr/share/man/man1/git-show-branch.1.bz2
--- replaced obj /usr/share/man/man1/git-shortlog.1.bz2
--- replaced obj /usr/share/man/man1/git-shell.1.bz2
--- replaced obj /usr/share/man/man1/git-sh-setup.1.bz2
--- replaced obj /usr/share/man/man1/git-sh-i18n.1.bz2
--- replaced obj /usr/share/man/man1/git-sh-i18n--envsubst.1.bz2
--- replaced obj /usr/share/man/man1/git-send-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-send-email.1.bz2
--- replaced obj /usr/share/man/man1/git-rm.1.bz2
--- replaced obj /usr/share/man/man1/git-revert.1.bz2
--- replaced obj /usr/share/man/man1/git-rev-parse.1.bz2
--- replaced obj /usr/share/man/man1/git-rev-list.1.bz2
--- replaced obj /usr/share/man/man1/git-restore.1.bz2
--- replaced obj /usr/share/man/man1/git-reset.1.bz2
--- replaced obj /usr/share/man/man1/git-rerere.1.bz2
--- replaced obj /usr/share/man/man1/git-request-pull.1.bz2
--- replaced obj /usr/share/man/man1/git-replace.1.bz2
--- replaced obj /usr/share/man/man1/git-repack.1.bz2
--- replaced obj /usr/share/man/man1/git-remote.1.bz2
--- replaced obj /usr/share/man/man1/git-remote-fd.1.bz2
--- replaced obj /usr/share/man/man1/git-remote-ext.1.bz2
--- replaced obj /usr/share/man/man1/git-reflog.1.bz2
--- replaced obj /usr/share/man/man1/git-receive-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-rebase.1.bz2
--- replaced obj /usr/share/man/man1/git-read-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-range-diff.1.bz2
--- replaced obj /usr/share/man/man1/git-quiltimport.1.bz2
--- replaced obj /usr/share/man/man1/git-push.1.bz2
--- replaced obj /usr/share/man/man1/git-pull.1.bz2
--- replaced obj /usr/share/man/man1/git-prune.1.bz2
--- replaced obj /usr/share/man/man1/git-prune-packed.1.bz2
--- replaced obj /usr/share/man/man1/git-patch-id.1.bz2
--- replaced obj /usr/share/man/man1/git-parse-remote.1.bz2
--- replaced obj /usr/share/man/man1/git-pack-refs.1.bz2
--- replaced obj /usr/share/man/man1/git-pack-redundant.1.bz2
--- replaced obj /usr/share/man/man1/git-pack-objects.1.bz2
--- replaced obj /usr/share/man/man1/git-p4.1.bz2
--- replaced obj /usr/share/man/man1/git-notes.1.bz2
--- replaced obj /usr/share/man/man1/git-name-rev.1.bz2
--- replaced obj /usr/share/man/man1/git-mv.1.bz2
--- replaced obj /usr/share/man/man1/git-multi-pack-index.1.bz2
--- replaced obj /usr/share/man/man1/git-mktree.1.bz2
--- replaced obj /usr/share/man/man1/git-mktag.1.bz2
--- replaced obj /usr/share/man/man1/git-mergetool.1.bz2
--- replaced obj /usr/share/man/man1/git-mergetool--lib.1.bz2
--- replaced obj /usr/share/man/man1/git-merge.1.bz2
--- replaced obj /usr/share/man/man1/git-merge-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-merge-one-file.1.bz2
--- replaced obj /usr/share/man/man1/git-merge-index.1.bz2
--- replaced obj /usr/share/man/man1/git-merge-file.1.bz2
--- replaced obj /usr/share/man/man1/git-merge-base.1.bz2
--- replaced obj /usr/share/man/man1/git-mailsplit.1.bz2
--- replaced obj /usr/share/man/man1/git-mailinfo.1.bz2
--- replaced obj /usr/share/man/man1/git-ls-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-ls-remote.1.bz2
--- replaced obj /usr/share/man/man1/git-ls-files.1.bz2
--- replaced obj /usr/share/man/man1/git-log.1.bz2
--- replaced obj /usr/share/man/man1/git-interpret-trailers.1.bz2
--- replaced obj /usr/share/man/man1/git-instaweb.1.bz2
--- replaced obj /usr/share/man/man1/git-init.1.bz2
--- replaced obj /usr/share/man/man1/git-init-db.1.bz2
--- replaced obj /usr/share/man/man1/git-index-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-imap-send.1.bz2
--- replaced obj /usr/share/man/man1/git-http-push.1.bz2
--- replaced obj /usr/share/man/man1/git-http-fetch.1.bz2
--- replaced obj /usr/share/man/man1/git-http-backend.1.bz2
--- replaced obj /usr/share/man/man1/git-help.1.bz2
--- replaced obj /usr/share/man/man1/git-hash-object.1.bz2
--- replaced obj /usr/share/man/man1/git-gui.1.bz2
--- replaced obj /usr/share/man/man1/git-grep.1.bz2
--- replaced obj /usr/share/man/man1/git-get-tar-commit-id.1.bz2
--- replaced obj /usr/share/man/man1/git-gc.1.bz2
--- replaced obj /usr/share/man/man1/git-fsck.1.bz2
--- replaced obj /usr/share/man/man1/git-fsck-objects.1.bz2
--- replaced obj /usr/share/man/man1/git-format-patch.1.bz2
--- replaced obj /usr/share/man/man1/git-for-each-ref.1.bz2
--- replaced obj /usr/share/man/man1/git-fmt-merge-msg.1.bz2
--- replaced obj /usr/share/man/man1/git-filter-branch.1.bz2
--- replaced obj /usr/share/man/man1/git-fetch.1.bz2
--- replaced obj /usr/share/man/man1/git-fetch-pack.1.bz2
--- replaced obj /usr/share/man/man1/git-fast-import.1.bz2
--- replaced obj /usr/share/man/man1/git-fast-export.1.bz2
--- replaced obj /usr/share/man/man1/git-difftool.1.bz2
--- replaced obj /usr/share/man/man1/git-diff.1.bz2
--- replaced obj /usr/share/man/man1/git-diff-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-diff-index.1.bz2
--- replaced obj /usr/share/man/man1/git-diff-files.1.bz2
--- replaced obj /usr/share/man/man1/git-describe.1.bz2
--- replaced obj /usr/share/man/man1/git-daemon.1.bz2
--- replaced obj /usr/share/man/man1/git-cvsserver.1.bz2
--- replaced obj /usr/share/man/man1/git-cvsimport.1.bz2
--- replaced obj /usr/share/man/man1/git-cvsexportcommit.1.bz2
--- replaced obj /usr/share/man/man1/git-credential.1.bz2
--- replaced obj /usr/share/man/man1/git-credential-store.1.bz2
--- replaced obj /usr/share/man/man1/git-credential-cache.1.bz2
--- replaced obj /usr/share/man/man1/git-credential-cache--daemon.1.bz2
--- replaced obj /usr/share/man/man1/git-count-objects.1.bz2
--- replaced obj /usr/share/man/man1/git-config.1.bz2
--- replaced obj /usr/share/man/man1/git-commit.1.bz2
--- replaced obj /usr/share/man/man1/git-commit-tree.1.bz2
--- replaced obj /usr/share/man/man1/git-commit-graph.1.bz2
--- replaced obj /usr/share/man/man1/git-column.1.bz2
--- replaced obj /usr/share/man/man1/git-clone.1.bz2
--- replaced obj /usr/share/man/man1/git-clean.1.bz2
--- replaced obj /usr/share/man/man1/git-citool.1.bz2
--- replaced obj /usr/share/man/man1/git-cherry.1.bz2
--- replaced obj /usr/share/man/man1/git-cherry-pick.1.bz2
--- replaced obj /usr/share/man/man1/git-checkout.1.bz2
--- replaced obj /usr/share/man/man1/git-checkout-index.1.bz2
--- replaced obj /usr/share/man/man1/git-check-ref-format.1.bz2
--- replaced obj /usr/share/man/man1/git-check-mailmap.1.bz2
--- replaced obj /usr/share/man/man1/git-check-ignore.1.bz2
--- replaced obj /usr/share/man/man1/git-check-attr.1.bz2
--- replaced obj /usr/share/man/man1/git-cat-file.1.bz2
--- replaced obj /usr/share/man/man1/git-bundle.1.bz2
--- replaced obj /usr/share/man/man1/git-branch.1.bz2
--- replaced obj /usr/share/man/man1/git-blame.1.bz2
--- replaced obj /usr/share/man/man1/git-bisect.1.bz2
--- replaced obj /usr/share/man/man1/git-archive.1.bz2
--- replaced obj /usr/share/man/man1/git-archimport.1.bz2
--- replaced obj /usr/share/man/man1/git-apply.1.bz2
--- replaced obj /usr/share/man/man1/git-annotate.1.bz2
--- replaced obj /usr/share/man/man1/git-am.1.bz2
--- replaced obj /usr/share/man/man1/git-add.1.bz2
--- replaced dir /usr/share/man/man1
--- replaced dir /usr/share/man
--- replaced obj /usr/share/git/git-prompt.sh
--- replaced obj /usr/share/git/contrib/workdir/git-new-workdir
--- replaced obj /usr/share/git/contrib/workdir/.gitattributes
--- replaced dir /usr/share/git/contrib/workdir
--- replaced obj /usr/share/git/contrib/stats/packinfo.pl
--- replaced obj /usr/share/git/contrib/stats/mailmap.pl
--- replaced obj /usr/share/git/contrib/stats/git-common-hash
--- replaced dir /usr/share/git/contrib/stats
--- replaced obj /usr/share/git/contrib/rerere-train.sh
--- replaced obj /usr/share/git/contrib/remotes2config.sh
--- replaced obj /usr/share/git/contrib/hooks/update-paranoid
--- replaced obj /usr/share/git/contrib/hooks/setgitperms.perl
--- replaced obj /usr/share/git/contrib/hooks/pre-auto-gc-battery
--- replaced obj /usr/share/git/contrib/hooks/post-receive-email
--- replaced obj /usr/share/git/contrib/hooks/multimail/post-receive.example
--- replaced obj /usr/share/git/contrib/hooks/multimail/migrate-mailhook-config
--- replaced obj /usr/share/git/contrib/hooks/multimail/git_multimail.py
--- replaced obj /usr/share/git/contrib/hooks/multimail/doc/troubleshooting.rst
--- replaced obj /usr/share/git/contrib/hooks/multimail/doc/gitolite.rst
--- replaced obj /usr/share/git/contrib/hooks/multimail/doc/gerrit.rst
--- replaced obj /usr/share/git/contrib/hooks/multimail/doc/customizing-emails.rst
--- replaced dir /usr/share/git/contrib/hooks/multimail/doc
--- replaced obj /usr/share/git/contrib/hooks/multimail/README.rst
--- replaced obj /usr/share/git/contrib/hooks/multimail/README.migrate-from-post-receive-email
--- replaced obj /usr/share/git/contrib/hooks/multimail/README.Git
--- replaced obj /usr/share/git/contrib/hooks/multimail/CONTRIBUTING.rst
--- replaced obj /usr/share/git/contrib/hooks/multimail/CHANGES
--- replaced dir /usr/share/git/contrib/hooks/multimail
--- replaced dir /usr/share/git/contrib/hooks
--- replaced obj /usr/share/git/contrib/hg-to-git/hg-to-git.txt
--- replaced obj /usr/share/git/contrib/hg-to-git/hg-to-git.py
--- replaced dir /usr/share/git/contrib/hg-to-git
--- replaced obj /usr/share/git/contrib/fast-import/import-zips.py
--- replaced obj /usr/share/git/contrib/fast-import/import-tars.perl
--- replaced obj /usr/share/git/contrib/fast-import/import-directories.perl
--- replaced obj /usr/share/git/contrib/fast-import/git-p4.README
--- replaced obj /usr/share/git/contrib/fast-import/git-import.sh
--- replaced obj /usr/share/git/contrib/fast-import/git-import.perl
--- replaced dir /usr/share/git/contrib/fast-import
--- replaced obj /usr/share/git/contrib/buildsystems/parse.pl
--- replaced obj /usr/share/git/contrib/buildsystems/generate
--- replaced obj /usr/share/git/contrib/buildsystems/engine.pl
--- replaced obj /usr/share/git/contrib/buildsystems/Generators/Vcxproj.pm
--- replaced obj /usr/share/git/contrib/buildsystems/Generators/Vcproj.pm
--- replaced obj /usr/share/git/contrib/buildsystems/Generators/QMake.pm
--- replaced obj /usr/share/git/contrib/buildsystems/Generators.pm
--- replaced dir /usr/share/git/contrib/buildsystems/Generators
--- replaced dir /usr/share/git/contrib/buildsystems
--- replaced dir /usr/share/git/contrib
--- replaced obj /usr/share/git-core/templates/info/exclude
--- replaced dir /usr/share/git-core/templates/info
--- replaced obj /usr/share/git-core/templates/hooks/update.sample
--- replaced obj /usr/share/git-core/templates/hooks/prepare-commit-msg.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-receive.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-rebase.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-push.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-merge-commit.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-commit.sample
--- replaced obj /usr/share/git-core/templates/hooks/pre-applypatch.sample
--- replaced obj /usr/share/git-core/templates/hooks/post-update.sample
--- replaced obj /usr/share/git-core/templates/hooks/fsmonitor-watchman.sample
--- replaced obj /usr/share/git-core/templates/hooks/commit-msg.sample
--- replaced obj /usr/share/git-core/templates/hooks/applypatch-msg.sample
--- replaced dir /usr/share/git-core/templates/hooks
--- replaced obj /usr/share/git-core/templates/description
--- replaced dir /usr/share/git-core/templates
--- replaced dir /usr/share/git-core
--- replaced dir /usr/share/git
--- replaced obj /usr/share/doc/git-2.26.2/user-manual.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/urls.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/urls-remotes.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/transfer-data-leaks.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/trace2-target-values.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/trivial-merge.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/signature-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/shallow.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/send-pack-pipeline.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/rerere.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/repository-version.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/racy-git.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/protocol-v2.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/protocol-common.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/protocol-capabilities.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/partial-clone.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/pack-protocol.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/pack-heuristics.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/pack-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/multi-pack-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/long-running-process-protocol.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/index-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/http-protocol.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/hash-function-transition.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/directory-rename-detection.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/commit-graph.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/commit-graph-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/bundle-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/bitmap-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/api-trace2.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/api-parse-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/api-merge.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/api-index-skel.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/technical/api-error-handling.txt.bz2
--- replaced dir /usr/share/doc/git-2.26.2/technical
--- replaced obj /usr/share/doc/git-2.26.2/sequencer.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/revisions.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/rev-list-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/pull-fetch-param.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/pretty-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/pretty-formats.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/merge-strategies.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/merge-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/mailmap.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/line-range-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/i18n.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/using-signed-tag-in-pull-request.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/using-merge-subtree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/use-git-daemon.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/update-hook-example.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/setup-git-server-over-http.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/separating-topic-branches.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/revert-branch-rebase.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/revert-a-faulty-merge.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/recover-corrupted-object-harder.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/recover-corrupted-blob-object.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/rebuild-from-update-hook.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/rebase-from-internal-branch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/new-command.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/maintain-git.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/howto/keep-canonical-history-correct.txt.bz2
--- replaced dir /usr/share/doc/git-2.26.2/howto
--- replaced obj /usr/share/doc/git-2.26.2/glossary-content.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitworkflows.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitweb.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitweb.conf.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gittutorial.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gittutorial-2.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitsubmodules.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitrevisions.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitrepository-layout.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitremote-helpers.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitnamespaces.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitmodules.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitk.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitignore.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/githooks.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitglossary.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/giteveryday.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitdiffcore.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitcvs-migration.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitcredentials.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitcore-tutorial.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitcli.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/gitattributes.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-write-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-worktree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-whatchanged.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-web--browse.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-verify-tag.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-verify-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-verify-commit.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-var.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-upload-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-upload-archive.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-update-server-info.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-update-ref.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-update-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-unpack-objects.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-unpack-file.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-tools.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-tag.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-symbolic-ref.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-switch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-svn.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-subtree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-submodule.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-stripspace.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-status.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-stash.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-stage.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-sparse-checkout.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-show.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-show-ref.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-show-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-show-branch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-shortlog.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-shell.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-sh-setup.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-sh-i18n.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-sh-i18n--envsubst.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-send-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-send-email.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-rm.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-revert.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-rev-parse.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-rev-list.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-restore.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-reset.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-rerere.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-request-pull.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-replace.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-repack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-remote.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-remote-fd.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-remote-ext.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-reflog.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-receive-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-rebase.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-read-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-range-diff.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-quiltimport.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-push.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-pull.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-prune.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-prune-packed.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-patch-id.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-parse-remote.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-pack-refs.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-pack-redundant.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-pack-objects.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-p4.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-notes.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-name-rev.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mv.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-multi-pack-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mktree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mktag.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mergetool.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mergetool--lib.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge-one-file.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge-file.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-merge-base.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mailsplit.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-mailinfo.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-ls-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-ls-remote.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-ls-files.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-log.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-jump.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-interpret-trailers.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-instaweb.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-init.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-init-db.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-index-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-imap-send.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-http-push.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-http-fetch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-http-backend.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-help.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-hash-object.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-gui.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-grep.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-get-tar-commit-id.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-gc.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fsck.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fsck-objects.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-format-patch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-for-each-ref.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fmt-merge-msg.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-filter-branch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fetch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fetch-pack.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fast-import.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-fast-export.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-difftool.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-diff.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-diff-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-diff-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-diff-files.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-describe.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-daemon.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cvsserver.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cvsimport.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cvsexportcommit.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-credential.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-credential-store.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-credential-cache.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-credential-cache--daemon.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-count-objects.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-contacts.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-config.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-commit.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-commit-tree.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-commit-graph.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-column.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-clone.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-clean.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-citool.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cherry.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cherry-pick.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-checkout.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-checkout-index.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-check-ref-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-check-mailmap.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-check-ignore.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-check-attr.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-cat-file.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-bundle.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-branch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-blame.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-bisect.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-bisect-lk2009.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-archive.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-archimport.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-apply.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-annotate.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-am.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/git-add.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/fetch-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/diff-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/diff-generate-patch.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/diff-format.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/date-formats.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/config.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/blame-options.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/SubmittingPatches.bz2
--- replaced obj /usr/share/doc/git-2.26.2/README.md.bz2
--- replaced obj /usr/share/doc/git-2.26.2/README.git-subtree.bz2
--- replaced obj /usr/share/doc/git-2.26.2/README.diff-highlight.bz2
--- replaced obj /usr/share/doc/git-2.26.2/MyFirstObjectWalk.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/MyFirstContribution.txt.bz2
--- replaced obj /usr/share/doc/git-2.26.2/CodingGuidelines.bz2
--- replaced dir /usr/share/doc/git-2.26.2
--- replaced dir /usr/share/doc
--- replaced sym /usr/share/bash-completion/completions/gitk
--- replaced obj /usr/share/bash-completion/completions/git
--- replaced dir /usr/share/bash-completion/completions
--- replaced dir /usr/share/bash-completion
--- replaced dir /usr/share
--- replaced obj /usr/libexec/git-core/mergetools/xxdiff
--- replaced obj /usr/libexec/git-core/mergetools/winmerge
--- replaced obj /usr/libexec/git-core/mergetools/vimdiff3
--- replaced obj /usr/libexec/git-core/mergetools/vimdiff2
--- replaced obj /usr/libexec/git-core/mergetools/vimdiff
--- replaced obj /usr/libexec/git-core/mergetools/tortoisemerge
--- replaced obj /usr/libexec/git-core/mergetools/tkdiff
--- replaced obj /usr/libexec/git-core/mergetools/smerge
--- replaced obj /usr/libexec/git-core/mergetools/p4merge
--- replaced obj /usr/libexec/git-core/mergetools/opendiff
--- replaced obj /usr/libexec/git-core/mergetools/meld
--- replaced obj /usr/libexec/git-core/mergetools/kompare
--- replaced obj /usr/libexec/git-core/mergetools/kdiff3
--- replaced obj /usr/libexec/git-core/mergetools/gvimdiff3
--- replaced obj /usr/libexec/git-core/mergetools/gvimdiff2
--- replaced obj /usr/libexec/git-core/mergetools/gvimdiff
--- replaced obj /usr/libexec/git-core/mergetools/guiffy
--- replaced obj /usr/libexec/git-core/mergetools/examdiff
--- replaced obj /usr/libexec/git-core/mergetools/emerge
--- replaced obj /usr/libexec/git-core/mergetools/ecmerge
--- replaced obj /usr/libexec/git-core/mergetools/diffuse
--- replaced obj /usr/libexec/git-core/mergetools/diffmerge
--- replaced obj /usr/libexec/git-core/mergetools/deltawalker
--- replaced obj /usr/libexec/git-core/mergetools/codecompare
--- replaced obj /usr/libexec/git-core/mergetools/bc3
--- replaced obj /usr/libexec/git-core/mergetools/bc
--- replaced obj /usr/libexec/git-core/mergetools/araxis
--- replaced dir /usr/libexec/git-core/mergetools
--- replaced obj /usr/libexec/git-core/git-write-tree
--- replaced obj /usr/libexec/git-core/git-worktree
--- replaced obj /usr/libexec/git-core/git-whatchanged
--- replaced obj /usr/libexec/git-core/git-web--browse
--- replaced obj /usr/libexec/git-core/git-verify-tag
--- replaced obj /usr/libexec/git-core/git-verify-pack
--- replaced obj /usr/libexec/git-core/git-verify-commit
--- replaced obj /usr/libexec/git-core/git-var
--- replaced obj /usr/libexec/git-core/git-upload-pack
--- replaced obj /usr/libexec/git-core/git-upload-archive
--- replaced obj /usr/libexec/git-core/git-update-server-info
--- replaced obj /usr/libexec/git-core/git-update-ref
--- replaced obj /usr/libexec/git-core/git-update-index
--- replaced obj /usr/libexec/git-core/git-unpack-objects
--- replaced obj /usr/libexec/git-core/git-unpack-file
--- replaced obj /usr/libexec/git-core/git-tag
--- replaced obj /usr/libexec/git-core/git-symbolic-ref
--- replaced obj /usr/libexec/git-core/git-switch
--- replaced obj /usr/libexec/git-core/git-subtree
--- replaced obj /usr/libexec/git-core/git-submodule--helper
--- replaced obj /usr/libexec/git-core/git-submodule
--- replaced obj /usr/libexec/git-core/git-stripspace
--- replaced obj /usr/libexec/git-core/git-status
--- replaced obj /usr/libexec/git-core/git-stash
--- replaced obj /usr/libexec/git-core/git-stage
--- replaced obj /usr/libexec/git-core/git-sparse-checkout
--- replaced obj /usr/libexec/git-core/git-show-ref
--- replaced obj /usr/libexec/git-core/git-show-index
--- replaced obj /usr/libexec/git-core/git-show-branch
--- replaced obj /usr/libexec/git-core/git-show
--- replaced obj /usr/libexec/git-core/git-shortlog
--- replaced obj /usr/libexec/git-core/git-shell
--- replaced obj /usr/libexec/git-core/git-sh-setup
--- replaced obj /usr/libexec/git-core/git-sh-i18n--envsubst
--- replaced obj /usr/libexec/git-core/git-sh-i18n
--- replaced obj /usr/libexec/git-core/git-send-pack
--- replaced obj /usr/libexec/git-core/git-send-email
--- replaced obj /usr/libexec/git-core/git-rm
--- replaced obj /usr/libexec/git-core/git-revert
--- replaced obj /usr/libexec/git-core/git-rev-parse
--- replaced obj /usr/libexec/git-core/git-rev-list
--- replaced obj /usr/libexec/git-core/git-resurrect
--- replaced obj /usr/libexec/git-core/git-restore
--- replaced obj /usr/libexec/git-core/git-reset
--- replaced obj /usr/libexec/git-core/git-rerere
--- replaced obj /usr/libexec/git-core/git-request-pull
--- replaced obj /usr/libexec/git-core/git-replace
--- replaced obj /usr/libexec/git-core/git-repack
--- replaced obj /usr/libexec/git-core/git-remote-testsvn
--- replaced obj /usr/libexec/git-core/git-remote-https
--- replaced obj /usr/libexec/git-core/git-remote-http
--- replaced obj /usr/libexec/git-core/git-remote-ftps
--- replaced obj /usr/libexec/git-core/git-remote-ftp
--- replaced obj /usr/libexec/git-core/git-remote-fd
--- replaced obj /usr/libexec/git-core/git-remote-ext
--- replaced obj /usr/libexec/git-core/git-remote
--- replaced obj /usr/libexec/git-core/git-reflog
--- replaced obj /usr/libexec/git-core/git-receive-pack
--- replaced obj /usr/libexec/git-core/git-rebase--preserve-merges
--- replaced obj /usr/libexec/git-core/git-rebase
--- replaced obj /usr/libexec/git-core/git-read-tree
--- replaced obj /usr/libexec/git-core/git-range-diff
--- replaced obj /usr/libexec/git-core/git-quiltimport
--- replaced obj /usr/libexec/git-core/git-push
--- replaced obj /usr/libexec/git-core/git-pull
--- replaced obj /usr/libexec/git-core/git-prune-packed
--- replaced obj /usr/libexec/git-core/git-prune
--- replaced obj /usr/libexec/git-core/git-patch-id
--- replaced obj /usr/libexec/git-core/git-parse-remote
--- replaced obj /usr/libexec/git-core/git-pack-refs
--- replaced obj /usr/libexec/git-core/git-pack-redundant
--- replaced obj /usr/libexec/git-core/git-pack-objects
--- replaced obj /usr/libexec/git-core/git-p4
--- replaced obj /usr/libexec/git-core/git-notes
--- replaced obj /usr/libexec/git-core/git-name-rev
--- replaced obj /usr/libexec/git-core/git-mv
--- replaced obj /usr/libexec/git-core/git-multi-pack-index
--- replaced obj /usr/libexec/git-core/git-mktree
--- replaced obj /usr/libexec/git-core/git-mktag
--- replaced obj /usr/libexec/git-core/git-mergetool--lib
--- replaced obj /usr/libexec/git-core/git-mergetool
--- replaced obj /usr/libexec/git-core/git-merge-tree
--- replaced obj /usr/libexec/git-core/git-merge-subtree
--- replaced obj /usr/libexec/git-core/git-merge-resolve
--- replaced obj /usr/libexec/git-core/git-merge-recursive
--- replaced obj /usr/libexec/git-core/git-merge-ours
--- replaced obj /usr/libexec/git-core/git-merge-one-file
--- replaced obj /usr/libexec/git-core/git-merge-octopus
--- replaced obj /usr/libexec/git-core/git-merge-index
--- replaced obj /usr/libexec/git-core/git-merge-file
--- replaced obj /usr/libexec/git-core/git-merge-base
--- replaced obj /usr/libexec/git-core/git-merge
--- replaced obj /usr/libexec/git-core/git-mailsplit
--- replaced obj /usr/libexec/git-core/git-mailinfo
--- replaced obj /usr/libexec/git-core/git-ls-tree
--- replaced obj /usr/libexec/git-core/git-ls-remote
--- replaced obj /usr/libexec/git-core/git-ls-files
--- replaced obj /usr/libexec/git-core/git-log
--- replaced obj /usr/libexec/git-core/git-legacy-stash
--- replaced obj /usr/libexec/git-core/git-jump
--- replaced obj /usr/libexec/git-core/git-interpret-trailers
--- replaced obj /usr/libexec/git-core/git-instaweb
--- replaced obj /usr/libexec/git-core/git-init-db
--- replaced obj /usr/libexec/git-core/git-init
--- replaced obj /usr/libexec/git-core/git-index-pack
--- replaced obj /usr/libexec/git-core/git-imap-send
--- replaced obj /usr/libexec/git-core/git-http-push
--- replaced obj /usr/libexec/git-core/git-http-fetch
--- replaced obj /usr/libexec/git-core/git-http-backend
--- replaced obj /usr/libexec/git-core/git-help
--- replaced obj /usr/libexec/git-core/git-hash-object
--- replaced obj /usr/libexec/git-core/git-grep
--- replaced obj /usr/libexec/git-core/git-get-tar-commit-id
--- replaced obj /usr/libexec/git-core/git-gc
--- replaced obj /usr/libexec/git-core/git-fsck-objects
--- replaced obj /usr/libexec/git-core/git-fsck
--- replaced obj /usr/libexec/git-core/git-format-patch
--- replaced obj /usr/libexec/git-core/git-for-each-ref
--- replaced obj /usr/libexec/git-core/git-fmt-merge-msg
--- replaced obj /usr/libexec/git-core/git-filter-branch
--- replaced obj /usr/libexec/git-core/git-fetch-pack
--- replaced obj /usr/libexec/git-core/git-fetch
--- replaced obj /usr/libexec/git-core/git-fast-import
--- replaced obj /usr/libexec/git-core/git-fast-export
--- replaced obj /usr/libexec/git-core/git-env--helper
--- replaced obj /usr/libexec/git-core/git-difftool--helper
--- replaced obj /usr/libexec/git-core/git-difftool
--- replaced obj /usr/libexec/git-core/git-diff-tree
--- replaced obj /usr/libexec/git-core/git-diff-index
--- replaced obj /usr/libexec/git-core/git-diff-files
--- replaced obj /usr/libexec/git-core/git-diff
--- replaced obj /usr/libexec/git-core/git-describe
--- replaced obj /usr/libexec/git-core/git-daemon
--- replaced obj /usr/libexec/git-core/git-cvsserver
--- replaced obj /usr/libexec/git-core/git-cvsimport
--- replaced obj /usr/libexec/git-core/git-cvsexportcommit
--- replaced obj /usr/libexec/git-core/git-credential-store
--- replaced obj /usr/libexec/git-core/git-credential-cache--daemon
--- replaced obj /usr/libexec/git-core/git-credential-cache
--- replaced obj /usr/libexec/git-core/git-credential
--- replaced obj /usr/libexec/git-core/git-count-objects
--- replaced obj /usr/libexec/git-core/git-contacts
--- replaced obj /usr/libexec/git-core/git-config
--- replaced obj /usr/libexec/git-core/git-commit-tree
--- replaced obj /usr/libexec/git-core/git-commit-graph
--- replaced obj /usr/libexec/git-core/git-commit
--- replaced obj /usr/libexec/git-core/git-column
--- replaced obj /usr/libexec/git-core/git-clone
--- replaced obj /usr/libexec/git-core/git-clean
--- replaced obj /usr/libexec/git-core/git-cherry-pick
--- replaced obj /usr/libexec/git-core/git-cherry
--- replaced obj /usr/libexec/git-core/git-checkout-index
--- replaced obj /usr/libexec/git-core/git-checkout
--- replaced obj /usr/libexec/git-core/git-check-ref-format
--- replaced obj /usr/libexec/git-core/git-check-mailmap
--- replaced obj /usr/libexec/git-core/git-check-ignore
--- replaced obj /usr/libexec/git-core/git-check-attr
--- replaced obj /usr/libexec/git-core/git-cat-file
--- replaced obj /usr/libexec/git-core/git-bundle
--- replaced obj /usr/libexec/git-core/git-branch
--- replaced obj /usr/libexec/git-core/git-blame
--- replaced obj /usr/libexec/git-core/git-bisect--helper
--- replaced obj /usr/libexec/git-core/git-bisect
--- replaced obj /usr/libexec/git-core/git-archive
--- replaced obj /usr/libexec/git-core/git-archimport
--- replaced obj /usr/libexec/git-core/git-apply
--- replaced obj /usr/libexec/git-core/git-annotate
--- replaced obj /usr/libexec/git-core/git-am
--- replaced obj /usr/libexec/git-core/git-add--interactive
--- replaced obj /usr/libexec/git-core/git-add
--- replaced obj /usr/libexec/git-core/git
--- replaced dir /usr/libexec/git-core
--- replaced dir /usr/libexec
--- replaced obj /usr/bin/import-tars
--- replaced obj /usr/bin/git-upload-pack
--- replaced obj /usr/bin/git-upload-archive
--- replaced obj /usr/bin/git-shell
--- replaced obj /usr/bin/git-receive-pack
--- replaced obj /usr/bin/git-cvsserver
--- replaced obj /usr/bin/git
--- replaced obj /usr/bin/diff-highlight
--- replaced dir /usr/bin
--- replaced dir /usr
--- replaced obj /lib/systemd/system/git-daemon@.service
--- replaced obj /lib/systemd/system/git-daemon.socket
--- replaced dir /lib/systemd/system
--- replaced dir /lib/systemd
--- replaced dir /lib
--- replaced obj /etc/init.d/git-daemon
--- replaced dir /etc/init.d
--- replaced obj /etc/conf.d/git-daemon
--- replaced dir /etc/conf.d
--- replaced dir /etc
>>> Regenerating /etc/ld.so.cache...
>>> Original instance of package unmerged safely.
 [32;01m*[0m Please read /usr/share/bash-completion/completions/git for Git bash command
 [32;01m*[0m completion.
 [32;01m*[0m Please read /usr/share/git/git-prompt.sh for Git bash prompt
 [32;01m*[0m Note that the prompt bash code is now in that separate script
 [32;01m*[0m These additional scripts need some dependencies:

 [32;01m*[0m   git-quiltimport  : dev-util/quilt
 [32;01m*[0m   git-instaweb     : || ( www-servers/lighttpd www-servers/apache www-servers/nginx )

>>> dev-vcs/git-2.26.2 merged.
