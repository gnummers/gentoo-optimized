From 29999fe32d3832815ca6cc1f02ae1e044b6fce46 Mon Sep 17 00:00:00 2001
From: Ash Berlin <ash_github@firemirror.com>
Date: Tue, 8 Jun 2010 12:09:05 +0100
Subject: [PATCH] Change how wantarray is tweaked to work better with 5.12

---
 TryCatch.xs     |  163 +++++++++++++++++++++++--------------------------------
 lib/TryCatch.pm |    8 +--
 2 files changed, 70 insertions(+), 101 deletions(-)

diff --git a/TryCatch.xs b/TryCatch.xs
index 67c4ef7..46e7d5d 100644
--- a/TryCatch.xs
+++ b/TryCatch.xs
@@ -11,8 +11,13 @@
 # define CvISXSUB(cv) CvXSUB(cv)
 #endif
 
+#ifndef SVf_IVisUV
+  #define SvUV(x) SvIV(x)
+#endif
+
 static int trycatch_debug = 0;
 
+// A debug function. Dump the context stack so i can see if i'm unwinding to the right place
 STATIC I32
 dump_cxstack()
 {
@@ -23,11 +28,11 @@ dump_cxstack()
     default:
         continue;
     case CXt_EVAL:
-        printf("***\n* cx stack %d: WA: %d\n", (int)i, cx->blk_gimme);
-        sv_dump((SV*)cx->blk_eval.cv);
+        printf("***\n* ecal cx stack %d: WA: %d\n", (int)i, cx->blk_gimme);
+        //sv_dump((SV*)cx->blk_eval.cv);
         break;
     case CXt_SUB:
-        printf("***\n* cx stack %d: WA: %d\n", (int)i, cx->blk_gimme);
+        printf("***\n* sub cx stack %d: WA: %d\n", (int)i, cx->blk_gimme);
         sv_dump((SV*)cx->blk_sub.cv);
         break;
     }
@@ -102,109 +107,74 @@ STATIC OP* unwind_return (pTHX_ OP *op, void *user_data) {
 }
 
 
-/* After the scope has been created, fix up the context */
-STATIC OP* op_after_entertry(pTHX_ OP *op, void *user_data) {
-  PERL_CONTEXT * cx = cxstack+cxstack_ix;
+STATIC OP* try_wantarray (pTHX_ OP *op, void *user_data) {
+  PERL_UNUSED_VAR(op);
+  PERL_UNUSED_VAR(user_data);
 
-  // Sanity check the gimme, since we'll reset it in leavetry
-  if (cx->blk_gimme != G_VOID) {
-    fprintf(stderr, "Try Catch Internal Error: ENTERTRY op did not have "
-                    "VOID context (it was %d)\n", cx->blk_gimme);
-    abort();
+  dVAR;
+  dSP;
+  EXTEND(SP, 1);
+
+  /* We want the context from the closest subroutine, not from the closest
+   * block
+   */
+  switch ( get_sub_context() ) {
+  case G_ARRAY:
+    RETPUSHYES;
+  case G_SCALAR:
+    RETPUSHNO;
+  default:
+    RETPUSHUNDEF;
   }
-  cx->blk_gimme = get_sub_context();
-  return op;
 }
 
-STATIC OP* op_before_leavetry(pTHX_ OP *op, void *user_data) {
-  PERL_CONTEXT * cx = cxstack+cxstack_ix;
-  cx->blk_gimme = G_VOID;
-  return op;
-}
-
-
-/* Hook the OP_RETURN iff we are in hte same file as originally compiling. */
-STATIC OP* check_return (pTHX_ OP *op, void *user_data) {
+STATIC OP* hook_if_correct_file (pTHX_ OP *op, void* user_data) {
 
   const char* file = SvPV_nolen( (SV*)user_data );
   const char* cur_file = CopFILE(&PL_compiling);
   if (strcmp(file, cur_file)) {
     if (trycatch_debug & 4)
-      Perl_warn(aTHX_ "Not hooking OP_return since its in '%s'", cur_file);
+      Perl_warn(aTHX_ "Not hooking OP %d since its in '%s'", op->op_type, cur_file);
     return op;
   }
   if (trycatch_debug & 1) {
-    Perl_warn(aTHX_ "hooking OP_return");
-  }
-
-  hook_op_ppaddr(op, unwind_return, NULL);
-  return op;
-}
-
-
-
-// If this eval scope should be marked by TryCatch, hook the ops
-STATIC OP* check_leavetry (pTHX_ OP *op, void *user_data) {
-
-  SV* eval_is_try = get_sv("TryCatch::NEXT_EVAL_IS_TRY", 0);
-
-  if (SvOK(eval_is_try) && SvTRUE(eval_is_try)) {
-
-    OP* entertry = ((LISTOP*)op)->op_first;
-
-    if (trycatch_debug & 2) {
-      const char* cur_file = CopFILE(&PL_compiling);
-      int is_try = SvIVx(eval_is_try);
-      Perl_warn(aTHX_ "entertry op 0x%x try=%d", op, is_try);
-    }
-
-    SvIV_set(eval_is_try, 0);
-    hook_op_ppaddr_around(entertry, NULL, op_after_entertry, NULL);
-    hook_op_ppaddr_around(op, op_before_leavetry, NULL, NULL);
+    Perl_warn(aTHX_ "hooking OP %d", op->op_type);
   }
-  return op;
-}
 
-// eval {} starts off as an OP_ENTEREVAL, and then the PL_check[OP_ENTEREVAL]
-// returns a newly created ENTERTRY (and LEAVETRY) ops without calling the
-// PL_check for these new ops into OP_ENTERTRY. How ever versions prior to perl
-// 5.10.1 didn't call the PL_check for these new opes
-STATIC OP* check_entereval (pTHX_ OP *op, void *user_data) {
-  if (op->op_type == OP_LEAVETRY) {
-    return check_leavetry(aTHX_ op, user_data);
-  }
+  hook_op_ppaddr(op, (op->op_type == OP_RETURN ? unwind_return : try_wantarray), NULL);
   return op;
 }
 
+SV* xs_install_op_checks() {
+/*(int op_code, hook_op_ppaddr_cb_t* hook_fn) {*/
+  SV *hook_id, *sv_curfile;
+  AV *av;
+  UV id;
 
-void dualvar_id(SV* sv, UV id) {
+  av = newAV();
+  sv_curfile = newSV(0);
 
+  /* Get the filename we install check op hooks into */
   char* file = CopFILE(&PL_compiling);
   STRLEN len = strlen(file);
 
-  (void)SvUPGRADE(sv,SVt_PVNV);
+  (void)SvUPGRADE(sv_curfile,SVt_PVNV);
 
-  sv_setpvn(sv,file,len);
-#ifdef SVf_IVisUV
-  SvUV_set(sv, id);
-  SvIOK_on(sv);
-  SvIsUV_on(sv);
-#else
-  SvIV_set(sv, id);
-  SvIOK_on(sv);
-#endif
-}
+  sv_setpvn(sv_curfile,file,len);
+  av_push(av, sv_curfile);
+
+  id = hook_op_check( OP_RETURN, hook_if_correct_file, sv_curfile );
+  av_push(av, newSVuv(OP_RETURN) );
+  av_push(av, newSVuv(id) );
 
-SV* install_op_check(int op_code, hook_op_ppaddr_cb_t hook_fn) {
-  SV* ret;
-  UV id;
 
-  ret = newSV(0);
+  id = hook_op_check( OP_WANTARRAY, hook_if_correct_file, sv_curfile );
 
-  id = hook_op_check( op_code, hook_fn, ret );
-  dualvar_id(ret, id);
+  av_push(av, newSVuv(OP_WANTARRAY) );
+  av_push(av, newSVuv(id) );
 
-  return ret;
+  // Get an array ref form the array, return that. This keeps the sv_curfile alive
+  return newRV_noinc( (SV*) av );
 }
 
 MODULE = TryCatch PACKAGE = TryCatch::XS
@@ -212,28 +182,29 @@ MODULE = TryCatch PACKAGE = TryCatch::XS
 PROTOTYPES: DISABLE
 
 void
-install_return_op_check()
+install_op_checks()
   CODE:
-    ST(0) = install_op_check(OP_RETURN, check_return);
+    ST(0) = xs_install_op_checks();
     XSRETURN(1);
 
 void
-install_try_op_check()
+uninstall_op_checks(aref)
+SV* aref;
+  PREINIT:
+AV* av;
+SV *op, *id;
   CODE:
-    // TODO: Deal with perl 5.10.1+
-    ST(0) = install_op_check(OP_ENTEREVAL, check_entereval);
-    XSRETURN(1);
-
-void
-uninstall_return_op_check(id)
-SV* id
-  CODE:
-#ifdef SVf_IVisUV
-    UV uiv = SvUV(id);
-#else
-    UV uiv = SvIV(id);
-#endif
-    hook_op_check_remove(OP_RETURN, uiv);
+    if ( !SvROK(aref) && SvTYPE(SvRV(aref)) != SVt_PVAV ) {
+      Perl_croak(aTHX_ "ArrayRef expected");
+    }
+    av = (AV*)(SvRV(aref));
+    /* throw away cur_file */
+    av_shift(av);
+    while (av_len(av) != -1) {
+      op = av_shift(av);
+      id = av_shift(av);
+      hook_op_check_remove( SvUV(op), SvUV(id) );
+    }
   OUTPUT:
 
 void dump_stack()
diff --git a/lib/TryCatch.pm b/lib/TryCatch.pm
index ca33952..1a5e7a0 100644
--- a/lib/TryCatch.pm
+++ b/lib/TryCatch.pm
@@ -39,8 +39,6 @@ use Sub::Exporter -setup => {
     my $pack = $args->{into};
     my $ctx_class = $args->{parser} || 'TryCatch';
 
-    TryCatch::XS::install_try_op_check();
-
     foreach my $name (@$to_export) {
       if (my $parser = __PACKAGE__->can("_parse_${name}")) {
         Devel::Declare->setup_for(
@@ -102,7 +100,7 @@ sub _parse_try {
   #$ctx->debug_linestr("try");
   if (! $TryCatch::CHECK_OP_DEPTH) {
     $TryCatch::CHECK_OP_DEPTH++;
-    $TryCatch::CHECK_OP_HOOK = TryCatch::XS::install_return_op_check();
+    $TryCatch::CHECK_OP_HOOK = TryCatch::XS::install_op_checks();
   }
 
   $ctx->debug_linestr('post try');
@@ -153,7 +151,7 @@ sub inject_scope {
   if ($opts->{hook}) {
     if (! $TryCatch::CHECK_OP_DEPTH) {
       $TryCatch::CHECK_OP_DEPTH++;
-      $TryCatch::CHECK_OP_HOOK = TryCatch::XS::install_return_op_check();
+      $TryCatch::CHECK_OP_HOOK = TryCatch::XS::install_op_checks();
     }
   }
 
@@ -186,7 +184,7 @@ sub block_postlude {
   }
 
   if ($TryCatch::CHECK_OP_DEPTH && --$TryCatch::CHECK_OP_DEPTH == 0) {
-    TryCatch::XS::uninstall_return_op_check($TryCatch::CHECK_OP_HOOK);
+    TryCatch::XS::uninstall_op_checks($TryCatch::CHECK_OP_HOOK);
     $TryCatch::CHECK_OP_HOOK = '';
   }
 
-- 
1.7.2

