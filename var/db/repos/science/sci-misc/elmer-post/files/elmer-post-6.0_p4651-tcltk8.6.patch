 src/ElmerPost.c          | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/modules/matctcl.c    |  8 ++++++++
 src/modules/readfile.c   |  4 ++++
 src/modules/transforms.c | 40 ++++++++++++++++++++++++++++++++++++++++
 src/screensave.c         | 12 ++++++++++++
 5 files changed, 112 insertions(+)

diff --git a/src/ElmerPost.c b/src/ElmerPost.c
index 2a238b0..b9e8df5 100644
--- a/src/ElmerPost.c
+++ b/src/ElmerPost.c
@@ -183,7 +183,11 @@ static int SetParentObject( ClientData cl,Tcl_Interp *interp,int argc,char **arg
    obj = (object_t *)obj_find( &VisualObject,argv[1] );
    if ( !obj )
    {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
       sprintf( interp->result, "parent: no such object [%s]", argv[1] );
+#else
+      sprintf( Tcl_GetStringResult(interp), "parent: no such object [%s]", argv[1] );
+#endif
       return TCL_ERROR;
    }
 
@@ -346,13 +350,21 @@ static int ClipPlane( ClientData cl,Tcl_Interp *interp,int argc,char **argv)
     int i,id;
 
     if ( argc != 6 ) {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "clip: Wrong number of arguments.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "clip: Wrong number of arguments.\n" );
+#endif
         return TCL_ERROR;
     }
 
     sscanf( argv[1], "%d",  &id );
     if ( id < 0 || id > 5 ) {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "clip: Plane argument should be from a int from 0..5.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "clip: Plane argument should be from a int from 0..5.\n" );
+#endif
         return TCL_ERROR;
     }
     CurrentObject->ClipPlane[id] = id;
@@ -779,7 +791,11 @@ static int TimeStep(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 2 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "c_TimeStep: wrong number of parameters.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "c_TimeStep: wrong number of parameters.\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -790,7 +806,11 @@ static int TimeStep(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( n < 0  || n >= ElementModel->NofTimesteps )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "c_TimeStep: Invalid timestep.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "c_TimeStep: Invalid timestep.\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -1028,7 +1048,11 @@ static int CurrentCamera(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 2 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "camera: wrong number of arguments\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "camera: wrong number of arguments\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -1038,7 +1062,11 @@ static int CurrentCamera(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
         if ( strcmp( cam->Name, argv[1] ) == 0 )
         {
             cam_set_current( cam );
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
             sprintf( interp->result, "%d", i );
+#else
+            sprintf( Tcl_GetStringResult(interp), "%d", i );
+#endif
             return TCL_OK;
         }
     }
@@ -1548,7 +1576,11 @@ static int ShowString( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
 
     if ( argc < 5 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "string: Wrong number of arguments.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "string: Wrong number of arguments.\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -1587,7 +1619,11 @@ static int SetFont( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
   int i;
     if ( argc < 1 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "Set font: Wrong number of arguments.\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "Set font: Wrong number of arguments.\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -2146,7 +2182,11 @@ static int WindowSize( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
 
 
    if ( argc < 3 ) {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
       sprintf( interp->result, "Usage: winsize width height" );
+#else
+      sprintf( Tcl_GetStringResult(interp), "Usage: winsize width height" );
+#endif
       return TCL_ERROR;
    }
 
@@ -2184,7 +2224,11 @@ static int WindowSize( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
 static int WindowPosition( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
 {
    if ( argc < 3 ) {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
       sprintf( interp->result, "Usage: winpos xpos ypos" );
+#else
+      sprintf( Tcl_GetStringResult(interp), "Usage: winpos xpos ypos" );
+#endif
       return TCL_ERROR;
    }
 
@@ -2210,7 +2254,11 @@ static int MPlayer( ClientData cl, Tcl_Interp *interp, int argc, char **argv )
 #else
 
   if( argc < 2 ) {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
     sprintf( interp->result, "Usage: mplayer filename");
+#else
+    sprintf( Tcl_GetStringResult(interp), "Usage: mplayer filename");
+#endif
     return TCL_ERROR;
   }
 
diff --git a/src/modules/matctcl.c b/src/modules/matctcl.c
index 4d6b64f..b69f9ba 100755
--- a/src/modules/matctcl.c
+++ b/src/modules/matctcl.c
@@ -79,11 +79,19 @@ static VARIABLE *matc_tcl( VARIABLE *ptr )
 
    FREEMEM( command );
 
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
    if ( TCLInterp->result && (n=strlen(TCLInterp->result))>0 )
    {
        res = var_temp_new( TYPE_STRING,1,n );
        for( i=0; i<n; i++ ) M( res,0,i ) = TCLInterp->result[i];
    }
+#else
+   if ( Tcl_GetStringResult(TCLInterp) && (n=strlen(Tcl_GetStringResult(TCLInterp)))>0 )
+   {
+       res = var_temp_new( TYPE_STRING,1,n );
+       for( i=0; i<n; i++ ) M( res,0,i ) = Tcl_GetStringResult(TCLInterp)[i];
+   }
+#endif
 
    return res;
 }
diff --git a/src/modules/readfile.c b/src/modules/readfile.c
index 254601c..0bcc8f7 100755
--- a/src/modules/readfile.c
+++ b/src/modules/readfile.c
@@ -90,7 +90,11 @@ static int epReadFile( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
     fp = fopen( argv[1], "r" ); 
     if ( !fp )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
        sprintf( interp->result, "ReadModel: can't open file [%s]\n",argv[1] );
+#else
+       sprintf( Tcl_GetStringResult(interp), "ReadModel: can't open file [%s]\n",argv[1] );
+#endif
        return TCL_ERROR;
     }
 
diff --git a/src/modules/transforms.c b/src/modules/transforms.c
index 19808ff..4038210 100755
--- a/src/modules/transforms.c
+++ b/src/modules/transforms.c
@@ -72,7 +72,11 @@ static int TrnPriority(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 2 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cTrnPriority: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cTrnPriority: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -80,7 +84,11 @@ static int TrnPriority(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( n <= 0 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cTrnPriority: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cTrnPriority: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -96,7 +104,11 @@ static int RotPriority(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 2 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cRotPrioryty: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cRotPrioryty: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -104,7 +116,11 @@ static int RotPriority(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( n <= 0 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cRotPriority: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cRotPriority: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -130,7 +146,11 @@ static int Rotate(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 4 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cRotate: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cRotate: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -138,7 +158,11 @@ static int Rotate(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( n <= 0 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cRotate: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cRotate: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -156,7 +180,11 @@ static int Scale(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 4 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cScale: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cScale: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -164,7 +192,11 @@ static int Scale(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( n <= 0 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cScale: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cScale: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
@@ -182,13 +214,21 @@ static int Translate(ClientData cl,Tcl_Interp *interp,int argc,char **argv)
 
     if ( argc != 4 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cScale: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cScale: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
     if ( (n = sscanf( argv[3], "%lf %lf %lf", &x,&y,&z ) ) <= 0 )
     {
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
         sprintf( interp->result, "cScale: wrong number of parameters\n" );
+#else
+        sprintf( Tcl_GetStringResult(interp), "cScale: wrong number of parameters\n" );
+#endif
         return TCL_ERROR;
     }
 
diff --git a/src/screensave.c b/src/screensave.c
index ae4f577..703fe24 100755
--- a/src/screensave.c
+++ b/src/screensave.c
@@ -56,7 +56,11 @@ static int ScreenSave( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
       sprintf( interp->result, 
        "screensave: can't open [%s] for writing!\n", argv[1] );
 #else
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
       sprintf( interp->result, 
+#else
+      sprintf( Tcl_GetStringResult(interp), 
+#endif
         "screensave: can't open [%s] for writing:\n%s\n", 
               argv[1], strerror(errno) );
 #endif
@@ -76,7 +80,11 @@ static int ScreenSave( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
       sprintf( interp->result,
             "screensave: can't allocate enough memory!\n" );
 #else
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
       sprintf( interp->result,
+#else
+      sprintf( Tcl_GetStringResult(interp),
+#endif
         "screensave: can't allocate enough memory:\n%s\n",
             strerror(errno) );
 #endif
@@ -100,7 +108,11 @@ static int ScreenSave( ClientData cl,Tcl_Interp *interp,int argc,char **argv )
          sprintf( interp->result,
            "screensave: error writing to [%s]!\n", argv[1] );
 #else
+#if TCL_MAJOR_VERSION <=8 && TCL_MINOR_VERSION < 6
          sprintf( interp->result,
+#else
+         sprintf( Tcl_GetStringResult(interp),
+#endif
            "screensave: error writing to [%s]:\n%s\n",
                argv[1], strerror(errno) );
 #endif
