diff -r 696907efafb3 -r 931a8a007aa5 amide-current/ChangeLog
--- a/amide-current/ChangeLog	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/ChangeLog	Tue Apr 07 09:33:41 2015 +0200
@@ -1,3 +1,12 @@
+1.0.6
+	* fixed dicom sort function to allow slices in gated/dynamic studies
+	that have same location
+	* add dicom mimetype to desktop.in file [1]
+	* added ability to read in DICOM files via DCMTK utilizing jpeg compression [2]
+	  note - JPEG 2000 is not supported by dcmtk by default
+	[1] Contributed by Ville Skytta
+	[2] Suggested by Marc Rechte
+
 1.0.5 2014.01.25
 	* raw_data_import now shows correct file size if file > 2GB
 	* new math functions: remove-negatives, t2* calc
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/INSTALL
--- a/amide-current/INSTALL	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/INSTALL	Tue Apr 07 09:33:41 2015 +0200
@@ -12,8 +12,8 @@
 Basic Installation
 ==================
 
-   Briefly, the shell commands `./configure; make; make install' should
-configure, build, and install this package.  The following
+   Briefly, the shell command `./configure && make && make install'
+should configure, build, and install this package.  The following
 more-detailed instructions are generic; see the `README' file for
 instructions specific to this package.  Some packages provide this
 `INSTALL' file but do not implement all of the features documented
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/Makefile.in
--- a/amide-current/amide.spec	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/amide.spec	Tue Apr 07 09:33:41 2015 +0200
@@ -1,5 +1,5 @@
 Name: 		amide
-Version: 	1.0.5
+Version: 	1.0.6
 Release: 	2%{?dist}
 Summary: 	Program for viewing and analyzing medical image data sets
 License: 	GPLv2+
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/configure.ac
--- a/amide-current/configure.ac	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/configure.ac	Tue Apr 07 09:33:41 2015 +0200
@@ -2,7 +2,7 @@
 dnl              Configure script for AMIDE
 dnl ===============================================================================
 AC_PREREQ(2.59)
-AC_INIT([amide],[1.0.5],[amide-users@lists.sourceforge.net])
+AC_INIT([amide],[1.0.6],[amide-users@lists.sourceforge.net])
 
 AC_CONFIG_SRCDIR(src/amide.c)
 AC_CONFIG_HEADERS(amide_config.h)
@@ -13,7 +13,7 @@
 
 AC_PROG_CC
 AC_PROG_CXX
-AM_PROG_LIBTOOL
+AC_PROG_LIBTOOL
 
 AC_CHECK_HEADERS(unistd.h, AC_DEFINE(HAVE_UNISTD_H))
 AC_CHECK_SIZEOF(long,8)
@@ -100,13 +100,13 @@
 AC_CHECK_LIB(ecat, matrix_open, FOUND_LIBECAT=yes, FOUND_LIBECAT=no, -L/sw/lib)
 AC_CHECK_LIB(volpack, vpGetErrorString, FOUND_VOLPACK=yes, FOUND_VOLPACK=no, -lm -L/sw/lib -L/usr/local/lib)
 AM_PATH_XMEDCON(0.10.0, FOUND_XMEDCON=yes, FOUND_XMEDCON=no)
-
+AC_CHECK_HEADER([openjpeg-2.1/opj_config.h],[FOUND_OPENJP2=yes],[FOUND_OPENJP2=no])
 
 
 dnl switch to C++ for DCMTK library stuff - also, if pthread is on the platform, probably need that
 dnl autoconf doesn't have a nice macro for checking for c++ libraries, therefore the below:
 AC_CHECK_LIB(pthread, pthread_mutex_init, THREAD_LIBS="-lpthread", THREAD_LIBS="")
-AMIDE_LIBDCMDATA_LIBS="-L/usr/local/dicom/lib -L/usr/lib64/dcmtk -L/usr/lib/dcmtk -ldcmdata -loflog -lofstd -lz $THREAD_LIBS"
+AMIDE_LIBDCMDATA_LIBS="-L/usr/local/dicom/lib -L/usr/lib64/dcmtk -L/usr/lib/dcmtk -ltiff -lpng -ldcmimage -ldcmimgle -ldcmjpeg -lijg8 -lijg12 -lijg16 -ldcmdata -loflog -lofstd -lz $THREAD_LIBS"
 AMIDE_LIBDCMDATA_CFLAGS="-I/usr/local/dicom/include"
 saved_libs="${LIBS}"
 LIBS="${LIBS} ${AMIDE_LIBDCMDATA_LIBS}"
@@ -325,6 +325,22 @@
 	echo "compiling without DCMTK support for DICOM files"
 fi
 
+dnl Let people compile without jpeg2000 library
+AC_ARG_ENABLE(
+	libopenjp2, 
+	[ --enable-libopenjp2	Compile in jpeg2000 support [default=yes]], 
+	enable_libopenjp2="$enableval", 
+	enable_libopenjp2=yes)
+
+if (test $enable_libopenjp2 = yes) && (test $FOUND_OPENJP2 = yes); then
+	echo "compiling with JPEG 2000 support "
+	AMIDE_LIBOPENJP2_LIBS="-lopenjp2"
+	dnl AC_SUBST(AMIDE_LIBOPENJP2_LIBS)
+        PKG_CHECK_MODULES(AMIDE_LIBOPENJP2, [libopenjp2 >= 2.1.0])
+	AC_DEFINE(AMIDE_LIBOPENJP2_SUPPORT, 1, Define to compile with openjp2)
+else
+	echo "compiling without JPEG 2000 support"
+fi
 
 
 ###############################
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/etc/amide.desktop.in
--- a/amide-current/etc/amide.desktop.in	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/etc/amide.desktop.in	Tue Apr 07 09:33:41 2015 +0200
@@ -8,5 +8,5 @@
 Terminal=false
 Type=Application
 Categories=Graphics;Education;Science;MedicalSoftware;
+MimeType=application/dicom;
 
-
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/etc/amide.iss.in
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/Makefile.am
--- a/amide-current/src/Makefile.am	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/Makefile.am	Tue Apr 07 09:33:41 2015 +0200
@@ -49,6 +49,7 @@
 	$(XMEDCON_LIBS) \
 	$(FFMPEG_LIBS) \
 	$(AMIDE_LIBDCMDATA_LIBS) \
+	$(AMIDE_LIBOPENJP2_LIBS) \
 	$(AMIDE_LDADD_WIN32) 
 
 ## 2007.10.28, gcc 3.4.4 the below may no longer be an issue, as 
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/amide.c
--- a/amide-current/src/amide.c	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/amide.c	Tue Apr 07 09:33:41 2015 +0200
@@ -76,11 +76,14 @@
   GtkWidget * label;
 
   if (AMITK_PREFERENCES_WARNINGS_TO_CONSOLE(preferences)) {
-    if (log_level == G_LOG_LEVEL_MESSAGE) 
+    if (log_level & G_LOG_LEVEL_MESSAGE) 
       g_print("AMIDE MESSAGE: %s\n", message);
-    else /* G_LOG_LEVEL_WARNING */
+    else if (log_level & G_LOG_LEVEL_WARNING) /* G_LOG_LEVEL_WARNING */
       g_print("AMIDE WARNING: %s\n", message);
-
+    else if (log_level & G_LOG_LEVEL_INFO) /* G_LOG_LEVEL_WARNING */
+      g_print("AMIDE INFO: %s\n", message);
+    else if (log_level & G_LOG_LEVEL_DEBUG) /* G_LOG_LEVEL_WARNING */
+      g_print("AMIDE DEBUG: %s\n", message);
   } else {
 
     dialog = gtk_message_dialog_new(NULL, GTK_DIALOG_DESTROY_WITH_PARENT,
@@ -221,10 +224,10 @@
   preferences = amitk_preferences_new();
 
   /* specify my own error handler */
-  g_log_set_handler (NULL, G_LOG_LEVEL_WARNING, amide_log_handler, preferences);
+  //g_log_set_handler (NULL, G_LOG_LEVEL_WARNING, amide_log_handler, preferences);
 
   /* specify my message handler */
-  g_log_set_handler (NULL, G_LOG_LEVEL_MESSAGE, amide_log_handler, preferences);
+  g_log_set_handler (NULL, G_LOG_LEVEL_MESSAGE | G_LOG_LEVEL_WARNING | G_LOG_LEVEL_INFO | G_LOG_LEVEL_DEBUG, amide_log_handler, preferences);
 
   /* specify the default directory */
   ui_common_set_last_path_used(AMITK_PREFERENCES_DEFAULT_DIRECTORY(preferences));
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/dcmtk_interface.cc
--- a/amide-current/src/dcmtk_interface.cc	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/dcmtk_interface.cc	Tue Apr 07 09:33:41 2015 +0200
@@ -43,9 +43,20 @@
 #undef PACKAGE_STRING
 #undef PACKAGE_TARNAME
 #undef PACKAGE_VERSION
-#define HAVE_CONFIG_H /* the autoconf compiled version of DCMTK has a config header file */
+
+//#define HAVE_CONFIG_H /* the autoconf compiled version of DCMTK has a config header file */
 #include <dcmtk/dcmdata/dcddirif.h>     /* for class DicomDirInterface */
 #include <dcmtk/dcmdata/dctk.h>
+#include <dcmtk/dcmdata/dcrledrg.h>    /* for RLE decoders */
+#include "dcmtk/dcmjpeg/djdecode.h"    /* for dcmjpeg decoders */
+
+#ifdef AMIDE_LIBOPENJP2_SUPPORT
+#include <dcmtk/config/osconfig.h>   /* JPG2000 make sure OS specific configuration is included first */
+#include <dcmtk/dcmdata/dcpxitem.h>
+#include <openjpeg-2.1/opj_config.h>
+#include <openjpeg-2.1/openjpeg.h>
+static void * j2k_to_raw(DcmDataset *pdata, AmitkDataSet const *pds);
+#endif
 
 const gchar * dcmtk_version = OFFIS_DCMTK_VERSION;
 
@@ -87,7 +98,8 @@
 				      gchar **perror_buf) {
 
   DcmFileFormat dcm_format;
-  //  DcmMetaInfo * dcm_metainfo;
+  DcmMetaInfo * dcm_metainfo;
+  DcmXfer *dcm_syntax=NULL;
   DcmDataset * dcm_dataset;
   OFCondition result;
   Uint16 return_uint16=0;
@@ -101,7 +113,7 @@
   const char * scan_time=NULL;
   gchar * temp_str;
   gboolean valid;
-
+  gboolean valid_J2K=FALSE;
   AmitkPoint voxel_size = one_point;
   AmitkDataSet * ds=NULL;
   AmitkModality modality;
@@ -126,25 +138,44 @@
   struct tm time_structure;
 
   /* note - dcmtk always uses POSIX locale - look to setlocale stuff in libmdc_interface.c if this ever comes up*/
-
+  g_debug(__FILE__ ": Processing file %s", filename);
+  
   result = dcm_format.loadFile(filename);
   if (result.bad()) {
-    g_warning("could not read DICOM file %s, dcmtk returned %s",filename, result.text());
+    g_warning(_("could not read DICOM file %s, dcmtk returned %s"),filename, result.text());
     goto error;
   }
 
-  //  dcm_metainfo = dcm_format.getMetaInfo();
-  //  if (dcm_metainfo == NULL) {
-  //    g_warning("could not find metainfo in DICOM file %s\n", filename);
-  //  }
+  dcm_metainfo = dcm_format.getMetaInfo();
+  if (dcm_metainfo == NULL) {
+     g_warning(_("could not find metainfo in DICOM file %s\n"), filename);
+  }
 
   dcm_dataset = dcm_format.getDataset();
-  //  dcm_dataset = &(dcm_dir.getDataset());
   if (dcm_dataset == NULL) {
     g_warning(_("could not find dataset in DICOM file %s\n"), filename);
     goto error;
   }
 
+  if (dcm_metainfo == NULL) {
+    dcm_syntax = new DcmXfer(dcm_dataset->getOriginalXfer());
+  } else {
+    /* What TransSyntax is used to encode the image */
+    if (dcm_metainfo->findAndGetString(DCM_TransferSyntaxUID, return_str).good()) {
+      if (return_str != NULL) {
+        g_debug("TransferSyntaxUID %s", return_str);
+        dcm_syntax = new DcmXfer(return_str);
+      }
+    }
+  }
+
+  if (dcm_syntax == NULL) {
+    g_warning(_("could not determine TransferSyntax %s\n"), filename);
+    goto error;
+  } else {
+    g_debug("TransferSyntax is %s (%d)", dcm_syntax->getXferName(), dcm_syntax->getXfer());
+  }
+
   modality = AMITK_MODALITY_OTHER;
   if (dcm_dataset->findAndGetString(DCM_Modality, return_str).good()) {
     if (return_str != NULL) {
@@ -181,6 +212,32 @@
   }
 
 
+  /* register global decompression codecs */
+  DJDecoderRegistration::registerCodecs(EDC_photometricInterpretation,
+					EUC_default,
+					EPC_default,
+					OFFalse);
+  DcmRLEDecoderRegistration::registerCodecs();
+
+  /* uncompress the raw data in case this is a JPEG encoded file */
+  result = dcm_dataset->chooseRepresentation(EXS_LittleEndianExplicit, NULL);
+  if (result.bad()) {
+
+    /* check if this is JPEG2000, which is not currently freely supported by dcmtk */
+    return_str = dcm_syntax->getXferID();
+    if (return_str != NULL)
+      if ((strcmp(return_str, UID_JPEG2000LosslessOnlyTransferSyntax) == 0) ||
+              (strcmp(return_str, UID_JPEG2000TransferSyntax) == 0) ||
+              (strcmp(return_str, UID_JPEG2000Part2MulticomponentImageCompressionLosslessOnlyTransferSyntax) == 0) ||
+              (strcmp(return_str, UID_JPEG2000Part2MulticomponentImageCompressionTransferSyntax) == 0))
+        valid_J2K = TRUE;
+
+    if (!valid_J2K) {
+      g_warning(_("could not decompress data in DICOM file %s, dcmtk returned %s"), filename, result.text());
+      goto error;
+    }
+  }
+    
   /* get basic data */
   if (dcm_dataset->findAndGetUint16(DCM_Columns, return_uint16).bad()) {
     g_warning(_("could not find # of columns - Failed to load file %s\n"), filename);
@@ -216,7 +273,7 @@
 	g_warning("in correct NumberOf Frames (%d) - Failed to load file %s\n", dim.z, filename);
     }
   }
-
+  g_debug("Number of frames: %d (%d x %d px.)", dim.z, dim.x, dim.y);
   dim.t = 1; /* no support for multiple time frame of data in a single file */
 
   dim.g = 1; /* no support for multiple gates in a single file */
@@ -280,7 +337,8 @@
     goto error;
   }
 
-  /* malloc data set */
+  /* malloc data set, including raw_data->data=g_try_malloc(amitk_raw_data_num_voxels(rd) * amitk_format_sizes[(rd)->format]) 
+        amitk_raw_data_num_voxels(rd) = ((rd)->dim.x * (rd)->dim.y * (rd)->dim.z * (rd)->dim.g * (rd)->dim.t) */
   ds = amitk_data_set_new_with_data(preferences, modality, format, dim, AMITK_SCALING_TYPE_0D_WITH_INTERCEPT);
   if (ds == NULL) {
     g_warning(_("Couldn't allocate space for the data set structure to hold DCMTK data - Failed to load file %s"), filename);
@@ -297,9 +355,9 @@
     amitk_data_set_set_dicom_image_type(ds, return_str); /* function can handle NULL strings */
 
   /* get the voxel size */
-  if (dcm_dataset->findAndGetFloat64(DCM_PixelSpacing, return_float64,0).good()) {
+  if (dcm_dataset->findAndGetFloat64(DCM_PixelSpacing, return_float64, 0, OFTrue).good()) {
     voxel_size.y = return_float64;
-    if (dcm_dataset->findAndGetFloat64(DCM_PixelSpacing, return_float64,1).good())
+    if (dcm_dataset->findAndGetFloat64(DCM_PixelSpacing, return_float64,1, OFTrue).good())
       voxel_size.x = return_float64;
     else {
       voxel_size.x = voxel_size.y;
@@ -310,18 +368,19 @@
 
   /* try to figure out the correct z thickness */
   voxel_size.z = -1;
-  if (dcm_dataset->findAndGetFloat64(DCM_SpacingBetweenSlices, return_float64).good()) 
+  if (dcm_dataset->findAndGetFloat64(DCM_SpacingBetweenSlices, return_float64, 0, OFTrue).good()) 
     voxel_size.z = return_float64;
 
   if (voxel_size.z <= 0.0) {
-    if (dcm_dataset->findAndGetFloat64(DCM_SliceThickness, return_float64).good()) {
+    if (dcm_dataset->findAndGetFloat64(DCM_SliceThickness, return_float64, 0, OFTrue).good()) {
       voxel_size.z = return_float64;
     } else {
       amitk_append_str_with_newline(perror_buf, _("Could not find the slice thickness, setting to 1 mm for File %s"), filename);
       voxel_size.z = 1;
     }
   }
-
+  g_debug("Voxel size (mm): %f x %f x %f", voxel_size.x, voxel_size.y, voxel_size.z);
+  
   /* store this number, occasionally used in sorting */
   if (dcm_dataset->findAndGetSint32(DCM_InstanceNumber, return_sint32).good())
     ds->instance_number = return_sint32;
@@ -334,23 +393,25 @@
   new_axes[AMITK_AXIS_X] = base_axes[AMITK_AXIS_X];
   new_axes[AMITK_AXIS_Y] = base_axes[AMITK_AXIS_Y];
   new_axes[AMITK_AXIS_Z] = base_axes[AMITK_AXIS_Z];
-  if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 0).good()) {
+  if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 0, OFTrue).good()) {
     new_axes[AMITK_AXIS_X].x = return_float64;
-    if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 1).good()) {
+    if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 1, OFTrue).good()) {
       new_axes[AMITK_AXIS_X].y = return_float64;
-      if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 2).good()) {
+      if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 2, OFTrue).good()) {
 	new_axes[AMITK_AXIS_X].z = return_float64;
-	if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 3).good()) {
+	if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 3, OFTrue).good()) {
 	  new_axes[AMITK_AXIS_Y].x = return_float64;
-	  if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 4).good()) {
+	  if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 4, OFTrue).good()) {
 	    new_axes[AMITK_AXIS_Y].y = return_float64;
-	    if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 5).good()) {
+	    if (dcm_dataset->findAndGetFloat64(DCM_ImageOrientationPatient, return_float64, 5, OFTrue).good()) {
 	      new_axes[AMITK_AXIS_Y].z = return_float64;
 	    }
 	  }
 	}
       }
     }
+  } else {
+    g_warning(_("Couldn't find ImageOrientationPatient in file %s"), filename);    
   }
   new_axes[AMITK_AXIS_X].y *= -1.0;
   new_axes[AMITK_AXIS_X].z *= -1.0;
@@ -363,11 +424,11 @@
      in Patient space, not necessarily with respect to the Gantry. At least for GE scanners, 
      the offset is on corner of this voxel */
   found_value=FALSE;
-  if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 0).good()) {
+  if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 0, OFTrue).good()) {
     new_offset.x = return_float64;
-    if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 1).good()) {
+    if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 1, OFTrue).good()) {
       new_offset.y = return_float64;
-      if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 2).good()) {
+      if (dcm_dataset->findAndGetFloat64(DCM_ImagePositionPatient, return_float64, 2, OFTrue).good()) {
       	new_offset.z = return_float64;
 
 	/* not doing the half voxel correction... values seem more correct without, at least for GE.
@@ -389,16 +450,20 @@
     }
   }
   if (!found_value) { /* see if we can get it otherwise */
-    if (dcm_dataset->findAndGetFloat64(DCM_SliceLocation, return_float64).good()) {
+    if (dcm_dataset->findAndGetFloat64(DCM_SliceLocation, return_float64, 0, OFTrue).good()) {
       /* if no ImagePositionPatient, try using SliceLocation */
       new_offset.x = new_offset.y = 0.0;
       //this looks wrong 2007.11.21 - doing what's done in the DCM_ImagePositionPatient case
       // new_offset.z = -1.0*(return_float64+voxel_size.z*dim.z); /* DICOM specifies z axis in wrong direction */
       new_offset.z = -1.0*return_float64; /* DICOM specifies z axis in wrong direction */
       amitk_space_set_offset(AMITK_SPACE(ds), new_offset);
+      found_value=TRUE;
     }
   }
 
+  if (!found_value) {
+    g_warning(_("Couldn't find ImagePositionPatient nor SliceLocation in file %s"), filename);    
+  }
 
   amitk_data_set_set_voxel_size(ds, voxel_size);
   amitk_data_set_calc_far_corner(ds);
@@ -620,6 +685,7 @@
   	amitk_data_set_set_subject_orientation(ds, AMITK_SUBJECT_ORIENTATION_LEFT_DECUBITUS_HEADFIRST);
       else if (g_ascii_strcasecmp(return_str, "FFDL")==0)
   	amitk_data_set_set_subject_orientation(ds, AMITK_SUBJECT_ORIENTATION_LEFT_DECUBITUS_FEETFIRST);
+      g_debug("Patient position is %s", return_str);
     }
   }
 
@@ -628,53 +694,72 @@
 
   /* a "GetSint16Array" function is also provided, but for some reason I get an error
      when using it.  I'll just use GetUint16Array even for signed stuff */
-  switch(format) {
-  case AMITK_FORMAT_SBYTE:
-  case AMITK_FORMAT_UBYTE:
-    {
-      const Uint8 * temp_buffer;
-      result = dcm_dataset->findAndGetUint8Array(DCM_PixelData, temp_buffer);
-      buffer = (void *) temp_buffer;
-      break;
+  if (!valid_J2K) {
+    switch (format) {
+      case AMITK_FORMAT_SBYTE:
+      case AMITK_FORMAT_UBYTE:
+      {
+        const Uint8 * temp_buffer;
+        result = dcm_dataset->findAndGetUint8Array(DCM_PixelData, temp_buffer);
+        buffer = (void *) temp_buffer;
+        break;
+      }
+      case AMITK_FORMAT_SSHORT:
+      case AMITK_FORMAT_USHORT:
+      {
+        const Uint16 * temp_buffer;
+        result = dcm_dataset->findAndGetUint16Array(DCM_PixelData, temp_buffer);
+        buffer = (void *) temp_buffer;
+        break;
+      }
+      case AMITK_FORMAT_SINT:
+      case AMITK_FORMAT_UINT:
+      {
+        const Uint32 * temp_buffer;
+        result = dcm_dataset->findAndGetUint32Array(DCM_PixelData, temp_buffer);
+        //      result = dcm_dataset->findAndGetUint16Array(DCM_PixelData, temp_buffer);
+        buffer = (void *) temp_buffer;
+        break;
+      }
+      default:
+        g_warning("unsupported data format in %s at %d\n", __FILE__, __LINE__);
+        goto error;
+        break;
     }
-  case AMITK_FORMAT_SSHORT:
-  case AMITK_FORMAT_USHORT:
-    {
-      const Uint16 * temp_buffer;
-      result = dcm_dataset->findAndGetUint16Array(DCM_PixelData, temp_buffer);
-      buffer = (void *) temp_buffer;
-      break;
+
+    if (result.bad()) {
+      g_warning(_("error reading in pixel data - DCMTK error: %s - Failed to read file %s"), result.text(), filename);
+      goto error;
     }
-  case AMITK_FORMAT_SINT:
-  case AMITK_FORMAT_UINT:
-    {
-      const Uint32 * temp_buffer;
-      result = dcm_dataset->findAndGetUint32Array(DCM_PixelData, temp_buffer);
-      //      result = dcm_dataset->findAndGetUint16Array(DCM_PixelData, temp_buffer);
-      buffer = (void *) temp_buffer;
-      break;
+  } 
+  else {
+#ifdef AMIDE_LIBOPENJP2_SUPPORT    
+    buffer = j2k_to_raw(dcm_dataset, ds);
+    if (!buffer) {
+      g_warning(_("error while decompressing JPEG 2000 from DCMTK file %s"), filename);
+      goto error;
     }
-  default:
-    g_warning("unsupported data format in %s at %d\n", __FILE__, __LINE__);
+#else
+    g_warning(_("file %s is JPEG 2000 encoded and supporting libraries have not been compiled in."), filename);
     goto error;
-    break;
+#endif
   }
-
-  if (result.bad()) {
-    g_warning(_("error reading in pixel data -  DCMTK error: %s - Failed to read file %s"),result.text(), filename);
-    goto error;
+  
+  i = zero_voxel;
+
+  /* store the scaling factor... if there is one */
+  if (dcm_dataset->findAndGetFloat64(DCM_RescaleSlope, return_float64, 0, OFTrue).good()) {
+    *AMITK_RAW_DATA_DOUBLE_2D_SCALING_POINTER(ds->internal_scaling_factor, i) = return_float64;
+    g_debug("RescaleSlope: %f", return_float64);
   }
 
-  i = zero_voxel;
-
-  /* store the scaling factor... if there is one */
-  if (dcm_dataset->findAndGetFloat64(DCM_RescaleSlope, return_float64,0).good())
-    *AMITK_RAW_DATA_DOUBLE_2D_SCALING_POINTER(ds->internal_scaling_factor, i) = return_float64;
-
   /* same for the offset */
-  if (dcm_dataset->findAndGetFloat64(DCM_RescaleIntercept, return_float64).good()) 
+  if (dcm_dataset->findAndGetFloat64(DCM_RescaleIntercept, return_float64, 0, OFTrue).good()) {
     *AMITK_RAW_DATA_DOUBLE_2D_SCALING_POINTER(ds->internal_scaling_intercept, i) = return_float64;
-
+    g_debug("RescaleIntercept: %f", return_float64);
+  }
+
+  // MR: alternative FrameReferenceDateTime
   if (dcm_dataset->findAndGetFloat64(DCM_FrameReferenceTime, return_float64).good()) 
     amitk_data_set_set_scan_start(ds,return_float64/1000.0);
 
@@ -694,7 +779,10 @@
       /* note, we've already flipped the coordinate axis, so reading in the data straight is correct */
       ds_pointer = amitk_raw_data_get_pointer(AMITK_DATA_SET_RAW_DATA(ds), i);
       memcpy(ds_pointer, (guchar *) buffer, format_size*ds->raw_data->dim.x*ds->raw_data->dim.y*ds->raw_data->dim.z);
-
+      if (valid_J2K) { /* Free allocated buffer */
+        g_free((gpointer)buffer);
+        buffer=NULL;
+      }
     }
   }
 
@@ -715,6 +803,14 @@
 
 
  function_end:
+
+  /* deregister global decompression codecs */
+  DJDecoderRegistration::cleanup();
+ if (valid_J2K && buffer) { /* Free allocated buffer */
+   //g_free((gpointer)buffer);
+   //buffer=NULL;
+ }
+ 
   return ds;
 }
 
@@ -972,6 +1068,7 @@
     else /* (num_gates > 1) */
       x = div(dim.z, num_gates);
 
+
     if (x.rem == 0) {
       /* ideal case, things make sense */
       if (num_frames > 1) 
@@ -1316,11 +1413,11 @@
     slices_to_combine = g_list_sort(slices_to_combine, sort_slices_func_with_time);
   else if (num_gates > 1)
     slices_to_combine = g_list_sort(slices_to_combine, sort_slices_func_with_gate);
-  else
+  else {
     slices_to_combine = g_list_sort(slices_to_combine, sort_slices_func);
-
-  /* throw out any slices that are duplicated in terms of orientation */
-  slices_to_combine = separate_duplicate_slices(slices_to_combine, premaining_slices);
+    /* throw out any slices that are duplicated in terms of orientation */
+    slices_to_combine = separate_duplicate_slices(slices_to_combine, premaining_slices);
+  }
 
   /* load in the primary data set */
   ds = import_slices_as_dataset(slices_to_combine, num_frames, num_gates, num_slices, update_func, update_data, perror_buf);
@@ -2850,4 +2947,290 @@
   return successful;
 }
 
+#ifdef AMIDE_LIBOPENJP2_SUPPORT
+
+/* Read num_bytes from user_data (from stream) into buffer. Note that user_data may be of any type, 
+ * it is our responsibility to extract the data from it. In our case user_data has been set to comp_buffer
+ * and we expect this function to be called only once with num_bytes == comp_lenght... */
+static OPJ_SIZE_T opj_input_memory_stream_read(void * buffer, OPJ_SIZE_T num_bytes, void * user_data) {
+
+  memcpy(buffer, user_data, num_bytes);
+  return num_bytes;
+}
+
+
+/* decompress comp_buffer (comp_length bytes) into raw_buffer (raw_length) 
+ *   TODO J2K format assumed */
+static gboolean j2k_decompress(guint32 comp_length, const guint8 *comp_buffer, guint32 raw_length, guint8 *raw_buffer) {
+  gboolean return_val = FALSE;
+  /* openjpeg stuff */
+  opj_codec_t * codec=NULL;
+  opj_image_t * image=NULL;
+  opj_stream_t * stream=NULL;
+  opj_dparameters_t param; // Decoder parameters
+  OPJ_UINT32 tile_index; // J2K images may contain several tiles
+  OPJ_UINT32 tile_size;
+  OPJ_INT32 current_tile_x0, current_tile_y0, current_tile_x1, current_tile_y1; // tile coordinates
+  OPJ_UINT32 num_comps; // Number of components in tile (not used))
+  OPJ_BOOL go_on = OPJ_TRUE; // Indicates more tiles to process
+  guint8 *pdata;
+  guint32 tile;
+  
+  stream = opj_stream_create(comp_length, OPJ_TRUE); // Internal buffer can hold the whole stream in one read call
+  if (!stream) {
+    goto error;
+  }
+
+  opj_stream_set_user_data(stream, (void *)comp_buffer, NULL);
+  opj_stream_set_user_data_length(stream, (OPJ_UINT64)comp_length);
+  opj_stream_set_read_function(stream, opj_input_memory_stream_read);
+
+
+  /* Set the default decoding parameters*/
+  opj_set_default_decoder_parameters(&param);
+  /* do not use layer decoding limitations */
+  param.cp_layer = 0;
+  /* do not use resolutions reductions */
+  param.cp_reduce = 0;
+  /* to decode only a part of the image data */
+  /*opj_restrict_decoding(&l_param,0,0,1000,1000);*/
+
+  /* Get a decoder handle */
+  if ((codec = opj_create_decompress(OPJ_CODEC_J2K)) == NULL) {
+    goto error;
+  }
+
+  /* Setup the decoder decoding parameters using user parameters */
+  if (!opj_setup_decoder(codec, &param)) {
+    goto error;
+  }
+  /* Read the main header of the codestream and if necessary the JP2 boxes */
+  if (!opj_read_header(stream, codec, &image)) {
+    goto error;
+  }
+  g_debug("J2K image grid (x0, y0, x1, y1): (%d, %d, %d, %d), components: %d", image->x0, image->y0, image->x1, image->y1, image->numcomps);
+
+  /* We do not yet support color images */
+  if (image->numcomps > 1) {
+    g_warning(_("JPEG 2000 color images not supported"));
+    goto error;
+  }
+
+  /* decode the whole image area by default */
+  pdata = raw_buffer;
+  tile = 0;
+  while (go_on) {
+    if (!opj_read_tile_header(codec, stream,
+            &tile_index,
+            &tile_size,
+            &current_tile_x0,
+            &current_tile_y0,
+            &current_tile_x1,
+            &current_tile_y1,
+            &num_comps,
+            &go_on)) {
+      goto error;
+    }
+    if (go_on) {
+      tile++;
+      if (pdata + tile_size > raw_buffer + raw_length) {
+        g_debug("raw_buffer size exceeded when decoding tile %u", tile);
+        goto error;
+      }
+      if (!opj_decode_tile_data(codec, tile_index, (OPJ_BYTE *)pdata, tile_size, stream)) {
+        goto error;
+      }
+      pdata+= tile_size;
+      /** now should inspect image to know the reduction factor and then how to behave with data */
+    }
+  }
+  g_debug("J2K processed %u tiles", tile);
+  return_val = opj_end_decompress(codec, stream);
+
+  error:
+  /* Free memory */
+  if (image) opj_image_destroy(image);
+  if (codec) opj_destroy_codec(codec);
+  if (stream) opj_stream_destroy(stream);
+
+  return return_val;
+}
+
+/* Extract JPEG 2000 encoding PixelData from the DcmDataset and return the buffer containing
+ * decompressed image(s). Note that MultiFrame DICOM files nor multi-tile JPEG 2000 images
+ * have been tested because of lack of sample data. */
+static void * j2k_to_raw(DcmDataset *dcm_data, AmitkDataSet const *ds) {
+  /* Amitk stuff */
+  AmitkRawData *raw_data;
+  gint format_size;
+  amide_intpoint_t z;
+  guint32 data_size; // overall buffer size for X * Y * Z dimensions
+  guint32 image_size; // for one decompressed image
+  guint8 *data = NULL; // our buffer to hold the z * decompressed images
+  guint8 *pdata;
+  /* DCMTK stuff */
+  DcmElement *element;
+  DcmPixelData *pixel_data;
+  DcmPixelSequence *pixel_sequence; // = NULL;
+  E_TransferSyntax transfer_syntax; // = EXS_Unknown;
+  const DcmRepresentationParameter *representation_parameter; // = NULL;
+  DcmPixelItem *pixel_item; // = NULL;
+  Uint8 *pixel_buffer; // to hold one compressed frame fragment
+  Uint32 pixel_length;
+  Uint32 num_frames; // Number of frames within PixelData
+  Uint32 frame; // current frame
+  Uint32 *frame_offset; // Pointer to an array of frame offset
+  Uint32 offset; // current offset
+  gboolean frame_in_progress;
+  Uint8 *temp_buffer = NULL; // temporary buffer to process current frame
+  Uint32 temp_length = 0; // temporary buffer length, may increase if several fragments (= 0 to avoid -Wmaybe-uninitialized)
+  Uint8 *temp_buffer_tmp;
+  Uint32 old_temp_length;
+  
+  OFCondition result;
+
+  raw_data = ds->raw_data;
+  format_size = amitk_format_sizes[AMITK_RAW_DATA_FORMAT(raw_data)];
+  z = AMITK_DATA_SET_DIM_Z(ds);
+  image_size = format_size * AMITK_RAW_DATA_DIM_X(raw_data) * AMITK_RAW_DATA_DIM_Y(raw_data);
+  data_size = image_size * AMITK_RAW_DATA_DIM_Z(raw_data);
+  data = (guint8 *)g_try_malloc(data_size);
+  if (data == NULL) {
+    g_debug("malloc failed %d", __LINE__);
+    goto error;
+  }
+  
+  result = dcm_data->findAndGetElement(DCM_PixelData, element);
+  if (result.bad()) {
+    goto error;
+  }
+
+  pixel_data = OFstatic_cast(DcmPixelData*, element);
+  
+  // Find the key that is needed to access the right representation of the data within DCMTK
+  pixel_data->getOriginalRepresentationKey(transfer_syntax, representation_parameter);
+
+  // Access original data representation and get result within pixel sequence
+  result = pixel_data->getEncapsulatedRepresentation(transfer_syntax, representation_parameter, pixel_sequence);
+  if (result != EC_Normal) {
+    goto error;
+  }
+
+  // First item is offset table
+  result = pixel_sequence->getItem(pixel_item, 0); 
+  if (result.bad()) {
+    goto error;
+  }
+  pixel_length = pixel_item->getLength();
+  if (pixel_length == 0) { // MonoFrame
+    num_frames = 1;
+  } else {
+    num_frames = pixel_length / 4;
+  }
+  if (num_frames != (Uint32)z) {
+    g_debug("Number of frames expected (%d) do not tally found (%d)", z, num_frames);
+    goto error;
+  }
+  // Get the array of frame offset
+  result = pixel_item->getUint32Array(frame_offset);
+  if (result.bad()) {
+    // Surpisingly this would return bad even if there is an offset table for a single fragment
+    frame_offset = NULL;
+  }
+  /* TODO pass transfer_syntax to j2k_decompress for proper handling (here assumed EXS_JPEG2000) */
+  pdata = data;
+  offset = 0;
+  frame = 0;
+  frame_in_progress = FALSE;
+  for (int frag = 1; ; frag++) {
+    result = pixel_sequence->getItem(pixel_item, frag);
+    if (result.bad()) { // indicates sequence end
+      break;
+    }
+    // Get the length of this pixel item (i.e. fragment)
+    pixel_length = pixel_item->getLength();
+    if (pixel_length == 0) {
+      g_debug("Expecting a not empty fragment");
+      goto error;
+    }
+    // get the compressed data fragment for this pixel item
+    result = pixel_item->getUint8Array(pixel_buffer);
+    if (result != EC_Normal) {
+      goto error;
+    }
+    if (frame_in_progress) {
+      // Has the offset exceeded the current frame ?
+      if (!frame_offset || (frame == num_frames -1) || (offset < frame_offset[frame+1])) {
+        // No or no frame_offset table or last frame
+        // realloc
+        old_temp_length = temp_length;
+        temp_length += pixel_length;
+        temp_buffer_tmp = (Uint8 *)g_try_realloc(temp_buffer, temp_length);
+        if (temp_buffer_tmp == NULL) {
+          g_debug("malloc failed %d", __LINE__);
+          goto error;
+        }
+        temp_buffer = temp_buffer_tmp;
+        // append pixel_buffer
+        memcpy(temp_buffer+old_temp_length, pixel_buffer, pixel_length);
+      } else {
+        // yes or no frame_offset table
+        if (!j2k_decompress(temp_length, temp_buffer, image_size, pdata)) {
+          goto error;
+        }
+        pdata+= image_size;
+        frame++;
+        g_free(temp_buffer);
+        // allocate a new temp buffer
+        temp_length = pixel_length;
+        temp_buffer = (Uint8 *)g_try_malloc(temp_length);
+        if (temp_buffer == NULL) {
+          g_debug("malloc failed %d", __LINE__);
+          goto error;
+        }
+        memcpy(temp_buffer, pixel_buffer, temp_length);
+      }
+    } else { // first frame
+      // malloc temp_buffer
+      temp_length = pixel_length;
+      temp_buffer = (Uint8 *)g_try_malloc(temp_length);
+      if (temp_buffer == NULL) {
+        g_debug("malloc failed %d", __LINE__);
+        goto error;
+      }
+      // copy pixel_buffer
+      memcpy(temp_buffer, pixel_buffer, temp_length);
+      frame_in_progress = TRUE;
+    }
+    // update offset
+    offset+= pixel_length + 8; // must account for Item tag + Item length
+    // sanity check frame < num_frames
+    if (frame >= num_frames) {
+      // We have a problem
+      g_debug("Too many frames: %d ! Expected %d", frame+1, num_frames);
+      goto error;
+    }
+  }
+  if (frame_in_progress) { // should be the case...
+    // decompress
+    if (!j2k_decompress(temp_length, temp_buffer, image_size, pdata)) {
+      goto error;
+    }
+    pdata+= image_size;
+    frame++;
+    g_free(temp_buffer);
+  } else {
+    g_debug("Expecting more fragments to come...");
+    goto error;
+  }
+
+  return data;
+
+error:
+  if (temp_buffer) g_free(temp_buffer);
+  if (data) g_free(data);
+  return NULL;
+}
+
+#endif /* AMIDE_LIBOPENJP2_SUPPORT */
 #endif /* AMIDE_LIBDCMDATA_SUPPORT */
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/tb_alignment.c
--- a/amide-current/src/tb_alignment.c	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/tb_alignment.c	Tue Apr 07 09:33:41 2015 +0200
@@ -631,7 +631,7 @@
 							   tb_alignment->fixed_ds, 
 							   tb_alignment->selected_marks,
 							   &performance_metric);
-      temp_string = g_strdup_printf(_("The alignment has been calculated, press Finish to apply, or Cancel to quit.\n\nThe calculated fiducial reference error is:\n\t %5.2f mm/point"), 
+      temp_string = g_strdup_printf(_("The alignment has been calculated, press Apply, or Cancel to quit.\n\nThe calculated fiducial reference error is:\n\t %5.2f mm/point"), 
 				    performance_metric);
       break;
 #endif
@@ -645,7 +645,7 @@
 								   &performance_metric,
       								   amitk_progress_dialog_update,
       								   tb_alignment->progress_dialog);
-      temp_string = g_strdup_printf(_("The alignment has been calculated, press Finish to apply, or Cancel to quit.\n\nThe calculated mutual information metric is:\n\t %5.2f"),
+      temp_string = g_strdup_printf(_("The alignment has been calculated, press Apply, or Cancel to quit.\n\nThe calculated mutual information metric is:\n\t %5.2f"),
 				    performance_metric);
       break;
     default:
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/tb_math.c
--- a/amide-current/src/tb_math.c	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/tb_math.c	Tue Apr 07 09:33:41 2015 +0200
@@ -382,7 +382,7 @@
     parameters_update_page(tb_math);
     break;
   case CONCLUSION_PAGE:
-    temp_string = g_strdup_printf(_("A new data set will be created with the math operation, press Finish to calculate this data set, or Cancel to quit."));
+    temp_string = g_strdup_printf(_("A new data set will be created with the math operation, press Apply to calculate this data set, or Cancel to quit."));
     gtk_label_set_text(GTK_LABEL(page), temp_string);
     g_free(temp_string);
     break;
diff -r 696907efafb3 -r 931a8a007aa5 amide-current/src/ui_time_dialog.c
--- a/amide-current/src/ui_time_dialog.c	Mon Mar 02 13:34:47 2015 -0800
+++ b/amide-current/src/ui_time_dialog.c	Tue Apr 07 09:33:41 2015 +0200
@@ -1,7 +1,7 @@
 /* ui_time_dialog.c
  *
  * Part of amide - Amide's a Medical Image Dataset Examiner
- * Copyright (C) 2000-2014 Andy Loening
+ * Copyright (C) 2000-2015 Andy Loening
  *
  * Author: Andy Loening <loening@alum.mit.edu>
  */
@@ -459,11 +459,12 @@
 
   temp_string = g_strdup_printf(_("%s: Time Dialog"),PACKAGE);
   dialog = gtk_dialog_new_with_buttons(temp_string,  parent,
-					    GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_NO_SEPARATOR,
-					    NULL);
+				       GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_NO_SEPARATOR,
+				       NULL);
   g_free(temp_string);
   gtk_window_set_resizable(GTK_WINDOW(dialog), TRUE);
 
+
   /* make (and save a pointer to) a structure to temporary hold the new time and duration */
   td = g_try_new(ui_time_dialog_t, 1);
   g_return_val_if_fail(td != NULL, NULL);
