<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header$ -->

<guide link="/proj/en/desktop/gnome/howtos/gnome-3.2-upgrade.xml" lang="en">
<title>GNOME 3.0 Upgrade Guide</title>

<author title="Author">
  <mail link="tetromino@gmail.com">Alexandre Rostovtsev</mail>
</author>

<abstract>
This is a guide for upgrading from GNOME 2.32.x to GNOME 3.2.x
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.1</version>
<date>2011-10-12</date>

<chapter>
<title>Changes</title>

<section>
<title>General changes</title>
<body>

<p>
Please see the <uri link="http://library.gnome.org/misc/release-notes/3.2/">GNOME
3.2 Release Notes</uri> (and <uri link="http://library.gnome.org/misc/release-notes/3.0/">3.0
Release Notes</uri>) for what is new in this major release of GNOME.
</p>

<p>
Briefly: GNOME 3.2 includes two desktop modes&mdash;standard and fallback.
Fallback mode uses <c>gnome-base/gnome-panel</c> and <c>x11-wm/metacity</c>, and
is similar in appearance and behavior to GNOME 2. Standard mode uses
<c>gnome-base/gnome-shell</c> and <c>x11-wm/mutter</c>, and looks and behaves
<e>completely</e> differently from previous GNOME releases. By default, the
choice of desktop mode is determined by the system's graphics hardware and
drivers (standard mode requires modern 3D graphics capabilities).
</p>

<p>There is a <uri link="https://live.gnome.org/GnomeShell/Tour">quick
tour</uri> of standard mode's GNOME Shell available on the GNOME website.
For an in-depth guide to using GNOME Shell, see
<uri link="https://live.gnome.org/GnomeShell/CheatSheet">the GNOME Shell
cheat sheet</uri>. GNOME Shell at first may feel alien and limited to an
experienced GNOME 2 user. We strongly encourage users to persist and make
themselves use it for a few days; those who take the time to get used to GNOME
Shell's behavior usually grow to love it and don't want to go back to an
old-fashioned GNOME 2-like desktop environment.
</p>
</body>
</section>

<section>
<title>Languages and encodings</title>
<body>

<p>
GNOME 3.2 obtains user language settings from <c>sys-apps/accountsservice</c>.
The language can be set in GNOME from the <e>My Account</e> entry in the upper
right corner menu. Alternatively, you can directly edit accountsservice user
files. For example, to have user <c>jrandom</c> use British English, you can 
(as root) edit <path>/var/lib/AccountsService/users/jrandom</path> so it reads
the following:
</p>
<pre>
[User]
Language=en_GB.utf8
</pre>

</body>
</section>

<section>
<title>Fonts</title>
<body>

<p>
GNOME 3.2 uses <c>media-fonts/cantarell</c> as its default font. Unfortunately,
Cantarell only includes a subset of the extended Latin alphabet. Users of
languages whose writing systems are not covered by Cantarell will probably want
to switch to another font, such as <c>media-fonts/dejavu</c>:
</p>

<pre caption="Set DejaVu (size 10) as the default font">
$ <i>gsettings set org.gnome.desktop.interface font-name 'DejaVu Sans 10'</i>
$ <i>gsettings set org.gnome.desktop.interface document-font-name 'DejaVu Sans 10'</i>
$ <i>gconftool-2 -s -t string /apps/metacity/general/titlebar_font 'DejaVu Sans Bold 10'</i>
</pre>

</body>
</section>

<section>
<title>Applets</title>
<body>
<p>
GNOME 2 applets cannot be used in GNOME 3.2. Fallback mode allows applets,
although some have not yet been ported to the new, gtk3-based APIs. In
standard mode, there are no applets at all. Some traditional applet
functionality can be replicated using third-party GNOME Shell extensions.
</p>
<p>
In order to manage fallback gnome-panel settings (either add/remove or rearrange
applet positions) one has to hold down the <c>Alt</c> key when clicking
on the panel. This opens relevant menu for changing either panel or applet
settings.
</p>
</body>
</section>

<section>
<title>Shut down and reboot</title>
<body>
<p>
GNOME Shell developers made a <uri
link="https://live.gnome.org/GnomeShell/Design/Whiteboards/SystemStopRestart">controversial
decision</uri> to not show any sort of shut down or power off menu by default.
The <em>Power Off</em> menu item becomes visible after clicking on the upper
right corner menu and holding down the <c>Alt</c> key.
</p>

<p>
If you need an easily discoverable GUI for shutting down the machine (for
example, if deploying GNOME 3.2 in a corporate environment where users are
required to turn off their computers at the end of the day), you can install the
alternative-status-menu extension. To do so, emerge <c>gnome-extra/gnome-shell-extensions</c>
and run</p>
<pre caption="Enabling the alternative-status-menu extension"> 
# <i>eselect gnome-shell-extensions enable 'alternative-status-menu@gnome-shell-extensions.gnome.org'</i>
</pre>

</body>
</section>

<section>
<title>Suspend on laptop lid close</title>
<body>

<p>
GNOME 3 will, by default, suspend a laptop when the lid is closed. If you
do not like this behavior, you can change it via the <c>gnome-tweak-tool</c>
GUI, or using <c>gsettings</c> from the terminal:
</p>

<pre caption="Only turn off the screen when laptop lid is closed on AC power"> 
$ <i>gsettings set org.gnome.settings-daemon.plugins.power lid-close-ac-action blank</i>
</pre>

</body>
</section>

<section>
<title>Icons on the desktop</title>
<body>

<p>
In GNOME 3.2, Nautilus by default no longer manages the desktop, and the
<path>~/Desktop</path> folder is simply treated as a normal folder with files.
</p>

<p>
If you want to have Nautilus manage the desktop like in GNOME 2, you can change
the corresponding setting in the <c>gnome-tweak-tool</c> GUI, or use the 
<c>gsettings</c> command from the terminal:
</p>
<pre caption="Making Nautilus manage the desktop"> 
$ <i>gsettings set org.gnome.desktop.background show-desktop-icons true</i>
</pre>

</body>
</section>

<section>
<title>Compiz</title>
<body>

<p>
GNOME 3.2 standard mode (i.e. GNOME Shell) is incompatible with Compiz.
</p>

</body>
</section>

<section>
<title>Touchpad and other input device customization</title>
<body>

<p>
In GNOME 3, if you have "disable touchpad while typing" selected, the touchpad
will be disabled for 2 seconds after a keyboard key is pressed. In GNOME 2,
this interval was 500 milliseconds. If you like to disable the touchpad
while typing, but prefer the shorter timeout interval like in GNOME 2, you can
emerge <c>gnome-base/gnome-settings-daemon</c> with the
<c>short-touchpad-timeout</c> USE flag enabled.
</p>

<p>
GNOME 3 allows setting a custom command for advanced customization of input
device settings. For example, suppose that you want to configure your touchpad
to enable two-finger scrolling (both vertical and horizontal) <e>and</e> edge
scrolling (vertical only). You could do
</p>

<pre caption="Setting a new GNOME input device hotplug script"> 
$ <i>cp /usr/share/gnome-settings-daemon-3.0/input-device-example.sh ~/input-device.sh</i>
$ <i>chmod +x ~/input-device.sh</i>
$ <i>gsettings set org.gnome.settings-daemon.peripherals.input-devices hotplug-command ~/input-device.sh</i>
</pre>

<p>
and edit <path>input-device.sh</path> so it ends as follows:
</p>

<pre>
# If the device is a touchpad ...
if [[ -z "${device#*TouchPad*}" ]]; then
	# ... enable two-finger scrolling (vertical and horizontal) ...
	xinput set-prop "${device}" "Synaptics Two-Finger Scrolling" 1 1
	# ... and edge scrolling (vertical only, no horizontal, no coasting) ...
	xinput set-prop "${device}" "Synaptics Edge Scrolling" 1 0 0
fi
# All further processing will be disabled if $retval == 0
exit $retval
</pre>

<note>
If the custom hotplug command does not terminate with exit value 0,
<c>gnome-settings-daemon</c> will set its own settings on the input device,
likely clobbering the settings that the hotplug command had changed.
</note>

<p>
If, for whatever reason, you want to completely prevent GNOME 3 from
automatically modifying your mouse and touchpad settings (note that this will
<e>also</e> prevent custom input hotplug commands, such as
<path>input-device.sh</path> above, from modifying mice and touchpads!), you
can run the following:
</p>

<pre caption="Prevent GNOME from managing the mouse and touchpad">
$ <i>gsettings set org.gnome.settings-daemon.plugins.mouse active false</i>
</pre>

</body>
</section>

<section>
<title>General configurability and extensions</title>
<body>

<p>
GNOME 3.2 is designed to appear significantly less configurable than GNOME 2.
For example, by default there is no easily discoverable GUI for changing the
Gtk+ theme. Many configuration settings are hidden, but can still be changed
from gsettings (dconf), gconf, or using the <c>gnome-extra/gnome-tweak-tool</c>
GUI. Discussion of most of these hidden settings is outside the scope of this
guide.
</p>

<p>
GNOME Shell's behavior can be significantly altered using <uri
link="https://live.gnome.org/GnomeShell/Extensions">extensions</uri>. Gentoo
packages the extensions from the official GNOME repository as
<c>gnome-extra/gnome-shell-extensions</c>; there are also numerous third-party
developers publishing extensions on various websites.
</p>

<p>
Gentoo uses <c>eselect gnome-shell-extensions</c> to manage system defaults that
control whether extensions installed systemwide (i.e. in <path>/usr/share/gnome-shell/extensions</path>)
should be enabled. Newly-installed extensions start out disabled by default.
</p>

<p>
Defaults managed by <c>eselect gnome-shell-extensions</c> can be overridden on a
per-user basis using <c>gnome-tweak-tool</c>, or from the command line using
<c>gsettings</c>. For example, to load all extensions with the exception of
dock and gajim, a user can run
</p>
<pre caption="Enabling alterntive status menu and dock extensions (and disabling all others!)">
$ <i>gsettings set org.gnome.shell enabled-extensions \</i>
  <i>'["alternative-status-menu@gnome-shell-extensions.gnome.org", "dock@gnome-shell-extensions.gnome.org"]'</i>
</pre>

<note>
Instead of <c>enabled-extensions</c>, GNOME 3.0 used the <c>disabled-extensions</c>
gsettings key. In GNOME 3.2, this key no longer has any effect.
</note>

<impo>
Extension code quality is highly variable, and some extensions can render GNOME
completely unusable. Gentoo cannot offer support for problems caused by third-party
extensions.
</impo>

</body>
</section>

</chapter>

<chapter>
<title>Video card compatibility</title>

<section>
<title>AMD / ATI</title>

<body>
<p>
GNOME Shell shows <uri link="http://ati.cchtml.com/show_bug.cgi?id=99">graphical
corruption</uri> under current versions of <c>x11-drivers/ati-drivers</c>
(i.e. FGLRX binary drivers); driver versions 11.8 and below are known
to be affected. As a workaround, you can force GNOME to start in fallback
mode (see <e>Troubleshooting</e> section below), or alternatively, switch to
open-source drivers.
</p>

<p>
If using open-source AMD / ATI drivers, <c>media-libs/mesa</c> should be built with
<c>USE=gallium</c>, otherwise GNOME will only run in fallback mode.
</p>
</body>
</section>

<section>
<title>NVIDIA</title>

<body>
<p>
Under some versions of <c>x11-drivers/nvidia-drivers</c>, GNOME Shell system tray shows 
<uri link="https://bugs.gentoo.org/show_bug.cgi?id=380245">graphical corruption</uri>
(all icons are rendered identically). This problem is fixed in driver versions 280.13
and newer.
</p>

<p>
All versions of <c>x11-drivers/nvidia-drivers</c> are incompatible with GNOME's
color management support. This is GNOME's color management code relies on XRandR,
and NVIDIA's support for XRandR is currently incomplete.
There is no workaround at this time.
</p>

<p>
As reported in <uri link="https://bugs.gentoo.org/show_bug.cgi?id=375615">bug
#375615</uri>, for some people, certain versions of <c>x11-drivers/nvidia-drivers</c>
(275.28, 280.13, and 285.03 are known to be affected) cause some Gtk+ applications
to hang when terminating. One effect of this is to make GDM freeze after the
password has been entered; similarly, GNOME will freeze when logging out.
The affected versions of <c>nvidia-drivers</c> have been masked. To prevent
this problem, make sure to use an unmasked driver version, for example
275.09.07 or 285.05.09.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Troubleshooting</title>

<section>
<title>GDM shows an "Oh no! Something has gone wrong" screen</title>

<body>
<p>
This is may be caused by a GNOME Shell crash. Try rebuilding <c>gnome-base/gdm</c>
with the <c>gnome-shell</c> USE flag disabled.
</p>

</body>
</section>

<section>
<title>GDM freezes after the password has been entered</title>

<body>
<p>
This is caused by a bug in <c>x11-drivers/nvidia-drivers</c>.
See <e>Video card compatibility</e> section above.
</p>

</body>
</section>

<section>
<title>GNOME starts in fallback mode</title>
<body>

<p>
GNOME will start in fallback mode if it detects that the graphics hardware and
drivers are insufficiently capable. To see a more detailed explanation of why
GNOME does not start in standard mode, run
<path>/usr/libexec/gnome-session-check-accelerated-helper</path>:
</p>

<pre caption="Sample gnome-session-check-accelerated-helper output">
$ <i>/usr/libexec/gnome-session-check-accelerated-helper</i>
gnome-session-is-accelerated: No hardware 3D support.
</pre>

</body>
</section>

<section>
<title>GNOME starts in standard mode</title>
<body>

<p>
To force GNOME to start in fallback mode (e.g. due to poor performance or
personal taste), open System Settings (or <path>gnome-control-center</path>
from the terminal), go to <e>System Info &rarr; Graphics</e>, and turn on
<e>Forced Fallback Mode</e>. Alternatively, from a terminal:
</p>

<pre caption="Force GNOME to start in fallback mode">
$ <i>gsettings set org.gnome.desktop.session session-name gnome-fallback</i>
</pre>

</body>
</section>

<section>
<title>Epiphany and Adobe Flash</title>
<body>

<p>
Out of the box, Epiphany 3 cannot load <c>www-plugins/adobe-flash</c> because
the browser links to Gtk+-3 while the plugin links to Gtk+-2. On amd64, there
is a workaround: if you emerge <c>adobe-flash</c> with <c>USE=-64bit</c>, the
plugin will be called through <c>www-plugins/nspluginwrapper</c>, avoiding
incompatibility between Gtk+ versions. On x86, unfortunately there is no good
workaround at this time; we suggest using a gtk2-based browser (such as
<c>www-clients/firefox</c> or <c>www-clients/chromium</c>).
</p>

</body>
</section>

<section>
<title>Various GNOME 2.x and 3.0 packages fail to compile due to <c>G_CONST_RETURN</c></title>

<body>
<p>
Support for the <c>G_CONST_RETURN</c> macro was formally deprecated in
<c>dev-libs/glib</c> during the GNOME 3.1 development cycle.
However, some GNOME 2 and 3.0 packages use the deprecated macro and pass
<c>-DG_DISABLE_DEPRECATED</c> (or a similar define) to the compiler in
their configure scripts or makefiles. As a result, when building against
<c>&gt;=dev-libs/glib-2.29.8</c>, such packages will fail with error messages
similar to the following:
</p>
<pre caption="Typical error message when building a GNOME 3.0 package against glib-2.30">
In file included from /usr/include/pango-1.0/pango/pango-script.h:138,
                 from /usr/include/pango-1.0/pango/pango-gravity.h:98,
                 from /usr/include/pango-1.0/pango/pango-types.h:91,
                 from /usr/include/pango-1.0/pango/pango-font.h:26,
                 from /usr/include/pango-1.0/pango/pango-attributes.h:25,
                 from /usr/include/pango-1.0/pango/pango.h:25,
                 from /usr/include/gtk-3.0/gdk/gdktypes.h:37,
                 from /usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h:31,
                 from /usr/include/gtk-3.0/gdk/gdk.h:33,
                 from /usr/include/gtk-3.0/gdk/gdkx.h:30,
                 from eggdesktopfile.c:34:
/usr/include/pango-1.0/pango/pango-language.h:37: error: expected '=', ',',
';', 'asm' or '__attribute__' before 'char'
/usr/include/pango-1.0/pango/pango-language.h:41: error: expected '=', ',',
';', 'asm' or '__attribute__' before 'char'
</pre>

<p>
Any packages failing in this manner should be reported in Gentoo bugzilla
so that they can be fixed.
</p>
</body>
</section>

</chapter>
</guide>
