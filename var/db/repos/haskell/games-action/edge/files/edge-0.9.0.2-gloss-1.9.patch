diff --git a/Animation.hs b/Animation.hs
index 7b3b2d8..854e0a2 100644
--- a/Animation.hs
+++ b/Animation.hs
@@ -16,6 +16,8 @@ import Sound.ALUT ( DistanceModel(InverseDistanceClamped)
                   , rolloffFactor
                   , sourceGain
                   , SourceRelative(..)
+                  , ALfloat
+                  , Gain
                   )
 import ResourceTracker (RT, getSound)
 import Common (Time)
@@ -40,12 +42,15 @@ class Audible a where
   Source objects accumulating in whatever system stores them.
 -}
 
-audioReferenceDistance = 300.0 :: Float
+audioReferenceDistance = 300.0 :: ALfloat
 
-audioRolloffFactor = 3.0 :: Float
+audioRolloffFactor = 3.0 :: ALfloat
 
 audioDistanceModel = InverseDistanceClamped
 
+d2alf :: Double -> ALfloat
+d2alf = realToFrac
+
 handSndSrc
   :: a -- ^ the object
   -> (a -> Bool) -- ^ func which checks if sound queued to play
@@ -63,8 +68,8 @@ handSndSrc
 handSndSrc a f h i k e l m n q
   = do if f a then g a else return a
   where g b = do case h b of
-                   Just x -> do sourcePosition x $= (Vertex3 (double2Float u)
-                                                             (double2Float (-v)) 0)
+                   Just x -> do sourcePosition x $= (Vertex3 (d2alf u)
+                                                             (d2alf (-v)) 0)
                                 play [x]
                                 return (i b)
                    Nothing -> do j b >>= g
@@ -95,7 +100,7 @@ procOneTimeSnd
   -> WP -- ^ listener's center
   -> (a -> RT) -- ^ func that retrieves object's resource tracker
   -> String -- ^ name of sound file
-  -> Float -- ^ source gain
+  -> Gain -- ^ source gain
   -> (a -> WM) -- ^ func that retrieves object's wrap map
   -> (a -> Maybe Source -> a) -- ^ func that sets object's source
   -> IO a
@@ -104,7 +109,7 @@ procOneTimeSnd s f a h d e i j =
     then do c <- g s
             let (x, y) = vectorRelation (i c) a (center c)
             let b = fromJust $ f c
-            sourcePosition b $= Vertex3 (double2Float x) (double2Float (-y)) 0
+            sourcePosition b $= Vertex3 (d2alf x) (d2alf (-y)) 0
             play [b]
             return c
     else return s
diff --git a/Projectile/Pellet.hs b/Projectile/Pellet.hs
index 4051855..ae65d92 100644
--- a/Projectile/Pellet.hs
+++ b/Projectile/Pellet.hs
@@ -8,7 +8,7 @@ import Animation ( Animation(..) )
 import Updating
     ( Transient(..), SimpleTransient(..), InternallyUpdating(..) )
 import Graphics.Gloss.Data.Picture ( Picture(Circle, Color) )
-import Graphics.Gloss.Data.Color ( makeColor8 )
+import Graphics.Gloss.Rendering ( makeColor )
 import Data.WrapAround ( WP, WM, distance )
 import qualified Moving as M
     ( Moving(..), Locatable(..), Colliding(..), newLocation )
@@ -39,7 +39,7 @@ new a b c d =
 
 instance Animation Pellet where
 
-  image _ _ = Color (makeColor8 172 172 172 255) (Circle 1)
+  image _ _ = Color (makeColor 172 172 172 255) (Circle 1)
 
 instance M.Colliding Pellet where
 
diff --git a/Resources.hs b/Resources.hs
index 1e658be..4ddbf19 100644
--- a/Resources.hs
+++ b/Resources.hs
@@ -1,7 +1,7 @@
 module Resources where
 
 import Paths_edge ( getDataFileName )
-import Graphics.Gloss.Data.Picture ( loadBMP )
+import Graphics.Gloss.Rendering ( loadBMP )
 import Graphics.Gloss.Data.Color
     ( yellow,
       white,
diff --git a/Step.hs b/Step.hs
index 322a2b6..8b4150b 100644
--- a/Step.hs
+++ b/Step.hs
@@ -41,7 +41,7 @@ import System.IO ()
 import System.Exit ()
 import Resources ( initLevels )
 import Sound.ALUT
-    ( HasSetter(($=)), ObjectName(genObjectNames), play, buffer )
+    ( HasSetter(($=)), ObjectName, genObjectNames, play, buffer )
 import Common ( Time )
 import ResourceTracker ( getSound )
 
diff --git a/Unit/Smart/Master.hs b/Unit/Smart/Master.hs
index f467945..9043a98 100644
--- a/Unit/Smart/Master.hs
+++ b/Unit/Smart/Master.hs
@@ -7,7 +7,8 @@ import Animation
     ( Audible(..),
       Animation(..),
       audioReferenceDistance,
-      audioRolloffFactor )
+      audioRolloffFactor,
+      d2alf )
 import Graphics.Gloss.Data.Picture
     ( Picture(Blank, Color, Rotate, Scale, Text) )
 import Graphics.Gloss.Data.Color ( white )
@@ -36,7 +37,8 @@ import Sound.ALUT
       HasSetter(($=)),
       SourceRelative(Listener),
       Source,
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       stop,
       sourceRelative,
       sourcePosition,
@@ -91,8 +93,8 @@ instance Audible Master where
                                       (lcenter)
                                       (center self)
                        let s = fromJust $ shotSoundSource self
-                       sourcePosition s $= (Vertex3 (double2Float x)
-                                                    (double2Float (-y))
+                       sourcePosition s $= (Vertex3 (d2alf x)
+                                                    (d2alf (-y))
                                                     0)
                        play [s]
                        return self' { queueShotSound = False }
diff --git a/Unit/Smart/Ninja.hs b/Unit/Smart/Ninja.hs
index b63aa0b..395354f 100644
--- a/Unit/Smart/Ninja.hs
+++ b/Unit/Smart/Ninja.hs
@@ -7,7 +7,8 @@ import Animation
     ( Audible(..),
       Animation(..),
       audioReferenceDistance,
-      audioRolloffFactor )
+      audioRolloffFactor,
+      d2alf )
 import Graphics.Gloss.Data.Picture
     ( Picture(Color, Rotate, Scale, Text) )
 import Graphics.Gloss.Data.Color ( white )
@@ -36,7 +37,8 @@ import Sound.ALUT
       HasSetter(($=)),
       SourceRelative(Listener),
       Source,
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       stop,
       sourceRelative,
       sourcePosition,
@@ -89,8 +91,8 @@ instance Audible Ninja where
                                       (lcenter)
                                       (center self)
                        let s = fromJust $ shotSoundSource self
-                       sourcePosition s $= (Vertex3 (double2Float x)
-                                                    (double2Float (-y))
+                       sourcePosition s $= (Vertex3 (d2alf x)
+                                                    (d2alf (-y))
                                                     0)
                        play [s]
                        return self' { queueShotSound = False }
diff --git a/Unit/Smart/Saucer.hs b/Unit/Smart/Saucer.hs
index ba1ce91..f0a746e 100644
--- a/Unit/Smart/Saucer.hs
+++ b/Unit/Smart/Saucer.hs
@@ -7,7 +7,8 @@ import Animation
     ( Audible(..),
       Animation(..),
       audioReferenceDistance,
-      audioRolloffFactor )
+      audioRolloffFactor,
+      d2alf )
 import Graphics.Gloss.Data.Picture ( Picture(Color, Scale, Text) )
 import Graphics.Gloss.Data.Color ( white )
 import GHC.Float ( double2Float )
@@ -35,7 +36,8 @@ import Sound.ALUT
       HasSetter(($=)),
       SourceRelative(Listener),
       Source,
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       stop,
       sourceRelative,
       sourcePosition,
@@ -90,8 +92,8 @@ instance Audible Saucer where
                                       (lcenter)
                                       (center self)
                        let s = fromJust $ shotSoundSource self
-                       sourcePosition s $= (Vertex3 (double2Float x)
-                                                    (double2Float (-y))
+                       sourcePosition s $= (Vertex3 (d2alf x)
+                                                    (d2alf (-y))
                                                     0)
                        play [s]
                        return self' { queueShotSound = False }
diff --git a/Unit/Smart/Sniper.hs b/Unit/Smart/Sniper.hs
index a65e38a..9c5ac53 100644
--- a/Unit/Smart/Sniper.hs
+++ b/Unit/Smart/Sniper.hs
@@ -7,7 +7,8 @@ import Animation
     ( Audible(..),
       Animation(..),
       audioReferenceDistance,
-      audioRolloffFactor )
+      audioRolloffFactor,
+      d2alf )
 import Graphics.Gloss.Data.Picture
     ( Picture(Color, Rotate, Scale, Text) )
 import Graphics.Gloss.Data.Color ( white )
@@ -36,7 +37,8 @@ import Sound.ALUT
       HasSetter(($=)),
       SourceRelative(Listener),
       Source,
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       stop,
       sourceRelative,
       sourcePosition,
@@ -89,8 +91,8 @@ instance Audible Sniper where
                                       (lcenter)
                                       (center self)
                        let s = fromJust $ shotSoundSource self
-                       sourcePosition s $= (Vertex3 (double2Float x)
-                                                    (double2Float (-y))
+                       sourcePosition s $= (Vertex3 (d2alf x)
+                                                    (d2alf (-y))
                                                     0)
                        play [s]
                        return self' { queueShotSound = False }
diff --git a/Unit/Smart/Zeus.hs b/Unit/Smart/Zeus.hs
index 7c7b48c..7796243 100644
--- a/Unit/Smart/Zeus.hs
+++ b/Unit/Smart/Zeus.hs
@@ -7,7 +7,8 @@ import Animation
     ( Audible(..),
       Animation(..),
       audioReferenceDistance,
-      audioRolloffFactor )
+      audioRolloffFactor,
+      d2alf )
 import Graphics.Gloss.Data.Picture
     ( Picture(Color, Pictures, Rotate, Scale, Text) )
 import Graphics.Gloss.Data.Color ( white )
@@ -33,7 +34,8 @@ import Sound.ALUT
       HasSetter(($=)),
       SourceRelative(Listener),
       Source,
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       stop,
       sourceRelative,
       sourcePosition,
@@ -81,8 +83,8 @@ instance Audible Zeus where
                                       (lcenter)
                                       (center self)
                        let s = fromJust $ shotSoundSource self
-                       sourcePosition s $= (Vertex3 (double2Float x)
-                                                    (double2Float (-y))
+                       sourcePosition s $= (Vertex3 (d2alf x)
+                                                    (d2alf (-y))
                                                     0)
                        play [s]
                        return self' { queueShotSound = False }
diff --git a/edge.cabal b/edge.cabal
index 6ef642f..014007d 100644
--- a/edge.cabal
+++ b/edge.cabal
@@ -62,12 +62,13 @@ Executable edge
   
   Default-language:  Haskell2010
   -- Packages needed in order to build this package.
-  Build-depends:     gloss >= 1.7.4.1 && < 1.8
+  Build-depends:       gloss >= 1.9
+                     , gloss-rendering >= 1.9
                      , wraparound >= 0.0.2 && < 0.1
                      , base >= 4 && < 5
                      , containers >= 0.4.2.1 && < 0.6
-                     , ALUT >= 2.2 && < 2.3
-                     , random >= 1.0.1.1 && < 1.1
+                     , ALUT >= 2.3
+                     , random >= 1.0.1.1
                      , cmdtheline >= 0.2.1.1 && < 0.3
   -- Modules not exported by this package.
   Other-modules:     Lance
diff --git a/edge.hs b/edge.hs
index 357dbd1..05c83b1 100644
--- a/edge.hs
+++ b/edge.hs
@@ -29,7 +29,8 @@ import Sound.ALUT
       HasGetter(get),
       LoopingMode(Looping),
       ALError(ALError),
-      ObjectName(genObjectNames),
+      ObjectName,
+      genObjectNames,
       sourceGain,
       play,
       loopingMode,
