<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		Vanilla thread management in Haskell is low level and
		it does not approach the problems related to thread deaths.
		When it&#39;s used naively the following typical problems arise:
		
		* When a forked thread dies due to an uncaught exception,
		the exception does not get raised in the main thread,
		which is why the program continues to run as if nothing happened,
		i.e., with the presumption that the already dead thread is running normally.
		Naturally this may very well bring your program to a chaotic state.
		
		* Another issue is that one thread dying does not
		affect any of the threads forked from it.
		That&#39;s why your program may be accumulating ghost threads.
		
		* Ever dealt with your program ignoring the \&lt;Ctrl-C\&gt; strikes?
		
		This library solves all the issues above with a concept of a slave thread.
		A slave thread has the following properties:
		
		1. When it dies for whatever reason (exception or finishing normally)
		it kills all the slave threads that were forked from it.
		This protects you from ghost threads.
		
		2. It waits for all slaves to die and execute their finalizers
		before executing its own finalizer and getting released itself.
		This gives you hierarchical releasing of resources.
		
		3. When a slave thread dies with an uncaught exception
		it reraises it in the master thread.
		This protects you from silent exceptions
		and lets you be sure of getting informed
		if your program gets brought to an erroneous state.
	</longdescription>
</pkgmetadata>
