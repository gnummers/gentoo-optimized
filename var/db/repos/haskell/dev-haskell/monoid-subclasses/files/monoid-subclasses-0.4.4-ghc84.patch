--- a/Data/Monoid/Instances/ByteString/UTF8.hs
+++ b/Data/Monoid/Instances/ByteString/UTF8.hs
@@ -62,2 +62,3 @@ import qualified Data.Monoid.Factorial as Factorial (FactorialMonoid(..))
 import qualified Data.Monoid.Textual as Textual (TextualMonoid(..))
+import qualified Data.Semigroup as S
 
@@ -82,2 +83,6 @@ decode bs
 
+instance S.Semigroup ByteStringUTF8 where
+   ByteStringUTF8 a <> ByteStringUTF8 b = ByteStringUTF8 (a `mappend` b)
+   {-# INLINE (<>) #-}
+
 instance Monoid ByteStringUTF8 where
--- a/Data/Monoid/Instances/Concat.hs
+++ b/Data/Monoid/Instances/Concat.hs
@@ -10,2 +10,3 @@
 {-# LANGUAGE Haskell2010 #-}
+{-# LANGUAGE FlexibleContexts #-}
 
@@ -31,2 +32,3 @@ import Data.Sequence (Seq)
 import qualified Data.Sequence as Seq
+import qualified Data.Semigroup as S
 
@@ -89,2 +91,8 @@ instance Foldable.Foldable Concat where
 
+instance PositiveMonoid a => S.Semigroup (Concat a) where
+   (<>) x y
+      | null x = y
+      | null y = x
+      | otherwise = x :<> y
+
 instance PositiveMonoid a => Monoid (Concat a) where
--- a/Data/Monoid/Instances/Measured.hs
+++ b/Data/Monoid/Instances/Measured.hs
@@ -27,2 +27,3 @@ import qualified Data.Monoid.Factorial as Factorial
 import qualified Data.Monoid.Textual as Textual
+import qualified Data.Semigroup as S
 
@@ -44,2 +45,5 @@ instance Ord a => Ord (Measured a) where
 
+instance StableFactorialMonoid a => S.Semigroup (Measured a) where
+   (<>) (Measured m a) (Measured n b) = Measured (m + n) (mappend a b)
+
 instance StableFactorialMonoid a => Monoid (Measured a) where
--- a/Data/Monoid/Instances/Positioned.hs
+++ b/Data/Monoid/Instances/Positioned.hs
@@ -38,2 +38,3 @@ import qualified Data.Monoid.Factorial as Factorial
 import qualified Data.Monoid.Textual as Textual
+import qualified Data.Semigroup as S
 
@@ -101,2 +102,7 @@ instance Show m => Show (LinePositioned m) where
 
+instance StableFactorialMonoid m => S.Semigroup (OffsetPositioned m) where
+   (<>) (OffsetPositioned p1 c1) (OffsetPositioned p2 c2) =
+      OffsetPositioned (if p1 /= 0 || p2 == 0 then p1 else max 0 $ p2 - length c1) (mappend c1 c2)
+   {-# INLINE (<>) #-}
+
 instance StableFactorialMonoid m => Monoid (OffsetPositioned m) where
@@ -108,2 +114,15 @@ instance StableFactorialMonoid m => Monoid (OffsetPositioned m) where
 
+instance (StableFactorialMonoid m, TextualMonoid m) => S.Semigroup (LinePositioned m) where
+   (<>) (LinePositioned p1 l1 lp1 c1) (LinePositioned p2 l2 lp2 c2)
+     | p1 /= 0 || p2 == 0 = LinePositioned p1 l1 lp1 c
+     | otherwise = LinePositioned p2' l2' lp2' c
+     where c = mappend c1 c2
+           p2' = max 0 $ p2 - length c1
+           lp2' = min p2' lp2
+           l2' = if l2 == 0 then 0 else max 0 $ l2 - Textual.foldl_' countLines 0 c1
+           countLines :: Int -> Char -> Int
+           countLines n '\n' = succ n
+           countLines n _ = n
+   {-# INLINE (<>) #-}
+
 instance (StableFactorialMonoid m, TextualMonoid m) => Monoid (LinePositioned m) where
--- a/Data/Monoid/Instances/Stateful.hs
+++ b/Data/Monoid/Instances/Stateful.hs
@@ -32,2 +32,3 @@ import qualified Data.Monoid.Factorial as Factorial
 import qualified Data.Monoid.Textual as Textual
+import qualified Data.Semigroup as S
 
@@ -57,2 +58,6 @@ instance Monoid a => Applicative (Stateful a) where
 
+instance (Monoid a, Monoid b) => S.Semigroup (Stateful a b) where
+   (<>) (Stateful x) (Stateful y) = Stateful (x <> y)
+   {-# INLINE (<>) #-}
+
 instance (Monoid a, Monoid b) => Monoid (Stateful a b) where
--- a/Test/TestMonoidSubclasses.hs
+++ b/Test/TestMonoidSubclasses.hs
@@ -72,2 +72,3 @@ import Data.Monoid.Textual (TextualMonoid)
 import qualified Data.Monoid.Textual as Textual
+import qualified Data.Semigroup as S
 
@@ -760,3 +761,3 @@ textualFactors = map characterize . factors
 newtype TestString = TestString String deriving (Eq, Show, Arbitrary, CoArbitrary, 
-                                                 Monoid, LeftReductiveMonoid, LeftCancellativeMonoid, LeftGCDMonoid,
+                                                 S.Semigroup, Monoid, LeftReductiveMonoid, LeftCancellativeMonoid, LeftGCDMonoid,
                                                  MonoidNull, PositiveMonoid, StableFactorialMonoid, IsString)
