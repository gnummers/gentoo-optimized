From c4ee561f2dcec959bbd4bc269fb764ece6b7f259 Mon Sep 17 00:00:00 2001
From: Neil Mitchell <ndmitchell@gmail.com>
Date: Tue, 12 Dec 2017 10:27:37 +0000
Subject: [PATCH] Allow haskell-src-exts-1.20

---
 CHANGES.txt       | 1 +
 hoogle.cabal      | 2 +-
 src/Input/Item.hs | 2 +-
 3 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/Input/Item.hs b/src/Input/Item.hs
index 9f666c08..7f4c6a5e 100644
--- a/src/Input/Item.hs
+++ b/src/Input/Item.hs
@@ -178,7 +178,7 @@ hseToSig = tyForall
             TVar a b -> TVar a (b ++ [ty y])
         ty (TyVar _ x) = TVar (fromName x) []
         ty (TyCon _ x) = TCon (fromQName x) []
-        ty (TyInfix an a b c) = ty $ let ap = TyApp an in TyCon an b `ap` a `ap` c
+        ty (TyInfix an a (UnpromotedName _ b) c) = ty $ let ap = TyApp an in TyCon an b `ap` a `ap` c
         ty (TyKind _ x _) = ty x
         ty (TyBang _ _ _ x) = ty x
         ty (TyParen _ x) = ty x
-- 
2.17.0

From 4c0da6dd76b597461b821ca582d4f232f9c6eb80 Mon Sep 17 00:00:00 2001
From: Greg Hale <imalsogreg@gmail.com>
Date: Tue, 2 Jan 2018 11:48:34 -0500
Subject: [PATCH] allow haskell-src-exts 1.19

---
 hoogle.cabal      | 2 +-
 src/Input/Item.hs | 6 +++++-
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/Input/Item.hs b/src/Input/Item.hs
index 7f4c6a5e..541f8d2a 100644
--- a/src/Input/Item.hs
+++ b/src/Input/Item.hs
@@ -1,4 +1,4 @@
-{-# LANGUAGE GeneralizedNewtypeDeriving, DeriveDataTypeable, DeriveFunctor, ViewPatterns #-}
+{-# LANGUAGE CPP, GeneralizedNewtypeDeriving, DeriveDataTypeable, DeriveFunctor, ViewPatterns #-}
 {-# LANGUAGE RecordWildCards, OverloadedStrings, PatternGuards, ScopedTypeVariables #-}
 
 -- | Types used to generate the input.
@@ -178,7 +178,11 @@ hseToSig = tyForall
             TVar a b -> TVar a (b ++ [ty y])
         ty (TyVar _ x) = TVar (fromName x) []
         ty (TyCon _ x) = TCon (fromQName x) []
+#if !defined(MIN_VERSION_haskell_src_exts) || MIN_VERSION_haskell_src_exts(1,20,0)
         ty (TyInfix an a (UnpromotedName _ b) c) = ty $ let ap = TyApp an in TyCon an b `ap` a `ap` c
+#else
+        ty (TyInfix an a b c) = ty $ let ap = TyApp an in TyCon an b `ap` a `ap` c
+#endif
         ty (TyKind _ x _) = ty x
         ty (TyBang _ _ _ x) = ty x
         ty (TyParen _ x) = ty x
-- 
2.17.0

