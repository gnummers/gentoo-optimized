#! /bin/sh

# gentoo haskell script to build the hoogle databases.  The idea is:
# 1) USE=fetchdb emerge dev-haskell/hoogle
# 2) emerge dev-haskell/fquery
# 3) build packages with USE=doc hoogle hscolour 
# 4) run this script
# 5) hoogle search --database=/var/lib/hoogle/databases resourceForkIO

# sed this in the ebuild that installs this script for gentoo prefix
ROOT="/"

if [[ ! -x "${ROOT}usr/bin/fquery" ]]; then
    echo "ERROR: ${ROOT}usr/bin/fquery not found"
    echo "Please run:"
    echo "emerge -a app-portage/fquery"
    echo "then try again"
    exit
fi

if [ ! -d "${ROOT}var/lib/hoogle/databases" ]
then
    mkdir -p "${ROOT}var/lib/hoogle/databases"
fi

pushd "${ROOT}var/lib/hoogle/databases"

PDH_tempfile=$(mktemp --tmpdir="/tmp" PDH.XXXXXX)
PPT_tempfile=$(mktemp --tmpdir="/tmp" PPT.XXXXXX)
FPH_tempfile=$(mktemp --tmpdir="/tmp" FPH.XXXXXX)
FBH_tempfile=$(mktemp --tmpdir="/tmp" FBH.XXXXXX)
FRH_tempfile=$(mktemp --tmpdir="/tmp" FRH.XXXXXX)

# The filenames of the hoogle .hoo databases built by: hoogle data default ghc 
fquery -C ff dev-haskell/hoogle | egrep "${ROOT}usr/share/hoogle.*/ghc.*/databases/[-[:alnum:]/\.]*.hoo$" | sort >${PDH_tempfile}

# The full pathnames of the hoogle databases generated by the ebuilds
# It assumes there will only be one filename in the html directory with extension
# .haddock (which seems safer than looking for .txt).  Hoogle data can only
# be built if haddock docs are built, so the ghc-pkg-name.haddock will exist
# if the hoogle ghc-pkg-name.txt exists.  The ghc-pkg-name may have some
# upper case letters.
for i in $(fquery -C h hoogle | tail -n +2)
do
    fquery -C ff $i | egrep "${ROOT}usr/share/doc/.*/html/.*[.]haddock" | sed -e 's@\.haddock@.txt@'
done >${PPT_tempfile}

cat ${PPT_tempfile} | sed -e 's@^.*/@@' -e 's@\.txt@.hoo@' | sort >${FPH_tempfile}

hoogle_db_updates=

# undefined is method declared in Prelude, so this search for hoogle undefined
# should normally succeed and return 0.  The reason for this test is that
# when hoogle is upgraded, this search is likely to fail with an error like:
# % hoogle undefined
# hoogle: Wrong hoogle database version: found 4.2.11.0, expected 4.2.12.0
# % echo $?
# 1
# %
# If it fails then we remember the non-zero exit status in ${hu}, which we
# then check and rebuild the hoogle binary databases for all the installed
# haskell libraries (other than the databases provided by dev-haskell/hoogle).
hoogle undefined >/dev/null 2>&1
hu=$?

# It is normal for hoogle convert to print zillions of error messages"
for i in $(cat ${PPT_tempfile} | xargs)
do
    pt="${i##/*/}"
    ph="${pt%.txt}.hoo"
    pf="${pt%.txt}.hoogle-convert-failed"
    # If the .hoo file does not exist, as the package was newly installed,
    # or the timestamp of the package text hoogle .txt database is later than
    # the binary hoogle .hoo database, or hoogle undefined failed, then convert
    # the package text hoogle database the binary hoogle .hoo database.
    if [[ ( ! -f "${ph}" && ( ! -f "${pf}" || "${i}" -nt "${pf}")) || ( ! -f "${pf}" && "${i}" -nt "${ph}") || ( ${hu} -ne 0 ) ]]
    then
        rm -f "${pf}"
        echo "hoogle convert ${i} ${ph}"
        hoogle convert "${i}" "${ph}"
        if (( "$?" == 0 )); then
            hoogle_db_updates="t"
        else
            echo "WARNING: ${pt%.txt} skipped due to non-zero exit code from:"
            echo "hoogle convert ${i} ${ph}"
            echo "Doing: touch ${ROOT}var/lib/hoogle/databases/${pf} to skip future attempts at"
            echo "converting ${pt%.txt} until ${i}"
            echo "filestamp changes (say after re-emerging ${pt%.txt})"
            touch "${pf}"
        fi
    fi
done

# Obtain the list of hoogle binary databases, with default.hoo removed
ls --format=single-column *.hoo | sed -e '/^default.hoo/d' >${FBH_tempfile}

# Obtain the list of hoogle database removals (from removing packages)
comm -23 ${FBH_tempfile} ${FPH_tempfile} >${FRH_tempfile}

# If default.hoo does not exist, or there were hoogle database updates,
# or there were hoogle database removals
if [[ ! -f default.hoo || -n "${hoogle_db_updates}" || -s "${FRH_tempfile}" ]]; then
    # Remove .hoo files for any packages that have been uninstalled
    rm -f $(cat ${FRH_tempfile} | xargs)

    # Remove the existing combined hoogle binary database, since we are about
    # to rebuilt it
    rm -f default.hoo

    # Calculate the list of hoogle binary databases again, as we may
    # have just removed some if packages were uninstalled.
    ls --format=single-column *.hoo >${FBH_tempfile}

    # Build the combined hoogle binary database in
    # ${ROOT}var/lib/hoogle/databases/default.hoo
    echo "hoogle combine --outfile=default.hoo `cat ${PDH_tempfile} ${FBH_tempfile} | xargs`"
    hoogle combine --outfile=default.hoo `cat ${PDH_tempfile} ${FBH_tempfile} | xargs`
fi

# Cleanup temporary files
rm -f ${PDH_tempfile} ${PPT_tempfile} ${FPH_tempfile} ${FBH_tempfile} ${FRH_tempfile}

popd
