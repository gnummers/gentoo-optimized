diff --git a/EitherT.cabal b/EitherT.cabal
index 947f38b..ae1c468 100644
--- a/EitherT.cabal
+++ b/EitherT.cabal
@@ -10,6 +10,6 @@ Maintainer:          Eyal Lotem <eyal.lotem+hackage@gmail.com>
 Stability:           experimental
 Build-Type:          Simple
 HS-Source-Dirs:      src
-Build-Depends:       base >= 4 && < 5, transformers >= 0.2, transformers-base >= 0.4, monad-control >= 0.3
+Build-Depends:       base >= 4 && < 5, transformers >= 0.2, transformers-base >= 0.4, monad-control >= 1.0
 Exposed-modules:     Control.Monad.Trans.Either
 ghc-options:         -Wall
diff --git a/src/Control/Monad/Trans/Either.hs b/src/Control/Monad/Trans/Either.hs
index bdd004a..89c40b9 100644
--- a/src/Control/Monad/Trans/Either.hs
+++ b/src/Control/Monad/Trans/Either.hs
@@ -58,9 +58,9 @@ instance MonadBase b m => MonadBase b (EitherT l m) where
     liftBase = liftBaseDefault
 
 instance MonadTransControl (EitherT l) where
-    newtype StT (EitherT l) r = StEither {unStEither :: Either l r}
-    liftWith f = EitherT $ liftM return $ f $ liftM StEither . runEitherT
-    restoreT = EitherT . liftM unStEither
+    type StT (EitherT l) r = Either l r
+    liftWith f = EitherT $ liftM return $ f $ liftM id . runEitherT
+    restoreT = EitherT . liftM id
     {-# INLINE liftWith #-}
     {-# INLINE restoreT #-}
 {-
@@ -73,15 +73,15 @@ instance (MonadBaseControl b m) => MonadBaseControl b (Either l m) where
 -}
 
 --Copied from monad-control-0.3.1.1.
-#define BODY(T, ST, unST) {                              \
-    newtype StM (T m) a = ST {unST :: ComposeSt (T) m a}; \
-    liftBaseWith = defaultLiftBaseWith ST;               \
-    restoreM     = defaultRestoreM   unST;               \
+#define BODY(T) {                                        \
+    type StM (T m) a = ComposeSt (T) m a;                \
+    liftBaseWith = defaultLiftBaseWith;                  \
+    restoreM     = defaultRestoreM;                      \
     {-# INLINE liftBaseWith #-};                         \
     {-# INLINE restoreM #-}}
 
 --Copied from monad-control-0.3.1.1.
-#define TRANS(         T, ST, unST) \
-  instance (     MonadBaseControl b m) => MonadBaseControl b (T m) where BODY(T, ST, unST)
+#define TRANS(T) \
+  instance (     MonadBaseControl b m) => MonadBaseControl b (T m) where BODY(T)
 
-TRANS(EitherT l, StMEither, unStMEither)
+TRANS(EitherT l)
