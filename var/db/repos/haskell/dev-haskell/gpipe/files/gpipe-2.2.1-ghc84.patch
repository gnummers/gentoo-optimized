--- a/src/Graphics/GPipe/Internal/FragmentStream.hs
+++ b/src/Graphics/GPipe/Internal/FragmentStream.hs
@@ -26,2 +26,3 @@ import Control.Monad (when)
 import Data.Maybe (isJust)
+import qualified Data.Semigroup as S
 
@@ -35,3 +36,3 @@ data FragmentStreamData = FragmentStreamData RasterizationName ExprPos Primitive
 --   can operate a stream's values using the 'Functor' instance (this will result in a shader running on the GPU).
-newtype FragmentStream a = FragmentStream [(a, FragmentStreamData)] deriving Monoid
+newtype FragmentStream a = FragmentStream [(a, FragmentStreamData)] deriving (S.Semigroup, Monoid)
 
--- a/src/Graphics/GPipe/Internal/PrimitiveArray.hs
+++ b/src/Graphics/GPipe/Internal/PrimitiveArray.hs
@@ -9,2 +9,3 @@ import Data.IORef
 import Data.Word
+import qualified Data.Semigroup as S
 
@@ -141,2 +142,4 @@ newtype PrimitiveArray p a = PrimitiveArray {getPrimitiveArray :: [PrimitiveArra
 
+instance S.Semigroup (PrimitiveArray p a) where
+    (<>) (PrimitiveArray a) (PrimitiveArray b) = PrimitiveArray (a ++ b)
 instance Monoid (PrimitiveArray p a) where
--- a/src/Graphics/GPipe/Internal/PrimitiveStream.hs
+++ b/src/Graphics/GPipe/Internal/PrimitiveStream.hs
@@ -25,2 +25,3 @@ import Foreign.Ptr
 import qualified Data.IntMap as Map
+import qualified Data.Semigroup as S
 
@@ -48,3 +49,3 @@ data PrimitiveStreamData = PrimitiveStreamData DrawCallName USize
 --   draw calls.
-newtype PrimitiveStream t a = PrimitiveStream [(a, (Maybe PointSize, PrimitiveStreamData))] deriving Monoid
+newtype PrimitiveStream t a = PrimitiveStream [(a, (Maybe PointSize, PrimitiveStreamData))] deriving (S.Semigroup, Monoid)
 
