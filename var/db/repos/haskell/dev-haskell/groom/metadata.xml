<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		Automatically derived Show instances are an easy way
		to inspect data in your program.  However, for large
		data-structures, the resulting output lacks
		whitespace, making it unreadable.  Groom offers an
		replacement to `show' called `groom' which attempts
		to pretty-print the output of `show'.  For example:
		
		&gt; let x = parseExp "foobar 1 [1,2]"
		&gt; in do
		&gt;   putStrLn (show x)
		&gt;   putStrLn (groom x)
		
		results in:
		
		&gt; ParseOk (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1))) (List [Lit (Int 1),Lit (Int 2)]))
		&gt; ParseOk
		&gt;   (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1)))
		&gt;      (List [Lit (Int 1), Lit (Int 2)]))
		
		Groom works only on Show instances that output valid
		Haskell code; if Groom can't understand its input,
		it will not make any changes.
	</longdescription>
</pkgmetadata>
