<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		Read and write spreadsheets from and to files
		containing comma separated values (CSV) in a lazy way.
		See also the
		csv package &lt;http://hackage.haskell.org/package/csv&gt; and
		&lt;http://www.xoltar.org/languages/haskell.html&gt;,
		&lt;http://www.xoltar.org/languages/haskell/CSV.hs&gt;.
		Both do not parse lazy.
		Reading from other source than plain &#39;String&#39;s could be easily added.
		
		If you install this package by
		
		cabal install -fbuildExamples
		
		then an example program is compiled and installed, too.
		This program fills a template text using data from a CSV file.
		E.g. given a file @template.txt@ with content
		
		&gt; Name: FIRSTNAME SURNAME
		&gt; Born: BIRTH
		
		and @names.csv@ with content
		
		&gt; &quot;FIRSTNAME&quot;,&quot;SURNAME&quot;,BIRTH
		&gt; &quot;Georg&quot;,&quot;Cantor&quot;,1845
		&gt; &quot;Haskell&quot;,&quot;Curry&quot;,1900
		&gt; &quot;Ada&quot;,&quot;Lovelace&quot;,1815
		
		the call
		
		&gt; csvreplace template.txt &lt;names.csv
		
		produces the output
		
		&gt; Name: Georg Cantor
		&gt; Born: 1845
		&gt; Name: Haskell Curry
		&gt; Born: 1900
		&gt; Name: Ada Lovelace
		&gt; Born: 1815
		
		You may also generate one file per CSV row in the following manner:
		
		&gt; csvreplace --multifile=FIRSTNAME-SURNAME.txt template.txt &lt;names.csv
		
		For similar (non-Haskell) programs see @cut@, @csvfix@, @csvtool@.
	</longdescription>
</pkgmetadata>
