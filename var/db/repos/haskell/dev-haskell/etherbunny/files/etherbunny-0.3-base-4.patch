diff --git a/Network/Etherbunny/Ethernet.hs b/Network/Etherbunny/Ethernet.hs
index f632a73..a06fb5b 100644
--- a/Network/Etherbunny/Ethernet.hs
+++ b/Network/Etherbunny/Ethernet.hs
@@ -31,7 +31,7 @@ import Data.Word
 import qualified Data.ByteString as B
 import Data.Binary.Get
 import Numeric
-import Bits
+import Data.Bits
 
 -- |
 --   The MACAddr type gives a useful interface to MAC Addresses
@@ -63,7 +63,7 @@ instance Show EthType where
     showsPrec _ (EthType e) =
         showString $ tail $ showHex ((16 :: Int)^(4 :: Int)+ 0x0800) $ " " ++ etherTypeName e
 
-etherTypeName :: (Num a) => a -> [Char]
+etherTypeName :: (Eq a, Num a) => a -> [Char]
 etherTypeName e
     | e == 0x0800   = "IP"
     | otherwise     = "Unknown"
diff --git a/Network/Etherbunny/Ip.hs b/Network/Etherbunny/Ip.hs
index 29dd64d..b16f26c 100644
--- a/Network/Etherbunny/Ip.hs
+++ b/Network/Etherbunny/Ip.hs
@@ -27,7 +27,7 @@ import Network.Etherbunny.Tcp
 
 import Data.Word
 import Numeric
-import Bits
+import Data.Bits
 import Network.Socket (HostAddress)
 import Data.Binary.Get
 import qualified Data.ByteString as B
@@ -124,7 +124,7 @@ data IPPkt = IPPkt {
 -- |
 --  Show ip addresses in a nicer format
 --
-showsIP :: (Bits a) => a -> String -> String
+showsIP :: (Show a, Num a, Bits a) => a -> String -> String
 showsIP m =
     foldr (\i a -> shows (getWord m i) . showString "." . a) (shows (getWord m 0) ) $ [3,2,1]
     where
diff --git a/Network/Etherbunny/Packet.hs b/Network/Etherbunny/Packet.hs
index 2ed0270..9697d30 100644
--- a/Network/Etherbunny/Packet.hs
+++ b/Network/Etherbunny/Packet.hs
@@ -12,7 +12,7 @@
 --
 -----------------------------------------------------------------------------
 
-{-# OPTIONS_GHC -fglasgow-exts -funbox-strict-fields #-}
+{-# OPTIONS_GHC -funbox-strict-fields #-}
 
 module Network.Etherbunny.Packet (
     -- * Type Classes
@@ -25,9 +25,9 @@ module Network.Etherbunny.Packet (
 ) where
 
 import Data.Word
-import Bits
+import Data.Bits
 
-wordsToInt :: Bits a => Int -> [Word8] -> a
+wordsToInt :: (Num a, Bits a) => Int -> [Word8] -> a
 wordsToInt i l = 
     let z5 = reverse [0..i-1] 
         shifted = zipWith (\ b c -> (fromIntegral c) `shiftL`  (b * 8) ) z5 l
diff --git a/Network/Etherbunny/Tcp.hs b/Network/Etherbunny/Tcp.hs
index 4018312..ea0ff02 100644
--- a/Network/Etherbunny/Tcp.hs
+++ b/Network/Etherbunny/Tcp.hs
@@ -25,7 +25,7 @@ module Network.Etherbunny.Tcp (
 
 import Data.Word
 import Numeric
-import Bits
+import Data.Bits
 -- import Network (PortNumber)
 import Data.Binary.Get
 import qualified Data.ByteString as B
diff --git a/etherbunny.hs b/etherbunny.hs
index eccfe04..37d441c 100644
--- a/etherbunny.hs
+++ b/etherbunny.hs
@@ -24,12 +24,12 @@ import qualified Data.ByteString as B8
 import qualified Data.ByteString.Lazy as B8L
 import Data.Binary.Get
 import System.IO.Unsafe
-import Monad
+import Control.Monad
 import System.Console.GetOpt
 import Data.Maybe ( fromMaybe )
 import System.Environment(getArgs)
-import List
-import IO
+import Data.List
+import System.IO
 
 version :: String
 version = "0.2"
