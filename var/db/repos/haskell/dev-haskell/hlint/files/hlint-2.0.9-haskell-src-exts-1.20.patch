diff --git a/src/HSE/Util.hs b/src/HSE/Util.hs
index 4307d66..7dd4682 100644
--- a/src/HSE/Util.hs
+++ b/src/HSE/Util.hs
@@ -1,2 +1,3 @@
 {-# LANGUAGE FlexibleContexts, ViewPatterns #-}
+{-# LANGUAGE CPP #-}
 
@@ -82,3 +83,7 @@ fromTyBang x = x
 fromDeriving :: Deriving s -> [InstRule s]
+#if MIN_VERSION_haskell_src_exts(1,20,0)
+fromDeriving (Deriving _ Nothing x) = x
+#else
 fromDeriving (Deriving _ x) = x
+#endif
 
diff --git a/src/Hint/Extensions.hs b/src/Hint/Extensions.hs
index ee4265b..43fbb7e 100644
--- a/src/Hint/Extensions.hs
+++ b/src/Hint/Extensions.hs
@@ -1,2 +1,3 @@
 {-# LANGUAGE RecordWildCards #-}
+{-# LANGUAGE CPP #-}
 {-
@@ -111,2 +112,3 @@ import Data.Ratio
 import Data.Data
+import qualified Data.Maybe as M
 import Refact.Types
@@ -241,4 +243,9 @@ derives m = mconcat $ map decl (childrenBi m) ++ map idecl (childrenBi m)
         idecl :: InstDecl S -> Derives
+#if MIN_VERSION_haskell_src_exts(1,20,0)
+        idecl (InsData _ dn _ _ ds) = g dn (M.listToMaybe ds)
+        idecl (InsGData _ dn _ _ _ ds) = g dn (M.listToMaybe ds)
+#else
         idecl (InsData _ dn _ _ ds) = g dn ds
         idecl (InsGData _ dn _ _ _ ds) = g dn ds
+#endif
         idecl _ = mempty
@@ -246,2 +253,9 @@ derives m = mconcat $ map decl (childrenBi m) ++ map idecl (childrenBi m)
         decl :: Decl_ -> Derives
+#if MIN_VERSION_haskell_src_exts(1,20,0)
+        decl (DataDecl _ dn _ _ _ ds) = g dn (M.listToMaybe ds)
+        decl (GDataDecl _ dn _ _ _ _ ds) = g dn (M.listToMaybe ds)
+        decl (DataInsDecl _ dn _ _ ds) = g dn (M.listToMaybe ds)
+        decl (GDataInsDecl _ dn _ _ _ ds) = g dn (M.listToMaybe ds)
+        decl (DerivDecl _loc Nothing _overlap hd) = mempty{derivesStandalone=[ir hd]}
+#else
         decl (DataDecl _ dn _ _ _ ds) = g dn ds
@@ -251,2 +265,3 @@ derives m = mconcat $ map decl (childrenBi m) ++ map idecl (childrenBi m)
         decl (DerivDecl _ _ hd) = mempty{derivesStandalone=[ir hd]}
+#endif
         decl _ = mempty
