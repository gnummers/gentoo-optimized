From b4dbd1ad34d2423a1b12fe070119a3a8cb2d162a Mon Sep 17 00:00:00 2001
From: Oleg Grenrus <oleg.grenrus@iki.fi>
Date: Tue, 2 Jul 2019 03:53:48 +0300
Subject: [PATCH] Support network-3

---
 HaskellNet.cabal               | 14 ++++++++-
 src/Network/Compat.hs          | 53 ++++++++++++++++++++++++++++++++++
 src/Network/HaskellNet/IMAP.hs |  5 ++--
 src/Network/HaskellNet/POP3.hs |  5 ++--
 src/Network/HaskellNet/SMTP.hs |  5 ++--
 5 files changed, 75 insertions(+), 7 deletions(-)
 create mode 100644 src/Network/Compat.hs

diff --git a/src/Network/Compat.hs b/src/Network/Compat.hs
new file mode 100644
index 0000000..f6aab26
--- /dev/null
+++ b/src/Network/Compat.hs
@@ -0,0 +1,53 @@
+module Network.Compat where
+
+import Network.Socket
+import Network.BSD (getProtocolNumber)
+import System.IO (Handle, IOMode (..))
+
+import qualified Control.Exception as Exception
+
+connectTo :: String             -- Hostname
+          -> PortNumber         -- Port Identifier
+          -> IO Handle          -- Connected Socket
+connectTo host port = do
+    proto <- getProtocolNumber "tcp"
+    let hints = defaultHints { addrFlags = [AI_ADDRCONFIG]
+                             , addrProtocol = proto
+                             , addrSocketType = Stream }
+    addrs <- getAddrInfo (Just hints) (Just host) (Just serv)
+    firstSuccessful "connectTo" $ map tryToConnect addrs
+  where
+  serv = show port
+
+  tryToConnect addr =
+    Exception.bracketOnError
+        (socket (addrFamily addr) (addrSocketType addr) (addrProtocol addr))
+        close  -- only done if there's an error
+        (\sock -> do
+          connect sock (addrAddress addr)
+          socketToHandle sock ReadWriteMode
+        )
+
+-- Returns the first action from a list which does not throw an exception.
+-- If all the actions throw exceptions (and the list of actions is not empty),
+-- the last exception is thrown.
+-- The operations are run outside of the catchIO cleanup handler because
+-- catchIO masks asynchronous exceptions in the cleanup handler.
+-- In the case of complete failure, the last exception is actually thrown.
+firstSuccessful :: String -> [IO a] -> IO a
+firstSuccessful caller = go Nothing
+  where
+  -- Attempt the next operation, remember exception on failure
+  go _ (p:ps) =
+    do r <- tryIO p
+       case r of
+         Right x -> return x
+         Left  e -> go (Just e) ps
+
+  -- All operations failed, throw error if one exists
+  go Nothing  [] = ioError $ userError $ caller ++ ": firstSuccessful: empty list"
+  go (Just e) [] = Exception.throwIO e
+
+-- Version of try implemented in terms of the locally defined catchIO
+tryIO :: IO a -> IO (Either Exception.IOException a)
+tryIO m = Exception.catch (fmap Right m) (return . Left)
diff --git a/src/Network/HaskellNet/IMAP.hs b/src/Network/HaskellNet/IMAP.hs
index 68ce143..5f7bc06 100644
--- a/src/Network/HaskellNet/IMAP.hs
+++ b/src/Network/HaskellNet/IMAP.hs
@@ -23,7 +23,8 @@ module Network.HaskellNet.IMAP
     )
 where
 
-import Network
+import Network.Socket (PortNumber)
+import Network.Compat
 import Network.HaskellNet.BSStream
 import Network.HaskellNet.IMAP.Connection
 import Network.HaskellNet.IMAP.Types
@@ -116,7 +117,7 @@ data FlagsQuery = ReplaceFlags [Flag]
 
 connectIMAPPort :: String -> PortNumber -> IO IMAPConnection
 connectIMAPPort hostname port =
-    handleToStream <$> connectTo hostname (PortNumber port)
+    handleToStream <$> connectTo hostname port
     >>= connectStream
 
 connectIMAP :: String -> IO IMAPConnection
diff --git a/src/Network/HaskellNet/POP3.hs b/src/Network/HaskellNet/POP3.hs
index 8c5f86d..1619aaa 100644
--- a/src/Network/HaskellNet/POP3.hs
+++ b/src/Network/HaskellNet/POP3.hs
@@ -31,7 +31,8 @@ module Network.HaskellNet.POP3
     where
 
 import Network.HaskellNet.BSStream
-import Network
+import Network.Socket
+import Network.Compat
 import qualified Network.HaskellNet.Auth as A
 
 import Data.ByteString (ByteString)
@@ -74,7 +75,7 @@ stripEnd = BS.reverse . trimR
 -- number
 connectPop3Port :: String -> PortNumber -> IO POP3Connection
 connectPop3Port hostname port =
-    handleToStream <$> (connectTo hostname (PortNumber port))
+    handleToStream <$> (connectTo hostname port)
     >>= connectStream
 
 -- | connecting to the pop3 server specified by the hostname. 110 is
diff --git a/src/Network/HaskellNet/SMTP.hs b/src/Network/HaskellNet/SMTP.hs
index b2c9222..e7cd53f 100644
--- a/src/Network/HaskellNet/SMTP.hs
+++ b/src/Network/HaskellNet/SMTP.hs
@@ -74,7 +74,8 @@ import Network.HaskellNet.BSStream
 import Data.ByteString (ByteString)
 import qualified Data.ByteString.Char8 as BS
 import Network.BSD (getHostName)
-import Network
+import Network.Socket
+import Network.Compat
 
 import Control.Applicative ((<$>))
 import Control.Exception
@@ -140,7 +141,7 @@ connectSMTPPort :: String     -- ^ name of the server
                 -> PortNumber -- ^ port number
                 -> IO SMTPConnection
 connectSMTPPort hostname port =
-    (handleToStream <$> connectTo hostname (PortNumber port))
+    (handleToStream <$> connectTo hostname port)
     >>= connectStream
 
 -- | connecting SMTP server with the specified name and port 25.
