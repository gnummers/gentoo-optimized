--- a/Data/IntMap/CharMap2.hs
+++ b/Data/IntMap/CharMap2.hs
@@ -13,2 +13,3 @@ import qualified Data.IntSet as S(IntSet)
 import Data.Monoid(Monoid(..))
+import qualified Data.Semigroup as S
 
@@ -20,2 +21,5 @@ newtype CharMap a = CharMap {unCharMap :: M.IntMap a} deriving (Eq,Ord,Read,Show
 
+instance S.Semigroup (CharMap a) where
+  CharMap x <> CharMap y = CharMap (x `mappend` y)
+
 instance Monoid (CharMap a) where
--- a/Data/IntMap/EnumMap2.hs
+++ b/Data/IntMap/EnumMap2.hs
@@ -8,2 +8,3 @@ import Prelude
 import qualified Prelude as L (map)
+import qualified Data.Semigroup as S
 
@@ -12,2 +13,5 @@ newtype EnumMap k a = EnumMap {unEnumMap :: M.IntMap a}
 
+instance Ord k => S.Semigroup (EnumMap k a) where
+  EnumMap x <> EnumMap y = EnumMap (x `mappend` y)
+
 instance Ord k => Monoid (EnumMap k a) where
--- a/Data/IntSet/EnumSet2.hs
+++ b/Data/IntSet/EnumSet2.hs
@@ -5,2 +5,3 @@ import qualified Data.List as L (map)
 import Data.Monoid(Monoid(..))
+import qualified Data.Semigroup as S
 
@@ -9,2 +10,5 @@ newtype EnumSet e = EnumSet {unEnumSet :: S.IntSet}
 
+instance S.Semigroup (EnumSet e) where
+  EnumSet x <> EnumSet y = EnumSet (x `mappend` y)
+
 instance Monoid (EnumSet e) where
--- a/Text/Regex/TDFA/CorePattern.hs
+++ b/Text/Regex/TDFA/CorePattern.hs
@@ -47,2 +47,3 @@ import Text.Regex.TDFA.Pattern(Pattern(..),starTrans)
 -- import Debug.Trace
+import qualified Data.Semigroup as S
 
@@ -89,2 +90,5 @@ newtype SetTestInfo = SetTestInfo {getTests :: EnumMap WhichTest (EnumSet DoPa)}
 
+instance S.Semigroup SetTestInfo where
+  SetTestInfo x <> SetTestInfo y = SetTestInfo (x `mappend` y)
+
 instance Monoid SetTestInfo where
