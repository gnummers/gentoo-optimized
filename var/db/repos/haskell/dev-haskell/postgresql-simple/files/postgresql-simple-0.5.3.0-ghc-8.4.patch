diff -ru postgresql-simple-0.5.3.0.orig/postgresql-simple.cabal postgresql-simple-0.5.3.0/postgresql-simple.cabal
--- postgresql-simple-0.5.3.0.orig/postgresql-simple.cabal	2017-05-15 07:29:53.000000000 +0200
+++ postgresql-simple-0.5.3.0/postgresql-simple.cabal	2017-09-17 11:22:56.734593260 +0200
@@ -72,6 +72,7 @@
     transformers,
     uuid-types >= 1.0.0,
     scientific,
+    semigroups,
     vector
 
   if !impl(ghc >= 7.6)
Only in postgresql-simple-0.5.3.0: postgresql-simple.cabal.orig
diff -ru postgresql-simple-0.5.3.0.orig/src/Database/PostgreSQL/Simple/HStore/Implementation.hs postgresql-simple-0.5.3.0/src/Database/PostgreSQL/Simple/HStore/Implementation.hs
--- postgresql-simple-0.5.3.0.orig/src/Database/PostgreSQL/Simple/HStore/Implementation.hs	2017-05-15 07:29:53.000000000 +0200
+++ postgresql-simple-0.5.3.0/src/Database/PostgreSQL/Simple/HStore/Implementation.hs	2017-09-17 11:22:56.734593260 +0200
@@ -34,6 +34,7 @@
 import qualified Data.Text.Lazy          as TL
 import           Data.Typeable
 import           Data.Monoid(Monoid(..))
+import           Data.Semigroup
 import           Database.PostgreSQL.Simple.FromField
 import           Database.PostgreSQL.Simple.ToField
 
@@ -59,19 +60,24 @@
                        Empty -> BL.empty
                        Comma x -> BU.toLazyByteString x
 
-instance Monoid HStoreBuilder where
-    mempty = Empty
-    mappend Empty     x = x
-    mappend (Comma a) x
+instance Semigroup HStoreBuilder where
+    Empty   <> x = x
+    Comma a <> x
         = Comma (a `mappend` case x of
                                Empty   -> mempty
                                Comma b -> char8 ',' `mappend` b)
 
+instance Monoid HStoreBuilder where
+    mempty = Empty
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = (<>)
+#endif
+
 class ToHStoreText a where
   toHStoreText :: a -> HStoreText
 
 -- | Represents escape text, ready to be the key or value to a hstore value
-newtype HStoreText = HStoreText Builder deriving (Typeable, Monoid)
+newtype HStoreText = HStoreText Builder deriving (Typeable, Semigroup, Monoid)
 
 instance ToHStoreText HStoreText where
   toHStoreText = id
diff -ru postgresql-simple-0.5.3.0.orig/src/Database/PostgreSQL/Simple/Types.hs postgresql-simple-0.5.3.0/src/Database/PostgreSQL/Simple/Types.hs
--- postgresql-simple-0.5.3.0.orig/src/Database/PostgreSQL/Simple/Types.hs	2017-05-15 07:29:53.000000000 +0200
+++ postgresql-simple-0.5.3.0/src/Database/PostgreSQL/Simple/Types.hs	2017-09-17 11:22:56.734593260 +0200
@@ -1,4 +1,4 @@
-{-# LANGUAGE DeriveDataTypeable, DeriveFunctor, GeneralizedNewtypeDeriving #-}
+{-# LANGUAGE CPP, DeriveDataTypeable, DeriveFunctor, GeneralizedNewtypeDeriving #-}
 
 ------------------------------------------------------------------------------
 -- |
@@ -33,7 +33,9 @@
 import           Control.Arrow (first)
 import           Data.ByteString (ByteString)
 import           Data.Hashable (Hashable(hashWithSalt))
+import           Data.Foldable (toList)
 import           Data.Monoid (Monoid(..))
+import           Data.Semigroup
 import           Data.String (IsString(..))
 import           Data.Typeable (Typeable)
 import           Data.ByteString.Builder ( stringUtf8 )
@@ -87,11 +89,16 @@
 instance IsString Query where
     fromString = Query . toByteString . stringUtf8
 
+instance Semigroup Query where
+    Query a <> Query b = Query (B.append a b)
+    {-# INLINE (<>) #-}
+    sconcat xs = Query (B.concat $ map fromQuery $ toList xs)
+
 instance Monoid Query where
     mempty = Query B.empty
-    mappend (Query a) (Query b) = Query (B.append a b)
-    {-# INLINE mappend #-}
-    mconcat xs = Query (B.concat (map fromQuery xs))
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = (<>)
+#endif
 
 -- | A single-value \"collection\".
 --
Only in postgresql-simple-0.5.3.0/src/Database/PostgreSQL/Simple: Types.hs.orig
