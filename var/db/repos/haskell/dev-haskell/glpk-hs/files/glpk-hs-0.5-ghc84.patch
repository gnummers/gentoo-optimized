--- a/Data/LinearProgram/Types.hs
+++ b/Data/LinearProgram/Types.hs
@@ -7,2 +7,3 @@ import GHC.Generics
 import Data.Map
+import qualified Data.Semigroup as S
 
@@ -15,2 +16,5 @@ data VarKind = ContVar | IntVar | BinVar deriving (Eq, Ord, Enum, Show, Read, Ge
 
+instance S.Semigroup VarKind where
+        (<>) = max
+
 instance Monoid VarKind where
@@ -37,2 +41,33 @@ instance NFData c => NFData (Bounds c) where
 
+instance Ord a => S.Semigroup (Bounds a) where
+        Free <> bd = bd
+        bd <> Free = bd
+        Equ a <> Equ b
+                | a == b        = Equ a
+        Equ a <> UBound b
+                | a <= b        = Equ a
+        Equ a <> LBound b
+                | a >= b        = Equ a
+        Equ a <> Bound l u
+                | a >= l && a <= u
+                                = Equ a
+        Equ _ <> _ = infeasible
+        UBound b <> Equ a
+                | a <= b        = Equ a
+        LBound b <> Equ a
+                | a >= b        = Equ a
+        Bound l u <> Equ a
+                | a >= l && a <= u
+                                = Equ a
+        _ <> Equ _ = infeasible
+        LBound a <> LBound b = LBound (max a b)
+        LBound l <> UBound u = bound l u
+        UBound u <> LBound l = bound l u
+        LBound a <> Bound l u = bound (max a l) u
+        Bound l u <> LBound a = bound (max a l) u
+        UBound a <> UBound b = UBound (min a b)
+        UBound a <> Bound l u = bound l (min a u)
+        Bound l u <> UBound a = bound l (min a u)
+        Bound l u <> Bound l' u' = bound (max l l') (min u u')
+
 -- Bounds form a monoid under intersection.
