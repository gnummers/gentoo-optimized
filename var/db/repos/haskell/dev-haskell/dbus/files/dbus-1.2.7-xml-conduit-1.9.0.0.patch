Adapted from the patch for 1.2.1.
--- a/lib/DBus/Introspection/Parse.hs
+++ b/lib/DBus/Introspection/Parse.hs
@@ -24,7 +24,7 @@ data InterfaceChildren
 
 parseXML :: ObjectPath -> T.Text -> Maybe Object
 parseXML path xml =
-    runConduit $ yieldMany [xml] .| X.parseText' X.def .| X.force "parse error" (parseObject $ getRootName path)
+    runConduit $ yieldMany [xml] .| X.parseText X.def .| X.force "parse error" (parseObject $ getRootName path)
 
 getRootName :: ObjectPath -> X.AttrParser ObjectPath
 getRootName defaultPath = do
@@ -64,13 +64,13 @@ parseInterface = X.tag' "interface" getName parseContent
         pure $ interfaceName_ (T.unpack ifName)
     parseContent ifName = do
         elems <- X.many $ do
-            X.many_ $ X.ignoreTreeContent "annotation"
+            X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
             X.choose
                 [ parseMethod
                 , parseSignal
                 , parseProperty
                 ]
-        X.many_ $ X.ignoreTreeContent "annotation"
+        X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
         let base = Interface ifName [] [] []
             addElem e (Interface n ms ss ps) = case e of
                 MethodDefinition m -> Interface n (m:ms) ss ps
@@ -86,9 +86,9 @@ parseMethod = X.tag' "method" getName parseArgs
         parseMemberName (T.unpack ifName)
     parseArgs name = do
         args <- X.many $ do
-            X.many_ $ X.ignoreTreeContent "annotation"
+            X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
             X.tag' "arg" getArg pure
-        X.many_ $ X.ignoreTreeContent "annotation"
+        X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
         pure $ MethodDefinition $ Method name args
     getArg = do
         name <- fromMaybe "" <$> X.attr "name"
@@ -107,9 +107,9 @@ parseSignal = X.tag' "signal" getName parseArgs
         parseMemberName (T.unpack ifName)
     parseArgs name = do
         args <- X.many $ do
-            X.many_ $ X.ignoreTreeContent "annotation"
+            X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
             X.tag' "arg" getArg pure
-        X.many_ $ X.ignoreTreeContent "annotation"
+        X.many_ $ X.ignoreTreeContent "annotation" X.ignoreAttrs
         pure $ SignalDefinition $ Signal name args
     getArg = do
         name <- fromMaybe "" <$> X.attr "name"
