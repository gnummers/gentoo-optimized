diff --git a/WASH/CGI/AbstractSelector.hs b/WASH/CGI/AbstractSelector.hs
index 3493ccc..f2ff9ea 100644
--- a/WASH/CGI/AbstractSelector.hs
+++ b/WASH/CGI/AbstractSelector.hs
@@ -10,9 +10,9 @@ import WASH.CGI.HTMLWrapper
 import WASH.CGI.RawCGIInternal hiding (CGIEnv (..))
 import WASH.Utility.JavaScript
 
-import Char
-import List ((\\))
-import Maybe
+import Data.Char
+import Data.List ((\\))
+import Data.Maybe
 
 
 -- |abstract table (twodimensional)
diff --git a/WASH/CGI/BaseCombinators.hs b/WASH/CGI/BaseCombinators.hs
index a8f02b3..905a6f2 100644
--- a/WASH/CGI/BaseCombinators.hs
+++ b/WASH/CGI/BaseCombinators.hs
@@ -10,11 +10,11 @@ module WASH.CGI.BaseCombinators
 --}
 where
 
-import qualified List
-import Maybe
-import Monad
-import System
-import IO
+import qualified Data.List
+import Data.Maybe
+import Control.Monad
+import System.IO
+import System.Exit
 
 import WASH.Utility.Auxiliary
 import qualified WASH.Utility.Base64 as Base64
diff --git a/WASH/CGI/CGIConfig.hs b/WASH/CGI/CGIConfig.hs
index 3f0325d..77795c8 100644
--- a/WASH/CGI/CGIConfig.hs
+++ b/WASH/CGI/CGIConfig.hs
@@ -2,14 +2,15 @@
 module WASH.CGI.CGIConfig where
 
 import System.IO.Unsafe
-import System
+import System.Environment
+import WASH.Utility.Auxiliary
 
 tmpDir, varDir, imageDir, emailTmpDir, frameDir, persistentDir, persistent2Dir, registryDir, keyFile, pbmPath, catProgram, sendmailProgram :: String
 
 -- |global root for WASH data
 globalRoot :: String
 globalRoot =
-  unsafePerformIO (catch (getEnv "HOME") (\ ioe -> return ""))
+  unsafePerformIO (catchIO (getEnv "HOME") (\ ioe -> return ""))
 
 -- temporary storage
 tmpDir = globalRoot ++ "/tmp/"
diff --git a/WASH/CGI/CGIGraphics.hs b/WASH/CGI/CGIGraphics.hs
index b589a68..89c6e30 100644
--- a/WASH/CGI/CGIGraphics.hs
+++ b/WASH/CGI/CGIGraphics.hs
@@ -13,9 +13,10 @@ module WASH.CGI.CGIGraphics
   ,Pixel, CGIImage, ActionFun) 
   where
 
-import Maybe
-import Monad
-import System
+import Data.Maybe
+import Control.Monad
+import System.IO
+import System.Process
 
 import WASH.Utility.Hex
 import qualified WASH.CGI.RawCGIInternal as RawCGI
diff --git a/WASH/CGI/CGIHistory.hs b/WASH/CGI/CGIHistory.hs
index 3a5b7fb..5c7c9be 100644
--- a/WASH/CGI/CGIHistory.hs
+++ b/WASH/CGI/CGIHistory.hs
@@ -2,9 +2,9 @@ module WASH.CGI.CGIHistory where
 
 import System.IO.Unsafe (unsafePerformIO)
 
-import IO
-import Maybe
-import Monad
+import System.IO
+import Data.Maybe
+import Control.Monad
 import Control.Concurrent
 import Control.Concurrent.MVar
 import qualified Data.Map as Map
diff --git a/WASH/CGI/CGIInternals.hs b/WASH/CGI/CGIInternals.hs
index df3dc6a..034039e 100644
--- a/WASH/CGI/CGIInternals.hs
+++ b/WASH/CGI/CGIInternals.hs
@@ -12,11 +12,10 @@ where
 
 import Prelude hiding (head,div,span)
 import qualified Prelude
-import qualified List
-import Maybe
-import Monad
-import System
-import IO
+import qualified Data.List as List
+import Data.Maybe
+import Control.Monad
+import System.IO
 
 import WASH.Utility.Auxiliary
 import qualified WASH.Utility.Base64 as Base64
diff --git a/WASH/CGI/CGIMonad.hs b/WASH/CGI/CGIMonad.hs
index be69054..3c287e0 100644
--- a/WASH/CGI/CGIMonad.hs
+++ b/WASH/CGI/CGIMonad.hs
@@ -4,7 +4,7 @@
 module WASH.CGI.CGIMonad
 where
 
-import Maybe
+import Data.Maybe
 
 import Control.Monad.Fix
 
diff --git a/WASH/CGI/CGIOutput.hs b/WASH/CGI/CGIOutput.hs
index 9c77f99..ba60792 100644
--- a/WASH/CGI/CGIOutput.hs
+++ b/WASH/CGI/CGIOutput.hs
@@ -3,10 +3,10 @@
 -- program. 
 module WASH.CGI.CGIOutput where
 
-import IO
-import Maybe
-import Monad
-import System
+import System.IO
+import System.Exit
+import Data.Maybe
+import Control.Monad
 
 import WASH.Utility.Auxiliary
 import WASH.Utility.BulkIO (rawHandleCopy)
diff --git a/WASH/CGI/ContentType.hs b/WASH/CGI/ContentType.hs
index 6dc7c01..0ada4c9 100644
--- a/WASH/CGI/ContentType.hs
+++ b/WASH/CGI/ContentType.hs
@@ -1,8 +1,8 @@
 -- © 2001, 2002 Peter Thiemann
 module WASH.CGI.ContentType where
 
-import Char
-import List
+import Data.Char
+import Data.List
 
 -- |tries to derive a MIME content type from a file name
 guessContentType :: String -> String
diff --git a/WASH/CGI/Cookie.hs b/WASH/CGI/Cookie.hs
index 63bac4a..4d8e78c 100644
--- a/WASH/CGI/Cookie.hs
+++ b/WASH/CGI/Cookie.hs
@@ -3,11 +3,11 @@
 -- i.e., there is a different cookie for each name and type.
 module WASH.CGI.Cookie (T, check, create, createExpiring, init, initExpiring, get, set, current, delete) where
 
-import Locale
-import Maybe
+import System.Locale
+import Data.Maybe
 import Prelude hiding (init)
-import Random
-import Time
+import System.Random
+import System.Time
 
 import WASH.CGI.BaseCombinators
 import WASH.CGI.CGIMonad
diff --git a/WASH/CGI/CookieIO.hs b/WASH/CGI/CookieIO.hs
index f3ae692..508efa2 100644
--- a/WASH/CGI/CookieIO.hs
+++ b/WASH/CGI/CookieIO.hs
@@ -1,6 +1,6 @@
 module WASH.CGI.CookieIO (decodeCookie, encodeCookie, putCookies) where
 
-import IO
+import System.IO
 
 import WASH.CGI.CGIMonad
 import qualified WASH.CGI.Debug as Debug
diff --git a/WASH/CGI/Debug.hs b/WASH/CGI/Debug.hs
index 952c905..5d15dca 100644
--- a/WASH/CGI/Debug.hs
+++ b/WASH/CGI/Debug.hs
@@ -1,10 +1,9 @@
 module WASH.CGI.Debug where
 
-import Directory
-import IO
-import Monad
-import System
-import Time
+import System.Directory
+import System.IO
+import Control.Monad
+import System.Time
 
 import System.IO.Unsafe
 
diff --git a/WASH/CGI/Fields.hs b/WASH/CGI/Fields.hs
index 5d18556..f870e58 100644
--- a/WASH/CGI/Fields.hs
+++ b/WASH/CGI/Fields.hs
@@ -1,8 +1,8 @@
 -- © 2002 Peter Thiemann
 module WASH.CGI.Fields where
 
-import Char
-import List
+import Data.Char
+import Data.List
 import WASH.Utility.ISO8601
 import WASH.Utility.SimpleParser as SimpleParser
 import WASH.CGI.CGITypes
diff --git a/WASH/CGI/HTTP.hs b/WASH/CGI/HTTP.hs
index a1a1c74..2871f64 100644
--- a/WASH/CGI/HTTP.hs
+++ b/WASH/CGI/HTTP.hs
@@ -1,6 +1,6 @@
 module WASH.CGI.HTTP where
 
-import Char
+import Data.Char
 
 data Method =
     OPTIONS
diff --git a/WASH/CGI/PPM.hs b/WASH/CGI/PPM.hs
index 8319bb5..82e3b02 100644
--- a/WASH/CGI/PPM.hs
+++ b/WASH/CGI/PPM.hs
@@ -1,7 +1,7 @@
 -- © 2001 Peter Thiemann
 module WASH.CGI.PPM where
 
-import Char
+import Data.Char
 
 data Pixmap =
      Pixmap	{ width :: Int
diff --git a/WASH/CGI/Persistent2.hs b/WASH/CGI/Persistent2.hs
index 586d3b7..2a993a8 100644
--- a/WASH/CGI/Persistent2.hs
+++ b/WASH/CGI/Persistent2.hs
@@ -13,22 +13,23 @@ module WASH.CGI.Persistent2 (T, init, get, set, add, current) where
 
 import WASH.CGI.CGIConfig
 
-import System
+import System.IO
 import Prelude hiding (init)
 import qualified Prelude (init)
-import List hiding (init)
-import qualified List (init)
-import Maybe
-import IO
-import Directory
-import Monad
-import Random
+import Data.List hiding (init)
+import qualified Data.List as List (init)
+import Data.Maybe
+import System.IO
+import System.Directory
+import Control.Monad
+import System.Random
 
 import WASH.Utility.Auxiliary
 import WASH.CGI.CGI hiding (head, div, span, map)
 import WASH.CGI.BaseCombinators (unsafe_io)
 import WASH.CGI.Types
 import qualified WASH.Utility.Locking as L
+import WASH.Utility.Auxiliary
 
 import WASH.CGI.StateItem
 import WASH.CGI.MakeTypedName
@@ -79,7 +80,7 @@ trace s =
 init name val = do
   unsafe_io $
      assertDirectoryExists (List.init persistent2Dir) (return ())
-  io $ catch (
+  io $ catchIO (
      do traceInit
 	trace ("P2: init " ++  name ++ " " ++ show val)
 	trace ("P2: ty = " ++ show myTyspec)
diff --git a/WASH/CGI/RawCGIInternal.hs b/WASH/CGI/RawCGIInternal.hs
index 5a3cbb4..2e79dee 100644
--- a/WASH/CGI/RawCGIInternal.hs
+++ b/WASH/CGI/RawCGIInternal.hs
@@ -5,13 +5,13 @@ module WASH.CGI.RawCGIInternal
   where
 -- (CGIParameter, CGIParameters, start, assocParm, assoc)
 
-import Array
-import Char
-import IO
-import List
-import Maybe
-import Random
-import System
+import Data.Array
+import Data.Char
+import Data.List
+import Data.Maybe
+import System.Random
+import System.IO
+import System.Environment
 import WASH.Utility.Auxiliary
 import WASH.Utility.Unique
 import qualified WASH.Utility.URLCoding as URLCoding
@@ -319,7 +319,7 @@ fieldNames = map fieldName
 
 generateKey :: IO (Maybe (Integer, String, String))
 generateKey =
-  try (openFile keyFile ReadMode) >>= g
+  tryIO (openFile keyFile ReadMode) >>= g
   where
     g (Left ioerror) =
       return Nothing
diff --git a/WASH/CGI/RawCGITypes.hs b/WASH/CGI/RawCGITypes.hs
index 30a64fe..16b6850 100644
--- a/WASH/CGI/RawCGITypes.hs
+++ b/WASH/CGI/RawCGITypes.hs
@@ -3,7 +3,7 @@
 
 module WASH.CGI.RawCGITypes where
 
-import IO
+import System.IO
 
 import WASH.CGI.CGITypes
 import WASH.CGI.HTTP
diff --git a/WASH/CGI/StateItem.hs b/WASH/CGI/StateItem.hs
index fb75ec0..812ddc0 100644
--- a/WASH/CGI/StateItem.hs
+++ b/WASH/CGI/StateItem.hs
@@ -1,7 +1,7 @@
 -- © 2002 Peter Thiemann
 module WASH.CGI.StateItem where
 
-import Char
+import Data.Char
 
 -- 
 -- |type of handles to a PE of type @a@
diff --git a/WASH/CGI/Style.hs b/WASH/CGI/Style.hs
index 176180f..231fb32 100644
--- a/WASH/CGI/Style.hs
+++ b/WASH/CGI/Style.hs
@@ -2,7 +2,7 @@
 module WASH.CGI.Style (Style(..), using) where
 
 import WASH.HTML.HTMLMonad hiding (map, div, head, span)
-import List
+import Data.List
 
 infixl 5 :^:
 infix 9 :=:
diff --git a/WASH/CGI/Submit98.hs b/WASH/CGI/Submit98.hs
index b49d647..542005d 100644
--- a/WASH/CGI/Submit98.hs
+++ b/WASH/CGI/Submit98.hs
@@ -21,7 +21,7 @@ import WASH.CGI.EventHandlers
 import qualified WASH.CGI.HTMLWrapper as H
 import WASH.CGI.InputHandle
 
-import Monad
+import Control.Monad
 
 instance HasValue InputField where
   value inf = valueInputField inf
diff --git a/WASH/CGI/SubmitXX.hs b/WASH/CGI/SubmitXX.hs
index 72e16f1..4c5c5b8 100644
--- a/WASH/CGI/SubmitXX.hs
+++ b/WASH/CGI/SubmitXX.hs
@@ -7,7 +7,7 @@ import WASH.CGI.CGIInternals
 import WASH.CGI.CGIMonad
 import WASH.CGI.EventHandlers
 
-import Monad
+import Control.Monad
 
 class StripHandle hx x | hx -> x where
   validate :: hx -> Either [ValidationError] x
diff --git a/WASH/CGI/Transaction.hs b/WASH/CGI/Transaction.hs
index 5b274fe..bb58aac 100644
--- a/WASH/CGI/Transaction.hs
+++ b/WASH/CGI/Transaction.hs
@@ -30,11 +30,11 @@ import qualified WASH.Utility.Auxiliary as Aux
 import qualified WASH.Utility.Locking as L
 import qualified WASH.Utility.Unique as Unique
 
-import Directory
-import IO
-import qualified List
-import Maybe
-import Monad
+import System.Directory
+import System.IO
+import qualified Data.List as List
+import Data.Maybe
+import Control.Monad
 import Prelude hiding (init)
 
 transactionLock = Conf.transactionDir
@@ -59,7 +59,7 @@ init name val =
 	   -- must try to read the variable at this point 
 	   -- because it may only exist in the log
 	   let out = outparm cgistate
-	   ev <- try (readValue out typedName)
+	   ev <- Aux.tryIO (readValue out typedName)
 	   let newparm =
 	         case ev of
 		   Left _ ->
diff --git a/WASH/CGI/TransactionUtil.hs b/WASH/CGI/TransactionUtil.hs
index 27d624a..01fec63 100644
--- a/WASH/CGI/TransactionUtil.hs
+++ b/WASH/CGI/TransactionUtil.hs
@@ -8,10 +8,13 @@ module WASH.CGI.TransactionUtil
 import qualified WASH.CGI.BaseCombinators as B
 import qualified WASH.CGI.HTMLWrapper as H hiding (map,head)
 
+import qualified System.IO.Error as E
+
 import WASH.CGI.CGIMonad
 import WASH.CGI.LogEntry
+import WASH.Utility.Auxiliary
 
-import IO
+import System.IO
 
 import WASH.CGI.TCGI
 
@@ -98,7 +101,7 @@ with commitFromLog result onResult fun =
 		  , setCommit = setCommit stid
 		  }
 	run stid cgistate =
-	  do lr <- try (unwrapCGI (fun (control stid)) cgistate)
+	  do lr <- tryIO (unwrapCGI (fun (control stid)) cgistate)
 	     case lr of
 	       Right (v, cgistate') ->
 		 -- body of transaction finished successfully; now commit
@@ -118,7 +121,7 @@ with commitFromLog result onResult fun =
 		 
 	       Left err ->
 		 -- Caught an exception; might be due to an @anbandon@ operation
-		 case reads (ioeGetErrorString err) of
+		 case reads (E.ioeGetErrorString err) of
 		   (stid', rest) : _ | stid' == stid ->
 		     let result = read rest
 			 newvalue = PAR_RESULT rest
@@ -190,7 +193,7 @@ withCGI commitFromLog result onResult fun =
 		  , setCommit = setCommit stid
 		  }
 	run stid cgistate =
-	  do lr <- try (unwrapCGI (fun (control stid)) cgistate)
+	  do lr <- tryIO (unwrapCGI (fun (control stid)) cgistate)
 	     case lr of
 	       Right (v, cgistate') ->
 		 -- body of transaction finished successfully; now commit
@@ -210,7 +213,7 @@ withCGI commitFromLog result onResult fun =
 		 
 	       Left err ->
 		 -- Caught an exception; might be due to an @anbandon@ operation
-		 case reads (ioeGetErrorString err) of
+		 case reads (E.ioeGetErrorString err) of
 		   (stid', rest) : _ | stid' == stid ->
 		     let result = read rest
 			 newvalue = PAR_RESULT rest
@@ -282,7 +285,7 @@ withTCGI checkIfCommittable result onResult fun =
 		  , setCommit = setCommit stid
 		  }
 	run stid cgistate =
-	  do lr <- try (unwrapCGI (fun (control stid)) cgistate)
+	  do lr <- tryIO (unwrapCGI (fun (control stid)) cgistate)
 	     case lr of
 	       Right (v, cgistate') ->
 		 -- body of transaction finished successfully; now commit
@@ -308,7 +311,7 @@ withTCGI checkIfCommittable result onResult fun =
 		 
 	       Left err ->
 		 -- Caught an exception; might be due to an @anbandon@ operation
-		 case reads (ioeGetErrorString err) of
+		 case reads (E.ioeGetErrorString err) of
 		   (stid', rest) : _ | stid' == stid ->
 		     let result = read rest
 			 newvalue = PAR_RESULT rest
diff --git a/WASH/CGI/Types.hs b/WASH/CGI/Types.hs
index 9b64522..eccff2b 100644
--- a/WASH/CGI/Types.hs
+++ b/WASH/CGI/Types.hs
@@ -21,7 +21,7 @@ goals.
 -}
 module WASH.CGI.Types where
 
-import Maybe
+import Data.Maybe
 
 -- | A type specification consists of a type representation 'TyRep' and a list of
 -- type declarations.
diff --git a/WASH/HTML/HTMLBase.hs b/WASH/HTML/HTMLBase.hs
index 51dbcdb..3255fb0 100644
--- a/WASH/HTML/HTMLBase.hs
+++ b/WASH/HTML/HTMLBase.hs
@@ -14,7 +14,7 @@ module WASH.HTML.HTMLBase
 -}
 where
 
-import Char
+import Data.Char
 
 data BT = STATIC | DYNAMIC | TOPLEVEL
 
diff --git a/WASH/HTML/HTMLTemplates.hs b/WASH/HTML/HTMLTemplates.hs
index 2b658d2..3cade7b 100644
--- a/WASH/HTML/HTMLTemplates.hs
+++ b/WASH/HTML/HTMLTemplates.hs
@@ -5,8 +5,8 @@ import WASH.Utility.SHA1
 import WASH.Utility.JavaScript
 import qualified WASH.Utility.Base32 as Base32
 
-import Monad (unless)
-import List ((\\))
+import Control.Monad (unless)
+import Data.List ((\\))
 
 data ST s a =  ST { unST :: s -> (a, s) }
 instance Monad (ST s) where
diff --git a/WASH/HTML/HTMLTypedBase.hs b/WASH/HTML/HTMLTypedBase.hs
index d65231b..fc1a514 100644
--- a/WASH/HTML/HTMLTypedBase.hs
+++ b/WASH/HTML/HTMLTypedBase.hs
@@ -4,7 +4,7 @@ module WASH.HTML.HTMLTypedBase
   (module WASH.HTML.HTMLBase, module WASH.HTML.HTMLTypedBase) 
   where
 
-import Char
+import Data.Char
 import WASH.HTML.HTMLBase
 
 -- typed layer
diff --git a/WASH/HTML/HTMLTypedBase98.hs b/WASH/HTML/HTMLTypedBase98.hs
index 4d7665e..f0cb91d 100644
--- a/WASH/HTML/HTMLTypedBase98.hs
+++ b/WASH/HTML/HTMLTypedBase98.hs
@@ -3,7 +3,7 @@ module WASH.HTML.HTMLTypedBase98
   (module WASH.HTML.HTMLBase, module WASH.HTML.HTMLTypedBase98)
   where
 
-import Char
+import Data.Char
 import WASH.HTML.HTMLBase
 
 -- typed layer
diff --git a/WASH/Mail/Email.hs b/WASH/Mail/Email.hs
index 2f5e9ba..6f8c181 100644
--- a/WASH/Mail/Email.hs
+++ b/WASH/Mail/Email.hs
@@ -4,8 +4,9 @@ module WASH.Mail.Email (
 	module WASH.Mail.MIME, module WASH.Mail.HeaderField) where
 
 -- from standard library
-import IO
-import System
+import System.IO
+import System.Exit
+import System.Process
 
 -- from utility
 import WASH.Utility.Auxiliary
diff --git a/WASH/Mail/MIME.hs b/WASH/Mail/MIME.hs
index b868bb8..119a8c5 100644
--- a/WASH/Mail/MIME.hs
+++ b/WASH/Mail/MIME.hs
@@ -3,10 +3,10 @@ module WASH.Mail.MIME where
 -- RFC 2045
 -- RFC 2046
 
-import Char
-import IO
-import Monad
-import Random
+import Data.Char
+import qualified System.IO as S
+import Control.Monad
+import System.Random
 
 import qualified WASH.Utility.Base64 as Base64
 import qualified WASH.Mail.ContentDisposition as CD
@@ -88,15 +88,15 @@ data SendMode =
   EightBit | SevenBit
 data SendControl = 
   SendControl {
-    sendH :: Handle,
+    sendH :: S.Handle,
     sendMode :: SendMode
   }
 
 smtpSendControl = 
-  SendControl { sendH = stdout, sendMode = SevenBit }
+  SendControl { sendH = S.stdout, sendMode = SevenBit }
 
 httpSendControl =
-  SendControl { sendH = stdout, sendMode = EightBit }
+  SendControl { sendH = S.stdout, sendMode = EightBit }
 
 instance Send DOC where
   hSend h doc =
@@ -122,9 +122,9 @@ instance Send DOC where
 hSendText h doc =
   case sendMode h of
     EightBit -> 
-      hPutStr hdl str
+      S.hPutStr hdl str
     SevenBit ->
-      hPutStr hdl (QuotedPrintable.encode str)
+      S.hPutStr hdl (QuotedPrintable.encode str)
   where hdl = sendH h
 	str = RFC2279.encode $ flat (textLines doc)
 	flat [] = []
@@ -133,22 +133,22 @@ hSendText h doc =
 hSendBinary h doc =
   case sendMode h of
     SevenBit ->
-      hPutStr (sendH h) (Base64.encode (messageData doc))
+      S.hPutStr (sendH h) (Base64.encode (messageData doc))
     EightBit ->
-      hPutStr (sendH h) (messageData doc)
+      S.hPutStr (sendH h) (messageData doc)
 
 hSendMultipart h boundary doc =
   do -- may send a preamble for non-MIME-able MUAs at this point
      sendParts (parts doc)
   where hdl = sendH h
 	sendParts [] = 
-	  do hPutStr hdl "--"
-	     hPutStr hdl boundary
-	     hPutStr hdl "--"
+	  do S.hPutStr hdl "--"
+	     S.hPutStr hdl boundary
+	     S.hPutStr hdl "--"
 	     hSend h CRLF
 	sendParts (doc:docs) =
-	  do hPutStr hdl "--"
-	     hPutStr hdl boundary
+	  do S.hPutStr hdl "--"
+	     S.hPutStr hdl boundary
 	     hSend h CRLF
 	     hSend h doc
 	     sendParts docs
@@ -156,7 +156,7 @@ hSendMultipart h boundary doc =
 data CRLF = CRLF
 
 instance Send CRLF where
-  hSend h CRLF = hPutStr (sendH h) "\n"
+  hSend h CRLF = S.hPutStr (sendH h) "\n"
 
 data Mail =
      Mail {
@@ -177,7 +177,7 @@ class Send m where
   send = hSend smtpSendControl
 
 instance Send Header where
-  hSend h header = hPutStr (sendH h) (show header)
+  hSend h header = S.hPutStr (sendH h) (show header)
 
 instance Send Mail where
   hSend h mail =
diff --git a/WASH/Mail/MailParser.hs b/WASH/Mail/MailParser.hs
index 8e554cf..fdd9acd 100644
--- a/WASH/Mail/MailParser.hs
+++ b/WASH/Mail/MailParser.hs
@@ -2,9 +2,9 @@ module WASH.Mail.MailParser where
 
 -- see RFC 2822
 -- TODO: check against their definition of token
-import Char
-import List
-import Maybe
+import Data.Char
+import Data.List
+import Data.Maybe
 -- 
 import Text.ParserCombinators.Parsec
 -- 
@@ -38,9 +38,11 @@ literalString = do char '\"'
 		   return str
 
 no_ws_ctl_chars = map chr ([1..8] ++ [11,12] ++ [14..31] ++ [127])
+no_ws_ctl :: Parser Char
 no_ws_ctl = oneOf no_ws_ctl_chars
 
 text_chars = map chr ([1..9] ++ [11,12] ++ [14..127])
+p_text :: Parser Char
 p_text = oneOf text_chars
 
 quoted_pair = do char '\\'
diff --git a/WASH/Mail/RFC2822.hs b/WASH/Mail/RFC2822.hs
index 2341ce4..5f2170d 100644
--- a/WASH/Mail/RFC2822.hs
+++ b/WASH/Mail/RFC2822.hs
@@ -1,9 +1,10 @@
 module WASH.Mail.RFC2822 where
 
-import Char
+import Data.Char
 -- 
 import Text.ParserCombinators.Parsec
 
+crLf :: Parser String
 crLf = try (string "\n\r" <|> string "\r\n") <|> string "\n" <|> string "\r"
 
 fws =
@@ -14,8 +15,11 @@ fws =
   do crLf
      many1 ws1
 
+ws1 :: Parser Char
 ws1 = oneOf " \t"
+lineChar :: Parser Char
 lineChar = noneOf "\n\r"
+headerNameChar :: Parser Char
 headerNameChar = noneOf "\n\r:"
 
 -- |parse contents of Date field according to RFC2822
diff --git a/WASH/Utility/Auxiliary.hs b/WASH/Utility/Auxiliary.hs
index c39c8fa..18088df 100644
--- a/WASH/Utility/Auxiliary.hs
+++ b/WASH/Utility/Auxiliary.hs
@@ -1,14 +1,23 @@
 module WASH.Utility.Auxiliary where
 
-import IO
-import System
-import Directory
+import qualified Control.Exception as E
+import qualified System.IO.Error   as E
+import System.IO
+import System.Process
+import System.Environment
+import System.Directory
 import WASH.Utility.FileNames
 import qualified WASH.Utility.Shell as Shell
 
+catchIO :: IO a -> (E.IOException -> IO a) -> IO a
+catchIO = E.catch
+
+tryIO :: IO a -> IO (Either E.IOException a)
+tryIO = E.try
+
 protectedGetEnv :: String -> String -> IO String
 protectedGetEnv var deflt =
-  catch (getEnv var) (const $ return deflt)
+  catchIO (getEnv var) (const $ return deflt)
 
 readFileNonExistent :: FilePath -> String -> IO String
 readFileNonExistent fileName def =
@@ -27,10 +36,10 @@ readFileStrictly filePath =
 
 assertDirectoryExists :: FilePath -> IO () -> IO ()
 assertDirectoryExists dirname existsAction =
-  catch (createDirectory dirname)
+  catchIO (createDirectory dirname)
         (\ ioe -> 
-	   if isAlreadyExistsError ioe then existsAction
-	   else if isDoesNotExistError ioe then
+	   if E.isAlreadyExistsError ioe then existsAction
+	   else if E.isDoesNotExistError ioe then
 	     do assertDirectoryExists (dropLastComponent dirname) (return ())
 		assertDirectoryExists dirname existsAction
 	   else do hPutStrLn stderr ("assertDirectoryExists " ++ show dirname)
diff --git a/WASH/Utility/Base32.hs b/WASH/Utility/Base32.hs
index e1d1949..818bbb2 100644
--- a/WASH/Utility/Base32.hs
+++ b/WASH/Utility/Base32.hs
@@ -4,9 +4,9 @@
 
 module WASH.Utility.Base32 (encode, decode) where
 
-import Bits
-import Char
-import List
+import Data.Bits
+import Data.Char
+import Data.List
 
 encode :: String -> String
 encode = encBase32
diff --git a/WASH/Utility/Base64.hs b/WASH/Utility/Base64.hs
index 265c786..21f7bcd 100644
--- a/WASH/Utility/Base64.hs
+++ b/WASH/Utility/Base64.hs
@@ -6,8 +6,8 @@ module WASH.Utility.Base64
        )
        where
 
-import Array
-import Char
+import Data.Array
+import Data.Char
 
 --
 -- |Yields encoded input cropped to lines of less than 76 characters. Directly
diff --git a/WASH/Utility/BulkIO.hs b/WASH/Utility/BulkIO.hs
index fe8543f..13eba12 100644
--- a/WASH/Utility/BulkIO.hs
+++ b/WASH/Utility/BulkIO.hs
@@ -1,10 +1,10 @@
 module WASH.Utility.BulkIO where
 
-import IO
+import System.IO
 
-import Ptr
-import CString
-import CTypes
+import Foreign.Ptr
+import Foreign.C.String
+import Foreign.C.Types
 import Foreign.Marshal.Alloc (mallocBytes, free)
 import System.IO (hGetBuf, hPutBuf)
 		   
diff --git a/WASH/Utility/Hex.hs b/WASH/Utility/Hex.hs
index 134da18..6ecec83 100644
--- a/WASH/Utility/Hex.hs
+++ b/WASH/Utility/Hex.hs
@@ -1,8 +1,8 @@
 -- © 2001, 2003 Peter Thiemann
 module WASH.Utility.Hex where
 
-import Array
-import Char
+import Data.Array
+import Data.Char
 
 hexdigit :: Int -> Char
 hexdigit i = hexdigits ! i
diff --git a/WASH/Utility/ISO8601.hs b/WASH/Utility/ISO8601.hs
index ae7ccd0..f0b7fd8 100644
--- a/WASH/Utility/ISO8601.hs
+++ b/WASH/Utility/ISO8601.hs
@@ -1,9 +1,9 @@
 -- © 2002 Peter Thiemann
 module WASH.Utility.ISO8601 where
 
-import Char
-import Monad
-import Time
+import Data.Char
+import Control.Monad
+import System.Time
 
 import System.IO.Unsafe
 
diff --git a/WASH/Utility/IntToString.hs b/WASH/Utility/IntToString.hs
index 93469f4..7463d78 100644
--- a/WASH/Utility/IntToString.hs
+++ b/WASH/Utility/IntToString.hs
@@ -1,7 +1,7 @@
 -- © 2002 Peter Thiemann
 module WASH.Utility.IntToString where
 
-import Char
+import Data.Char
 
 intToString ndigits i =
   let g x = h $ divMod x 10
diff --git a/WASH/Utility/JavaScript.hs b/WASH/Utility/JavaScript.hs
index 10e34c5..ab77e85 100644
--- a/WASH/Utility/JavaScript.hs
+++ b/WASH/Utility/JavaScript.hs
@@ -1,7 +1,7 @@
 -- © 2003 Peter Thiemann
 module WASH.Utility.JavaScript where
 
-import Char
+import Data.Char
 
 import WASH.Utility.Hex
 
diff --git a/WASH/Utility/Locking.hs b/WASH/Utility/Locking.hs
index 063b8c7..36661fd 100644
--- a/WASH/Utility/Locking.hs
+++ b/WASH/Utility/Locking.hs
@@ -6,10 +6,10 @@ way to do it through Haskell's standard IO library.
 module WASH.Utility.Locking (obtainLock, releaseLock) where
 
 import WASH.Utility.Auxiliary
-import Directory
-import IO
-import System
-import Time
+import System.Directory
+import System.IO
+import System.Process
+import Data.Time
 
 obtainLock  :: FilePath -> IO ()
 releaseLock :: FilePath -> IO ()
@@ -29,10 +29,10 @@ obtainLockLoop name =
      if b then do -- check if lock is stale
 		  mtime <- getModificationTime lp
 		  ftime <- getModificationTime name
-		  ctime <- getClockTime
-		  let td = diffClockTimes ctime mtime
-		      tf = diffClockTimes ctime ftime
-		  if tdSec td > 60 && tdSec tf > 60
+		  ctime <- getCurrentTime
+		  let td = diffUTCTime ctime mtime
+		      tf = diffUTCTime ctime ftime
+		  if td > 60 && tf > 60
 		    then do removeDirectory lp
 			    obtainLock name
 		    else do system "sleep 1"
diff --git a/WASH/Utility/QuotedPrintable.hs b/WASH/Utility/QuotedPrintable.hs
index 963fcf9..9b96590 100644
--- a/WASH/Utility/QuotedPrintable.hs
+++ b/WASH/Utility/QuotedPrintable.hs
@@ -4,7 +4,7 @@ module WASH.Utility.QuotedPrintable
        -- deprecated: encode_quoted, encode_quoted', decode_quoted
        ) where
 
-import Char
+import Data.Char
 import WASH.Utility.Hex
 
 encode, encode', decode :: String -> String
diff --git a/WASH/Utility/RFC2047.hs b/WASH/Utility/RFC2047.hs
index 8c9b759..8b7b0f5 100644
--- a/WASH/Utility/RFC2047.hs
+++ b/WASH/Utility/RFC2047.hs
@@ -1,8 +1,8 @@
 -- © 2003 Peter Thiemann
 module WASH.Utility.RFC2047 where
 -- decoding of header fields
-import Char
-import List
+import Data.Char
+import Data.List
 
 import qualified WASH.Utility.Base64 as Base64
 import qualified WASH.Utility.QuotedPrintable as QuotedPrintable
diff --git a/WASH/Utility/RFC2279.hs b/WASH/Utility/RFC2279.hs
index a94440c..61dd901 100644
--- a/WASH/Utility/RFC2279.hs
+++ b/WASH/Utility/RFC2279.hs
@@ -12,7 +12,7 @@
 -}
 module WASH.Utility.RFC2279 (encode, decode) where
 
-import Char
+import Data.Char
 
 
 -- |maps Unicode string to list of octets
diff --git a/WASH/Utility/SHA1.hs b/WASH/Utility/SHA1.hs
index 35ade26..3eb89fc 100644
--- a/WASH/Utility/SHA1.hs
+++ b/WASH/Utility/SHA1.hs
@@ -4,9 +4,9 @@
 
 module WASH.Utility.SHA1 (sha1, sha1_size) where
 
-import Char
-import Bits
-import Word
+import Data.Char
+import Data.Bits
+import Data.Word
 
 type ABCDE = (Word32, Word32, Word32, Word32, Word32)
 type XYZ = (Word32, Word32, Word32)
diff --git a/WASH/Utility/Shell.hs b/WASH/Utility/Shell.hs
index 6d8bc21..a229282 100644
--- a/WASH/Utility/Shell.hs
+++ b/WASH/Utility/Shell.hs
@@ -2,7 +2,7 @@
 -- |Defines functions for shell quotation.
 module WASH.Utility.Shell where
 
-import Char
+import Data.Char
 
 -- |Shell meta characters are /! & ; \` \' \" | * ? ~ \< \> ^ ( ) [ ] true $ n r/
 metaCharacters :: String
diff --git a/WASH/Utility/SimpleParser.hs b/WASH/Utility/SimpleParser.hs
index 6e84fa3..561f4b1 100644
--- a/WASH/Utility/SimpleParser.hs
+++ b/WASH/Utility/SimpleParser.hs
@@ -1,7 +1,7 @@
 -- © 2002 Peter Thiemann
 module WASH.Utility.SimpleParser where
 
-import Char
+import Data.Char
 
 -- very simple parser combinators: Parsec is too sophisticated!
 newtype Parser a b = Parser (a -> [(b, a)])
diff --git a/WASH/Utility/URLCoding.hs b/WASH/Utility/URLCoding.hs
index 911b0ca..60232de 100644
--- a/WASH/Utility/URLCoding.hs
+++ b/WASH/Utility/URLCoding.hs
@@ -2,7 +2,7 @@
 -- |Implements coding of non-alphanumeric characters in URLs and CGI-requests.
 module WASH.Utility.URLCoding (encode, decode) where
 
-import Char
+import Data.Char
 import WASH.Utility.Hex
 
 -- |Perform URI encoding of a list of bytes. See 
diff --git a/WASH/Utility/Unique.hs b/WASH/Utility/Unique.hs
index dbef771..6f1c773 100644
--- a/WASH/Utility/Unique.hs
+++ b/WASH/Utility/Unique.hs
@@ -1,12 +1,15 @@
 -- © 2001 Peter Thiemann
 module WASH.Utility.Unique (inventStdKey, inventKey, inventFilePath) where
 
-import Random
-import IO
-import Directory
+import qualified Control.Exception as E
+import qualified System.IO.Error   as E
+
+import System.Random
+import System.IO
+import System.Directory
 import WASH.Utility.Auxiliary
-import List
-import Monad
+import Data.List
+import Control.Monad
 import WASH.Utility.Locking
 
 registryDir = "/tmp/Unique/"
@@ -23,15 +26,15 @@ inventKey len chars =
   do g <- newStdGen
      let candidate = take len $ map (chars !!) $ randomRs (0, length chars - 1) g
 	 dirname = registryDir ++ candidate
-     catch (do createDirectory dirname
-	       return candidate)
+     catchIO (do createDirectory dirname
+	         return candidate)
 	   (\ ioe -> 
-	   if isAlreadyExistsError ioe then
-	      -- might want to check here for timeout
-	      inventKey len chars
-	   else if isDoesNotExistError ioe then
+	   if E.isAlreadyExistsError ioe then
+	     -- might want to check here for timeout
+	     inventKey len chars
+	   else if E.isDoesNotExistError ioe then
 	     do assertDirectoryExists registryDir (return ())
-		setPermissions registryDir (Permissions True True True True)
+		setPermissions registryDir $ emptyPermissions{readable = True, writable = True, executable = True, searchable = True}
 		inventKey len chars
 	   else do hPutStrLn stderr ("inventKey could not create " ++ show dirname)
 		   ioError ioe)
diff --git a/WashNGo.cabal b/WashNGo.cabal
index 8724df9..af259a9 100644
--- a/WashNGo.cabal
+++ b/WashNGo.cabal
@@ -21,7 +21,7 @@ Cabal-Version: >= 1.2
 --  location: http://code.haskell.org/WASH/
 
 Library
-  Build-Depends: base < 5, regex-compat, parsec
+  Build-Depends: base < 5, regex-compat, parsec, old-time, random, old-locale, array, time
   Extensions: ForeignFunctionInterface
   build-depends: containers
   Exposed-Modules:
diff --git a/washparser/hs/WASHClean.hs b/washparser/hs/WASHClean.hs
index aba17f4..db3ff5e 100644
--- a/washparser/hs/WASHClean.hs
+++ b/washparser/hs/WASHClean.hs
@@ -1,6 +1,6 @@
 module WASHClean where
 
-import Char
+import Data.Char
 
 import WASHData
 
diff --git a/washparser/hs/WASHExpression.hs b/washparser/hs/WASHExpression.hs
index 5d98b73..96d01ff 100644
--- a/washparser/hs/WASHExpression.hs
+++ b/washparser/hs/WASHExpression.hs
@@ -1,7 +1,7 @@
 module WASHExpression where
 
-import List
-import Monad
+import Data.List
+import Control.Monad
 
 import WASHFlags
 import qualified WASHUtil
diff --git a/washparser/hs/WASHGenerator.hs b/washparser/hs/WASHGenerator.hs
index 1d7fe85..e7847ac 100644
--- a/washparser/hs/WASHGenerator.hs
+++ b/washparser/hs/WASHGenerator.hs
@@ -1,7 +1,8 @@
 module WASHGenerator (preprocess, preprocessPIPE) where {
 
-import List;
-import IO;
+import Data.List;
+import System.IO;
+import Control.Exception;
 
 import WASHData ;
 import Text.ParserCombinators.Parsec hiding (try) ;
diff --git a/washparser/hs/WASHMain.hs b/washparser/hs/WASHMain.hs
index 13b1d01..467da5b 100644
--- a/washparser/hs/WASHMain.hs
+++ b/washparser/hs/WASHMain.hs
@@ -2,10 +2,11 @@ module Main where
 
 -- ghc --make WASHMain -package text -o WASHMain
 
-import Directory
-import IO
-import List
-import System
+import Control.Exception
+import System.Directory
+import System.IO
+import System.Environment
+import Data.List
 import WASHGenerator
 import WASHFlags
 
diff --git a/washparser/hs/WASHParser.hs b/washparser/hs/WASHParser.hs
index e6ea696..9cc09c0 100644
--- a/washparser/hs/WASHParser.hs
+++ b/washparser/hs/WASHParser.hs
@@ -1,6 +1,6 @@
 module WASHParser ( xmlfile, washfile ) where {
 
-import Char ;
+import Data.Char ;
 import Text.ParserCombinators.Parsec hiding (letter) ;
 import WASHData;
 import WASHUtil;
@@ -49,6 +49,7 @@ xmlfile = do {
 
 
 -- 2.2 / 2
+char' :: Parser Char;
 char' = (char '\t' <|> char '\n' <|> char '\r' <|> 
     satisfy (>= ' ')) <?> "character";
 
