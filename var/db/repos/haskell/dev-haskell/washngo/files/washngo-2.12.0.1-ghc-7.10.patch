diff --git a/WASH/CGI/CGIMonad.hs b/WASH/CGI/CGIMonad.hs
index 3c287e0..3427b3e 100644
--- a/WASH/CGI/CGIMonad.hs
+++ b/WASH/CGI/CGIMonad.hs
@@ -9,2 +9,4 @@ import Data.Maybe
 import Control.Monad.Fix
+import Control.Monad
+import Control.Applicative
 
@@ -132,2 +134,9 @@ setFaulty ss =
 
+instance Functor CGI where
+    fmap  = liftM
+
+instance Applicative CGI where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad CGI where
diff --git a/WASH/CGI/Persistent2.hs b/WASH/CGI/Persistent2.hs
index 2a993a8..e97c5bd 100644
--- a/WASH/CGI/Persistent2.hs
+++ b/WASH/CGI/Persistent2.hs
@@ -111,2 +111,5 @@ init name val = do
 
+l_find :: (a -> Bool) -> [a] -> Maybe a
+l_find = find
+
 get tn@(T name i) =
@@ -119,3 +122,3 @@ get tn@(T name i) =
      pairs <- return $ read contents
-     return $ vl $ fromJust $ find ((== i) . nr) pairs
+     return $ vl $ fromJust $ l_find ((== i) . nr) pairs
   where
diff --git a/WASH/CGI/TCGI.hs b/WASH/CGI/TCGI.hs
index 44855bf..b943280 100644
--- a/WASH/CGI/TCGI.hs
+++ b/WASH/CGI/TCGI.hs
@@ -8,2 +8,4 @@ module WASH.CGI.TCGI where
 import WASH.CGI.CGIMonad
+import Control.Monad
+import Control.Applicative
 
@@ -20,2 +22,9 @@ into = TCGI . unCGI
 
+instance Functor (TCGI b) where
+    fmap  = liftM
+
+instance Applicative (TCGI b) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (TCGI b) where
diff --git a/WASH/HTML/HTMLMonadBase.hs b/WASH/HTML/HTMLMonadBase.hs
index 3863a93..78c39f6 100644
--- a/WASH/HTML/HTMLMonadBase.hs
+++ b/WASH/HTML/HTMLMonadBase.hs
@@ -5,2 +5,5 @@ module WASH.HTML.HTMLMonadBase
 import qualified WASH.HTML.HTMLBase as B
+import Control.Monad
+import Control.Applicative
+
 type Element = B.ELEMENT_
@@ -11,2 +14,10 @@ data WithHTML x m a =
 type HTMLCons x y m a = WithHTML x m a -> WithHTML y m a
+
+instance Monad m => Functor (WithHTML x m) where
+    fmap  = liftM
+
+instance Monad m => Applicative (WithHTML x m) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad m => Monad (WithHTML x m) where
diff --git a/WASH/HTML/HTMLTemplates.hs b/WASH/HTML/HTMLTemplates.hs
index 3cade7b..05b4dbb 100644
--- a/WASH/HTML/HTMLTemplates.hs
+++ b/WASH/HTML/HTMLTemplates.hs
@@ -8,5 +8,15 @@ import qualified WASH.Utility.Base32 as Base32
 import Control.Monad (unless)
-import Data.List ((\\))
+import Data.List as L
+import Control.Applicative
+import Control.Monad
 
 data ST s a =  ST { unST :: s -> (a, s) }
+
+instance Functor (ST s) where
+    fmap  = liftM
+
+instance Applicative (ST s) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (ST s) where
@@ -27,2 +37,6 @@ data Names = Names { ntable :: [(String, Int)], nseen :: [Int] }
 
+-- ghc-7.10 introduced Foldable typeclass nonsense
+l_foldr :: (a -> b -> b) -> b -> [a] -> b
+l_foldr = foldr
+
 ----------------------------------------------------------------------
@@ -81,3 +95,3 @@ identlist = ([ [c] | c <- charlist ]
 	 ++ [ [c,d] | c <- charlist, d <- alphanumlist ])
-	 \\ ["S","o","v"]
+	 L.\\ ["S","o","v"]
 
@@ -152,3 +166,3 @@ showActualArg xs =
 showStringTable =
-  foldr g id
+  l_foldr g id
   where
@@ -162,3 +176,3 @@ cleanupStringTable ndefs st =
 unite st1 st2 =
-  foldr g st1 st2
+  l_foldr g st1 st2
   where g p@(str,i) st1 =
@@ -168,5 +182,5 @@ unite st1 st2 =
 buildStringTableArgs = 
-  foldr unite [] . map buildStringTableArg
+  l_foldr unite [] . map buildStringTableArg
 buildStringTableArg =
-  foldr unite [] . map buildStringTableActual
+  l_foldr unite [] . map buildStringTableActual
 buildStringTableActual (TOut str) =
@@ -217,2 +231,9 @@ data M a = M { unM :: Mt -> (a, Mt) }
 
+instance Functor M where
+    fmap  = liftM
+
+instance Applicative M where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad M where
@@ -349,3 +370,3 @@ collect (DOCTYPE_ bt strs elems) cbt cur =
   let t1 = TOut ("<!DOCTYPE" ++
-		 (foldr (\str f -> showChar ' ' . showString str . f) id strs .
+		 (l_foldr (\str f -> showChar ' ' . showString str . f) id strs .
 		  showString ">")
diff --git a/WASH/Mail/MailParser.hs b/WASH/Mail/MailParser.hs
index fdd9acd..608aa94 100644
--- a/WASH/Mail/MailParser.hs
+++ b/WASH/Mail/MailParser.hs
@@ -1 +1,2 @@
+{-# LANGUAGE FlexibleContexts #-}
 module WASH.Mail.MailParser where
diff --git a/WASH/Utility/SimpleParser.hs b/WASH/Utility/SimpleParser.hs
index 561f4b1..c416930 100644
--- a/WASH/Utility/SimpleParser.hs
+++ b/WASH/Utility/SimpleParser.hs
@@ -4,2 +4,5 @@ module WASH.Utility.SimpleParser where
 import Data.Char
+import Control.Monad
+import qualified Control.Applicative as A
+import Control.Applicative((<*>))
 
@@ -8,2 +11,10 @@ newtype Parser a b = Parser (a -> [(b, a)])
 unParser (Parser g) = g
+
+instance Functor (Parser a) where
+    fmap  = liftM
+
+instance A.Applicative (Parser a) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (Parser a) where
diff --git a/washparser/hs/WASHClean.hs b/washparser/hs/WASHClean.hs
index db3ff5e..f468eef 100644
--- a/washparser/hs/WASHClean.hs
+++ b/washparser/hs/WASHClean.hs
@@ -3,2 +3,4 @@ module WASHClean where
 import Data.Char
+import Control.Monad
+import Control.Applicative
 
@@ -7,2 +9,10 @@ import WASHData
 data CM a = CM ([String] -> a)
+
+instance Functor CM where
+    fmap  = liftM
+
+instance Applicative CM where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad CM where -- Reader monad
diff --git a/washparser/hs/WASHOut.hs b/washparser/hs/WASHOut.hs
index 1399ea2..1cfb3ec 100644
--- a/washparser/hs/WASHOut.hs
+++ b/washparser/hs/WASHOut.hs
@@ -2,2 +2,4 @@ module WASHOut where
 
+import Control.Monad
+import Control.Applicative
 -- output monad
@@ -6,2 +8,9 @@ data Out a = Out a ShowS
 
+instance Functor Out where
+    fmap  = liftM
+
+instance Applicative Out where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad Out where
diff --git a/washparser/hs/WASHParser.hs b/washparser/hs/WASHParser.hs
index 9cc09c0..4151d84 100644
--- a/washparser/hs/WASHParser.hs
+++ b/washparser/hs/WASHParser.hs
@@ -1 +1,2 @@
+{-# LANGUAGE FlexibleContexts #-}
 module WASHParser ( xmlfile, washfile ) where {
@@ -11,4 +12,2 @@ notImplemented what = char '\xff' >> return undefined
 
-f <$> p = do { x <- p; return $ f x; };
-
 testParser p s = 
