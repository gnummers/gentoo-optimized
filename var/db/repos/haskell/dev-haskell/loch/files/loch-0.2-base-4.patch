diff --git a/Debug/Trace/Location.hs b/Debug/Trace/Location.hs
index 2efdd81..c7ec5e8 100644
--- a/Debug/Trace/Location.hs
+++ b/Debug/Trace/Location.hs
@@ -48,7 +48,7 @@
 module Debug.Trace.Location (
 
         -- * The assert token
-        assert,             -- The assert token, reexported
+        E.assert,           -- The assert token, reexported
         Assert,             -- A convenient type for asserts
 
         -- * Location emitting errors
@@ -59,15 +59,14 @@ module Debug.Trace.Location (
 
     ) where
 
-import Control.Exception (assert) -- rexported
+import qualified Control.Exception as E
 import System.IO
 import System.IO.Unsafe  (unsafePerformIO)
-import qualified Control.Exception as C
 
 -- | A wrapper type for the 'assert' token.
 type Assert a = Bool -> IO a -> IO a
 
-ppr :: C.Exception -> String
+ppr :: E.SomeException -> String
 ppr = fst . break (== ' ') . show
 
 --
@@ -87,7 +86,8 @@ ppr = fst . break (== ' ') . show
 --
 failure :: Assert a -> String -> a
 failure assrt str = unsafePerformIO $
-    C.catch (assrt False (return (error "Debug.Trace.Location.failure"))) prettyError
+    (E.catch :: IO a -> (E.SomeException -> IO a) -> IO a)
+        (assrt False (return (error "Debug.Trace.Location.failure"))) prettyError
     where
         prettyError e = error (ppr e ++ " " ++ str)
 {-# NOINLINE failure #-}
@@ -107,7 +107,7 @@ failure assrt str = unsafePerformIO $
 --
 trace :: Assert () -> String -> a -> a
 trace assrt str f =
-    (unsafePerformIO $ C.catch (assrt False (return ())) printIt) `seq` f
+    (unsafePerformIO $ (E.catch :: IO a -> (E.SomeException -> IO a) -> IO a) (assrt False (return ())) printIt) `seq` f
     where
       printIt e = hPutStrLn stderr (ppr e ++ " " ++ str)
 {-# NOINLINE trace #-}
@@ -125,7 +125,7 @@ trace assrt str f =
 -- > *** Exception: <interactive>:1:6-11: Prelude.head: empty list
 --
 check :: Assert a -> a -> a
-check assrt a = unsafePerformIO $ checkIO assrt (C.evaluate a)
+check assrt a = unsafePerformIO $ checkIO assrt (E.evaluate a)
 {-# NOINLINE check #-}
 
 --
@@ -141,5 +141,5 @@ check assrt a = unsafePerformIO $ checkIO assrt (C.evaluate a)
 -- > "*** Exception: <interactive>:1:13-18: /foo: openFile: does not exist
 --
 checkIO :: Assert a -> IO a -> IO a
-checkIO assrt a = C.catch a $ \e -> return $ failure assrt (show e)
+checkIO assrt a = (E.catch :: IO a -> (E.SomeException -> IO a) -> IO a) a $ \e -> return $ failure assrt (show e)
 {-# NOINLINE checkIO #-}
