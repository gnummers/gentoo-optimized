--- a/src/Synthesizer/CausalIO/Gate.hs
+++ b/src/Synthesizer/CausalIO/Gate.hs
@@ -30,3 +30,3 @@ import NumericPrelude.Base
 import Prelude ()
-
+import qualified Data.Semigroup as S
 
@@ -63,2 +63,5 @@ instance CutG.NormalForm (Chunk a) where
 
+instance S.Semigroup (Chunk a) where
+   (<>) = error "Gate.<> cannot be defined"
+
 instance Mn.Monoid (Chunk a) where
--- a/src/Synthesizer/CausalIO/Process.hs
+++ b/src/Synthesizer/CausalIO/Process.hs
@@ -46,3 +46,3 @@ import System.IO.Unsafe (unsafePerformIO, unsafeInterleaveIO, )
 import Prelude hiding (zip, )
-
+import qualified Data.Semigroup as S
 
@@ -195,2 +195,25 @@ zip ab ac =
 
+instance (CutG.Transform a, CutG.Read b, Monoid b) => S.Semigroup (T a b) where
+   (<>)
+         (Cons nextX createX deleteX)
+         (Cons nextY createY deleteY) = Cons
+      (\a s ->
+         case s of
+            Left s0 -> do
+               (b1,s1) <- nextX a s0
+               let lenA = CutG.length a
+                   lenB = CutG.length b1
+               case compare lenA lenB of
+                  LT -> error "CausalIO.Process.mappend: output chunk is larger than input chunk"
+                  EQ -> return (b1, Left s1)
+                  GT -> do
+                     deleteX s1
+                     (b2,s2) <- nextY (CutG.drop lenB a) =<< createY
+                     return (mappend b1 b2, Right s2)
+            Right s0 -> do
+               (b1,s1) <- nextY a s0
+               return (b1, Right s1))
+      (fmap Left createX)
+      (either deleteX deleteY)
+
 
--- a/src/Synthesizer/Generic/LengthSignal.hs
+++ b/src/Synthesizer/Generic/LengthSignal.hs
@@ -15,2 +15,3 @@ import NumericPrelude.Base hiding (length, splitAt, )
 
+import qualified Data.Semigroup as S
 
@@ -37,2 +38,6 @@ instance (Additive.C a, SigG.Transform sig a) => Additive.C (T (sig a)) where
 
+instance (Monoid sig) => S.Semigroup (T sig) where
+   (<>) (Cons xl xs) (Cons yl ys) =
+      Cons (xl+yl) (mappend xs ys)
+
 instance (Monoid sig) => Monoid (T sig) where
--- a/src/Synthesizer/Generic/Signal.hs
+++ b/src/Synthesizer/Generic/Signal.hs
@@ -82,3 +82,3 @@ import Prelude
     Eq, Ord, Show, min, max, )
-
+import qualified Data.Semigroup as S
 
@@ -150,2 +150,5 @@ newtype LazySize = LazySize Int
 
+instance S.Semigroup LazySize where
+   (<>) (LazySize a) (LazySize b) = LazySize (a + b)
+
 instance Monoid LazySize where
--- a/src/Synthesizer/Plain/Builder.hs
+++ b/src/Synthesizer/Plain/Builder.hs
@@ -16,3 +16,3 @@ import Prelude ()
 
-
+import qualified Data.Semigroup as S
 
@@ -22,2 +22,4 @@ type Put a = a -> T a
 
+instance S.Semigroup (T a) where
+   (<>) x y = Cons $ decons x `mappend` decons y
 
--- a/src/Synthesizer/State/Signal.hs
+++ b/src/Synthesizer/State/Signal.hs
@@ -62,2 +62,3 @@ import Prelude
     )
+import qualified Data.Semigroup as S
 
@@ -940,2 +941,5 @@ monoidConcatMap = foldMap
 
+instance S.Semigroup (T y) where
+   (<>) = append
+
 instance Monoid (T y) where
--- a/src/Synthesizer/Zip.hs
+++ b/src/Synthesizer/Zip.hs
@@ -9,2 +9,3 @@ import Data.Monoid (Monoid, mempty, mappend, )
 
+import qualified Data.Semigroup as S
 
@@ -110,2 +111,5 @@ arrowSplitShorten a b =
 
+instance (Monoid a, Monoid b) => S.Semigroup (T a b) where
+   (<>) (Cons a0 b0) (Cons a1 b1) =
+      Cons (mappend a0 a1) (mappend b0 b1)
 
