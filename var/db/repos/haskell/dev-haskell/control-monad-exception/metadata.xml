<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		This package provides explicitly typed, checked exceptions as a library.
		
		Computations throwing different types of exception can be combined seamlessly.
		
		/Example/
		
		&gt; data Expr = Add Expr Expr | Div Expr Expr | Val Double
		&gt; eval (Val x)     = return x
		&gt; eval (Add a1 a2) = do
		&gt;    v1 &lt;- eval a1
		&gt;    v2 &lt;- eval a2
		&gt;    let sum = v1 + v2
		&gt;    if sum &lt; v1 || sum &lt; v2 then throw SumOverflow else return sum
		&gt; eval (Div a1 a2) = do
		&gt;    v1 &lt;- eval a1
		&gt;    v2 &lt;- eval a2
		&gt;    if v2 == 0 then throw DivideByZero else return (v1 / v2)
		
		&gt; data DivideByZero = DivideByZero deriving (Show, Typeable)
		&gt; data SumOverflow  = SumOverflow  deriving (Show, Typeable)
		
		&gt; instance Exception DivideByZero
		&gt; instance Exception SumOverflow
		
		GHCi infers the following types
		
		&gt; eval :: (Throws DivideByZero l, Throws SumOverflow l) =&gt; Expr -&gt; EM l Double
		&gt; eval `catch` \ (e::DivideByZero) -&gt; return (-1)  :: Throws SumOverflow l =&gt; Expr -&gt; EM l Double
		&gt; runEM(eval `catch` \ (e::SomeException) -&gt; return (-1))  :: Expr -&gt; Double
		
		
		In addition to explicitly typed exceptions his package provides:
		
		* Support for explicitly documented, unchecked exceptions (via 'Control.Monad.Exception.tryEMT').
		
		* Support for selective unchecked exceptions (via 'Control.Monad.Exception.UncaughtException').
		
		* Support for exception call traces via 'Control.Monad.Loc.MonadLoc'. /Example:/
		
		&gt;
		&gt; f () = do throw MyException
		&gt; g a  = do f a
		&gt;
		&gt; main = runEMT $ do g () `catchWithSrcLoc`
		&gt;                        \loc (e::MyException) -&gt; lift(putStrLn$ showExceptionWithTrace loc e)
		&gt;
		&gt; -- Running main produces the output:
		&gt;
		&gt; *Main&gt; main
		&gt;  MyException
		&gt;    in f, Main(example.hs): (1,6)
		&gt;       g, Main(example.hs): (2,6)
		&gt;       main, Main(example.hs): (5,9)
		&gt;       main, Main(example.hs): (4,16)
		
		/Changes/:
		
		
		* 0.9.0 - Moved to transformers (finally leaving the whole mtl-transformers cisma behind)
		
		* 0.10.0 - removed the dependency on safe-failure
		
		* 0.10.1 - compatibility with failure 0.2 (thanks to Bas van Dijk)
		
		* 0.10.2 - use the identity type from mtl (thanks to Bas), require minimum cabal-install version (thanks to Bernhard Urban)
		
		* 0.10.3 - Moved the MonadIO instance to the main package
		
		* 0.10.3.1 - Compatibility with base 4.6
	</longdescription>

</pkgmetadata>
