diff --git a/App/Behaviours/FileOps.hs b/App/Behaviours/FileOps.hs
index 7067108..121f05c 100644
--- a/App/Behaviours/FileOps.hs
+++ b/App/Behaviours/FileOps.hs
@@ -31,7 +31,7 @@ import qualified Control.Exception as Ex
 --  data without a read instance, use 'readFileBehaviourNR'
 readFileBehaviour :: Read a => String -> EData a -> Behaviour [EData a]
 readFileBehaviour n d b = consumeNamedEventsWith b n readFileCatch
-    where readFileCatch e = Ex.catch (readFile0 e) (emitException e)
+    where readFileCatch e = (Ex.catch :: IO a -> (IOError -> IO a) -> IO a) (readFile0 e) (emitException e)
           readFile0 e = (rFile0 d . eventdata $ e) >>= produce n "ReadSource" (filename e) Persistent >>= return . (:[])
           emitException e ex = produce "Exception" "readFileBehaviour" n once (EString (show ex):eventdata e) >>= return . (:[])
           filename = (\(EString x) -> x) . head . eventdata
@@ -55,7 +55,7 @@ readFileBehaviour n d b = consumeNamedEventsWith b n readFileCatch
 --  event with \"Exception\" as the group and /name/ as the source.
 readFileBehaviourNR :: String -> EData a -> Behaviour [EData a]
 readFileBehaviourNR n d b = consumeNamedEventsWith b n readFileCatch
-    where readFileCatch e = Ex.catch (readFile0 e) (emitException e)
+    where readFileCatch e = (Ex.catch :: IO a -> (IOError -> IO a) -> IO a) (readFile0 e) (emitException e)
           readFile0 e = (rFile d . eventdata $ e) >>= produce n "ReadSource" (filename e) Persistent >>= return . (:[])
           emitException e ex = produce "Exception" "readFileBehaviour" n once (EString (show ex):eventdata e) >>= return . (:[])
           filename = (\(EString x) -> x) . head . eventdata
@@ -79,7 +79,7 @@ readFileBehaviourNR n d b = consumeNamedEventsWith b n readFileCatch
 --  data without a read instance, use 'decodeFileBehaviourNB'
 decodeFileBehaviour :: Binary a => String -> EData a -> Behaviour [EData a]
 decodeFileBehaviour n d b = consumeNamedEventsWith b n decodeFileCatch
-    where decodeFileCatch e = Ex.catch (decodeFile0 e) (emitException e)
+    where decodeFileCatch e = (Ex.catch :: IO a -> (IOError -> IO a) -> IO a) (decodeFile0 e) (emitException e)
           decodeFile0 e = (dFile0 d . eventdata $ e) >>= produce n "ReadSource" (filename e) Persistent >>= return . (:[])
           emitException e ex = produce "Exception" "decodeFileBehaviour" n once (EString (show ex):eventdata e) >>= return . (:[])
           filename = (\(EString x) -> x) . head . eventdata
@@ -102,7 +102,7 @@ decodeFileBehaviour n d b = consumeNamedEventsWith b n decodeFileCatch
 --  Event with \"Exception\" as the group.
 decodeFileBehaviourNB :: String -> EData a -> Behaviour [EData a]
 decodeFileBehaviourNB n d b = consumeNamedEventsWith b n decodeFileCatch
-    where decodeFileCatch e = Ex.catch (decodeFile0 e) (emitException e)
+    where decodeFileCatch e = (Ex.catch :: IO a -> (IOError -> IO a) -> IO a) (decodeFile0 e) (emitException e)
           decodeFile0 e = (dFile d . eventdata $ e) >>= (produce n "ReadSource" (filename e) Persistent) >>= return . (:[])
           emitException e ex = produce "Exception" "decodeFileBehaviourNB" n once (EString (show ex):eventdata e) >>= return . (:[])
           filename = (\(EString x) -> x) . head . eventdata
@@ -112,7 +112,7 @@ decodeFileBehaviourNB n d b = consumeNamedEventsWith b n decodeFileCatch
 --   the file named @filepath@.  Any error is placed on the bus with an Exception event with
 --    \"WriteFile\" as the source.
 writeFileBehaviourNS :: Behaviour [EData a]
-writeFileBehaviourNS b = consumeNamedEventsWith b "WriteFile" $ \e -> Ex.catch
+writeFileBehaviourNS b = consumeNamedEventsWith b "WriteFile" $ \e -> (Ex.catch :: IO a -> (IOError -> IO a) -> IO a)
                             (wFile . eventdata $ e)
                             (\ex -> produce "Exception" "writeFileBehaviourNS" "WriteFile" once (EString (show ex):eventdata e) >>= return . (:[]))
 
@@ -123,7 +123,7 @@ writeFileBehaviourNS b = consumeNamedEventsWith b "WriteFile" $ \e -> Ex.catch
 --
 --   NOTE: Attempting to encode 'EOther a' using this will raise an Exception.
 writeFileBehaviour :: Show a => Behaviour [EData a]
-writeFileBehaviour b = consumeNamedEventsWith b "WriteFile" $ \e -> Ex.catch
+writeFileBehaviour b = consumeNamedEventsWith b "WriteFile" $ \e -> (Ex.catch :: IO a -> (IOError -> IO a) -> IO a)
                             (wFile0 . eventdata $ e)
                             (\ex -> produce "Exception" "writeFileBehaviour" "WriteFile" once (EString (show ex):eventdata e) >>= return . (:[]))
 
@@ -134,7 +134,7 @@ writeFileBehaviour b = consumeNamedEventsWith b "WriteFile" $ \e -> Ex.catch
 --
 --  NOTE: Attempting to encode 'EOther a' using this will raise an Exception.
 encodeFileBehaviourNB :: Behaviour [EData a]
-encodeFileBehaviourNB b = consumeNamedEventsWith b "WriteBinary" $ \e -> Ex.catch
+encodeFileBehaviourNB b = consumeNamedEventsWith b "WriteBinary" $ \e -> (Ex.catch :: IO a -> (IOError -> IO a) -> IO a)
                             (wBinary . eventdata $ e)
                             (\ex -> produce "Exception" "encodeFileBehaviourNB" "WriteFile" once (EString (show ex):eventdata e) >>= return . (:[]))
 
@@ -145,7 +145,7 @@ encodeFileBehaviourNB b = consumeNamedEventsWith b "WriteBinary" $ \e -> Ex.catc
 --
 --  NOTE: This can only be used with an EData a where a has a 'Data.Binary.Binary' instance.
 encodeFileBehaviour :: Binary a => Behaviour [EData a]
-encodeFileBehaviour b = consumeNamedEventsWith b "WriteBinary" $ \e -> Ex.catch
+encodeFileBehaviour b = consumeNamedEventsWith b "WriteBinary" $ \e -> (Ex.catch :: IO a -> (IOError -> IO a) -> IO a)
                             (wBinary0 . eventdata $ e)
                             (\ex -> produce "Exception" "encodeFileBehaviour" "WriteFile" once (EString (show ex):eventdata e) >>= return . (:[]))
 
