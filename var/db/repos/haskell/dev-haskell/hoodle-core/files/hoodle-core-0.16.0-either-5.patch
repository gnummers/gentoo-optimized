diff --git a/src/Hoodle/Coroutine/File.hs b/src/Hoodle/Coroutine/File.hs
index e1012fa..40d0fdc 100644
--- a/src/Hoodle/Coroutine/File.hs
+++ b/src/Hoodle/Coroutine/File.hs
@@ -23,3 +23,3 @@ import           Control.Lens (at,view,set,over,(.~))
 import           Control.Monad.State hiding (mapM,mapM_,forM_)
-import           Control.Monad.Trans.Either
+import           Control.Monad.Trans.Except
 import           Control.Monad.Trans.Maybe (MaybeT(..))
@@ -506,3 +506,3 @@ fileLoadSVG = do
                   SelectState thdl' -> return thdl'
-                  _ -> (lift . EitherT . return . Left . Other) "fileLoadSVG"
+                  _ -> (lift . ExceptT . return . Left . Other) "fileLoadSVG"
         nthdl <- updateTempHoodleSelectM cvsid thdl ntpg pgnum 
diff --git a/src/Hoodle/Coroutine/HandwritingRecognition.hs b/src/Hoodle/Coroutine/HandwritingRecognition.hs
index 5a37e6c..01819fd 100644
--- a/src/Hoodle/Coroutine/HandwritingRecognition.hs
+++ b/src/Hoodle/Coroutine/HandwritingRecognition.hs
@@ -19,2 +19,3 @@ module Hoodle.Coroutine.HandwritingRecognition where
 
+import           Control.Error (hoistEither)
 import           Control.Lens (view,_1,_2)
@@ -22,3 +23,3 @@ import           Control.Monad ((<=<),guard,when)
 import           Control.Monad.Trans (liftIO)
-import           Control.Monad.Trans.Either
+import           Control.Monad.Trans.Except
 import           Data.Aeson as A
@@ -52,9 +53,9 @@ import           Prelude hiding (fst,snd,mapM_)
 
-getArray :: (Monad m) => Value -> EitherT String m (Vector Value)
-getArray (Array v) = right v
-getArray _ = left "Not an array"
+getArray :: (Monad m) => Value -> ExceptT String m (Vector Value)
+getArray (Array v) = return v
+getArray _ = throwE "Not an array"
 
-getArrayVal :: (Monad m) => Int -> Value -> EitherT String m Value
+getArrayVal :: (Monad m) => Int -> Value -> ExceptT String m Value
 getArrayVal n v = getArray v >>= \vs -> 
-                    maybe (left (show n ++ " is out of array")) right (vs !? n) 
+                    maybe (throwE (show n ++ " is out of array")) return (vs !? n) 
 
@@ -74,3 +75,3 @@ handwritingRecognitionDialog = do
         ExitSuccess -> do 
-          r_parse <- runEitherT $ do  
+          r_parse <- runExceptT $ do  
             v0 <- hoistEither (AP.parseOnly json (B.pack gresult))
@@ -82,3 +83,3 @@ handwritingRecognitionDialog = do
                 f _ = Nothing
-            (return . mapMaybe f . toList) v4
+            (return . Data.Maybe.mapMaybe f . toList) v4
       
diff --git a/src/Hoodle/Coroutine/Scroll.hs b/src/Hoodle/Coroutine/Scroll.hs
index aa25c4b..71601c0 100644
--- a/src/Hoodle/Coroutine/Scroll.hs
+++ b/src/Hoodle/Coroutine/Scroll.hs
@@ -18,2 +18,3 @@ module Hoodle.Coroutine.Scroll where
 
+import           Control.Error (hoistEither)
 import           Control.Lens (view,over,_1)
@@ -21,3 +22,3 @@ import           Control.Monad
 import           Control.Monad.State 
-import           Control.Monad.Trans.Either
+import           Control.Monad.Trans.Except
 -- import qualified Graphics.UI.Gtk as Gtk
diff --git a/src/Hoodle/Coroutine/TextInput.hs b/src/Hoodle/Coroutine/TextInput.hs
index 3c7cc1f..089d813 100644
--- a/src/Hoodle/Coroutine/TextInput.hs
+++ b/src/Hoodle/Coroutine/TextInput.hs
@@ -24,3 +24,3 @@ import           Control.Lens (_2,_3,view,(%~),(^.),(.~))
 import           Control.Monad.State hiding (mapM_, forM_)
-import           Control.Monad.Trans.Either
+import           Control.Monad.Trans.Except
 import           Control.Monad.Trans.Maybe
@@ -230,3 +230,3 @@ dbusNetworkInput txt = do
 
-check :: String -> IO (ExitCode,String) -> EitherT String IO ()
+check :: String -> IO (ExitCode,String) -> ExceptT String IO ()
 check msg act = do
@@ -234,4 +234,4 @@ check msg act = do
     case er of 
-      Left (Control.Exception.SomeException excp) -> left (show excp)
-      Right (ecode,str) -> case ecode of ExitSuccess -> right () ; _ -> left (msg ++ ":" ++ str)
+      Left (Control.Exception.SomeException excp) -> throwE (show excp)
+      Right (ecode,str) -> case ecode of ExitSuccess -> return () ; _ -> throwE (msg ++ ":" ++ str)
 
@@ -246,3 +246,3 @@ makeLaTeXSVG (x0,y0) mdim txt = do
     B.writeFile (tfilename <.> "tex") (TE.encodeUtf8 txt)
-    r <- runEitherT $ do 
+    r <- runExceptT $ do 
       check "error during xelatex" $ do 
@@ -293,3 +293,3 @@ svgInsert (txt,cmd) (svgbstr,BBox (x0,y0) (x1,y1)) = do
                 SelectState thdl' -> return thdl'
-                _ -> (lift . EitherT . return . Left . Other) "svgInsert"
+                _ -> (lift . ExceptT . return . Left . Other) "svgInsert"
       nthdl <- updateTempHoodleSelectM cid thdl ntpg pgnum 
@@ -416,3 +416,3 @@ insertItemAt mpcoord ritm = do
         SelectState thdl' -> return thdl'
-        _ -> (lift . EitherT . return . Left . Other) "insertItemAt"
+        _ -> (lift . ExceptT . return . Left . Other) "insertItemAt"
       nthdl <- updateTempHoodleSelectM cid thdl ntpg pgnum 
diff --git a/src/Hoodle/Type/Coroutine.hs b/src/Hoodle/Type/Coroutine.hs
index da440d8..c408880 100644
--- a/src/Hoodle/Type/Coroutine.hs
+++ b/src/Hoodle/Type/Coroutine.hs
@@ -24,2 +24,3 @@ import           Control.Applicative
 import           Control.Concurrent
+import           Control.Error (hoistEither)
 import           Control.Lens ((^.),(.~),(%~))
@@ -27,3 +28,3 @@ import           Control.Monad.Reader
 import           Control.Monad.State
-import           Control.Monad.Trans.Either 
+import           Control.Monad.Trans.Except 
 -- from hoodle-platform
@@ -69,3 +70,3 @@ world xstate initmc = ReaderT staction
     staction req = runStateT erract xstate >> return ()
-      where erract = do r <- runEitherT (go initmc req) 
+      where erract = do r <- runExceptT (go initmc req) 
                         case r of 
