--- happstack-authenticate-2.3.4.11-orig/Happstack/Authenticate/OpenId/Core.hs	2018-03-30 01:51:31.000000000 +1100
+++ happstack-authenticate-2.3.4.11/Happstack/Authenticate/OpenId/Core.hs	2018-10-12 15:53:58.708242527 +1100
@@ -149,7 +149,7 @@
                       mRealm <- query' openIdState GetOpenIdRealm
                       ok $ toJSONSuccess mRealm
                  , do method POST
-                      (Just (Body body)) <- takeRequestBody =<< askRq
+                      ~(Just (Body body)) <- takeRequestBody =<< askRq
                       case Aeson.decode body of
                         Nothing   -> badRequest $ toJSONError (CoreError JSONDecodeFailed)
                         (Just (SetRealmData mRealm)) ->
--- happstack-authenticate-2.3.4.11-orig/Happstack/Authenticate/Password/Core.hs	2018-03-30 01:51:31.000000000 +1100
+++ happstack-authenticate-2.3.4.11/Happstack/Authenticate/Password/Core.hs	2018-10-12 15:54:20.385346625 +1100
@@ -198,7 +198,7 @@
       -> m Response
 token authenticateState authenticateConfig passwordState =
   do method POST
-     (Just (Body body)) <- takeRequestBody =<< askRq
+     ~(Just (Body body)) <- takeRequestBody =<< askRq
      case Aeson.decode body of
        Nothing   -> badRequest $ toJSONError (CoreError JSONDecodeFailed)
        (Just (UserPass username password)) ->
@@ -250,7 +250,7 @@
 -- FIXME: check that password and password confirmation match
 account authenticateState passwordState authenticateConfig passwordConfig Nothing =
   do method POST
-     (Just (Body body)) <- takeRequestBody =<< askRq
+     ~(Just (Body body)) <- takeRequestBody =<< askRq
      case Aeson.decode body of
        Nothing               -> badRequest (Left $ CoreError JSONDecodeFailed)
        (Just newAccount) ->
@@ -281,7 +281,7 @@
             (False, Nothing) -> Nothing
             (_, Just email) -> if Email.isValid (Text.encodeUtf8 (email ^. unEmail)) then Nothing else Just $ CoreError InvalidEmail
 
--- handle updates to /account/<userId>/*
+-- handle updates to /account/<userId>/ *
 account authenticateState passwordState authenticateConfig passwordConfig (Just (uid, url)) =
   case url of
     Password ->
@@ -334,7 +334,7 @@
                      -> m (Either PasswordError Text)
 passwordRequestReset passwordConfig authenticateState passwordState =
   do method POST
-     (Just (Body body)) <- takeRequestBody =<< askRq
+     ~(Just (Body body)) <- takeRequestBody =<< askRq
      case Aeson.decode body of
        Nothing   -> badRequest $ Left $ CoreError JSONDecodeFailed
        (Just (RequestResetPasswordData username)) ->
@@ -401,7 +401,7 @@
               -> m (Either PasswordError Text)
 passwordReset authenticateState passwordState passwordConfig =
   do method POST
-     (Just (Body body)) <- takeRequestBody =<< askRq
+     ~(Just (Body body)) <- takeRequestBody =<< askRq
      case Aeson.decode body of
        Nothing -> badRequest $ Left $ CoreError JSONDecodeFailed
        (Just (ResetPasswordData password passwordConfirm resetToken)) ->
