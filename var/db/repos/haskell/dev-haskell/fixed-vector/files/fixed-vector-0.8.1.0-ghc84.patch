--- a/Data/Vector/Fixed.hs
+++ b/Data/Vector/Fixed.hs
@@ -183,3 +183,3 @@ import Prelude (Show(..),Eq(..),Ord(..),Functor(..),id,(.),($),seq,undefined)
 import Prelude (Char)
-
+import qualified Data.Semigroup as S
 
@@ -306,2 +306,7 @@ instance Arity n => T.Traversable (VecList n) where
   traverse  = traverse
+
+instance (Arity n, Monoid a) => S.Semigroup (VecList n a) where
+  (<>) = zipWith mappend
+  {-# INLINE (<>) #-}
+
 instance (Arity n, Monoid a) => Monoid (VecList n a) where
@@ -335,2 +340,6 @@ instance T.Traversable Only where
   traverse f (Only a) = Only <$> f a
+
+instance Monoid a => S.Semigroup (Only a) where
+  Only a <> Only b = Only $ mappend a b
+
 instance Monoid a => Monoid (Only a) where
--- a/Data/Vector/Fixed/Boxed.hs
+++ b/Data/Vector/Fixed/Boxed.hs
@@ -35,2 +35,3 @@ import Data.Vector.Fixed.Mutable
 import qualified Data.Vector.Fixed.Cont as C
+import qualified Data.Semigroup as S
 
@@ -146,2 +147,6 @@ instance (Arity n, Ord a) => Ord (Vec n a) where
 
+instance (Arity n, Monoid a) => S.Semigroup (Vec n a) where
+  (<>) = zipWith mappend
+  {-# INLINE (<>) #-}
+
 instance (Arity n, Monoid a) => Monoid (Vec n a) where
--- a/Data/Vector/Fixed/Primitive.hs
+++ b/Data/Vector/Fixed/Primitive.hs
@@ -39,2 +39,3 @@ import Data.Vector.Fixed.Mutable
 import qualified Data.Vector.Fixed.Cont as C
+import qualified Data.Semigroup as S
 
@@ -126,2 +127,6 @@ instance (Arity n, Prim a, Ord a) => Ord (Vec n a) where
 
+instance (Arity n, Prim a, Monoid a) => S.Semigroup (Vec n a) where
+  (<>) = zipWith mappend
+  {-# INLINE (<>) #-}
+
 instance (Arity n, Prim a, Monoid a) => Monoid (Vec n a) where
--- a/Data/Vector/Fixed/Storable.hs
+++ b/Data/Vector/Fixed/Storable.hs
@@ -43,2 +43,3 @@ import Data.Vector.Fixed.Mutable
 import qualified Data.Vector.Fixed.Cont as C
+import qualified Data.Semigroup as S
 
@@ -170,2 +171,6 @@ instance (Arity n, Storable a, Ord a) => Ord (Vec n a) where
 
+instance (Arity n, Storable a, Monoid a) => S.Semigroup (Vec n a) where
+  (<>) = zipWith mappend
+  {-# INLINE (<>)  #-}
+
 instance (Arity n, Storable a, Monoid a) => Monoid (Vec n a) where
--- a/Data/Vector/Fixed/Unboxed.hs
+++ b/Data/Vector/Fixed/Unboxed.hs
@@ -42,2 +42,3 @@ import qualified Data.Vector.Fixed.Cont      as C
 import qualified Data.Vector.Fixed.Primitive as P
+import qualified Data.Semigroup as S
 
@@ -103,2 +104,6 @@ instance (Unbox n a, Ord a) => Ord (Vec n a) where
 
+instance (Unbox n a, Monoid a) => S.Semigroup (Vec n a) where
+  (<>) = zipWith mappend
+  {-# INLINE (<>) #-}
+
 instance (Unbox n a, Monoid a) => Monoid (Vec n a) where
