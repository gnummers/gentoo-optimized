diff --git a/src/C2HS.hs b/src/C2HS.hs
index 706e8fe..2547e69 100644
--- a/src/C2HS.hs
+++ b/src/C2HS.hs
@@ -161,13 +161,13 @@ nothingIfNull  = nothingIf (== nullPtr)
 -- Given a list of enumeration values that represent bit masks, combine these
 -- masks using bitwise disjunction.
 --
-combineBitMasks :: (Enum a, Bits b) => [a] -> b
+combineBitMasks :: (Enum a, Num b, Bits b) => [a] -> b
 combineBitMasks = foldl (.|.) 0 . map (fromIntegral . fromEnum)
 
 -- Tests whether the given bit mask is contained in the given bit pattern
 -- (i.e., all bits set in the mask are also set in the pattern).
 --
-containsBitMask :: (Bits a, Enum b) => a -> b -> Bool
+containsBitMask :: (Num a, Bits a, Enum b) => a -> b -> Bool
 bits `containsBitMask` bm = let bm' = fromIntegral . fromEnum $ bm
 			    in
 			    bm' .&. bits == bm'
@@ -178,7 +178,7 @@ bits `containsBitMask` bm = let bm' = fromIntegral . fromEnum $ bm
 --   combined yield the bit pattern, instead all contained bit masks are
 --   produced.
 --
-extractBitMasks :: (Bits a, Enum b, Bounded b) => a -> [b]
+extractBitMasks :: (Num a, Bits a, Enum b, Bounded b) => a -> [b]
 extractBitMasks bits =
   [bm | bm <- [minBound..maxBound], bits `containsBitMask` bm]
 
