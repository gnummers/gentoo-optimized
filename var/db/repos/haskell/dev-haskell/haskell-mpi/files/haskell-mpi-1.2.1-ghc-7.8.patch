diff --git a/src/Control/Parallel/MPI/Internal.chs b/src/Control/Parallel/MPI/Internal.chs
index 0ece087..1851d9f 100644
--- a/src/Control/Parallel/MPI/Internal.chs
+++ b/src/Control/Parallel/MPI/Internal.chs
@@ -111,6 +111,7 @@ import Data.Maybe (fromMaybe)
 import Control.Monad (liftM, unless)
 import Control.Applicative ((<$>), (<*>))
 import Control.Exception
+import System.IO.Unsafe
 
 {# context prefix = "MPI" #}
 
@@ -241,11 +242,11 @@ discard _ = return ()
 getProcessorName :: IO String
 getProcessorName = do
   allocaBytes (fromIntegral maxProcessorName) $ \ptr -> do
-    len <- getProcessorName' ptr
+    len <- getProcessorName_ ptr
     peekCStringLen (ptr, cIntConv len)
   where
-    getProcessorName' = {# fun unsafe Get_processor_name as getProcessorName_
-                           {id `Ptr CChar', alloca- `CInt' peekIntConv*} -> `()' checkError*- #}
+    {# fun unsafe Get_processor_name as getProcessorName_
+       {id `Ptr CChar', alloca- `CInt' peekIntConv*} -> `()' checkError*- #}
 
 -- | MPI implementation version
 data Version =
@@ -258,11 +259,11 @@ instance Show Version where
 -- | Which MPI version the code is running on.
 getVersion :: IO Version
 getVersion = do
-   (version, subversion) <- getVersion'
+   (version, subversion) <- getVersion_
    return $ Version version subversion
   where
-    getVersion' = {# fun unsafe Get_version as getVersion_
-                     {alloca- `Int' peekIntConv*, alloca- `Int' peekIntConv*} -> `()' checkError*- #}
+    {# fun unsafe Get_version as getVersion_
+        {alloca- `Int' peekIntConv*, alloca- `Int' peekIntConv*} -> `()' checkError*- #}
 
 -- | Supported MPI implementations
 data Implementation = MPICH2 | OpenMPI deriving (Eq,Show)
@@ -305,14 +306,14 @@ commGetAttr comm key = do
   isInitialized <- initialized
   if isInitialized then do
     alloca $ \ptr -> do
-      found <- commGetAttr' comm key (castPtr ptr)
+      found <- commGetAttr_ comm key (castPtr ptr)
       if found then do ptr2 <- peek ptr
                        Just <$> peek ptr2
                else return Nothing
     else return Nothing
       where
-        commGetAttr' = {# fun unsafe Comm_get_attr as commGetAttr_
-                         {fromComm `Comm', cIntConv `Int', id `Ptr ()', alloca- `Bool' peekBool*} -> `()' checkError*- #}
+        {# fun unsafe Comm_get_attr as commGetAttr_
+          {fromComm `Comm', cIntConv `Int', id `Ptr ()', alloca- `Bool' peekBool*} -> `()' checkError*- #}
 
 -- | Maximum tag value supported by the current MPI implementation. Corresponds to the value of standard MPI
 --   attribute @MPI_TAG_UB@.
@@ -410,11 +411,11 @@ getCount :: Comm -> Rank -> Tag -> Datatype -> IO Int
 getCount comm rank tag datatype =
   alloca $ \statusPtr -> do
     probe rank tag comm statusPtr
-    cnt <- getCount' statusPtr datatype
+    cnt <- getCount_ statusPtr datatype
     return $ fromIntegral cnt
   where
-    getCount' = {# fun unsafe Get_count as getCount_
-           {castPtr `Ptr Status', fromDatatype `Datatype', alloca- `CInt' peekIntConv*} -> `()' checkError*- #}
+    {# fun unsafe Get_count as getCount_
+        {castPtr `Ptr Status', fromDatatype `Datatype', alloca- `CInt' peekIntConv*} -> `()' checkError*- #}
 
 
 {-| Send the values (as specified by @BufferPtr@, @Count@, @Datatype@) to
@@ -515,15 +516,15 @@ test request = withRequest request testPtr
 -- set to point to @requestNull@.
 testPtr :: Ptr Request -> IO (Maybe Status)
 testPtr reqPtr = do
-  (flag, status) <- testPtr' reqPtr
+  (flag, status) <- testPtr_ reqPtr
   request' <- peek reqPtr
   if flag
     then do if request' == requestNull
                then return $ Just status
                else error "testPtr: request modified, but not set to MPI_REQUEST_NULL!"
     else return Nothing
-  where testPtr' = {# fun unsafe Test as testPtr_
-       {castPtr `Ptr Request', alloca- `Bool' peekBool*, allocaCast- `Status' peekCast*} -> `()' checkError*- #}
+  where {# fun unsafe Test as testPtr_
+            {castPtr `Ptr Request', alloca- `Bool' peekBool*, allocaCast- `Status' peekCast*} -> `()' checkError*- #}
 
 -- | Cancel a pending communication request.
 -- This function corresponds to @MPI_Cancel@. Sets pointer to point to @requestNull@.
@@ -732,43 +733,43 @@ every millisecond, the value returned by @wtick@ should be 10^(-3).
 
 -- | Returns the rank of the calling process in the given group. This function corresponds to @MPI_Group_rank@.
 groupRank :: Group -> Rank
-groupRank = unsafePerformIO <$> groupRank'
-  where groupRank' = {# fun unsafe Group_rank as groupRank_
-                        {fromGroup `Group', alloca- `Rank' peekIntConv*} -> `()' checkError*- #}
+groupRank = unsafePerformIO <$> groupRank_
+  where {# fun unsafe Group_rank as groupRank_
+          {fromGroup `Group', alloca- `Rank' peekIntConv*} -> `()' checkError*- #}
 
 -- | Returns the size of a group. This function corresponds to @MPI_Group_size@.
 groupSize :: Group -> Int
-groupSize = unsafePerformIO <$> groupSize'
-  where groupSize' = {# fun unsafe Group_size as groupSize_
-                        {fromGroup `Group', alloca- `Int' peekIntConv*} -> `()' checkError*- #}
+groupSize = unsafePerformIO <$> groupSize_
+  where {# fun unsafe Group_size as groupSize_
+          {fromGroup `Group', alloca- `Int' peekIntConv*} -> `()' checkError*- #}
 
 -- | Constructs the union of two groups: all the members of the first group, followed by all the members of the 
 -- second group that do not appear in the first group. This function corresponds to @MPI_Group_union@.
 groupUnion :: Group -> Group -> Group
-groupUnion g1 g2 = unsafePerformIO $ groupUnion' g1 g2
-  where groupUnion' = {# fun unsafe Group_union as groupUnion_
-                         {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
+groupUnion g1 g2 = unsafePerformIO $ groupUnion_ g1 g2
+  where {# fun unsafe Group_union as groupUnion_
+          {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
 
 -- | Constructs a new group which is the intersection of two groups. This function corresponds to @MPI_Group_intersection@.
 groupIntersection :: Group -> Group -> Group
-groupIntersection g1 g2 = unsafePerformIO $ groupIntersection' g1 g2
-  where groupIntersection' = {# fun unsafe Group_intersection as groupIntersection_
-                                {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
+groupIntersection g1 g2 = unsafePerformIO $ groupIntersection_ g1 g2
+  where {# fun unsafe Group_intersection as groupIntersection_
+          {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
 
 -- | Constructs a new group which contains all the elements of the first group which are not in the second group. 
 -- This function corresponds to @MPI_Group_difference@.
 groupDifference :: Group -> Group -> Group
-groupDifference g1 g2 = unsafePerformIO $ groupDifference' g1 g2
-  where groupDifference' = {# fun unsafe Group_difference as groupDifference_
-                              {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
+groupDifference g1 g2 = unsafePerformIO $ groupDifference_ g1 g2
+  where {# fun unsafe Group_difference as groupDifference_
+          {fromGroup `Group', fromGroup `Group', alloca- `Group' peekGroup*} -> `()' checkError*- #}
 
 -- | Compares two groups. Returns 'MPI_IDENT' if the order and members of the two groups are the same,
 -- 'MPI_SIMILAR' if only the members are the same, and 'MPI_UNEQUAL' otherwise.
 groupCompare :: Group -> Group -> ComparisonResult
-groupCompare g1 g2 = unsafePerformIO $ groupCompare' g1 g2
+groupCompare g1 g2 = unsafePerformIO $ groupCompare_ g1 g2
   where
-    groupCompare' = {# fun unsafe Group_compare as groupCompare_
-                       {fromGroup `Group', fromGroup `Group', alloca- `ComparisonResult' peekEnum*} -> `()' checkError*- #}
+    {# fun unsafe Group_compare as groupCompare_
+      {fromGroup `Group', fromGroup `Group', alloca- `ComparisonResult' peekEnum*} -> `()' checkError*- #}
 
 -- Technically it might make better sense to make the second argument a Set rather than a list
 -- but the order is significant in the groupIncl function (the other function, not this one).
@@ -803,11 +804,11 @@ groupTranslateRanks group1 ranks group2 =
       let (rankIntList :: [Int]) = map fromEnum ranks
       withArrayLen rankIntList $ \size ranksPtr ->
          allocaArray size $ \resultPtr -> do
-            groupTranslateRanks' group1 (cFromEnum size) (castPtr ranksPtr) group2 resultPtr
+            groupTranslateRanks_ group1 (cFromEnum size) (castPtr ranksPtr) group2 resultPtr
             map toRank <$> peekArray size resultPtr
   where
-    groupTranslateRanks' = {# fun unsafe Group_translate_ranks as groupTranslateRanks_
-                              {fromGroup `Group', id `CInt', id `Ptr CInt', fromGroup `Group', id `Ptr CInt'} -> `()' checkError*- #}
+    {# fun unsafe Group_translate_ranks as groupTranslateRanks_
+      {fromGroup `Group', id `CInt', id `Ptr CInt', fromGroup `Group', id `Ptr CInt'} -> `()' checkError*- #}
 
 withRanksAsInts ranks f = withArrayLen (map fromEnum ranks) $ \size ptr -> f (cIntConv size, castPtr ptr)
 
@@ -853,9 +854,8 @@ mpiUndefined = unsafePerformIO $ peek mpiUndefined_
 
 -- | Return the number of bytes used to store an MPI @Datatype@.
 typeSize :: Datatype -> Int
-typeSize = unsafePerformIO . typeSize'
+typeSize = unsafePerformIO . typeSize_
   where
-    typeSize' =
       {# fun unsafe Type_size as typeSize_
          {fromDatatype `Datatype', alloca- `Int' peekIntConv*} -> `()' checkError*- #}
 
@@ -879,7 +879,7 @@ typeSize = unsafePerformIO . typeSize'
 -- This function corresponds to @MPI_Abort@.
 abort :: Comm -> Int -> IO ()
 abort comm code =
-   abort' comm (toErrorCode code)
+   abort_ comm (toErrorCode code)
    where
    toErrorCode :: Int -> CInt
    toErrorCode i
@@ -888,7 +888,7 @@ abort comm code =
       | i > (fromIntegral (maxBound :: CInt)) = maxBound
       | otherwise = cIntConv i
 
-   abort' = {# fun unsafe Abort as abort_ {fromComm `Comm', id `CInt'} -> `()' checkError*- #}
+   {# fun unsafe Abort as abort_ {fromComm `Comm', id `CInt'} -> `()' checkError*- #}
 
 
 type MPIDatatype = {# type MPI_Datatype #}
@@ -1073,19 +1073,19 @@ infoNull = unsafePerformIO $ peekInfo infoNull_
 {-| Gets the specified key -}
 infoGet :: Info -> String -> IO (Maybe String)
 infoGet info key = do
-  (len, found) <- infoGetValuelen' info key 
+  (len, found) <- infoGetValuelen_ info key 
   -- len+1 is required to allow for the terminating \NULL
   if found/=0 then allocaBytes (fromIntegral len + 1)
                    (\bufferPtr -> do
-                       found <- infoGet' info key (len+1) bufferPtr
+                       found <- infoGet_ info key (len+1) bufferPtr
                        if found/=0 then Just <$> peekCStringLen (bufferPtr, fromIntegral len)
                                    else return Nothing)
            else return Nothing
 
-infoGetValuelen' = {# fun unsafe Info_get_valuelen as infoGetValuelen_
+{# fun unsafe Info_get_valuelen as infoGetValuelen_
        {fromInfo `Info', `String', alloca- `CInt' peek*, alloca- `CInt' peek* } -> `()' checkError*- #}
 
-infoGet' = {# fun unsafe Info_get as infoGet_
+{# fun unsafe Info_get as infoGet_
             {fromInfo `Info', `String', id `CInt', castPtr `Ptr CChar', alloca- `CInt' peek*} -> `()' checkError*- #}
 
 
diff --git a/src/Control/Parallel/MPI/Utils.hs b/src/Control/Parallel/MPI/Utils.hs
index 06c900a..0439337 100644
--- a/src/Control/Parallel/MPI/Utils.hs
+++ b/src/Control/Parallel/MPI/Utils.hs
@@ -1,6 +1,7 @@
 module Control.Parallel.MPI.Utils (asBool, asInt, asEnum, debugOut) where
 
 import C2HS
+import qualified System.IO.Unsafe as U
 
 asBool :: (Ptr CInt -> IO ()) -> IO Bool
 asBool f =
@@ -24,6 +25,6 @@ asEnum f =
     return $ cToEnum res
 
 debugOut :: Show a => a -> Bool
-debugOut x = unsafePerformIO $ do
+debugOut x = U.unsafePerformIO $ do
    print x
    return False
