Port to ghc-7.8

Which changed:
 - internal representation of <# comparison from Bool to Int#
 - Typeable derivation mechanism is completely on compiler's
   side
 - explicit strictness annotation for unlifted bindings
   (they must be lazy by default, but it's not true for unlifteds)

Github-bug: https://github.com/gentoo-haskell/gentoo-haskell/issues/357
diff --git a/Data/Tree/AVL/BinPath.hs b/Data/Tree/AVL/BinPath.hs
index 995630b..793a425 100644
--- a/Data/Tree/AVL/BinPath.hs
+++ b/Data/Tree/AVL/BinPath.hs
@@ -36,13 +36,14 @@ import GHC.Base
 -- Test path LSB
 bit0 :: Int# -> Bool
 {-# INLINE bit0 #-}
-bit0 p = word2Int# (and# (int2Word# p) (int2Word# 1#)) ==# 1#
+bit0 p = IS_TRUE(word2Int# (and# (int2Word# p) (int2Word# 1#)) ==# 1#)
 
 -- A pseudo comparison..
 -- N.B. If the path was bit reversed, this could be a straight comparison.??
 sel :: Int# -> Ordering
 {-# INLINE sel #-}
-sel p = if p ==# 0# then EQ
+sel p = if IS_TRUE(p ==# 0#)
+                    then EQ
                     else if bit0 p then LT -- Left  if Bit 0 == 1
                                    else GT -- Right if Bit 0 == 0
 
diff --git a/Data/Tree/AVL/Internals/HJoin.hs b/Data/Tree/AVL/Internals/HJoin.hs
index 1b9c6cc..fe0a8af 100644
--- a/Data/Tree/AVL/Internals/HJoin.hs
+++ b/Data/Tree/AVL/Internals/HJoin.hs
@@ -34,7 +34,8 @@ import GHC.Base
 joinH'
        :: AVL e -> UINT -> AVL e -> UINT -> AVL e
 joinH' l hl r hr
-                 = if hl LEQ hr then let d = SUBINT(hr,hl) in joinHL d l r
+                 = if IS_TRUE(hl LEQ hr)
+                                then let d = SUBINT(hr,hl) in joinHL d l r
                                 else let d = SUBINT(hl,hr) in joinHR d l r
 
 -- hr >= hl, join l to left subtree of r.
@@ -159,14 +160,16 @@ spliceH l hl b r hr =
 -- returning another tree of known relative height.
 spliceHL :: AVL e -> UINT -> e -> AVL e -> UINT -> UBT2(AVL e,UINT)
 spliceHL l hl b r hr = let d = SUBINT(hr,hl)
-                       in if d EQL L(1) then UBT2(N l b r, INCINT1(hr))
+                       in if IS_TRUE(d EQL L(1))
+                                        then UBT2(N l b r, INCINT1(hr))
                                         else spliceHL_ hr d l b r
 
 -- Splice two trees of known relative height where hl>hr, using the supplied bridging element,
 -- returning another tree of known relative height.
 spliceHR :: AVL e -> UINT -> e -> AVL e -> UINT -> UBT2(AVL e,UINT)
 spliceHR l hl b r hr = let d = SUBINT(hl,hr)
-                       in if d EQL L(1) then UBT2(P l b r, INCINT1(hl))
+                       in if IS_TRUE(d EQL L(1))
+                                        then UBT2(P l b r, INCINT1(hl))
                                         else spliceHR_ hl d l b r
 
 -- Splice two trees of known relative height where hr>hl+1, using the supplied bridging element,
diff --git a/Data/Tree/AVL/Join.hs b/Data/Tree/AVL/Join.hs
index 2e30e45..6520b58 100644
--- a/Data/Tree/AVL/Join.hs
+++ b/Data/Tree/AVL/Join.hs
@@ -97,7 +97,7 @@ mkHAVLS ( E       :ts) = mkHAVLS ts                -- Discard empty trees
 mkHAVLS ((N l e r):ts) = case popHLN l e r of      -- Never a singlton with N
                          UBT3(e_,t,ht) -> H e_ t ht (mkHAVLS ts)
 mkHAVLS ((Z l e r):ts) = case popHLZ l e r of
-                         UBT3(e_,t,ht) -> if ht EQL L(0)
+                         UBT3(e_,t,ht) -> if IS_TRUE(ht EQL L(0))
                                           then mkHAVLS_ e_ ts                -- Deal with singleton
                                           else H e_ t ht (mkHAVLS ts)        -- Otherwise treat as normal
 mkHAVLS ((P l e r):ts) = case popHLP l e r of      -- Never a singlton with P
diff --git a/Data/Tree/AVL/Size.hs b/Data/Tree/AVL/Size.hs
index ecc944f..cbaf70d 100644
--- a/Data/Tree/AVL/Size.hs
+++ b/Data/Tree/AVL/Size.hs
@@ -129,7 +129,7 @@ fas2 _  E        = error "AddSize: Bad Tree." -- impossible
 --
 -- Complexity: O(min n c) where n is tree size and c is clip value.
 clipSize ::  Int -> AVL e -> Maybe Int
-clipSize ASINT(c) t = let c_ = cSzh c t in if   c_ LTN L(0)
+clipSize ASINT(c) t = let c_ = cSzh c t in if IS_TRUE(c_ LTN L(0))
                                            then Nothing
                                            else Just ASINT(SUBINT(c,c_))
 -- First entry calculates initial height
@@ -150,21 +150,29 @@ cSzh c (P l _ r) = case addHeight L(2) r of
                    h    -> cSzNP  c h r l
 -- Parent Height = 3 !!
 cSzNP3 :: UINT -> AVL e -> UINT
-cSzNP3 c t = if c LTN L(4) then L(-1) else cSz2 DECINT2(c) t
+cSzNP3 c t = if IS_TRUE(c LTN L(4))
+                             then L(-1)
+                             else cSz2 DECINT2(c) t
 cSzZ3  :: UINT -> AVL e -> AVL e -> UINT
-cSzZ3  c l r = if c LTN L(5) then L(-1)
+cSzZ3  c l r = if IS_TRUE(c LTN L(5))
+                             then L(-1)
                              else let c_ = cSz2 DECINT1(c) l
-                                  in if c_ LTN L(2) then L(-1)
+                                  in if IS_TRUE(c_ LTN L(2))
+                                                    then L(-1)
                                                     else cSz2 c_ r
 -- Parent Height (h) >= 4 !!
 cSzNP,cSzZ :: UINT -> UINT -> AVL e -> AVL e -> UINT
-cSzNP c h l r = if c LTN L(7) then L(-1)
+cSzNP c h l r = if IS_TRUE(c LTN L(7))
+                              then L(-1)
                               else let c_ = cSzG2 DECINT1(c) DECINT2(h) l       -- (h-2) >= 2
-                                   in if c_ LTN L(4) then L(-1)
+                                   in if IS_TRUE(c_ LTN L(4))
+                                                     then L(-1)
                                                      else cSzG3 c_ DECINT1(h) r -- (h-1) >= 3
-cSzZ c h l r = if c LTN L(9) then L(-1)
+cSzZ c h l r = if IS_TRUE(c LTN L(9))
+                             then L(-1)
                              else let c_ = cSzG3 DECINT1(c) DECINT1(h) l        -- (h-1) >= 3
-                                  in if c_ LTN L(4) then L(-1)
+                                  in if IS_TRUE(c_ LTN L(4))
+                                                    then L(-1)
                                                     else cSzG3 c_ DECINT1(h) r  -- (h-1) >= 3
 -- h>=2 !!
 cSzG2 :: UINT -> UINT -> AVL e -> UINT
diff --git a/Data/Tree/AVL/Split.hs b/Data/Tree/AVL/Split.hs
index 3ddb0fd..944182e 100644
--- a/Data/Tree/AVL/Split.hs
+++ b/Data/Tree/AVL/Split.hs
@@ -613,7 +613,7 @@ rotateByL__ t n = case splitL n t L(0) of -- Tree Heights are relative!!
                   More L(0)       -> t
                   More m          -> let s  = SUBINT(n,m)      -- Actual size of tree, > 0!!
                                          n_ = _MODULO_(n,s)    -- Actual shift required, 0..s-1
-                                     in if ADDINT(n_,n_) LEQ s
+                                     in if IS_TRUE(ADDINT(n_,n_) LEQ s)
                                         then rotateByL_  t n_            -- n_ may be 0 !!
                                         else rotateByR__ t SUBINT(s,n_)  -- (s-n_) can't be 0
                   All (HAVL l hl) (HAVL r hr) -> joinH' r hr l hl
@@ -642,7 +642,7 @@ rotateByR__ t n = case splitR n t L(0) of -- Tree Heights are relative!!
                   More L(0)       -> t
                   More m          -> let s  = SUBINT(n,m)    -- Actual size of tree, > 0!!
                                          n_ = _MODULO_(n,s)    -- Actual shift required, 0..s-1
-                                     in if ADDINT(n_,n_) LEQ s
+                                     in if IS_TRUE(ADDINT(n_,n_) LEQ s)
                                         then rotateByR_  t n_         -- n_ may be 0 !!
                                         else rotateByL__ t SUBINT(s,n_)  -- (s-n_) can_t be 0
                   All (HAVL l hl) (HAVL r hr) -> joinH' r hr l hl
diff --git a/Data/Tree/AVL/Test/AllTests.hs b/Data/Tree/AVL/Test/AllTests.hs
index 03f518d..635d83d 100644
--- a/Data/Tree/AVL/Test/AllTests.hs
+++ b/Data/Tree/AVL/Test/AllTests.hs
@@ -1,4 +1,5 @@
 {-# OPTIONS -fglasgow-exts #-}
+{-# LANGUAGE BangPatterns, CPP #-}
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Data.Tree.AVL.Test.AllTests
@@ -546,7 +547,7 @@ testJoinHAVL = let trees = take num $ concatMap (\(_,ts) -> ts) allAVL
                in do title "joinHAVL"
                      putStrLn $ "Testing " ++ show (num*num) ++ " tree pairs.."
                      if and [test l $ map (ls+) r | (l,ls) <- trees, (r,_) <- trees] then passed else failed
-                  where test l r = let (HAVL j hj) = (toHAVL l) `joinHAVL` (toHAVL r)
+                  where test l r = let !(HAVL j hj) = (toHAVL l) `joinHAVL` (toHAVL r)
                                    in  case checkHeight j of
                                        Nothing  -> False
                                        Just hj_ -> (ASINT(hj) == hj_) && (asListL j == l `toListL` asListL r)
@@ -1463,7 +1464,7 @@ testShowReadEq = do title "ShowReadEq"
 testReadPath :: IO ()
 testReadPath = do title "ReadPath"
                   if all test [0..100] then passed else failed
-               where test n = let ASINT(n_)=n in (n == readPath n_ pathTree)
+               where test n = let !ASINT(n_)=n in (n == readPath n_ pathTree)
 
 title :: String -> IO ()
 title str = let titl = "* Test " ++ str ++ " *"
diff --git a/Data/Tree/AVL/Test/Utils.hs b/Data/Tree/AVL/Test/Utils.hs
index e445d37..904882a 100644
--- a/Data/Tree/AVL/Test/Utils.hs
+++ b/Data/Tree/AVL/Test/Utils.hs
@@ -48,14 +48,16 @@ pathTree = Z l 0 r where
 --
 -- Complexity: O(n)
 isBalanced :: AVL e -> Bool
-isBalanced t = not (cH t EQL L(-1))
+isBalanced t = not (IS_TRUE(cH t EQL L(-1)))
 
 -- | Verify that a tree is balanced and the BF of each node is correct.
 -- Returns (Just height) if so, otherwise Nothing.
 --
 -- Complexity: O(n)
 checkHeight :: AVL e -> Maybe Int
-checkHeight t = let ht = cH t in if ht EQL L(-1) then Nothing else Just ASINT(ht)
+checkHeight t = let ht = cH t in if IS_TRUE(ht EQL L(-1))
+                             then Nothing
+                             else Just ASINT(ht)
 
 -- Local utility, returns height if balanced, -1 if not
 cH :: AVL e -> UINT
@@ -65,10 +67,13 @@ cH (Z l _ r) = cH_ L(0) l r -- (hr-hl) = 0
 cH (P l _ r) = cH_ L(1) r l -- (hl-hr) = 1
 cH_ :: UINT -> AVL e -> AVL e -> UINT
 cH_ delta l r = let hl = cH l
-                in if hl EQL L(-1) then hl
+                in if IS_TRUE(hl EQL L(-1))
+                                   then hl
                                    else let hr = cH r
-                                        in if hr EQL L(-1) then hr
-                                                           else if SUBINT(hr,hl) EQL delta then INCINT1(hr)
+                                        in if IS_TRUE(hr EQL L(-1))
+                                                           then hr
+                                                           else if IS_TRUE(SUBINT(hr,hl) EQL delta)
+                                                                                           then INCINT1(hr)
                                                                                            else L(-1)
 
 -- | Verify that a tree is sorted.
diff --git a/Data/Tree/AVL/Types.hs b/Data/Tree/AVL/Types.hs
index cb74c89..1c76b8f 100644
--- a/Data/Tree/AVL/Types.hs
+++ b/Data/Tree/AVL/Types.hs
@@ -95,21 +95,7 @@ data AVL e = E                      -- ^ Empty Tree
            | N (AVL e) e (AVL e)    -- ^ BF=-1 (right height > left height)
            | Z (AVL e) e (AVL e)    -- ^ BF= 0
            | P (AVL e) e (AVL e)    -- ^ BF=+1 (left height > right height)
-           deriving(Eq,Ord,Show,Read)
-
--- A name for the AVL type constructor, fully qualified
-avlTyConName :: String
-avlTyConName = "Data.Tree.AVL.AVL"
-
--- A Typeable1 instance
-instance Typeable1 AVL where
- typeOf1 _ = mkTyConApp (mkTyCon avlTyConName) []
-
-#ifndef __GLASGOW_HASKELL__
--- A Typeable instance (not needed by ghc, but Haddock fails to document this instance)
-instance Typeable e => Typeable (AVL e) where
- typeOf = typeOfDefault
-#endif
+           deriving(Eq,Ord,Show,Read,Typeable)
 
 #if __GLASGOW_HASKELL__ > 604
 instance Foldable AVL where
diff --git a/include/ghcdefs.h b/include/ghcdefs.h
index 90dc98d..dd4be60 100644
--- a/include/ghcdefs.h
+++ b/include/ghcdefs.h
@@ -22,5 +22,6 @@
 #define UBT4(w,x,y,z) (# w,x,y,z #)
 #define UBT5(v,w,x,y,z) (# v,w,x,y,z #)
 #define UBT6(u,v,w,x,y,z) (# u,v,w,x,y,z #)
-#define IS_NEG(n) (n <# 0#)
+#define IS_TRUE(bi) (isTrue# (bi))
+#define IS_NEG(n) IS_TRUE(n <# 0#)
 #define LEFT_JUSTIFY_INT(m,n) (iShiftL# (m) (32#-#n))
