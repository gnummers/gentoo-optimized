diff --git a/Examples/GetObject.hs b/Examples/GetObject.hs
index 0a729bd..0c340d9 100644
--- a/Examples/GetObject.hs
+++ b/Examples/GetObject.hs
@@ -2,9 +2,10 @@
 
 import qualified Aws
 import qualified Aws.S3 as S3
-import           Data.Conduit (($$+-))
+import           Control.Monad.Trans.Resource
+import           Data.Conduit ((.|), runConduit)
 import           Data.Conduit.Binary (sinkFile)
-import           Network.HTTP.Conduit (withManager, responseBody)
+import           Network.HTTP.Conduit (newManager, tlsManagerSettings, responseBody)
 
 main :: IO ()
 main = do
@@ -13,11 +14,12 @@ main = do
   let s3cfg = Aws.defServiceConfig :: S3.S3Configuration Aws.NormalQuery
 
   {- Set up a ResourceT region with an available HTTP manager. -}
-  withManager $ \mgr -> do
+  mgr <- newManager tlsManagerSettings
+  runResourceT $ do
     {- Create a request object with S3.getObject and run the request with pureAws. -}
     S3.GetObjectResponse { S3.gorResponse = rsp } <-
       Aws.pureAws cfg s3cfg mgr $
         S3.getObject "haskell-aws" "cloud-remote.pdf"
 
     {- Save the response to a file. -}
-    responseBody rsp $$+- sinkFile "cloud-remote.pdf"
+    runConduit $ responseBody rsp .| sinkFile "cloud-remote.pdf"
diff --git a/Examples/GetObjectGoogle.hs b/Examples/GetObjectGoogle.hs
index 105b10a..f98e1e9 100644
--- a/Examples/GetObjectGoogle.hs
+++ b/Examples/GetObjectGoogle.hs
@@ -3,9 +3,10 @@
 import qualified Aws
 import qualified Aws.Core as Aws
 import qualified Aws.S3 as S3
-import           Data.Conduit (($$+-))
+import           Control.Monad.Trans.Resource
+import           Data.Conduit ((.|), runConduit)
 import           Data.Conduit.Binary (sinkFile)
-import           Network.HTTP.Conduit (withManager, responseBody)
+import           Network.HTTP.Conduit (newManager, tlsManagerSettings, responseBody)
 
 main :: IO ()
 main = do
@@ -13,7 +14,8 @@ main = do
   let cfg = Aws.Configuration Aws.Timestamp creds (Aws.defaultLog Aws.Debug) Nothing
   let s3cfg = S3.s3 Aws.HTTP "storage.googleapis.com" False
   {- Set up a ResourceT region with an available HTTP manager. -}
-  withManager $ \mgr -> do
+  mgr <- newManager tlsManagerSettings
+  runResourceT $ do
     {- Create a request object with S3.getObject and run the request with pureAws. -}
     S3.GetObjectResponse { S3.gorResponse = rsp } <-
       Aws.pureAws cfg s3cfg mgr $
@@ -21,4 +23,4 @@ main = do
         S3.getObject "uspto-pair" "applications/05900016.zip"
 
     {- Save the response to a file. -}
-    responseBody rsp $$+- sinkFile "getobject-test.zip"
+    runConduit $ responseBody rsp .| sinkFile "getobject-test.zip"
diff --git a/Examples/GetObjectV4.hs b/Examples/GetObjectV4.hs
index 49e0ecb..8977990 100644
--- a/Examples/GetObjectV4.hs
+++ b/Examples/GetObjectV4.hs
@@ -4,7 +4,7 @@ import qualified Aws
 import qualified Aws.Core as Aws
 import qualified Aws.S3 as S3
 import           Control.Monad.Trans.Resource
-import           Data.Conduit (($$+-))
+import           Data.Conduit ((.|), runConduit)
 import           Data.Conduit.Binary (sinkFile)
 import           Network.HTTP.Conduit (newManager, tlsManagerSettings, responseBody)
 
@@ -24,4 +24,4 @@ main = do
         S3.getObject "haskell-aws" "cloud-remote.pdf"
 
     {- Save the response to a file. -}
-    responseBody rsp $$+- sinkFile "cloud-remote.pdf"
+    runConduit $ responseBody rsp .| sinkFile "cloud-remote.pdf"
diff --git a/Examples/MultipartTransfer.hs b/Examples/MultipartTransfer.hs
index e1a6e7c..5d8b32a 100644
--- a/Examples/MultipartTransfer.hs
+++ b/Examples/MultipartTransfer.hs
@@ -7,10 +7,10 @@ import qualified Aws
 import           Aws.Aws              (Configuration (..))
 import qualified Aws.S3               as S3
 import           Control.Applicative  ((<$>))
-import           Data.Conduit         (unwrapResumable)
+import           Control.Monad.Trans.Resource
 import qualified Data.Text            as T
 import           Network.HTTP.Conduit (http, parseUrl, responseBody,
-                                       withManager)
+                                       newManager, tlsManagerSettings)
 import           System.Environment   (getArgs)
 
 main :: IO ()
@@ -27,9 +27,9 @@ main = do
       case args of
         [sourceUrl,destBucket,destObj] -> do
           request <- parseUrl sourceUrl
-          withManager $ \mgr -> do
-            resumableSource <- responseBody <$> http request mgr
-            (source, _) <- unwrapResumable resumableSource
+          mgr <- newManager tlsManagerSettings
+          runResourceT $ do
+            source <- responseBody <$> http request mgr
             let initiator b o = (S3.postInitiateMultipartUpload b o){S3.imuAcl = Just S3.AclPublicRead}
             S3.multipartUploadWithInitiator cfg{credentials = creds} s3cfg initiator mgr (T.pack destBucket) (T.pack destObj) source (10*1024*1024)
         _ -> do
diff --git a/Examples/NukeBucket.hs b/Examples/NukeBucket.hs
index 8f0ccae..d7a728b 100644
--- a/Examples/NukeBucket.hs
+++ b/Examples/NukeBucket.hs
@@ -7,7 +7,8 @@ import qualified Data.Conduit.List as CL
 import           Data.Text (pack)
 import           Control.Monad ((<=<))
 import           Control.Monad.IO.Class (liftIO)
-import           Network.HTTP.Conduit (withManager, responseBody)
+import           Control.Monad.Trans.Resource
+import           Network.HTTP.Conduit (newManager, tlsManagerSettings, responseBody)
 import           System.Environment (getArgs)
 
 main :: IO ()
@@ -19,7 +20,8 @@ main = do
   let s3cfg = Aws.defServiceConfig :: S3.S3Configuration Aws.NormalQuery
 
   {- Set up a ResourceT region with an available HTTP manager. -}
-  withManager $ \mgr -> do
+  mgr <- newManager tlsManagerSettings
+  runResourceT $ do
     let src = Aws.awsIteratedSource cfg s3cfg mgr (S3.getBucket bucket)
     let deleteObjects [] = return ()
         deleteObjects os =
diff --git a/Examples/PutBucketNearLine.hs b/Examples/PutBucketNearLine.hs
index e71ea97..2dae7a9 100644
--- a/Examples/PutBucketNearLine.hs
+++ b/Examples/PutBucketNearLine.hs
@@ -5,9 +5,9 @@
 import qualified Aws
 import qualified Aws.Core as Aws
 import qualified Aws.S3 as S3
-import           Data.Conduit (($$+-))
 import           Data.Conduit.Binary (sinkFile)
-import           Network.HTTP.Conduit (withManager, RequestBody(..))
+import           Control.Monad.Trans.Resource
+import           Network.HTTP.Conduit (newManager, tlsManagerSettings, RequestBody(..))
 import Control.Monad.IO.Class
 import Control.Concurrent
 import System.IO
@@ -29,7 +29,8 @@ main = do
   let s3cfg = S3.s3 Aws.HTTP "storage.googleapis.com" False
 
   {- Set up a ResourceT region with an available HTTP manager. -}
-  withManager $ \mgr -> do
+  mgr <- newManager tlsManagerSettings
+  runResourceT $ do
     {- Create a request object with S3.PutBucket and run the request with pureAws. -}
     rsp <-
       Aws.pureAws cfg s3cfg mgr $
diff --git a/aws.cabal b/aws.cabal
index b756f83..c82cbe1 100644
--- a/aws.cabal
+++ b/aws.cabal
@@ -123,22 +123,23 @@ Library
                        bytestring           >= 0.9     && < 0.11,
                        case-insensitive     >= 0.2     && < 1.3,
                        cereal               >= 0.3     && < 0.6,
-                       conduit              >= 1.1     && < 1.3,
-                       conduit-extra        >= 1.1     && < 1.3,
+                       conduit              >= 1.3     && < 1.4,
+                       conduit-extra        >= 1.3     && < 1.4,
                        containers           >= 0.4,
                        cryptonite           >= 0.11,
                        data-default         >= 0.5.3   && < 0.8,
                        directory            >= 1.0     && < 2.0,
                        filepath             >= 1.1     && < 1.5,
-                       http-conduit         >= 2.1     && < 2.4,
+                       http-conduit         >= 2.3     && < 2.4,
                        http-types           >= 0.7     && < 1.0,
                        lifted-base          >= 0.1     && < 0.3,
                        memory,
                        monad-control        >= 0.3,
+                       exceptions           >= 0.8     && < 0.11,
                        mtl                  == 2.*,
                        network              == 2.*,
                        old-locale           == 1.*,
-                       resourcet            >= 1.1     && < 1.2,
+                       resourcet            >= 1.2     && < 1.3,
                        safe                 >= 0.3     && < 0.4,
                        scientific           >= 0.3,
                        tagged               >= 0.7     && < 0.9,
@@ -148,7 +149,7 @@ Library
                        unordered-containers >= 0.2,
                        utf8-string          >= 0.3     && < 1.1,
                        vector               >= 0.10,
-                       xml-conduit          >= 1.2     && <2.0
+                       xml-conduit          >= 1.8     && <2.0
  
   if !impl(ghc >= 7.6)
     Build-depends: ghc-prim
@@ -202,7 +203,8 @@ Executable GetObject
                        aws,
                        http-conduit,
                        conduit,
-                       conduit-extra
+                       conduit-extra,
+                       resourcet
 
   Default-Language: Haskell2010
 
@@ -219,7 +221,8 @@ Executable GetObjectGoogle
                        aws,
                        http-conduit,
                        conduit,
-                       conduit-extra
+                       conduit-extra,
+                       resourcet
 
   Default-Language: Haskell2010
 
@@ -257,7 +260,8 @@ Executable MultipartTransfer
                        http-conduit,
                        conduit,
                        conduit-extra,
-                       text
+                       text,
+                       resourcet
 
   Default-Language: Haskell2010
 
@@ -276,7 +280,8 @@ Executable NukeBucket
                        conduit,
                        conduit-extra,
                        text >=0.1,
-                       transformers
+                       transformers,
+                       resourcet
 
   Default-Language: Haskell2010
 
@@ -295,7 +300,8 @@ Executable PutBucketNearLine
                        conduit,
                        conduit-extra,
                        text >=0.1,
-                       transformers
+                       transformers,
+                       resourcet
 
   Default-Language: Haskell2010
 
@@ -328,6 +334,7 @@ Executable DynamoDb
                        data-default,
                        exceptions,
                        http-conduit,
+                       resourcet,
                        text,
                        conduit
 
@@ -430,7 +437,7 @@ test-suite s3-tests
         QuickCheck >= 2.7,
         aeson >= 0.7,
         bytestring,
-        conduit-combinators,
+        conduit,
         errors >= 2.0,
         lifted-base >= 0.2,
         monad-control >= 0.3,
diff --git a/tests/S3/Main.hs b/tests/S3/Main.hs
index 6b8c8d9..5888151 100644
--- a/tests/S3/Main.hs
+++ b/tests/S3/Main.hs
@@ -236,7 +236,7 @@ test_versioning = askOption $ \(BucketOption bucket) ->
         let Just vid = cmurVersionId resp
         bs <- runResourceT $ do
             gor <- pureAws cfg s3cfg mgr (getObject bucket k) { goVersionId = Just vid }
-            responseBody (gorResponse gor) $$+- sinkLazy
+            sealConduitT (responseBody (gorResponse gor)) $$+- sinkLazy
 
         assertEqual "data do not match" testStr bs
     ]

