commit 54c8a19add934516e5ac1e3a433cb56347852fc3
Author: Joey Hess <joeyh@joeyh.name>
Date:   Sun Apr 22 14:34:27 2018 -0400

    update to conduit-1.3 (untested)
    
    The new conduit removed ResumableSource, replacing it with
    SealedConduitT. Rather than use that, changed to using runConduit and
    .| where it used to use $$+-
    I *think* that will behave the same, but have not tested it.
    
    Note that the type of HTTPResponseConsumer changed accordingly;
    this may be an API change for aws and need a major version bump.
    
    The removal of ResumableSource required the removal of this line from
    s3ResponseConsumer:
                C.closeResumableSource (HTTP.responseBody resp)
    So there's a potential for a change to the http response resource
    lifetime having been introduced by these changes. I don't understand
    conduit well enough to say if this is really a problem.
    See this blog post for background:
    https://www.snoyman.com/blog/2018/01/drop-conduits-finalizers
    
    Also, added a dependency on exceptions, since ResourceT
    no longer has a MonadBaseControl instance.
    
    Thanks to Dan Burton for his help with this.

diff --git a/Aws/Aws.hs b/Aws/Aws.hs
index 593dee0..12a23ca 100644
--- a/Aws/Aws.hs
+++ b/Aws/Aws.hs
@@ -35,8 +35,8 @@ where
 
 import           Aws.Core
 import           Control.Applicative
-import qualified Control.Exception.Lifted     as E
 import           Control.Monad
+import qualified Control.Monad.Catch          as E
 import           Control.Monad.IO.Class
 import           Control.Monad.Trans
 import           Control.Monad.Trans.Resource
@@ -91,7 +91,7 @@ baseConfiguration :: MonadIO io => io Configuration
 baseConfiguration = liftIO $ do
   cr <- loadCredentialsDefault
   case cr of
-    Nothing -> E.throw $ NoCredentialsException "could not locate aws credentials"
+    Nothing -> E.throwM $ NoCredentialsException "could not locate aws credentials"
     Just cr' -> return Configuration {
                       timeInfo = Timestamp
                     , credentials = cr'
diff --git a/Aws/Core.hs b/Aws/Core.hs
index 10e725b..9cac719 100644
--- a/Aws/Core.hs
+++ b/Aws/Core.hs
@@ -115,7 +115,7 @@ import           Data.ByteString.Char8    ({- IsString -})
 import qualified Data.ByteString.Lazy     as L
 import qualified Data.ByteString.UTF8     as BU
 import           Data.Char
-import           Data.Conduit             (($$+-))
+import           Data.Conduit             ((.|))
 import qualified Data.Conduit             as C
 #if MIN_VERSION_http_conduit(2,2,0)
 import qualified Data.Conduit.Binary      as CB
@@ -195,7 +195,7 @@ tellMetadataRef :: Monoid m => IORef m -> m -> IO ()
 tellMetadataRef r m = modifyIORef r (`mappend` m)
 
 -- | A full HTTP response parser. Takes HTTP status, response headers, and response body.
-type HTTPResponseConsumer a = HTTP.Response (C.ResumableSource (ResourceT IO) ByteString)
+type HTTPResponseConsumer a = HTTP.Response (C.ConduitM () ByteString (ResourceT IO) ())
                               -> ResourceT IO a
 
 -- | Class for types that AWS HTTP responses can be parsed into.
@@ -217,7 +217,7 @@ class Monoid (ResponseMetadata resp) => ResponseConsumer req resp where
 instance ResponseConsumer r (HTTP.Response L.ByteString) where
     type ResponseMetadata (HTTP.Response L.ByteString) = ()
     responseConsumer _ _ _ resp = do
-        bss <- HTTP.responseBody resp $$+- CL.consume
+        bss <- C.runConduit $ HTTP.responseBody resp .| CL.consume
         return resp
             { HTTP.responseBody = L.fromChunks bss
             }
@@ -875,23 +875,13 @@ newtype NoCredentialsException = NoCredentialsException { noCredentialsErrorMess
 instance E.Exception NoCredentialsException
 
 -- | A helper to throw an 'HTTP.StatusCodeException'.
-throwStatusCodeException :: HTTP.Request
-                         -> HTTP.Response (C.ResumableSource (ResourceT IO) ByteString)
-                         -> ResourceT IO a
-#if MIN_VERSION_http_conduit(2,2,0)
+throwStatusCodeException :: MonadThrow m => HTTP.Request -> HTTP.Response (C.ConduitM () ByteString m ()) -> m a
 throwStatusCodeException req resp = do
     let resp' = fmap (const ()) resp
     -- only take first 10kB of error response
-    body <- HTTP.responseBody resp C.$$+- CB.take (10*1024)
+    body <- C.runConduit $ HTTP.responseBody resp .| CB.take (10*1024)
     let sce = HTTP.StatusCodeException resp' (L.toStrict body)
     throwM $ HTTP.HttpExceptionRequest req sce
-#else
-throwStatusCodeException _req resp = do
-    let cookies = HTTP.responseCookieJar resp
-        headers = HTTP.responseHeaders   resp
-        status  = HTTP.responseStatus    resp
-    throwM $ HTTP.StatusCodeException status headers cookies
-#endif
 
 -- | A specific element (case-insensitive, ignoring namespace - sadly necessary), extracting only the textual contents.
 elContent :: T.Text -> Cursor -> [T.Text]
@@ -939,7 +929,7 @@ xmlCursorConsumer ::
     -> IORef m
     -> HTTPResponseConsumer a
 xmlCursorConsumer parse metadataRef res
-    = do doc <- HTTP.responseBody res $$+- XML.sinkDoc XML.def
+    = do doc <- C.runConduit $ HTTP.responseBody res .| XML.sinkDoc XML.def
          let cursor = Cu.fromDocument doc
          let Response metadata x = parse cursor
          liftIO $ tellMetadataRef metadataRef metadata
diff --git a/Aws/DynamoDb/Core.hs b/Aws/DynamoDb/Core.hs
index da588c3..925ec52 100644
--- a/Aws/DynamoDb/Core.hs
+++ b/Aws/DynamoDb/Core.hs
@@ -895,7 +895,7 @@ instance FromJSON AmazonError where
 -------------------------------------------------------------------------------
 ddbResponseConsumer :: A.FromJSON a => IORef DdbResponse -> HTTPResponseConsumer a
 ddbResponseConsumer ref resp = do
-    val <- HTTP.responseBody resp $$+- sinkParser (A.json' <* AttoB.endOfInput)
+    val <- runConduit $ HTTP.responseBody resp .| sinkParser (A.json' <* AttoB.endOfInput)
     case statusCode of
       200 -> rSuccess val
       _   -> rError val
diff --git a/Aws/S3/Commands/GetObject.hs b/Aws/S3/Commands/GetObject.hs
index fd8ba92..768b54d 100644
--- a/Aws/S3/Commands/GetObject.hs
+++ b/Aws/S3/Commands/GetObject.hs
@@ -11,6 +11,7 @@ import           Data.ByteString.Char8 ({- IsString -})
 import qualified Data.ByteString.Char8 as B8
 import qualified Data.ByteString.Lazy  as L
 import qualified Data.Conduit          as C
+import           Data.Conduit ((.|))
 import qualified Data.Conduit.List     as CL
 import           Data.Maybe
 import qualified Data.Text             as T
@@ -44,7 +45,7 @@ getObject b o = GetObject b o Nothing Nothing Nothing Nothing Nothing Nothing No
 data GetObjectResponse
     = GetObjectResponse {
         gorMetadata :: ObjectMetadata,
-        gorResponse :: HTTP.Response (C.ResumableSource (ResourceT IO) B8.ByteString)
+        gorResponse :: HTTP.Response (C.ConduitM () B8.ByteString (ResourceT IO) ())
       }
 
 data GetObjectMemoryResponse
@@ -96,7 +97,7 @@ instance Transaction GetObject GetObjectResponse
 instance AsMemoryResponse GetObjectResponse where
     type MemoryResponse GetObjectResponse = GetObjectMemoryResponse
     loadToMemory (GetObjectResponse om x) = do
-        bss <- HTTP.responseBody x C.$$+- CL.consume
+        bss <- C.runConduit $ HTTP.responseBody x .| CL.consume
         return $ GetObjectMemoryResponse om x
             { HTTP.responseBody = L.fromChunks bss
             }
diff --git a/Aws/S3/Core.hs b/Aws/S3/Core.hs
index 3d7de80..d8ef19f 100644
--- a/Aws/S3/Core.hs
+++ b/Aws/S3/Core.hs
@@ -7,7 +7,7 @@ import           Control.Monad
 import           Control.Monad.IO.Class
 import           Control.Monad.Trans.Resource   (MonadThrow, throwM)
 import           Data.Char                      (isAscii, isAlphaNum, toUpper, ord)
-import           Data.Conduit                   (($$+-))
+import           Data.Conduit                   ((.|))
 import           Data.Function
 import           Data.Functor                   ((<$>))
 import           Data.IORef
@@ -418,7 +418,6 @@ s3ResponseConsumer inner metadataRef = s3BinaryResponseConsumer inner' metadataR
   where inner' resp =
           do
             !res <- inner resp
-            C.closeResumableSource (HTTP.responseBody resp)
             return res
 
 s3BinaryResponseConsumer :: HTTPResponseConsumer a
@@ -444,7 +443,7 @@ s3XmlResponseConsumer parse metadataRef =
 
 s3ErrorResponseConsumer :: HTTPResponseConsumer a
 s3ErrorResponseConsumer resp
-    = do doc <- HTTP.responseBody resp $$+- XML.sinkDoc XML.def
+    = do doc <- C.runConduit $ HTTP.responseBody resp .| XML.sinkDoc XML.def
          let cursor = Cu.fromDocument doc
          liftIO $ case parseError cursor of
            Right err      -> throwM err
diff --git a/Aws/Sqs/Core.hs b/Aws/Sqs/Core.hs
index ab361b4..29b5ae7 100644
--- a/Aws/Sqs/Core.hs
+++ b/Aws/Sqs/Core.hs
@@ -11,7 +11,8 @@ import           Control.Monad.IO.Class
 import           Control.Monad.Trans.Resource   (MonadThrow, throwM)
 import qualified Data.ByteString                as B
 import qualified Data.ByteString.Char8          as BC
-import           Data.Conduit                   (($$+-))
+import qualified Data.Conduit
+import           Data.Conduit                   ((.|))
 import           Data.IORef
 import           Data.List
 import           Data.Maybe
@@ -248,7 +249,7 @@ sqsXmlResponseConsumer parse metadataRef = sqsResponseConsumer (xmlCursorConsume
 
 sqsErrorResponseConsumer :: HTTPResponseConsumer a
 sqsErrorResponseConsumer resp
-    = do doc <- HTTP.responseBody resp $$+- XML.sinkDoc XML.def
+    = do doc <- Data.Conduit.runConduit $ HTTP.responseBody resp .| XML.sinkDoc XML.def
          let cursor = Cu.fromDocument doc
          liftIO $ case parseError cursor of
            Right err     -> throwM err
diff --git a/Examples/DynamoDb.hs b/Examples/DynamoDb.hs
index 9e3f128..f9b0721 100644
--- a/Examples/DynamoDb.hs
+++ b/Examples/DynamoDb.hs
@@ -11,12 +11,13 @@ import           Aws.DynamoDb.Core
 import           Control.Concurrent
 import           Control.Monad
 import           Control.Monad.Catch
+import           Control.Monad.Trans.Resource
 import           Control.Applicative
 import           Data.Conduit
 import           Data.Maybe
 import qualified Data.Conduit.List     as C
 import qualified Data.Text             as T
-import           Network.HTTP.Conduit  (withManager)
+import           Network.HTTP.Conduit  (newManager, tlsManagerSettings)
 -------------------------------------------------------------------------------
 
 createTableAndWait :: IO ()
@@ -119,8 +120,8 @@ main = do
   echo "Now paginating in increments of 5..."
   let q0 = (scan "devel-1") { sLimit = Just 5 }
 
-  xs <- withManager $ \mgr -> do
-    awsIteratedList cfg debugServiceConfig mgr q0 $$ C.consume
+  mgr <- newManager tlsManagerSettings
+  xs <- runResourceT $ awsIteratedList cfg debugServiceConfig mgr q0 $$ C.consume
   echo ("Pagination returned " ++ show (length xs) ++ " items")
 
 
