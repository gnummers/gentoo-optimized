diff --git a/Language/Haskell/ParseMonad.hs b/Language/Haskell/ParseMonad.hs
index 71db70f..a7828b2 100644
--- a/Language/Haskell/ParseMonad.hs
+++ b/Language/Haskell/ParseMonad.hs
@@ -28,6 +28,7 @@ module Language.Haskell.ParseMonad(
 import Language.Haskell.Syntax(SrcLoc(..))
 import Control.Applicative
 import Data.Monoid
+import Control.Monad
 
 -- | The result of a parse.
 data ParseResult a
@@ -111,6 +112,13 @@ runParserWithMode mode (P m) s = case m s 0 1 start [] mode of
 runParser :: P a -> String -> ParseResult a
 runParser = runParserWithMode defaultParseMode
 
+instance Functor P where
+    fmap = liftM
+
+instance Applicative P where
+    pure  = return
+    (<*>) = ap
+
 instance Monad P where
         return a = P $ \_i _x _y _l s _m -> Ok s a
         P m >>= k = P $ \i x y l s mode ->
@@ -156,6 +164,13 @@ popContext = P $ \_i _x _y _l stk _m ->
 
 newtype Lex r a = Lex { runL :: (a -> P r) -> P r }
 
+instance Functor (Lex r) where
+    fmap = liftM
+
+instance Applicative (Lex r) where
+    pure  = return
+    (<*>) = ap
+
 instance Monad (Lex r) where
         return a = Lex $ \k -> k a
         Lex v >>= f = Lex $ \k -> v (\a -> runL (f a) k)
