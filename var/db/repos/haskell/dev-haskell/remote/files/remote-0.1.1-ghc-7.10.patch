diff --git a/Remote/Process.hs b/Remote/Process.hs
index 4bb27b7..c2b9663 100644
--- a/Remote/Process.hs
+++ b/Remote/Process.hs
@@ -75,5 +75,5 @@ import Control.Concurrent (forkIO,ThreadId,threadDelay)
 import Control.Concurrent.MVar (MVar,newMVar, newEmptyMVar,takeMVar,putMVar,modifyMVar,modifyMVar_,readMVar)
 import Control.Exception (ErrorCall(..),throwTo,bracket,try,Exception,throw,evaluate,finally,SomeException,catch)
-import Control.Monad (foldM,when,liftM,forever)
+import Control.Monad (ap,foldM,when,liftM,forever)
 import Control.Monad.Trans (MonadIO,liftIO)
 import Data.Binary (Binary,put,get,putWord8,getWord8)
@@ -280,4 +280,8 @@ data Process = Process
 data ProcessM a = ProcessM {runProcessM :: Process -> IO (Process,a)} deriving Typeable
 
+instance Applicative ProcessM where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad ProcessM where
     m >>= k = ProcessM $ (\p -> (runProcessM m) p >>= (\(news,newa) -> runProcessM (k newa) news))
@@ -328,4 +332,11 @@ putProcess p = ProcessM $ \_ -> return (p,())
 data MatchM q a = MatchM { runMatchM :: MatchBlock -> STM ((MatchBlock,Maybe (ProcessM q)),a) }
 
+instance Functor (MatchM q) where
+    fmap  = liftM
+
+instance Applicative (MatchM q) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (MatchM q) where
     m >>= k = MatchM $ \mbi -> do
diff --git a/Remote/Task.hs b/Remote/Task.hs
index f9457b6..e57f0d6 100644
--- a/Remote/Task.hs
+++ b/Remote/Task.hs
@@ -40,5 +40,5 @@ import Data.Binary (Binary,get,put,putWord8,getWord8)
 import Control.Exception (SomeException,Exception,throw)
 import Data.Typeable (Typeable)
-import Control.Monad (liftM,when)
+import Control.Monad (ap,liftM,when)
 import Control.Monad.Trans (liftIO)
 import Control.Concurrent.MVar (MVar,modifyMVar,modifyMVar_,newMVar,newEmptyMVar,takeMVar,putMVar,readMVar,withMVar)
@@ -845,4 +845,11 @@ data TaskState = TaskState
 data TaskM a = TaskM { runTaskM :: TaskState -> ProcessM (TaskState, a) } deriving (Typeable)
 
+instance Functor TaskM where
+    fmap  = liftM
+
+instance Applicative TaskM where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad TaskM where
    m >>= k = TaskM $ \ts -> do
