diff --git a/Codec/Image/PNG.hs b/Codec/Image/PNG.hs
index 00f6b3d..3f0e53d 100644
--- a/Codec/Image/PNG.hs
+++ b/Codec/Image/PNG.hs
@@ -171,7 +171,7 @@ toPngChunk raw =
       _        -> return $ UnknownChunk raw
  where
    parseChunkData a =
-       case runP a () "" (rawPngChunk_data raw) of
+       case runP a () "" (PLB (rawPngChunk_data raw)) of
          Left e  -> fail $ "failed to parse chunk " ++ show chunkName ++ ", " ++ show e
          Right x -> return x
    chunkName = rawPngChunk_type raw
diff --git a/Codec/Image/PNG/Internal/Parser.hs b/Codec/Image/PNG/Internal/Parser.hs
index d863568..091dea1 100644
--- a/Codec/Image/PNG/Internal/Parser.hs
+++ b/Codec/Image/PNG/Internal/Parser.hs
@@ -11,54 +11,59 @@ import Numeric (showHex)
 
 import qualified Data.ByteString.Lazy as LB
 
-instance (Monad m) => Stream LB.ByteString m Word8 where
-    uncons = return . LB.uncons
+newtype PLB = PLB { toLB :: LB.ByteString }
+type ParsecTPLB u m r = ParsecT PLB u m r
 
-type Parser = Parsec LB.ByteString ()
+instance (Monad m) => Stream PLB m Word8 where
+    uncons (PLB lb) = return $ case LB.uncons lb of
+                          Nothing -> Nothing
+                          Just (c, r) -> Just (c, PLB r)
 
-word8 :: (Stream LB.ByteString m Word8) => Word8 -> ParsecT LB.ByteString u m Word8
+type Parser = Parsec PLB ()
+
+word8 :: (Stream PLB m Word8) => Word8 -> ParsecT PLB u m Word8
 word8 = satisfy . (==)
 
-word16 :: (Stream LB.ByteString m Word8) => Word16 -> ParsecT LB.ByteString u m Word16
+word16 :: (Stream PLB m Word8) => Word16 -> ParsecT PLB u m Word16
 word16 w = (word8 hi >> word8 lo >> return w) <?> "0x" ++ showHex w ""
  where
    hi = fromIntegral (w `shiftR` 8)
    lo = fromIntegral w
 
-word32 :: (Stream LB.ByteString m Word8) => Word32 -> ParsecT LB.ByteString u m Word32
+word32 :: (Stream PLB m Word8) => Word32 -> ParsecT PLB u m Word32
 word32 w = (word16 hi >> word16 lo >> return w) <?> "0x" ++ showHex w ""
  where
    hi = fromIntegral (w `shiftR` 16)
    lo = fromIntegral w
 
-satisfy :: (Stream LB.ByteString m Word8) => (Word8 -> Bool) -> ParsecT LB.ByteString u m Word8
+satisfy :: (Stream PLB m Word8) => (Word8 -> Bool) -> ParsecT PLB u m Word8
 satisfy f = tokenPrim (\c -> "0x" ++ showHex c "")
                       (\pos _ _ -> pos)
                       (\c -> if f c then Just c else Nothing)
 
-anyWord8 :: (Stream LB.ByteString m Word8) => ParsecT LB.ByteString u m Word8
+anyWord8 :: (Stream PLB m Word8) => ParsecT PLB u m Word8
 anyWord8 = anyToken
 
-anyWord16 :: (Stream LB.ByteString m Word8) => ParsecT LB.ByteString u m Word16
+anyWord16 :: (Stream PLB m Word8) => ParsecT PLB u m Word16
 anyWord16 = do
   hi <- anyWord8
   lo <- anyWord8
   return $ (fromIntegral hi `shiftL` 8) .|. fromIntegral lo
 
-anyWord32 :: (Stream LB.ByteString m Word8) => ParsecT LB.ByteString u m Word32
+anyWord32 :: (Stream PLB m Word8) => ParsecT PLB u m Word32
 anyWord32 = do
   hi <- anyWord16
   lo <- anyWord16
   return $ (fromIntegral hi `shiftL` 16) .|. fromIntegral lo
 
-string :: (Stream LB.ByteString m Word8) => LB.ByteString -> ParsecT LB.ByteString u m LB.ByteString
+string :: (Stream PLB m Word8) => LB.ByteString -> ParsecT PLB u m LB.ByteString
 string s = mapM_ word8 (LB.unpack s) >> return s
 
-block :: (Stream LB.ByteString m Word8) => Int -> ParsecT LB.ByteString u m LB.ByteString
+block :: (Stream PLB m Word8) => Int -> ParsecT PLB u m LB.ByteString
 block size = do  -- count size anyWord8 >>= return . LB.pack
-  i <- getInput
+  (PLB i) <- getInput
   let (s,r) = LB.splitAt (fromIntegral size) i
-  setInput r
+  setInput (PLB r)
   return s
 
 allowedValues :: (a -> Parser a) -> [(a,b)] -> Parser b
@@ -67,8 +72,6 @@ allowedValues fn = choice . map (\(val,res) -> fn val >> return res)
 parseFromFile :: Parser a -> FilePath -> IO (Either String a)
 parseFromFile p fname
     = do input <- LB.readFile fname
-         return $ case runP p () fname input of
+         return $ case runP p () fname (PLB input) of
                     Left err  -> Left (show err)
                     Right x   -> Right x
-
-
