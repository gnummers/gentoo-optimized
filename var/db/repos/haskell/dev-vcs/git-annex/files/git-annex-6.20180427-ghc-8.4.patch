--- git-annex-6.20180427-orig/Types/DesktopNotify.hs	2018-04-28 02:37:59.000000000 +1000
+++ git-annex-6.20180427/Types/DesktopNotify.hs	2018-05-01 19:29:28.486688210 +1000
@@ -8,6 +8,7 @@
 module Types.DesktopNotify where
 
 import Data.Monoid
+import qualified Data.Semigroup as Sem
 import Prelude
 
 data DesktopNotify = DesktopNotify
@@ -16,10 +17,13 @@
 	}
 	deriving (Show)
 
+instance Sem.Semigroup DesktopNotify where
+	(DesktopNotify s1 f1) <> (DesktopNotify s2 f2) =
+		DesktopNotify (s1 || s2) (f1 || f2)
+
 instance Monoid DesktopNotify where
 	mempty = DesktopNotify False False
-	mappend (DesktopNotify s1 f1) (DesktopNotify s2 f2) =
-		DesktopNotify (s1 || s2) (f1 || f2)
+	mappend = (Sem.<>)
 
 mkNotifyStart :: DesktopNotify
 mkNotifyStart = DesktopNotify True False
--- git-annex-6.20180427-orig/Types/Test.hs	2018-04-28 02:37:59.000000000 +1000
+++ git-annex-6.20180427/Types/Test.hs	2018-05-01 19:34:15.936011451 +1000
@@ -9,6 +9,7 @@
 
 import Test.Tasty.Options
 import Data.Monoid
+import qualified Data.Semigroup as Sem
 import Prelude
 import Types.Command
 
@@ -19,13 +20,15 @@
 	, internalData :: CmdParams
 	}
 
-instance Monoid TestOptions where
-	mempty = TestOptions mempty False False mempty
-	mappend a b = TestOptions
+instance Sem.Semigroup TestOptions where
+	a <> b = TestOptions
 		(tastyOptionSet a <> tastyOptionSet b)
 		(keepFailuresOption a || keepFailuresOption b)
 		(fakeSsh a || fakeSsh b)
 		(internalData a <> internalData b)
 
+instance Monoid TestOptions where
+	mempty = TestOptions mempty False False mempty
+	mappend = (Sem.<>)
 
 type TestRunner = TestOptions -> IO ()
--- git-annex-6.20180427-orig/Types/Difference.hs	2018-04-28 02:37:59.000000000 +1000
+++ git-annex-6.20180427/Types/Difference.hs	2018-05-01 19:33:00.725927875 +1000
@@ -23,6 +23,7 @@
 
 import Data.Maybe
 import Data.Monoid
+import qualified Data.Semigroup as Sem
 import Prelude
 import qualified Data.Set as S
 
@@ -67,14 +68,17 @@
 		, oneLevelBranchHash
 		]
 
-instance Monoid Differences where
-	mempty = Differences False False False
-	mappend a@(Differences {}) b@(Differences {}) = a
+instance Sem.Semigroup Differences where
+	a@(Differences {}) <> b@(Differences {}) = a
 		{ objectHashLower = objectHashLower a || objectHashLower b
 		, oneLevelObjectHash = oneLevelObjectHash a || oneLevelObjectHash b
 		, oneLevelBranchHash = oneLevelBranchHash a || oneLevelBranchHash b
 		}
-	mappend _ _ = UnknownDifferences
+	_ <> _ = UnknownDifferences
+
+instance Monoid Differences where
+	mempty = Differences False False False
+	mappend = (Sem.<>)
 
 readDifferences :: String -> Differences
 readDifferences = maybe UnknownDifferences mkDifferences . readish
--- git-annex-6.20180427-orig/Git/Fsck.hs	2018-04-28 02:37:59.000000000 +1000
+++ git-annex-6.20180427/Git/Fsck.hs	2018-05-01 19:31:18.637813309 +1000
@@ -26,6 +26,7 @@
 
 import qualified Data.Set as S
 import Control.Concurrent.Async
+import qualified Data.Semigroup as Sem
 
 data FsckResults 
 	= FsckFoundMissing
@@ -44,15 +45,18 @@
 
 type Truncated = Bool
 
+instance Sem.Semigroup FsckOutput where
+	(FsckOutput s1 t1) <> (FsckOutput s2 t2) = FsckOutput (S.union s1 s2) (t1 || t2)
+	(FsckOutput s t) <> _ = FsckOutput s t
+	_ <> (FsckOutput s t) = FsckOutput s t
+	NoFsckOutput <> NoFsckOutput = NoFsckOutput
+	AllDuplicateEntriesWarning <> AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
+	AllDuplicateEntriesWarning <> NoFsckOutput = AllDuplicateEntriesWarning
+	NoFsckOutput <> AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
+
 instance Monoid FsckOutput where
 	mempty = NoFsckOutput
-	mappend (FsckOutput s1 t1) (FsckOutput s2 t2) = FsckOutput (S.union s1 s2) (t1 || t2)
-	mappend (FsckOutput s t) _ = FsckOutput s t
-	mappend _ (FsckOutput s t) = FsckOutput s t
-	mappend NoFsckOutput NoFsckOutput = NoFsckOutput
-	mappend AllDuplicateEntriesWarning AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
-	mappend AllDuplicateEntriesWarning NoFsckOutput = AllDuplicateEntriesWarning
-	mappend NoFsckOutput AllDuplicateEntriesWarning = AllDuplicateEntriesWarning
+	mappend = (Sem.<>)
 
 {- Runs fsck to find some of the broken objects in the repository.
  - May not find all broken objects, if fsck fails on bad data in some of
--- git-annex-6.20180427-orig/Command/Info.hs	2018-04-28 02:37:59.000000000 +1000
+++ git-annex-6.20180427/Command/Info.hs	2018-05-02 17:41:00.933272179 +1000
@@ -44,6 +44,7 @@
 import Messages.JSON (DualDisp(..), ObjectMap(..))
 import Annex.BloomFilter
 import qualified Command.Unused
+import qualified Data.Semigroup as Sem
 
 -- a named computation that produces a statistic
 type Stat = StatState (Maybe (String, StatState String))
@@ -56,15 +57,18 @@
 	, backendsKeys :: M.Map KeyVariety Integer
 	}
 
-instance Monoid KeyData where
-	mempty = KeyData 0 0 0 M.empty
-	mappend a b = KeyData
+instance Sem.Semigroup KeyData where
+	a <> b = KeyData
 		{ countKeys = countKeys a + countKeys b
 		, sizeKeys = sizeKeys a + sizeKeys b
 		, unknownSizeKeys = unknownSizeKeys a + unknownSizeKeys b
 		, backendsKeys = backendsKeys a <> backendsKeys b
 		}
 
+instance Monoid KeyData where
+	mempty = KeyData 0 0 0 M.empty
+	mappend = (Sem.<>)
+
 data NumCopiesStats = NumCopiesStats
 	{ numCopiesVarianceMap :: M.Map Variance Integer
 	}
