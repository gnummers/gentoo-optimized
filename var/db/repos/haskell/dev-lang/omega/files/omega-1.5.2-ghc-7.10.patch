diff --git a/Bind.hs b/Bind.hs
index fbdac09..bae8f2a 100644
--- a/Bind.hs
+++ b/Bind.hs
@@ -15,2 +15,4 @@ module Bind(Fresh(..),Freshen(..),Swap(..),Name,Perm
 import Monads
+import Control.Applicative
+import Control.Monad
 
@@ -151,2 +153,9 @@ unM (M f) = f
 
+instance Functor M where
+    fmap  = liftM
+
+instance Applicative M where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad M where
diff --git a/Commands.hs b/Commands.hs
index bbc02e4..360346b 100644
--- a/Commands.hs
+++ b/Commands.hs
@@ -1 +1,2 @@
+{-# LANGUAGE FlexibleContexts #-}
 -- Copyright (c) 2002-2013, Tim Sheard, Gabor Greif
diff --git a/Infer.hs b/Infer.hs
index f53132e..c2fa352 100644
--- a/Infer.hs
+++ b/Infer.hs
@@ -10,2 +10,3 @@
   , FlexibleInstances
+  , FlexibleContexts
   #-}
diff --git a/Monads.hs b/Monads.hs
index 219e878..449e2ca 100644
--- a/Monads.hs
+++ b/Monads.hs
@@ -21,2 +21,4 @@ import System.IO(hFlush,stdout)
 import ParserAll
+import Control.Applicative
+import Control.Monad
 
@@ -82,2 +84,9 @@ data Id x = Id x
 
+instance Functor Id where
+    fmap  = liftM
+
+instance Applicative Id where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad Id where
@@ -95,2 +104,6 @@ data Exception x
 
+instance Applicative Exception where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad Exception where
@@ -108,2 +121,9 @@ data Env e x = Env (e -> x)
 
+instance Functor (Env e) where
+    fmap  = liftM
+
+instance Applicative (Env e) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (Env e) where
@@ -135,2 +155,9 @@ data Store s x = St(s -> (x,s))
 
+instance Functor (Store s) where
+    fmap  = liftM
+
+instance Applicative (Store s) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (Store s) where
@@ -172,2 +199,9 @@ data Mult x = Mult [x]
 
+instance Functor Mult where
+    fmap  = liftM
+
+instance Applicative Mult where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad Mult where
@@ -188,2 +222,9 @@ data Output x = OP(x,String)
 
+instance Functor Output where
+    fmap  = liftM
+
+instance Applicative Output where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad Output where
@@ -205,2 +246,6 @@ unFIO (FIO x) = x
 
+instance Applicative FIO where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad FIO where
@@ -293,2 +338,9 @@ data StEnv state env x = SE (state -> env -> (x,state))
 
+instance Functor (StEnv s e) where
+    fmap  = liftM
+
+instance Applicative (StEnv s e) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (StEnv s e) where
@@ -327,2 +379,6 @@ mtc2fio env (Tc f) = do { (x,_) <- f env; return x }
 
+instance Applicative (Mtc e n) where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
 instance Monad (Mtc e n) where
diff --git a/Parser.hs b/Parser.hs
index 5b099d1..e60acf7 100644
--- a/Parser.hs
+++ b/Parser.hs
@@ -80,2 +80,4 @@ import ParseError
 import CommentDef
+import Control.Applicative hiding ((<|>), many, optional)
+import qualified Control.Applicative as A
 import Control.Monad
@@ -332,2 +334,10 @@ instance Functor Parser where
 
+instance Applicative Parser where
+    pure  = return
+    (<*>) = ap  -- defined in Control.Monad
+
+instance Alternative Parser where
+    (<|>) = mplus
+    empty = mzero
+
 -----------------------------------------------------------
