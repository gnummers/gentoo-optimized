diff --git a/elm-package.cabal b/elm-package.cabal
index 4d64628..de151b3 100644
--- a/elm-package.cabal
+++ b/elm-package.cabal
@@ -68,8 +68,8 @@ Library
         elm-compiler == 0.18,
         filepath >= 1 && < 2.0,
         HTTP >= 4000.2.5 && < 4000.3,
-        http-client >= 0.4.15 && < 0.5,
-        http-client-tls >= 0.2 && < 0.3,
+        http-client >= 0.4.15,
+        http-client-tls >= 0.2,
         http-types >= 0.7 && < 0.9,
         mtl >= 2.2.1 && < 3,
         network >= 2.4 && < 2.7,
@@ -132,8 +132,8 @@ Executable elm-package
         elm-compiler == 0.18,
         filepath >= 1 && < 2.0,
         HTTP >= 4000.2.5 && < 4000.3,
-        http-client >= 0.3 && < 0.5,
-        http-client-tls >= 0.2 && < 0.3,
+        http-client >= 0.3,
+        http-client-tls >= 0.2,
         http-types >= 0.7 && < 0.9,
         mtl >= 2 && < 3,
         network >= 2.4 && < 2.7,
diff --git a/src/Catalog.hs b/src/Catalog.hs
index bb634d1..93d98e1 100644
--- a/src/Catalog.hs
+++ b/src/Catalog.hs
@@ -1,4 +1,5 @@
 {-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE CPP #-}
 module Catalog where
 
 import Control.Exception (catch, throwIO)
@@ -101,7 +102,11 @@ register name version =
   do  url <- catalog "register" vars
       Http.send url $ \request manager -> do
           request' <- Multi.formDataBody files request
+#if MIN_VERSION_http_client(0,5,0)
+          let request'' = request' { Client.responseTimeout = Client.responseTimeoutNone }
+#else
           let request'' = request' { Client.responseTimeout = Nothing }
+#endif
           Client.httpLbs request'' manager
           return ()
   where
diff --git a/src/Utils/Http.hs b/src/Utils/Http.hs
index ca325d0..37c24ca 100644
--- a/src/Utils/Http.hs
+++ b/src/Utils/Http.hs
@@ -1,4 +1,5 @@
 {-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE CPP #-}
 module Utils.Http (send) where
 
 import qualified Control.Exception as E
@@ -53,7 +54,13 @@ sendUnsafe url manager handler =
 handleHttpError :: String -> Http.HttpException -> IO (Either Error.Error b)
 handleHttpError url exception =
   case exception of
+#if MIN_VERSION_http_client(0,5,0)
+    Http.HttpExceptionRequest _ (Http.StatusCodeException res _) -> do
+      let (Http.Status _code err) = Http.responseStatus res
+          headers                 = Http.responseHeaders res
+#else
     Http.StatusCodeException (Http.Status _code err) headers _ ->
+#endif
       return $ Left $ Error.HttpRequestFailed url $ BSC.unpack $
         case List.lookup "X-Response-Body-Start" headers of
           Just msg | not (BSC.null msg) ->
