diff -urN quickfuzz-0.1_p20160920.orig/work/quickfuzz-0.1_p20160920/src/Dns.hs quickfuzz-0.1_p20160920/work/quickfuzz-0.1_p20160920/src/Dns.hs
--- quickfuzz-0.1_p20160920.orig//src/Dns.hs	2016-09-20 09:49:51.000000000 +0100
+++ quickfuzz-0.1_p20160920/src/Dns.hs	2018-05-07 19:42:42.847947239 +0100
@@ -1,4 +1,4 @@
-{-# LANGUAGE TemplateHaskell, FlexibleInstances #-}
+{-# LANGUAGE TemplateHaskell, FlexibleInstances, CPP #-}
 
 module Dns where
 import Test.QuickCheck
@@ -50,7 +50,11 @@
 --      return $ MM xs
 
 --mencode (MM x) = Prelude.map (convertL8 . encode) x
+#if MIN_VERSION_dns(3,0,0)
+mencode = (convertL8 . LC8.fromStrict . encode)
+#else
 mencode = (convertL8 . encode)
+#endif
 
 
 --mencode (MM x) = Prelude.map encode x
diff -urN quickfuzz-0.1_p20160920.orig/work/quickfuzz-0.1_p20160920/src/Python.hs quickfuzz-0.1_p20160920/work/quickfuzz-0.1_p20160920/src/Python.hs
--- quickfuzz-0.1_p20160920.orig/src/Python.hs	2016-09-20 09:49:51.000000000 +0100
+++ quickfuzz-0.1_p20160920/src/Python.hs	2018-05-07 19:30:12.650090161 +0100
@@ -5,7 +5,7 @@
 import DeriveFixable as F
 import DeriveArbitrary
 import Test.QuickCheck
-import Language.Python.Common
+import Language.Python.Common as P
 import Language.Python.Common.Pretty
 
 import qualified Data.ByteString.Lazy as L
@@ -202,7 +202,7 @@
                                     For <$> lOfOneVar --(listOf $ (resize (n `div` 10) arbitrary))
                                         <*> resize n arbitrary <*> resize n arbitrary
                                         <*> resize n arbitrary <*> resize n arbitrary,
-                                    Fun <$> resize n arbitrary <*> (listOf $ (resize (n `div` 10) arbitrary))
+                                    P.Fun <$> resize n arbitrary <*> (listOf $ (resize (n `div` 10) arbitrary))
                                         <*> resize n arbitrary <*> resize n arbitrary
                                         <*> resize n arbitrary,
                                     Class <$> resize n arbitrary
@@ -246,7 +246,7 @@
                                       (2, For <$> (listOf $ (resize (n `div` 10) arbitrary))
                                               <*> resize n arbitrary <*> resize n arbitrary
                                               <*> resize n arbitrary <*> resize n arbitrary),
-                                      (2, Fun <$> resize n arbitrary
+                                      (2, P.Fun <$> resize n arbitrary
                                               <*> (listOf $ (resize (n `div` 10) arbitrary))
                                               <*> resize n arbitrary <*> resize n arbitrary
                                               <*> resize n arbitrary),
