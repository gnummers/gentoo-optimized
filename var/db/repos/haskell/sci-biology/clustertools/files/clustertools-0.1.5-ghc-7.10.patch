diff --git a/src/AddSingletons.hs b/src/AddSingletons.hs
index c1cb074..c7fed74 100644
--- a/src/AddSingletons.hs
+++ b/src/AddSingletons.hs
@@ -10,2 +10,3 @@ import Control.Monad
 import Data.Set
+import qualified Data.List as L
 
@@ -30,2 +31,2 @@ append_s ref f = do
 mkindex :: String -> Set String
-mkindex = foldr insert empty . words
+mkindex = L.foldr insert empty . words
diff --git a/src/Cluscomp.lhs b/src/Cluscomp.lhs
index eb376fb..c0c2229 100644
--- a/src/Cluscomp.lhs
+++ b/src/Cluscomp.lhs
@@ -17,3 +17,3 @@ import Data.Map hiding (map,filter,null)
 import qualified Data.Map as M
-import Data.List
+import Data.List as L
 import Data.Maybe
@@ -67,4 +67,4 @@ readC = filter (not.null) . map B.words . B.lines
 mkC :: [Cluster] -> Clustering
-mkC  = foldr ins (M.empty,M.empty) . zip [0..]
-  where ins (n,ss) (i2c,s2i) = (M.insert n ss i2c, foldr (\s -> M.insert s n) s2i ss)
+mkC  = L.foldr ins (M.empty,M.empty) . zip [0..]
+  where ins (n,ss) (i2c,s2i) = (M.insert n ss i2c, L.foldr (\s -> M.insert s n) s2i ss)
 
@@ -111,3 +111,3 @@ skew     (_,b,c,d) = (b-c)/sqrt(b+c)/sqrt d
 mkPairs :: Clustering -> Matrix -> Pairs
-mkPairs k m = let (a,b,c,ct) = foldl (jc1 k) (0,0,0,0) m
+mkPairs k m = let (a,b,c,ct) = L.foldl (jc1 k) (0,0,0,0) m
             in (a/2,b/2,c/2,(ct*(ct-1)-a-b-c)/2)
@@ -118,3 +118,3 @@ jc1 k j row = let row' = filter (isJust.fst) row
                   l = sum $ map (len.snd) row'
-              in foldr (jc2 k l) j row'
+              in L.foldr (jc2 k l) j row'
 
@@ -167,3 +167,3 @@ iscores m (n,_hc,hk,hck) [] =
 accum :: Map Int Double -> Row -> Map Int Double
-accum m' row = foldr accum1 m' row
+accum m' row = L.foldr accum1 m' row
    where accum1 (Just c,ss) m = insertWith (+) c (len ss) m
diff --git a/src/ClusterLibs.hs b/src/ClusterLibs.hs
index 77496f4..abd78fb 100644
--- a/src/ClusterLibs.hs
+++ b/src/ClusterLibs.hs
@@ -16,5 +16,6 @@ main :: IO ()
 main = do
-   [ps,cs] <- do [xs,ys] <- getArgs 
-                 return [xs,ys] 
-             `catch` error "Usage: clusterlibs <libtable> <clusters>"
+   [ps,cs] <- do args <- getArgs
+                 case args of
+                     [xs,ys] -> return [xs,ys] 
+                     _       -> error "Usage: clusterlibs <libtable> <clusters>"
    pat <- readPatternTable ps
diff --git a/src/Statistics.hs b/src/Statistics.hs
index 233aec8..a0c71ad 100644
--- a/src/Statistics.hs
+++ b/src/Statistics.hs
@@ -16,3 +16,3 @@ binomial p n k -- | p*fromIntegral n > 20 && (1-p)*fromIntegral n > 20  = normal
                | k <= n    = fromIntegral (n `choose` k) * (p**fromIntegral k) * ((1-p)** fromIntegral (n-k))
-               | otherwise = error ("binomial: can't observe more than 'n' positives:"++show n++" "++show k)
+               | otherwise = error ("binomial: can't observe more than 'n' positives:"++show (toInteger n)++" "++show (toInteger k))
 
diff --git a/src/Xcerpt.lhs b/src/Xcerpt.lhs
index 911c57e..38cd1d6 100644
--- a/src/Xcerpt.lhs
+++ b/src/Xcerpt.lhs
@@ -9,3 +9,3 @@ import Data.Set hiding (null,filter,partition)
 import System.Environment (getArgs)
-import Data.List (foldl',partition)
+import Data.List as L (foldl',partition)
 import System.IO
@@ -39,3 +39,3 @@ main =  do
 mkdict :: String -> Set String
-mkdict = foldl' (flip insert) empty . words
+mkdict = L.foldl' (flip insert) empty . words
 
