--- a/CVec.hs
+++ b/CVec.hs
@@ -14,2 +14,3 @@ import Hex
 import Data.Monoid
+import qualified Data.Semigroup as S
 
@@ -17,2 +18,4 @@ data CVec = CVec { cy, cx :: Int }
     deriving (Eq, Ord, Show)
+instance S.Semigroup CVec where
+    (<>) (CVec y x) (CVec y' x') = CVec (y+y') (x+x')
 instance Monoid CVec where
--- a/CursesUI.hs
+++ b/CursesUI.hs
@@ -37,2 +37,3 @@ import CursesRender
 import CVec
+import qualified Data.Semigroup as S
 
@@ -89,2 +90,5 @@ alignDraw gravity w (Draw w' d) = Draw (max w w') $ \(CVec y x) ->
 
+instance S.Semigroup Draw where
+    (<>) (Draw w d) (Draw w' d') =
+        Draw (w+w') $ \cpos@(CVec y x) -> d cpos >> d' (CVec y (x+w))
 instance Monoid Draw where
--- a/Hex.lhs
+++ b/Hex.lhs
@@ -45,2 +45,3 @@ import Data.List (minimumBy)
 import Data.Function (on)
+import qualified Data.Semigroup as S
    
@@ -216,2 +217,4 @@ HexVec difference between two points (e.g. PHS HexVec).
 
+instance S.Semigroup HexVec where
+    (HexVec x y z) <> (HexVec x' y' z') = HexVec (x+x') (y+y') (z+z')
 instance Monoid HexVec where
--- a/SDLRender.hs
+++ b/SDLRender.hs
@@ -28,2 +28,3 @@ import GHC.Int (Int16)
 import Control.Applicative
+import qualified Data.Semigroup as S
 
@@ -35,2 +36,4 @@ data SVec = SVec { cx, cy :: Int }
     deriving (Eq, Ord, Show)
+instance S.Semigroup SVec where
+    (<>) (SVec x y) (SVec x' y') = SVec (x+x') (y+y')
 instance Monoid SVec where
@@ -45,2 +48,4 @@ data FVec = FVec { rcx, rcy :: Float }
     deriving (Eq, Ord, Show)
+instance S.Semigroup FVec where
+    (<>) (FVec x y) (FVec x' y') = FVec (x+x') (y+y')
 instance Monoid FVec where
