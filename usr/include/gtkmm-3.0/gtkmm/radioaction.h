// Generated by gmmproc 2.60.0 -- DO NOT MODIFY!
#ifndef _GTKMM_RADIOACTION_H
#define _GTKMM_RADIOACTION_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/toggleaction.h>
#include <gtkmm/radiobuttongroup.h>


 // This whole file is deprecated.

#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkRadioAction = struct _GtkRadioAction;
using GtkRadioActionClass = struct _GtkRadioActionClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class RadioAction_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{

class StockID; //Deprecated.

/** A deprecated action of which only one in a group can be active.
 *
 * A Gtk::RadioAction is similar to Gtk::RadioMenuItem. A number of
 * radio actions can be linked together so that only one may be active
 * at any one time.
 *
 * @deprecated Use Gio::Action and Gio::SimpleAction instead, and associate actions
 * with Gtk::Actionable widgets. Use Gio::MenuModel for creating menus with
 * Gtk::Menu(const Glib::RefPtr<Gio::MenuModel>& model).
 * See the Gtk::Action base class for more information about the deprecation.
 */

class RadioAction : public Gtk::ToggleAction
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = RadioAction;
  using CppClassType = RadioAction_Class;
  using BaseObjectType = GtkRadioAction;
  using BaseClassType = GtkRadioActionClass;

  // noncopyable
  RadioAction(const RadioAction&) = delete;
  RadioAction& operator=(const RadioAction&) = delete;

private:  friend class RadioAction_Class;
  static CppClassType radioaction_class_;

protected:
  explicit RadioAction(const Glib::ConstructParams& construct_params);
  explicit RadioAction(GtkRadioAction* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  RadioAction(RadioAction&& src) noexcept;
  RadioAction& operator=(RadioAction&& src) noexcept;

  ~RadioAction() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkRadioAction*       gobj()       { return reinterpret_cast<GtkRadioAction*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkRadioAction* gobj() const { return reinterpret_cast<GtkRadioAction*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkRadioAction* gobj_copy();

private:

public:
  typedef RadioButtonGroup Group;

protected:
  //TODO: Remove the default constructor, because name may not be NULL.
  RadioAction();

#ifndef GTKMM_DISABLE_DEPRECATED

  /**
   * Creates a radio action.
   *
   * @param group    The radio group this action belongs to.
   * @param name     A unique name for the action.
   * @param stock_id The stock icon to display in widgets representing the
   *                 action.
   * @param label    The label displayed in menu items and on buttons.
   * @param tooltip  A tooltip for the action.
   *
   * @deprecated There is no corresponding replacement when using Gio::Action.
   */
  explicit RadioAction(Group& group, const Glib::ustring& name, const StockID& stock_id = StockID(), const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring());

  /** Creates a radio action with an icon name.
   * The radio action's icon will reflect the specified icon name in the
   * user's icon theme.
   *
   * @param group    The radio group this action belongs to.
   * @param name     A unique name for the action.
   * @param icon_name An IconTheme icon name used for widgets representing the
   *                  action.
   * @param label    The label displayed in menu items and on buttons.
   * @param tooltip  A tooltip for the action.
   * @deprecated Use Gio::Action, which can be created by Gio::ActionMap::add_action_radio_string()
   *   or Gio::ActionMap::add_action_radio_integer().<br>
   *   Use Gio::MenuItem::set_icon() to set an icon on a Gio::MenuItem associated with a Gio::Action,
   *   or Gtk::Container::add() to add a Gtk::Image to a Gtk::RadioButton.<br>
   *   Set a label on a menu item with Gio::MenuItem::set_label().
   *   For Gtk::Actionable widgets, use the widget-specific API to set a label.<br>
   *   Set tooltips on associated Gtk::Actionable widgets with Gtk::Widget::set_tooltip_text().
   */
  explicit RadioAction(Group& group, const Glib::ustring& name, const Glib::ustring& icon_name, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring());
#endif // GTKMM_DISABLE_DEPRECATED


public:
  //Note that gtk_recent_action_new() does not allow name to be NULL, which suggests that we should not have a default constructor,
  //but it's OK to set the name later:
  
  static Glib::RefPtr<RadioAction> create();


#ifndef GTKMM_DISABLE_DEPRECATED

  /** Creates a radio action.
   *
   * @param group    The radio group this action belongs to.
   * @param name     A unique name for the action.
   * @param label    The label displayed in menu items and on buttons.
   * @param tooltip  A tooltip for the action.
   *
   * @return A new RadioAction.
   * @deprecated Use Gio::Action, which can be created by Gio::ActionMap::add_action_radio_string()
   *   or Gio::ActionMap::add_action_radio_integer().<br>
   *   Set a label on a menu item with Gio::MenuItem::set_label().
   *   For Gtk::Actionable widgets, use the widget-specific API to set a label.<br>
   *   Set tooltips on associated Gtk::Actionable widgets with Gtk::Widget::set_tooltip_text().
   */
  static Glib::RefPtr<RadioAction> create(Group& group, const Glib::ustring& name, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring());

  /** Creates a radio action with a stock ID.
   * The stock ID is used to set a default icon, text and accelerator for
   * the radio action.
   *
   * @param group    The radio group this action belongs to.
   * @param name     A unique name for the action.
   * @param stock_id The stock icon to display in widgets representing the
   *                 action.
   * @param label    The label displayed in menu items and on buttons.
   * @param tooltip  A tooltip for the action.
   *
   * @return A new RadioAction.
   *
   * @deprecated There is no corresponding replacement when using Gio::Action.
   */
  static Glib::RefPtr<RadioAction> create(Group& group, const Glib::ustring& name, const Gtk::StockID& stock_id, const Glib::ustring& label = Glib::ustring(), const Glib::ustring& tooltip = Glib::ustring());

  /** Creates a radio action with an icon name.
   * The radio action's icon will reflect the specified icon name in the
   * user's icon theme.
   *
   * @param group    The radio group this action belongs to.
   * @param name     A unique name for the action.
   * @param icon_name An IconTheme icon name used for widgets representing the
   *                  action.
   * @param label    The label displayed in menu items and on buttons.
   * @param tooltip  A tooltip for the action.
   *
   * @return A new RadioAction.
   * @deprecated Use Gio::Action, which can be created by Gio::ActionMap::add_action_radio_string()
   *   or Gio::ActionMap::add_action_radio_integer().<br>
   *   Use Gio::MenuItem::set_icon() to set an icon on a Gio::MenuItem associated with a Gio::Action,
   *   or Gtk::Container::add() to add a Gtk::Image to a Gtk::RadioButton.<br>
   *   Set a label on a menu item with Gio::MenuItem::set_label().
   *   For Gtk::Actionable widgets, use the widget-specific API to set a label.<br>
   *   Set tooltips on associated Gtk::Actionable widgets with Gtk::Widget::set_tooltip_text().
   */
  static Glib::RefPtr<RadioAction> create_with_icon_name(Group& group, const Glib::ustring& name, const Glib::ustring& icon_name, const Glib::ustring& label, const Glib::ustring& tooltip);
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

  /** Returns the list representing the radio group for this object.
   * Note that the returned list is only valid until the next change
   * to the group. 
   * 
   * A common way to set up a group of radio group is the following:
   * 
   * [C example ellipted]
   * 
   * @newin{2,4}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated There is no corresponding replacement when using Gio::Action.
   * 
   * @return The list representing the radio group for this object.
   */
  Group get_group();
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

  /** @deprecated There is no corresponding replacement when using Gio::Action.
   */
  void set_group(Group& group);
#endif // GTKMM_DISABLE_DEPRECATED

  
#ifndef GTKMM_DISABLE_DEPRECATED

  /** Joins a radio action object to the group of another radio action object.
   * 
   * Use this in language bindings instead of the get_group() 
   * and set_group() methods
   * 
   * A common way to set up a group of radio actions is the following:
   * 
   * [C example ellipted]
   * 
   * @newin{3,0}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated There is no corresponding replacement when using Gio::Action.
   * 
   * @param group_source A radio action object whos group we are 
   * joining, or <tt>nullptr</tt> to remove the radio action from its group.
   */
  void join_group(const Glib::RefPtr<RadioAction>& group_source);
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

  /** Obtains the value property of the currently active member of 
   * the group to which @a action belongs.
   * 
   * @newin{2,4}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action::get_state() on a Gio::Action instead.
   * 
   * @return The value of the currently active group member.
   */
  int get_current_value() const;
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

  /** Sets the currently active group member to the member with value
   * property @a current_value.
   * 
   * @newin{2,10}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action::change_state() on a Gio::Action instead.
   * 
   * @param current_value The new value.
   */
  void set_current_value(int current_value);
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

  /**
   * @par Slot Prototype:
   * <tt>void on_my_%changed(const Glib::RefPtr<RadioAction>& current)</tt>
   *
   * Flags: Run First, No Recurse
   *
   * The signal_changed() signal is emitted on every member of a radio group when the
   * active member is changed. The signal gets emitted after the signal_activate() signals
   * for the previous and current active members.
   * 
   * @newin{2,4}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::SimpleAction::signal_activate() or Gio::SimpleAction::signal_change_state() instead.
   * 
   * @param current The member of @a action's group which has just been activated.
   */

  Glib::SignalProxy< void,const Glib::RefPtr<RadioAction>& > signal_changed();
#endif // GTKMM_DISABLE_DEPRECATED


#ifndef GTKMM_DISABLE_DEPRECATED

/** The value is an arbitrary integer which can be used as a
   * convenient way to determine which action in the group is 
   * currently active in an signal_activate() or signal_changed() signal handler.
   * See Gtk::RadioAction::get_current_value() and Gtk::RadioActionEntry
   * for convenient ways to get and set this property.
   * 
   * @newin{2,4}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action instead, and Gtk::Actionable::property_action_target() on one of the associated actionable widgets.
   *
   * Default value: 0
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_value() ;

/** The value is an arbitrary integer which can be used as a
   * convenient way to determine which action in the group is 
   * currently active in an signal_activate() or signal_changed() signal handler.
   * See Gtk::RadioAction::get_current_value() and Gtk::RadioActionEntry
   * for convenient ways to get and set this property.
   * 
   * @newin{2,4}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action instead, and Gtk::Actionable::property_action_target() on one of the associated actionable widgets.
   *
   * Default value: 0
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_value() const;

#endif // GTKMM_DISABLE_DEPRECATED

  //Probably wouldn't work: _WRAP_PROPERTY("group", Group)
  
  
#ifndef GTKMM_DISABLE_DEPRECATED

/** The value property of the currently active member of the group to which
   * this action belongs. 
   * 
   * @newin{2,10}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action::property_state() and Gio::SimpleAction::property_state() instead.
   *
   * Default value: 0
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_current_value() ;

/** The value property of the currently active member of the group to which
   * this action belongs. 
   * 
   * @newin{2,10}
   * 
   * Deprecated: 3.10
   * 
   * @deprecated Use Gio::Action::property_state() and Gio::SimpleAction::property_state() instead.
   *
   * Default value: 0
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_current_value() const;

#endif // GTKMM_DISABLE_DEPRECATED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_changed().
  virtual void on_changed(const Glib::RefPtr<RadioAction>& current);


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::RadioAction
   */
  Glib::RefPtr<Gtk::RadioAction> wrap(GtkRadioAction* object, bool take_copy = false);
}


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_RADIOACTION_H */

