// Generated by gmmproc 2.60.0 -- DO NOT MODIFY!
#ifndef _GTKMM_STOCKITEM_H
#define _GTKMM_STOCKITEM_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright(C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software, ) you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation, ) either
 * version 2.1 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, ) without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library, ) if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gdkmm/types.h>
#include <gtkmm/stockid.h>


 // This whole file is deprecated.

#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C"
{
  typedef struct _GtkStockItem GtkStockItem;
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gtk
{

/** @deprecated Use icon names instead of StockItem, StockID and BuiltinStockID.
 */
class StockItem
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  using CppObjectType = StockItem;
  using BaseObjectType = GtkStockItem;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  /** Constructs an invalid object.
   * E.g. for output arguments to methods. There is not much you can do with
   * the object before it has been assigned a valid value.
   */
  StockItem();

  // Use make_a_copy=true when getting it directly from a struct.
  explicit StockItem(GtkStockItem* castitem, bool make_a_copy = false);

  StockItem(const StockItem& src);
  StockItem& operator=(const StockItem& src);

  StockItem(StockItem&& other) noexcept;
  StockItem& operator=(StockItem&& other) noexcept;

  ~StockItem() noexcept;

  void swap(StockItem& other) noexcept;

  GtkStockItem*       gobj()       { return gobject_; }
  const GtkStockItem* gobj() const { return gobject_; }

  ///Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs.
  GtkStockItem* gobj_copy() const;

protected:
  GtkStockItem* gobject_;

private:


public:
  StockItem(const Gtk::StockID& stock_id, const Glib::ustring& label,
            Gdk::ModifierType modifier = Gdk::ModifierType(0), unsigned int keyval = 0,
            const Glib::ustring& translation_domain = Glib::ustring());

  StockID get_stock_id() const;
  Glib::ustring get_label() const;
  Gdk::ModifierType get_modifier() const;
  guint get_keyval() const;
  Glib::ustring get_translation_domain() const;

  static bool lookup(const Gtk::StockID& stock_id, Gtk::StockItem& item);


};

} // namespace Gtk


namespace Gtk
{

/** @relates Gtk::StockItem
 * @param lhs The left-hand side
 * @param rhs The right-hand side
 */
inline void swap(StockItem& lhs, StockItem& rhs) noexcept
  { lhs.swap(rhs); }

} // namespace Gtk

namespace Glib
{

  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::StockItem
   */
Gtk::StockItem wrap(GtkStockItem* object, bool take_copy = false);

} // namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_STOCKITEM_H */

