// Generated by gmmproc 2.60.0 -- DO NOT MODIFY!
#ifndef _GTKMM_BIN_H
#define _GTKMM_BIN_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/*
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/container.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkBin = struct _GtkBin;
using GtkBinClass = struct _GtkBinClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class Bin_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{

//TODO: Add an add_pixbuf() method?
/** A container with just one child.
 *
 * This is an abstract base class from which all classes holding
 * up to 1 widget inside of them derive.  It provides access to methods
 * relevent to a single object, such as add_label, etc.
 *
 * @ingroup Widgets
 */

class Bin : public Container
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Bin CppObjectType;
  typedef Bin_Class CppClassType;
  typedef GtkBin BaseObjectType;
  typedef GtkBinClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  Bin(Bin&& src) noexcept;
  Bin& operator=(Bin&& src) noexcept;

  // noncopyable
  Bin(const Bin&) = delete;
  Bin& operator=(const Bin&) = delete;

  ~Bin() noexcept override;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class Bin_Class;
  static CppClassType bin_class_;

protected:
  explicit Bin(const Glib::ConstructParams& construct_params);
  explicit Bin(GtkBin* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  /// Provides access to the underlying C GObject.
  GtkBin*       gobj()       { return reinterpret_cast<GtkBin*>(gobject_); }

  /// Provides access to the underlying C GObject.
  const GtkBin* gobj() const { return reinterpret_cast<GtkBin*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

protected:

  /** This constructor is protected because only derived
   * classes should be instantiated.
   */
  Bin();
public:

  
  /** Gets the child of the Gtk::Bin, or <tt>nullptr</tt> if the bin contains
   * no child widget. The returned widget does not have a reference
   * added, so you do not need to unref it.
   * 
   * @return The child of @a bin, or <tt>nullptr</tt> if it does
   * not have a child.
   */
  Gtk::Widget* get_child();
  
  /** Gets the child of the Gtk::Bin, or <tt>nullptr</tt> if the bin contains
   * no child widget. The returned widget does not have a reference
   * added, so you do not need to unref it.
   * 
   * @return The child of @a bin, or <tt>nullptr</tt> if it does
   * not have a child.
   */
  const Gtk::Widget* get_child() const;

  /** Remove the contained widget.
   * Since this can only hold one widget it is not necessary to
   * specify which widget to remove like other containers.
   *
   * Sometimes when a widget is added to a Gtk::ScrolledWindow, a Gtk::Viewport
   * is created and inserted between the ScrolledWindow and the added widget.
   * If the child is such an automatically created Viewport, remove() removes
   * the Viewport's child from the Viewport, and removes the Viewport from the
   * ScrolledWindow. The Viewport is destroyed.
   */
  void remove();

  //Convenience methods that don't correspond to GTK+ functions:

#ifndef GTKMM_DISABLE_DEPRECATED

  /** Add a Label object.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * @param label The text for the label.
   * @param mnemonic If <tt>true</tt>, characters preceded by an underscore
   * (_) will be underlined and used as a keyboard accelerator (shortcut).
   * @param x_align The horizontal alignment of the text.  This ranges from
   * 0.0 (left aligned) to 1.0 (right aligned).
   * @param y_align The vertical alignment of the text.  This ranges from
   * 0.0 (top aligned) to 1.0 (bottom aligned).
   *
   * @deprecated Use the other add_label().
   */
  void add_label(const Glib::ustring& label, bool mnemonic = false,
		 double x_align = 0.5, double y_align = 0.5);
#endif // GTKMM_DISABLE_DEPRECATED


  /** Add a Label object.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * @param label The label text.
   * @param mnemonic If <tt>true</tt>, characters preceded by an underscore
   * (_) will be underlined and used as a keyboard accelerator (shortcut).
   * @param x_align The horizontal alignment of the text.  For possible
   * values, see Gtk::Align.
   * @param y_align The vertical alignment of the text.  For possible
   * values, see Gtk::Align.
   */
#ifndef GTKMM_DISABLE_DEPRECATED

  void add_label(const Glib::ustring& label, bool mnemonic,
    Align x_align, Align y_align = ALIGN_CENTER);
#else
  void add_label(const Glib::ustring& label, bool mnemonic = false,
    Align x_align = ALIGN_CENTER, Align y_align = ALIGN_CENTER);
#endif // GTKMM_DISABLE_DEPRECATED


  //TODO: Change this to Pixbuf?
  /* Add Image and Label objects.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image and Label (within a
   * horizontal Box) to this Bin.
   * @param pixmap A Glib::RefPtr to a Gdk::Pixmap.
   * @param mask A Glib::RefPtr to a Gdk::Bitmap.
   * @param label The text for the label.
   * @param x_align The horizontal alignment of the text in the label.
   * @param y_align The vertical alignment of the text in the label.
   */
  /*
  void add_pixlabel(const Glib::RefPtr<Gdk::Pixmap>& pixmap,
                    const Glib::RefPtr<Gdk::Bitmap>& mask,
                    const Glib::ustring& label,
                    Align x_align = ALIGN_CENTER, Align y_align = ALIGN_CENTER);
  */

#ifndef GTKMM_DISABLE_DEPRECATED

  /** Add Image and Label objects.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image and Label (within a
   * horizontal Box) to this Bin.
   * @param pixfile The path to a file to be displayed.
   * @param label The text for the label.
   * @param x_align The horizontal alignment of the text in the label.
   * @param y_align The vertical alignment of the text in the label.
   *
   * @deprecated Use the other add_pixlabel().
   */
  void add_pixlabel(const std::string& pixfile,
                    const Glib::ustring& label,
		                double x_align = 0.5, double y_align = 0.5);
#endif // GTKMM_DISABLE_DEPRECATED


  /** Add Image and Label objects.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image and Label (within a
   * horizontal Box) to this Bin.
   * @param pixfile The path to a file to be displayed.
   * @param label The text for the label.
   * @param x_align The horizontal alignment of the text in the label.
   * @param y_align The vertical alignment of the text in the label.
   *
   * @newin{3,14}
   */
#ifndef GTKMM_DISABLE_DEPRECATED

  void add_pixlabel(const std::string& pixfile,
                    const Glib::ustring& label,
                    Align x_align, Align y_align = ALIGN_CENTER);
#else
  void add_pixlabel(const std::string& pixfile,
                    const Glib::ustring& label,
                    Align x_align = ALIGN_CENTER, Align y_align = ALIGN_CENTER);
#endif // GTKMM_DISABLE_DEPRECATED


};

}  //namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::Bin
   */
  Gtk::Bin* wrap(GtkBin* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_BIN_H */

