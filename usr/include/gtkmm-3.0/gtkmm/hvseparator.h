// Generated by gmmproc 2.60.0 -- DO NOT MODIFY!
#ifndef _GTKMM_HVSEPARATOR_H
#define _GTKMM_HVSEPARATOR_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 1998-2011 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/separator.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkVSeparator = struct _GtkVSeparator;
using GtkVSeparatorClass = struct _GtkVSeparatorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class VSeparator_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkHSeparator = struct _GtkHSeparator;
using GtkHSeparatorClass = struct _GtkHSeparatorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class HSeparator_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{


/** Vertical line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 *
 * A VSeparator widget looks like this:
 * @image html vseparator1.png
 *
 * @ingroup Widgets
 *
 * @deprecated Use Separator instead.
 */

class VSeparator : public Separator
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef VSeparator CppObjectType;
  typedef VSeparator_Class CppClassType;
  typedef GtkVSeparator BaseObjectType;
  typedef GtkVSeparatorClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  VSeparator(VSeparator&& src) noexcept;
  VSeparator& operator=(VSeparator&& src) noexcept;

  // noncopyable
  VSeparator(const VSeparator&) = delete;
  VSeparator& operator=(const VSeparator&) = delete;

  ~VSeparator() noexcept override;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class VSeparator_Class;
  static CppClassType vseparator_class_;

protected:
  explicit VSeparator(const Glib::ConstructParams& construct_params);
  explicit VSeparator(GtkVSeparator* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  /// Provides access to the underlying C GObject.
  GtkVSeparator*       gobj()       { return reinterpret_cast<GtkVSeparator*>(gobject_); }

  /// Provides access to the underlying C GObject.
  const GtkVSeparator* gobj() const { return reinterpret_cast<GtkVSeparator*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

  
public:
  VSeparator();


};


/** Horizontal line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 *
 * The HSeparator widget looks like this:
 * @image html hseparator1.png
 *
 * @ingroup Widgets
 *
 * @deprecated Use Separator instead.
 */

class HSeparator : public Separator
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef HSeparator CppObjectType;
  typedef HSeparator_Class CppClassType;
  typedef GtkHSeparator BaseObjectType;
  typedef GtkHSeparatorClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  HSeparator(HSeparator&& src) noexcept;
  HSeparator& operator=(HSeparator&& src) noexcept;

  // noncopyable
  HSeparator(const HSeparator&) = delete;
  HSeparator& operator=(const HSeparator&) = delete;

  ~HSeparator() noexcept override;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class HSeparator_Class;
  static CppClassType hseparator_class_;

protected:
  explicit HSeparator(const Glib::ConstructParams& construct_params);
  explicit HSeparator(GtkHSeparator* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  /// Provides access to the underlying C GObject.
  GtkHSeparator*       gobj()       { return reinterpret_cast<GtkHSeparator*>(gobject_); }

  /// Provides access to the underlying C GObject.
  const GtkHSeparator* gobj() const { return reinterpret_cast<GtkHSeparator*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

  
public:
  HSeparator();


};

} //namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::VSeparator
   */
  Gtk::VSeparator* wrap(GtkVSeparator* object, bool take_copy = false);
} //namespace Glib


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::HSeparator
   */
  Gtk::HSeparator* wrap(GtkHSeparator* object, bool take_copy = false);
} //namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_HVSEPARATOR_H */

